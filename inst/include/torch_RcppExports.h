// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#ifndef RCPP_torch_RCPPEXPORTS_H_GEN_
#define RCPP_torch_RCPPEXPORTS_H_GEN_

#include <Rcpp.h>

namespace torch {

    using namespace Rcpp;

    namespace {
        void validateSignature(const char* sig) {
            Rcpp::Function require = Rcpp::Environment::base_env()["require"];
            require("torch", Rcpp::Named("quietly") = true);
            typedef int(*Ptr_validate)(const char*);
            static Ptr_validate p_validate = (Ptr_validate)
                R_GetCCallable("torch", "_torch_RcppExport_validate");
            if (!p_validate(sig)) {
                throw Rcpp::function_not_exported(
                    "C++ function with signature '" + std::string(sig) + "' not found in torch");
            }
        }
    }

    inline std::string cpp_device_type_to_string(Rcpp::XPtr<XPtrTorchDevice> device) {
        typedef SEXP(*Ptr_cpp_device_type_to_string)(SEXP);
        static Ptr_cpp_device_type_to_string p_cpp_device_type_to_string = NULL;
        if (p_cpp_device_type_to_string == NULL) {
            validateSignature("std::string(*cpp_device_type_to_string)(Rcpp::XPtr<XPtrTorchDevice>)");
            p_cpp_device_type_to_string = (Ptr_cpp_device_type_to_string)R_GetCCallable("torch", "_torch_cpp_device_type_to_string");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_cpp_device_type_to_string(Shield<SEXP>(Rcpp::wrap(device)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<std::string >(rcpp_result_gen);
    }

    inline std::int64_t cpp_device_index_to_int(Rcpp::XPtr<XPtrTorchDevice> device) {
        typedef SEXP(*Ptr_cpp_device_index_to_int)(SEXP);
        static Ptr_cpp_device_index_to_int p_cpp_device_index_to_int = NULL;
        if (p_cpp_device_index_to_int == NULL) {
            validateSignature("std::int64_t(*cpp_device_index_to_int)(Rcpp::XPtr<XPtrTorchDevice>)");
            p_cpp_device_index_to_int = (Ptr_cpp_device_index_to_int)R_GetCCallable("torch", "_torch_cpp_device_index_to_int");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_cpp_device_index_to_int(Shield<SEXP>(Rcpp::wrap(device)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<std::int64_t >(rcpp_result_gen);
    }

    inline XPtrTorchDevice cpp_torch_device(std::string type, Rcpp::Nullable<std::int64_t> index) {
        typedef SEXP(*Ptr_cpp_torch_device)(SEXP,SEXP);
        static Ptr_cpp_torch_device p_cpp_torch_device = NULL;
        if (p_cpp_torch_device == NULL) {
            validateSignature("XPtrTorchDevice(*cpp_torch_device)(std::string,Rcpp::Nullable<std::int64_t>)");
            p_cpp_torch_device = (Ptr_cpp_torch_device)R_GetCCallable("torch", "_torch_cpp_torch_device");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_cpp_torch_device(Shield<SEXP>(Rcpp::wrap(type)), Shield<SEXP>(Rcpp::wrap(index)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<XPtrTorchDevice >(rcpp_result_gen);
    }

    inline XPtrTorchScalar cpp_torch_scalar(SEXP x) {
        typedef SEXP(*Ptr_cpp_torch_scalar)(SEXP);
        static Ptr_cpp_torch_scalar p_cpp_torch_scalar = NULL;
        if (p_cpp_torch_scalar == NULL) {
            validateSignature("XPtrTorchScalar(*cpp_torch_scalar)(SEXP)");
            p_cpp_torch_scalar = (Ptr_cpp_torch_scalar)R_GetCCallable("torch", "_torch_cpp_torch_scalar");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_cpp_torch_scalar(Shield<SEXP>(Rcpp::wrap(x)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<XPtrTorchScalar >(rcpp_result_gen);
    }

    inline Rcpp::XPtr<XPtrTorchScalarType> cpp_torch_scalar_dtype(Rcpp::XPtr<XPtrTorchScalar> self) {
        typedef SEXP(*Ptr_cpp_torch_scalar_dtype)(SEXP);
        static Ptr_cpp_torch_scalar_dtype p_cpp_torch_scalar_dtype = NULL;
        if (p_cpp_torch_scalar_dtype == NULL) {
            validateSignature("Rcpp::XPtr<XPtrTorchScalarType>(*cpp_torch_scalar_dtype)(Rcpp::XPtr<XPtrTorchScalar>)");
            p_cpp_torch_scalar_dtype = (Ptr_cpp_torch_scalar_dtype)R_GetCCallable("torch", "_torch_cpp_torch_scalar_dtype");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_cpp_torch_scalar_dtype(Shield<SEXP>(Rcpp::wrap(self)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<Rcpp::XPtr<XPtrTorchScalarType> >(rcpp_result_gen);
    }

    inline int cpp_torch_scalar_to_int(Rcpp::XPtr<XPtrTorchScalar> self) {
        typedef SEXP(*Ptr_cpp_torch_scalar_to_int)(SEXP);
        static Ptr_cpp_torch_scalar_to_int p_cpp_torch_scalar_to_int = NULL;
        if (p_cpp_torch_scalar_to_int == NULL) {
            validateSignature("int(*cpp_torch_scalar_to_int)(Rcpp::XPtr<XPtrTorchScalar>)");
            p_cpp_torch_scalar_to_int = (Ptr_cpp_torch_scalar_to_int)R_GetCCallable("torch", "_torch_cpp_torch_scalar_to_int");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_cpp_torch_scalar_to_int(Shield<SEXP>(Rcpp::wrap(self)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<int >(rcpp_result_gen);
    }

    inline double cpp_torch_scalar_to_double(Rcpp::XPtr<XPtrTorchScalar> self) {
        typedef SEXP(*Ptr_cpp_torch_scalar_to_double)(SEXP);
        static Ptr_cpp_torch_scalar_to_double p_cpp_torch_scalar_to_double = NULL;
        if (p_cpp_torch_scalar_to_double == NULL) {
            validateSignature("double(*cpp_torch_scalar_to_double)(Rcpp::XPtr<XPtrTorchScalar>)");
            p_cpp_torch_scalar_to_double = (Ptr_cpp_torch_scalar_to_double)R_GetCCallable("torch", "_torch_cpp_torch_scalar_to_double");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_cpp_torch_scalar_to_double(Shield<SEXP>(Rcpp::wrap(self)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<double >(rcpp_result_gen);
    }

    inline float cpp_torch_scalar_to_float(Rcpp::XPtr<XPtrTorchScalar> self) {
        typedef SEXP(*Ptr_cpp_torch_scalar_to_float)(SEXP);
        static Ptr_cpp_torch_scalar_to_float p_cpp_torch_scalar_to_float = NULL;
        if (p_cpp_torch_scalar_to_float == NULL) {
            validateSignature("float(*cpp_torch_scalar_to_float)(Rcpp::XPtr<XPtrTorchScalar>)");
            p_cpp_torch_scalar_to_float = (Ptr_cpp_torch_scalar_to_float)R_GetCCallable("torch", "_torch_cpp_torch_scalar_to_float");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_cpp_torch_scalar_to_float(Shield<SEXP>(Rcpp::wrap(self)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<float >(rcpp_result_gen);
    }

    inline bool cpp_torch_scalar_to_bool(Rcpp::XPtr<XPtrTorchScalar> self) {
        typedef SEXP(*Ptr_cpp_torch_scalar_to_bool)(SEXP);
        static Ptr_cpp_torch_scalar_to_bool p_cpp_torch_scalar_to_bool = NULL;
        if (p_cpp_torch_scalar_to_bool == NULL) {
            validateSignature("bool(*cpp_torch_scalar_to_bool)(Rcpp::XPtr<XPtrTorchScalar>)");
            p_cpp_torch_scalar_to_bool = (Ptr_cpp_torch_scalar_to_bool)R_GetCCallable("torch", "_torch_cpp_torch_scalar_to_bool");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_cpp_torch_scalar_to_bool(Shield<SEXP>(Rcpp::wrap(self)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<bool >(rcpp_result_gen);
    }

    inline XPtrTorchTensorList cpp_torch_tensor_list(const Rcpp::List& x) {
        typedef SEXP(*Ptr_cpp_torch_tensor_list)(SEXP);
        static Ptr_cpp_torch_tensor_list p_cpp_torch_tensor_list = NULL;
        if (p_cpp_torch_tensor_list == NULL) {
            validateSignature("XPtrTorchTensorList(*cpp_torch_tensor_list)(const Rcpp::List&)");
            p_cpp_torch_tensor_list = (Ptr_cpp_torch_tensor_list)R_GetCCallable("torch", "_torch_cpp_torch_tensor_list");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_cpp_torch_tensor_list(Shield<SEXP>(Rcpp::wrap(x)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<XPtrTorchTensorList >(rcpp_result_gen);
    }

    inline Rcpp::List cpp_tensor_list_to_r_list(Rcpp::XPtr<XPtrTorchTensorList> x) {
        typedef SEXP(*Ptr_cpp_tensor_list_to_r_list)(SEXP);
        static Ptr_cpp_tensor_list_to_r_list p_cpp_tensor_list_to_r_list = NULL;
        if (p_cpp_tensor_list_to_r_list == NULL) {
            validateSignature("Rcpp::List(*cpp_tensor_list_to_r_list)(Rcpp::XPtr<XPtrTorchTensorList>)");
            p_cpp_tensor_list_to_r_list = (Ptr_cpp_tensor_list_to_r_list)R_GetCCallable("torch", "_torch_cpp_tensor_list_to_r_list");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_cpp_tensor_list_to_r_list(Shield<SEXP>(Rcpp::wrap(x)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<Rcpp::List >(rcpp_result_gen);
    }

    inline Rcpp::XPtr<std::nullptr_t> cpp_nullptr() {
        typedef SEXP(*Ptr_cpp_nullptr)();
        static Ptr_cpp_nullptr p_cpp_nullptr = NULL;
        if (p_cpp_nullptr == NULL) {
            validateSignature("Rcpp::XPtr<std::nullptr_t>(*cpp_nullptr)()");
            p_cpp_nullptr = (Ptr_cpp_nullptr)R_GetCCallable("torch", "_torch_cpp_nullptr");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_cpp_nullptr();
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<Rcpp::XPtr<std::nullptr_t> >(rcpp_result_gen);
    }

    inline Rcpp::XPtr<std::nullptr_t> cpp_nullopt() {
        typedef SEXP(*Ptr_cpp_nullopt)();
        static Ptr_cpp_nullopt p_cpp_nullopt = NULL;
        if (p_cpp_nullopt == NULL) {
            validateSignature("Rcpp::XPtr<std::nullptr_t>(*cpp_nullopt)()");
            p_cpp_nullopt = (Ptr_cpp_nullopt)R_GetCCallable("torch", "_torch_cpp_nullopt");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_cpp_nullopt();
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<Rcpp::XPtr<std::nullptr_t> >(rcpp_result_gen);
    }

    inline Rcpp::XPtr<XPtrTorchoptional_int64_t> cpp_optional_int64_t(Rcpp::Nullable<int64_t> x) {
        typedef SEXP(*Ptr_cpp_optional_int64_t)(SEXP);
        static Ptr_cpp_optional_int64_t p_cpp_optional_int64_t = NULL;
        if (p_cpp_optional_int64_t == NULL) {
            validateSignature("Rcpp::XPtr<XPtrTorchoptional_int64_t>(*cpp_optional_int64_t)(Rcpp::Nullable<int64_t>)");
            p_cpp_optional_int64_t = (Ptr_cpp_optional_int64_t)R_GetCCallable("torch", "_torch_cpp_optional_int64_t");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_cpp_optional_int64_t(Shield<SEXP>(Rcpp::wrap(x)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<Rcpp::XPtr<XPtrTorchoptional_int64_t> >(rcpp_result_gen);
    }

    inline XPtrTorchTensor cpp_tensor_undefined() {
        typedef SEXP(*Ptr_cpp_tensor_undefined)();
        static Ptr_cpp_tensor_undefined p_cpp_tensor_undefined = NULL;
        if (p_cpp_tensor_undefined == NULL) {
            validateSignature("XPtrTorchTensor(*cpp_tensor_undefined)()");
            p_cpp_tensor_undefined = (Ptr_cpp_tensor_undefined)R_GetCCallable("torch", "_torch_cpp_tensor_undefined");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_cpp_tensor_undefined();
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<XPtrTorchTensor >(rcpp_result_gen);
    }

    inline XPtrTorchTensor to_index_tensor(XPtrTorchTensor t) {
        typedef SEXP(*Ptr_to_index_tensor)(SEXP);
        static Ptr_to_index_tensor p_to_index_tensor = NULL;
        if (p_to_index_tensor == NULL) {
            validateSignature("XPtrTorchTensor(*to_index_tensor)(XPtrTorchTensor)");
            p_to_index_tensor = (Ptr_to_index_tensor)R_GetCCallable("torch", "_torch_to_index_tensor");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_to_index_tensor(Shield<SEXP>(Rcpp::wrap(t)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<XPtrTorchTensor >(rcpp_result_gen);
    }

    inline bool cpp_torch_namespace__use_cudnn_rnn_flatten_weight() {
        typedef SEXP(*Ptr_cpp_torch_namespace__use_cudnn_rnn_flatten_weight)();
        static Ptr_cpp_torch_namespace__use_cudnn_rnn_flatten_weight p_cpp_torch_namespace__use_cudnn_rnn_flatten_weight = NULL;
        if (p_cpp_torch_namespace__use_cudnn_rnn_flatten_weight == NULL) {
            validateSignature("bool(*cpp_torch_namespace__use_cudnn_rnn_flatten_weight)()");
            p_cpp_torch_namespace__use_cudnn_rnn_flatten_weight = (Ptr_cpp_torch_namespace__use_cudnn_rnn_flatten_weight)R_GetCCallable("torch", "_torch_cpp_torch_namespace__use_cudnn_rnn_flatten_weight");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_cpp_torch_namespace__use_cudnn_rnn_flatten_weight();
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<bool >(rcpp_result_gen);
    }

}

#endif // RCPP_torch_RCPPEXPORTS_H_GEN_
