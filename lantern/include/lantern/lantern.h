#ifndef __LANTERN_H__
#define __LANTERN_H__

#ifndef _WIN32
#include <dlfcn.h>
#else
#define WIN32_LEAN_AND_MEAN 1
#include <windows.h>
#endif

#ifndef HOST_API
#define HOST_API inline
#endif

#ifdef LANTERN_BUILD
#define LANTERN_PTR
#define LANTERN_HEADERS_ONLY

#ifdef _WIN32
#define LANTERN_API extern "C" __declspec(dllexport)
#endif
#else
#define LANTERN_PTR *
#endif

#ifndef LANTERN_API
#ifdef LANTERN_HEADERS_ONLY
#define LANTERN_API extern
#else
#define LANTERN_API
#endif
#endif

#ifndef LANTERN_HOST_HANDLER
void lantern_host_handler();
#define LANTERN_HOST_HANDLER lantern_host_handler();
#endif

#include <stdint.h>
#include <stdio.h>
#include <string>

extern int lanternLogEnabled;
#define LLOG(...) if ((lanternLogEnabled & 1) == 1) {              \
  printf("%ld INFO ", time(NULL));                                 \
  printf(__VA_ARGS__);                                             \
  printf("\n");                                                    \
}                                                                  \
if ((lanternLogEnabled & 2) == 2) {                                \
  FILE *pFile = fopen("lantern.log", "a");                         \
  fprintf(pFile, "%ld INFO ", time(NULL));                         \
  fprintf(pFile, __VA_ARGS__);                                     \
  fprintf(pFile, "\n");                                            \
  fclose(pFile);                                                   \
}

#ifdef LANTERN_BUILD
extern std::string *pLanternLastError;
#endif
#define LANTERN_FUNCTION_START                                     \
  LLOG("Entering %s", __func__)                                    \
  try {
#define LANTERN_FUNCTION_END_RET(ret)                              \
} catch(const std::exception& ex) {                                \
  LLOG("Error %s in %s", ex.what(), __func__)                      \
  pLanternLastError = new std::string(ex.what());                  \
  return ret;                                                      \
} catch(std::string& ex) {                                         \
  LLOG("Error %s in %s", ex.c_str(), __func__)                     \
  pLanternLastError = new std::string(ex);                         \
  return ret;                                                      \
} catch(...) {                                                     \
  LLOG("Error in %s", __func__)                                    \
  pLanternLastError = new std::string("Unknown error. ");          \
  return ret;                                                      \
}
#define LANTERN_FUNCTION_END LANTERN_FUNCTION_END_RET(NULL)
#define LANTERN_FUNCTION_END_VOID                                  \
} catch(const std::exception& ex) {                                \
  LLOG("Error %s in %s", ex.what(), __func__)                      \
  pLanternLastError = new std::string(ex.what());                  \
} catch(std::string& ex) {                                         \
  LLOG("Error %s in %s", ex.c_str(), __func__)                     \
  pLanternLastError = new std::string(ex);                         \
} catch(...) {                                                     \
  LLOG("Error in %s", __func__)                                    \
  pLanternLastError = new std::string("Unknown error. ");          \
}
 
#ifdef __cplusplus
extern "C"
{
#endif

enum IValue_types {
    IValueBlobType,
    IValueBoolType,
    IValueBoolListType,
    IValueCapsuleType,
    IValueComplexDoubleType,
    IValueComplexDoubleListType,
    IValueCustomClassType,
    IValueDeviceType,
    IValueDoubleType,
    IValueDoubleListType,
    IValueNoneType,
    IValueEnumType,
    IValueFutureType,
    IValueGeneratorType,
    IValueGenericDictType,
    IValueIntType,
    IValueIntListType,
    IValueListType,
    IValueModuleType,
    IValueObjectType,
    IValuePtrTypeType,
    IValuePyObjectType,
    IValueQuantizerType,
    IValueRRefType,
    IValueSameIdentityType,
    IValueScalarType,
    IValueStorageType,
    IValueStreamType,
    IValueStringType,
    IValueTensorType,
    IValueTensorListType,
    IValueTupleType,
    IValueTypeUnknownType
};



  LANTERN_API void(LANTERN_PTR lanternConfigure)(int log);
  LANTERN_API const char*(LANTERN_PTR lanternVersion)();
  LANTERN_API void(LANTERN_PTR lanternSetLastError)(const char*);
  LANTERN_API void(LANTERN_PTR lanternLastErrorClear)();
  LANTERN_API const char*(LANTERN_PTR lanternLastError)();
  LANTERN_API void(LANTERN_PTR lanternTest)();
  LANTERN_API void *(LANTERN_PTR _lantern_Device)(const char *type, int64_t index, bool useIndex);
  HOST_API void * lantern_Device(const char *type, int64_t index, bool useIndex) { void * ret = _lantern_Device(type, index, useIndex); LANTERN_HOST_HANDLER return ret;}
  LANTERN_API const char *(LANTERN_PTR _lantern_Device_type)(void *device);
  HOST_API const char * lantern_Device_type(void *device) { const char * ret = _lantern_Device_type(device); LANTERN_HOST_HANDLER return ret;}
  LANTERN_API int64_t(LANTERN_PTR _lantern_Device_index)(void *device);
  HOST_API int64_t lantern_Device_index(void *device) { int64_t ret = _lantern_Device_index(device); LANTERN_HOST_HANDLER return ret;}
  LANTERN_API void *(LANTERN_PTR _lantern_from_blob)(void *data, int64_t *sizes, size_t sizes_size, void *options);
  HOST_API void * lantern_from_blob(void *data, int64_t *sizes, size_t sizes_size, void *options) { void * ret = _lantern_from_blob(data, sizes, sizes_size, options); LANTERN_HOST_HANDLER return ret;}
  LANTERN_API const char *(LANTERN_PTR _lantern_Tensor_StreamInsertion)(void *x);
  HOST_API const char * lantern_Tensor_StreamInsertion(void *x) { const char * ret = _lantern_Tensor_StreamInsertion(x); LANTERN_HOST_HANDLER return ret;}
  LANTERN_API void *(LANTERN_PTR _lantern_TensorOptions)();
  HOST_API void * lantern_TensorOptions() { void * ret = _lantern_TensorOptions(); LANTERN_HOST_HANDLER return ret;}
  LANTERN_API void *(LANTERN_PTR _lantern_TensorOptions_dtype)(void *self, void *dtype);
  HOST_API void * lantern_TensorOptions_dtype(void *self, void *dtype) { void * ret = _lantern_TensorOptions_dtype(self, dtype); LANTERN_HOST_HANDLER return ret;}
  LANTERN_API void *(LANTERN_PTR _lantern_TensorOptions_layout)(void *self, void *layout);
  HOST_API void * lantern_TensorOptions_layout(void *self, void *layout) { void * ret = _lantern_TensorOptions_layout(self, layout); LANTERN_HOST_HANDLER return ret;}
  LANTERN_API void *(LANTERN_PTR _lantern_TensorOptions_device)(void *self, void *device);
  HOST_API void * lantern_TensorOptions_device(void *self, void *device) { void * ret = _lantern_TensorOptions_device(self, device); LANTERN_HOST_HANDLER return ret;}
  LANTERN_API void *(LANTERN_PTR _lantern_TensorOptions_requires_grad)(void *self, bool requires_grad);
  HOST_API void * lantern_TensorOptions_requires_grad(void *self, bool requires_grad) { void * ret = _lantern_TensorOptions_requires_grad(self, requires_grad); LANTERN_HOST_HANDLER return ret;}
  LANTERN_API void *(LANTERN_PTR _lantern_TensorOptions_pinned_memory)(void *self, bool pinned_memory);
  HOST_API void * lantern_TensorOptions_pinned_memory(void *self, bool pinned_memory) { void * ret = _lantern_TensorOptions_pinned_memory(self, pinned_memory); LANTERN_HOST_HANDLER return ret;}
  LANTERN_API void *(LANTERN_PTR _lantern_Dtype_float32)();
  HOST_API void * lantern_Dtype_float32() { void * ret = _lantern_Dtype_float32(); LANTERN_HOST_HANDLER return ret;}
  LANTERN_API void *(LANTERN_PTR _lantern_Dtype_float64)();
  HOST_API void * lantern_Dtype_float64() { void * ret = _lantern_Dtype_float64(); LANTERN_HOST_HANDLER return ret;}
  LANTERN_API void *(LANTERN_PTR _lantern_Dtype_float16)();
  HOST_API void * lantern_Dtype_float16() { void * ret = _lantern_Dtype_float16(); LANTERN_HOST_HANDLER return ret;}
  LANTERN_API void *(LANTERN_PTR _lantern_Dtype_uint8)();
  HOST_API void * lantern_Dtype_uint8() { void * ret = _lantern_Dtype_uint8(); LANTERN_HOST_HANDLER return ret;}
  LANTERN_API void *(LANTERN_PTR _lantern_Dtype_int8)();
  HOST_API void * lantern_Dtype_int8() { void * ret = _lantern_Dtype_int8(); LANTERN_HOST_HANDLER return ret;}
  LANTERN_API void *(LANTERN_PTR _lantern_Dtype_int16)();
  HOST_API void * lantern_Dtype_int16() { void * ret = _lantern_Dtype_int16(); LANTERN_HOST_HANDLER return ret;}
  LANTERN_API void *(LANTERN_PTR _lantern_Dtype_int32)();
  HOST_API void * lantern_Dtype_int32() { void * ret = _lantern_Dtype_int32(); LANTERN_HOST_HANDLER return ret;}
  LANTERN_API void *(LANTERN_PTR _lantern_Dtype_int64)();
  HOST_API void * lantern_Dtype_int64() { void * ret = _lantern_Dtype_int64(); LANTERN_HOST_HANDLER return ret;}
  LANTERN_API void *(LANTERN_PTR _lantern_Dtype_bool)();
  HOST_API void * lantern_Dtype_bool() { void * ret = _lantern_Dtype_bool(); LANTERN_HOST_HANDLER return ret;}
  LANTERN_API const char *(LANTERN_PTR _lantern_Dtype_type)(void *dtype);
  HOST_API const char * lantern_Dtype_type(void *dtype) { const char * ret = _lantern_Dtype_type(dtype); LANTERN_HOST_HANDLER return ret;}
  LANTERN_API void *(LANTERN_PTR _lantern_vector_int64_t)(int64_t *x, size_t x_size);
  HOST_API void * lantern_vector_int64_t(int64_t *x, size_t x_size) { void * ret = _lantern_vector_int64_t(x, x_size); LANTERN_HOST_HANDLER return ret;}
  LANTERN_API void *(LANTERN_PTR _lantern_vector_double)(double *x, size_t x_size);
  HOST_API void * lantern_vector_double(double *x, size_t x_size) { void * ret = _lantern_vector_double(x, x_size); LANTERN_HOST_HANDLER return ret;}
  LANTERN_API void *(LANTERN_PTR _lantern_IntArrayRef)(int64_t *x, size_t x_size);
  HOST_API void * lantern_IntArrayRef(int64_t *x, size_t x_size) { void * ret = _lantern_IntArrayRef(x, x_size); LANTERN_HOST_HANDLER return ret;}
  LANTERN_API void *(LANTERN_PTR _lantern_MemoryFormat_Contiguous)();
  HOST_API void * lantern_MemoryFormat_Contiguous() { void * ret = _lantern_MemoryFormat_Contiguous(); LANTERN_HOST_HANDLER return ret;}
  LANTERN_API void *(LANTERN_PTR _lantern_MemoryFormat_Preserve)();
  HOST_API void * lantern_MemoryFormat_Preserve() { void * ret = _lantern_MemoryFormat_Preserve(); LANTERN_HOST_HANDLER return ret;}
  LANTERN_API void *(LANTERN_PTR _lantern_MemoryFormat_ChannelsLast)();
  HOST_API void * lantern_MemoryFormat_ChannelsLast() { void * ret = _lantern_MemoryFormat_ChannelsLast(); LANTERN_HOST_HANDLER return ret;}
  LANTERN_API const char *(LANTERN_PTR _lantern_MemoryFormat_type)(void *format);
  HOST_API const char * lantern_MemoryFormat_type(void *format) { const char * ret = _lantern_MemoryFormat_type(format); LANTERN_HOST_HANDLER return ret;}
  LANTERN_API void *(LANTERN_PTR _lantern_Tensor_clone)(void *self);
  HOST_API void * lantern_Tensor_clone(void *self) { void * ret = _lantern_Tensor_clone(self); LANTERN_HOST_HANDLER return ret;}
  LANTERN_API void *(LANTERN_PTR _lantern_Tensor_permute)(void *self, void *dims);
  HOST_API void * lantern_Tensor_permute(void *self, void *dims) { void * ret = _lantern_Tensor_permute(self, dims); LANTERN_HOST_HANDLER return ret;}
  LANTERN_API void *(LANTERN_PTR _lantern_Tensor_contiguous)(void *self);
  HOST_API void * lantern_Tensor_contiguous(void *self) { void * ret = _lantern_Tensor_contiguous(self); LANTERN_HOST_HANDLER return ret;}
  LANTERN_API void *(LANTERN_PTR _lantern_Tensor_to)(void *self, void *options);
  HOST_API void * lantern_Tensor_to(void *self, void *options) { void * ret = _lantern_Tensor_to(self, options); LANTERN_HOST_HANDLER return ret;}
  LANTERN_API void *(LANTERN_PTR _lantern_Tensor_set_requires_grad)(void *self, bool requires_grad);
  HOST_API void * lantern_Tensor_set_requires_grad(void *self, bool requires_grad) { void * ret = _lantern_Tensor_set_requires_grad(self, requires_grad); LANTERN_HOST_HANDLER return ret;}
  LANTERN_API double *(LANTERN_PTR _lantern_Tensor_data_ptr_double)(void *self);
  HOST_API double * lantern_Tensor_data_ptr_double(void *self) { double * ret = _lantern_Tensor_data_ptr_double(self); LANTERN_HOST_HANDLER return ret;}
  LANTERN_API uint8_t *(LANTERN_PTR _lantern_Tensor_data_ptr_uint8_t)(void *self);
  HOST_API uint8_t * lantern_Tensor_data_ptr_uint8_t(void *self) { uint8_t * ret = _lantern_Tensor_data_ptr_uint8_t(self); LANTERN_HOST_HANDLER return ret;}
  LANTERN_API int32_t *(LANTERN_PTR _lantern_Tensor_data_ptr_int32_t)(void *self);
  HOST_API int32_t * lantern_Tensor_data_ptr_int32_t(void *self) { int32_t * ret = _lantern_Tensor_data_ptr_int32_t(self); LANTERN_HOST_HANDLER return ret;}
  LANTERN_API int16_t *(LANTERN_PTR _lantern_Tensor_data_ptr_int16_t)(void *self);
  HOST_API int16_t * lantern_Tensor_data_ptr_int16_t(void *self) { int16_t * ret = _lantern_Tensor_data_ptr_int16_t(self); LANTERN_HOST_HANDLER return ret;}
  LANTERN_API bool *(LANTERN_PTR _lantern_Tensor_data_ptr_bool)(void *self);
  HOST_API bool * lantern_Tensor_data_ptr_bool(void *self) { bool * ret = _lantern_Tensor_data_ptr_bool(self); LANTERN_HOST_HANDLER return ret;}
  LANTERN_API int64_t(LANTERN_PTR _lantern_Tensor_numel)(void *self);
  HOST_API int64_t lantern_Tensor_numel(void *self) { int64_t ret = _lantern_Tensor_numel(self); LANTERN_HOST_HANDLER return ret;}
  LANTERN_API int64_t(LANTERN_PTR _lantern_Tensor_element_size)(void *self);
  HOST_API int64_t lantern_Tensor_element_size(void *self) { int64_t ret = _lantern_Tensor_element_size(self); LANTERN_HOST_HANDLER return ret;}
  LANTERN_API int64_t(LANTERN_PTR _lantern_Tensor_size)(void *self, int64_t i);
  HOST_API int64_t lantern_Tensor_size(void *self, int64_t i) { int64_t ret = _lantern_Tensor_size(self, i); LANTERN_HOST_HANDLER return ret;}
  LANTERN_API int64_t(LANTERN_PTR _lantern_Tensor_ndimension)(void *self);
  HOST_API int64_t lantern_Tensor_ndimension(void *self) { int64_t ret = _lantern_Tensor_ndimension(self); LANTERN_HOST_HANDLER return ret;}
  LANTERN_API void *(LANTERN_PTR _lantern_Tensor_dtype)(void *self);
  HOST_API void * lantern_Tensor_dtype(void *self) { void * ret = _lantern_Tensor_dtype(self); LANTERN_HOST_HANDLER return ret;}
  LANTERN_API void *(LANTERN_PTR _lantern_Generator)();
  HOST_API void * lantern_Generator() { void * ret = _lantern_Generator(); LANTERN_HOST_HANDLER return ret;}
  LANTERN_API uint64_t(LANTERN_PTR _lantern_Generator_current_seed)(void *generator);
  HOST_API uint64_t lantern_Generator_current_seed(void *generator) { uint64_t ret = _lantern_Generator_current_seed(generator); LANTERN_HOST_HANDLER return ret;}
  LANTERN_API void(LANTERN_PTR _lantern_Generator_set_current_seed)(void *generator, uint64_t seed);
  HOST_API void lantern_Generator_set_current_seed(void *generator, uint64_t seed) { _lantern_Generator_set_current_seed(generator, seed); LANTERN_HOST_HANDLER }
  LANTERN_API void *(LANTERN_PTR _lantern_QScheme_per_channel_affine)();
  HOST_API void * lantern_QScheme_per_channel_affine() { void * ret = _lantern_QScheme_per_channel_affine(); LANTERN_HOST_HANDLER return ret;}
  LANTERN_API void *(LANTERN_PTR _lantern_QScheme_per_tensor_affine)();
  HOST_API void * lantern_QScheme_per_tensor_affine() { void * ret = _lantern_QScheme_per_tensor_affine(); LANTERN_HOST_HANDLER return ret;}
  LANTERN_API void *(LANTERN_PTR _lantern_QScheme_per_channel_symmetric)();
  HOST_API void * lantern_QScheme_per_channel_symmetric() { void * ret = _lantern_QScheme_per_channel_symmetric(); LANTERN_HOST_HANDLER return ret;}
  LANTERN_API void *(LANTERN_PTR _lantern_QScheme_per_tensor_symmetric)();
  HOST_API void * lantern_QScheme_per_tensor_symmetric() { void * ret = _lantern_QScheme_per_tensor_symmetric(); LANTERN_HOST_HANDLER return ret;}
  LANTERN_API const char *(LANTERN_PTR _lantern_QScheme_type)(void *x);
  HOST_API const char * lantern_QScheme_type(void *x) { const char * ret = _lantern_QScheme_type(x); LANTERN_HOST_HANDLER return ret;}
  LANTERN_API void *(LANTERN_PTR _lantern_TensorList)();
  HOST_API void * lantern_TensorList() { void * ret = _lantern_TensorList(); LANTERN_HOST_HANDLER return ret;}
  LANTERN_API void(LANTERN_PTR _lantern_TensorList_push_back)(void *self, void *x);
  HOST_API void lantern_TensorList_push_back(void *self, void *x) { _lantern_TensorList_push_back(self, x); LANTERN_HOST_HANDLER }
  LANTERN_API void *(LANTERN_PTR _lantern_TensorList_at)(void *self, int64_t i);
  HOST_API void * lantern_TensorList_at(void *self, int64_t i) { void * ret = _lantern_TensorList_at(self, i); LANTERN_HOST_HANDLER return ret;}
  LANTERN_API int64_t(LANTERN_PTR _lantern_TensorList_size)(void *self);
  HOST_API int64_t lantern_TensorList_size(void *self) { int64_t ret = _lantern_TensorList_size(self); LANTERN_HOST_HANDLER return ret;}
  LANTERN_API void *(LANTERN_PTR _lantern_Scalar)(void *value, const char *type);
  HOST_API void * lantern_Scalar(void *value, const char *type) { void * ret = _lantern_Scalar(value, type); LANTERN_HOST_HANDLER return ret;}
  LANTERN_API void *(LANTERN_PTR _lantern_vector_get)(void *x, int i);
  HOST_API void * lantern_vector_get(void *x, int i) { void * ret = _lantern_vector_get(x, i); LANTERN_HOST_HANDLER return ret;}
  LANTERN_API void *(LANTERN_PTR _lantern_int)(int x);
  HOST_API void * lantern_int(int x) { void * ret = _lantern_int(x); LANTERN_HOST_HANDLER return ret;}
  LANTERN_API void *(LANTERN_PTR _lantern_int64_t)(int64_t x);
  HOST_API void * lantern_int64_t(int64_t x) { void * ret = _lantern_int64_t(x); LANTERN_HOST_HANDLER return ret;}
  LANTERN_API void *(LANTERN_PTR _lantern_bool)(bool x);
  HOST_API void * lantern_bool(bool x) { void * ret = _lantern_bool(x); LANTERN_HOST_HANDLER return ret;}
  LANTERN_API void *(LANTERN_PTR _lantern_Dimname)(const char *name);
  HOST_API void * lantern_Dimname(const char *name) { void * ret = _lantern_Dimname(name); LANTERN_HOST_HANDLER return ret;}
  LANTERN_API void *(LANTERN_PTR _lantern_DimnameList)();
  HOST_API void * lantern_DimnameList() { void * ret = _lantern_DimnameList(); LANTERN_HOST_HANDLER return ret;}
  LANTERN_API void(LANTERN_PTR _lantern_DimnameList_push_back)(void *list, void *dimname);
  HOST_API void lantern_DimnameList_push_back(void *list, void *dimname) { _lantern_DimnameList_push_back(list, dimname); LANTERN_HOST_HANDLER }
  LANTERN_API const char *(LANTERN_PTR _lantern_Dimname_to_string)(void *dimname);
  HOST_API const char * lantern_Dimname_to_string(void *dimname) { const char * ret = _lantern_Dimname_to_string(dimname); LANTERN_HOST_HANDLER return ret;}
  LANTERN_API int64_t(LANTERN_PTR _lantern_DimnameList_size)(void *list);
  HOST_API int64_t lantern_DimnameList_size(void *list) { int64_t ret = _lantern_DimnameList_size(list); LANTERN_HOST_HANDLER return ret;}
  LANTERN_API void *(LANTERN_PTR _lantern_DimnameList_at)(void *list, int i);
  HOST_API void * lantern_DimnameList_at(void *list, int i) { void * ret = _lantern_DimnameList_at(list, i); LANTERN_HOST_HANDLER return ret;}
  LANTERN_API void *(LANTERN_PTR _lantern_Scalar_nullopt)();
  HOST_API void * lantern_Scalar_nullopt() { void * ret = _lantern_Scalar_nullopt(); LANTERN_HOST_HANDLER return ret;}
  LANTERN_API void(LANTERN_PTR _lantern_Tensor_delete)(void *);
  HOST_API void lantern_Tensor_delete(void * x) { _lantern_Tensor_delete(x); LANTERN_HOST_HANDLER }
  LANTERN_API void(LANTERN_PTR _lantern_bool_delete)(void *);
  HOST_API void lantern_bool_delete(void * x) { _lantern_bool_delete(x); LANTERN_HOST_HANDLER }
  LANTERN_API void(LANTERN_PTR _lantern_int64_t_delete)(void *);
  HOST_API void lantern_int64_t_delete(void * x) { _lantern_int64_t_delete(x); LANTERN_HOST_HANDLER }
  LANTERN_API void(LANTERN_PTR _lantern_TensorList_delete)(void *);
  HOST_API void lantern_TensorList_delete(void * x) { _lantern_TensorList_delete(x); LANTERN_HOST_HANDLER }
  LANTERN_API void(LANTERN_PTR _lantern_double_delete)(void *);
  HOST_API void lantern_double_delete(void * x) { _lantern_double_delete(x); LANTERN_HOST_HANDLER }
  LANTERN_API void(LANTERN_PTR _lantern_QScheme_delete)(void *);
  HOST_API void lantern_QScheme_delete(void * x) { _lantern_QScheme_delete(x); LANTERN_HOST_HANDLER }
  LANTERN_API void(LANTERN_PTR _lantern_Scalar_delete)(void *);
  HOST_API void lantern_Scalar_delete(void * x) { _lantern_Scalar_delete(x); LANTERN_HOST_HANDLER }
  LANTERN_API void(LANTERN_PTR _lantern_ScalarType_delete)(void *);
  HOST_API void lantern_ScalarType_delete(void * x) { _lantern_ScalarType_delete(x); LANTERN_HOST_HANDLER }
  LANTERN_API void(LANTERN_PTR _lantern_TensorOptions_delete)(void *x);
  HOST_API void lantern_TensorOptions_delete(void *x) { _lantern_TensorOptions_delete(x); LANTERN_HOST_HANDLER }
  LANTERN_API void(LANTERN_PTR _lantern_Dtype_delete)(void *x);
  HOST_API void lantern_Dtype_delete(void *x) { _lantern_Dtype_delete(x); LANTERN_HOST_HANDLER }
  LANTERN_API void(LANTERN_PTR _lantern_Device_delete)(void *x);
  HOST_API void lantern_Device_delete(void *x) { _lantern_Device_delete(x); LANTERN_HOST_HANDLER }
  LANTERN_API void(LANTERN_PTR _lantern_Layout_delete)(void *x);
  HOST_API void lantern_Layout_delete(void *x) { _lantern_Layout_delete(x); LANTERN_HOST_HANDLER }
  LANTERN_API void(LANTERN_PTR _lantern_TensorOptions_print)(void *self);
  HOST_API void lantern_TensorOptions_print(void *self) { _lantern_TensorOptions_print(self); LANTERN_HOST_HANDLER }
  LANTERN_API void(LANTERN_PTR _lantern_TensorOptions_address)(void *self);
  HOST_API void lantern_TensorOptions_address(void *self) { _lantern_TensorOptions_address(self); LANTERN_HOST_HANDLER }
  LANTERN_API void(LANTERN_PTR _lantern_Generator_delete)(void *x);
  HOST_API void lantern_Generator_delete(void *x) { _lantern_Generator_delete(x); LANTERN_HOST_HANDLER }
  LANTERN_API void(LANTERN_PTR _lantern_Dimname_delete)(void *x);
  HOST_API void lantern_Dimname_delete(void *x) { _lantern_Dimname_delete(x); LANTERN_HOST_HANDLER }
  LANTERN_API void(LANTERN_PTR _lantern_DimnameList_delete)(void *x);
  HOST_API void lantern_DimnameList_delete(void *x) { _lantern_DimnameList_delete(x); LANTERN_HOST_HANDLER }
  LANTERN_API void(LANTERN_PTR _lantern_MemoryFormat_delete)(void *x);
  HOST_API void lantern_MemoryFormat_delete(void *x) { _lantern_MemoryFormat_delete(x); LANTERN_HOST_HANDLER }
  LANTERN_API int64_t(LANTERN_PTR _lantern_Reduction_Sum)();
  HOST_API int64_t lantern_Reduction_Sum() { int64_t ret = _lantern_Reduction_Sum(); LANTERN_HOST_HANDLER return ret;}
  LANTERN_API int64_t(LANTERN_PTR _lantern_Reduction_None)();
  HOST_API int64_t lantern_Reduction_None() { int64_t ret = _lantern_Reduction_None(); LANTERN_HOST_HANDLER return ret;}
  LANTERN_API int64_t(LANTERN_PTR _lantern_Reduction_Mean)();
  HOST_API int64_t lantern_Reduction_Mean() { int64_t ret = _lantern_Reduction_Mean(); LANTERN_HOST_HANDLER return ret;}
  LANTERN_API void *(LANTERN_PTR _lantern_double)(double x);
  HOST_API void * lantern_double(double x) { void * ret = _lantern_double(x); LANTERN_HOST_HANDLER return ret;}
  LANTERN_API void *(LANTERN_PTR _lantern_Dtype_quint8)();
  HOST_API void * lantern_Dtype_quint8() { void * ret = _lantern_Dtype_quint8(); LANTERN_HOST_HANDLER return ret;}
  LANTERN_API void *(LANTERN_PTR _lantern_Dtype_qint8)();
  HOST_API void * lantern_Dtype_qint8() { void * ret = _lantern_Dtype_qint8(); LANTERN_HOST_HANDLER return ret;}
  LANTERN_API void *(LANTERN_PTR _lantern_Dtype_qint32)();
  HOST_API void * lantern_Dtype_qint32() { void * ret = _lantern_Dtype_qint32(); LANTERN_HOST_HANDLER return ret;}
  LANTERN_API bool(LANTERN_PTR _lantern_Tensor_is_quantized)(void *x);
  HOST_API bool lantern_Tensor_is_quantized(void *x) { bool ret = _lantern_Tensor_is_quantized(x); LANTERN_HOST_HANDLER return ret;}
  LANTERN_API void(LANTERN_PTR _lantern_autograd_set_grad_mode)(bool enabled);
  HOST_API void lantern_autograd_set_grad_mode(bool enabled) { _lantern_autograd_set_grad_mode(enabled); LANTERN_HOST_HANDLER }
  LANTERN_API void *(LANTERN_PTR _lantern_Tensor_undefined)();
  HOST_API void * lantern_Tensor_undefined() { void * ret = _lantern_Tensor_undefined(); LANTERN_HOST_HANDLER return ret;}
  LANTERN_API void *(LANTERN_PTR _lantern_Tensor_grad)(void *self);
  HOST_API void * lantern_Tensor_grad(void *self) { void * ret = _lantern_Tensor_grad(self); LANTERN_HOST_HANDLER return ret;}
  LANTERN_API bool(LANTERN_PTR _lantern_Tensor_requires_grad)(void *self);
  HOST_API bool lantern_Tensor_requires_grad(void *self) { bool ret = _lantern_Tensor_requires_grad(self); LANTERN_HOST_HANDLER return ret;}
  LANTERN_API unsigned int(LANTERN_PTR _lantern_Tensor_register_hook)(void *self, void *hook);
  HOST_API unsigned int lantern_Tensor_register_hook(void *self, void *hook) { unsigned int ret = _lantern_Tensor_register_hook(self, hook); LANTERN_HOST_HANDLER return ret;}
  LANTERN_API void *(LANTERN_PTR _lantern_new_hook)(void *(*fun)(void *, void *), void *custom);
  HOST_API void * lantern_new_hook(void *(*fun)(void *, void *), void *custom) { void * ret = _lantern_new_hook(fun, custom); LANTERN_HOST_HANDLER return ret;}
  LANTERN_API void(LANTERN_PTR _lantern_Tensor_remove_hook)(void *self, unsigned int pos);
  HOST_API void lantern_Tensor_remove_hook(void *self, unsigned int pos) { _lantern_Tensor_remove_hook(self, pos); LANTERN_HOST_HANDLER }
  LANTERN_API void *(LANTERN_PTR _lantern_variable_list_new)();
  HOST_API void * lantern_variable_list_new() { void * ret = _lantern_variable_list_new(); LANTERN_HOST_HANDLER return ret;}
  LANTERN_API void(LANTERN_PTR _lantern_variable_list_push_back)(void *self, void *x);
  HOST_API void lantern_variable_list_push_back(void *self, void *x) { _lantern_variable_list_push_back(self, x); LANTERN_HOST_HANDLER }
  LANTERN_API void *(LANTERN_PTR _lantern_variable_list_get)(void *self, int64_t i);
  HOST_API void * lantern_variable_list_get(void *self, int64_t i) { void * ret = _lantern_variable_list_get(self, i); LANTERN_HOST_HANDLER return ret;}
  LANTERN_API void(LANTERN_PTR _lantern_variable_list_delete)(void *x);
  HOST_API void lantern_variable_list_delete(void *x) { _lantern_variable_list_delete(x); LANTERN_HOST_HANDLER }
  LANTERN_API int64_t(LANTERN_PTR _lantern_variable_list_size)(void *self);
  HOST_API int64_t lantern_variable_list_size(void *self) { int64_t ret = _lantern_variable_list_size(self); LANTERN_HOST_HANDLER return ret;}
  LANTERN_API void *(LANTERN_PTR _lantern_Function_lambda)(void *(*fun)(void *, void *, void *), void *custom);
  HOST_API void * lantern_Function_lambda(void *(*fun)(void *, void *, void *), void *custom) { void * ret = _lantern_Function_lambda(fun, custom); LANTERN_HOST_HANDLER return ret;}
  LANTERN_API void *(LANTERN_PTR _lantern_Function_apply)(void *inputs, void *forward, void *backward);
  HOST_API void * lantern_Function_apply(void *inputs, void *forward, void *backward) { void * ret = _lantern_Function_apply(inputs, forward, backward); LANTERN_HOST_HANDLER return ret;}
  LANTERN_API void(LANTERN_PTR _lantern_AutogradContext_save_for_backward)(void *self, void *vars);
  HOST_API void lantern_AutogradContext_save_for_backward(void *self, void *vars) { _lantern_AutogradContext_save_for_backward(self, vars); LANTERN_HOST_HANDLER }
  LANTERN_API void *(LANTERN_PTR _lantern_AutogradContext_get_saved_variables)(void *self);
  HOST_API void * lantern_AutogradContext_get_saved_variables(void *self) { void * ret = _lantern_AutogradContext_get_saved_variables(self); LANTERN_HOST_HANDLER return ret;}
  LANTERN_API void *(LANTERN_PTR _lantern_vector_string_new)();
  HOST_API void * lantern_vector_string_new() { void * ret = _lantern_vector_string_new(); LANTERN_HOST_HANDLER return ret;}
  LANTERN_API void(LANTERN_PTR _lantern_vector_string_push_back)(void *self, const char *x);
  HOST_API void lantern_vector_string_push_back(void *self, const char *x) { _lantern_vector_string_push_back(self, x); LANTERN_HOST_HANDLER }
  LANTERN_API int64_t(LANTERN_PTR _lantern_vector_string_size)(void *self);
  HOST_API int64_t lantern_vector_string_size(void *self) { int64_t ret = _lantern_vector_string_size(self); LANTERN_HOST_HANDLER return ret;}
  LANTERN_API const char *(LANTERN_PTR _lantern_vector_string_at)(void *self, int64_t i);
  HOST_API const char * lantern_vector_string_at(void *self, int64_t i) { const char * ret = _lantern_vector_string_at(self, i); LANTERN_HOST_HANDLER return ret;}
  LANTERN_API void *(LANTERN_PTR _lantern_vector_bool_new)();
  HOST_API void * lantern_vector_bool_new() { void * ret = _lantern_vector_bool_new(); LANTERN_HOST_HANDLER return ret;}
  LANTERN_API void(LANTERN_PTR _lantern_vector_bool_push_back)(void *self, bool x);
  HOST_API void lantern_vector_bool_push_back(void *self, bool x) { _lantern_vector_bool_push_back(self, x); LANTERN_HOST_HANDLER }
  LANTERN_API int64_t(LANTERN_PTR _lantern_vector_bool_size)(void *self);
  HOST_API int64_t lantern_vector_bool_size(void *self) { int64_t ret = _lantern_vector_bool_size(self); LANTERN_HOST_HANDLER return ret;}
  LANTERN_API bool(LANTERN_PTR _lantern_vector_bool_at)(void *self, int64_t i);
  HOST_API bool lantern_vector_bool_at(void *self, int64_t i) { bool ret = _lantern_vector_bool_at(self, i); LANTERN_HOST_HANDLER return ret;}
  LANTERN_API void(LANTERN_PTR _lantern_AutogradContext_set_arguments)(void *self, void *names, void *needs_grad);
  HOST_API void lantern_AutogradContext_set_arguments(void *self, void *names, void *needs_grad) { _lantern_AutogradContext_set_arguments(self, names, needs_grad); LANTERN_HOST_HANDLER }
  LANTERN_API void *(LANTERN_PTR _lantern_AutogradContext_get_argument_names)(void *self);
  HOST_API void * lantern_AutogradContext_get_argument_names(void *self) { void * ret = _lantern_AutogradContext_get_argument_names(self); LANTERN_HOST_HANDLER return ret;}
  LANTERN_API void *(LANTERN_PTR _lantern_AutogradContext_get_argument_needs_grad)(void *self);
  HOST_API void * lantern_AutogradContext_get_argument_needs_grad(void *self) { void * ret = _lantern_AutogradContext_get_argument_needs_grad(self); LANTERN_HOST_HANDLER return ret;}
  LANTERN_API void(LANTERN_PTR _lantern_AutogradContext_set_saved_variables_names)(void *self, void *names);
  HOST_API void lantern_AutogradContext_set_saved_variables_names(void *self, void *names) { _lantern_AutogradContext_set_saved_variables_names(self, names); LANTERN_HOST_HANDLER }
  LANTERN_API void *(LANTERN_PTR _lantern_AutogradContext_get_saved_variables_names)(void *self);
  HOST_API void * lantern_AutogradContext_get_saved_variables_names(void *self) { void * ret = _lantern_AutogradContext_get_saved_variables_names(self); LANTERN_HOST_HANDLER return ret;}
  LANTERN_API void(LANTERN_PTR _lantern_AutogradContext_mark_dirty)(void *self, void *inputs);
  HOST_API void lantern_AutogradContext_mark_dirty(void *self, void *inputs) { _lantern_AutogradContext_mark_dirty(self, inputs); LANTERN_HOST_HANDLER }
  LANTERN_API void(LANTERN_PTR _lantern_AutogradContext_mark_non_differentiable)(void *self, void *outputs);
  HOST_API void lantern_AutogradContext_mark_non_differentiable(void *self, void *outputs) { _lantern_AutogradContext_mark_non_differentiable(self, outputs); LANTERN_HOST_HANDLER }
  LANTERN_API void *(LANTERN_PTR _lantern_optional_double)(double x, bool is_null);
  HOST_API void * lantern_optional_double(double x, bool is_null) { void * ret = _lantern_optional_double(x, is_null); LANTERN_HOST_HANDLER return ret;}
  LANTERN_API void(LANTERN_PTR _test_grad_fn)();
  HOST_API void test_grad_fn(double x, bool is_null) { _test_grad_fn(); LANTERN_HOST_HANDLER }
  LANTERN_API void *(LANTERN_PTR _lantern_Tensor_grad_fn)(void *self);
  HOST_API void * lantern_Tensor_grad_fn(void *self) { void * ret = _lantern_Tensor_grad_fn(self); LANTERN_HOST_HANDLER return ret;}
  LANTERN_API const char *(LANTERN_PTR _lantern_Node_name)(void *self);
  HOST_API const char * lantern_Node_name(void *self) { const char * ret = _lantern_Node_name(self); LANTERN_HOST_HANDLER return ret;}
  LANTERN_API void *(LANTERN_PTR _lantern_Node_next_edges)(void *self);
  HOST_API void * lantern_Node_next_edges(void *self) { void * ret = _lantern_Node_next_edges(self); LANTERN_HOST_HANDLER return ret;}
  LANTERN_API int64_t(LANTERN_PTR _lantern_edge_list_size)(void *self);
  HOST_API int64_t lantern_edge_list_size(void *self) { int64_t ret = _lantern_edge_list_size(self); LANTERN_HOST_HANDLER return ret;}
  LANTERN_API void *(LANTERN_PTR _lantern_edge_list_at)(void *self, int64_t i);
  HOST_API void * lantern_edge_list_at(void *self, int64_t i) { void * ret = _lantern_edge_list_at(self, i); LANTERN_HOST_HANDLER return ret;}
  LANTERN_API void *(LANTERN_PTR _lantern_Edge_function)(void *self);
  HOST_API void * lantern_Edge_function(void *self) { void * ret = _lantern_Edge_function(self); LANTERN_HOST_HANDLER return ret;}
  LANTERN_API void(LANTERN_PTR _lantern_vector_int64_t_delete)(void *x);
  HOST_API void lantern_vector_int64_t_delete(void *x) { _lantern_vector_int64_t_delete(x); LANTERN_HOST_HANDLER }
  LANTERN_API void(LANTERN_PTR _lantern_optional_vector_int64_t_delete)(void *x);
  HOST_API void lantern_optional_vector_int64_t_delete(void *x) { _lantern_optional_vector_int64_t_delete(x); LANTERN_HOST_HANDLER }
  LANTERN_API void(LANTERN_PTR _lantern_autograd_backward)(void *tensors, void *grad_tensors, bool retain_graph, bool create_graph);
  HOST_API void lantern_autograd_backward(void *tensors, void *grad_tensors, bool retain_graph, bool create_graph) { _lantern_autograd_backward(tensors, grad_tensors, retain_graph, create_graph); LANTERN_HOST_HANDLER }
  LANTERN_API void *(LANTERN_PTR _lantern_autograd_grad)(void *outputs, void *inputs, void *grad_outputs, bool retain_graph, bool create_graph, bool allow_unused);
  HOST_API void * lantern_autograd_grad(void *outputs, void *inputs, void *grad_outputs, bool retain_graph, bool create_graph, bool allow_unused) { void * ret = _lantern_autograd_grad(outputs, inputs, grad_outputs, retain_graph, create_graph, allow_unused); LANTERN_HOST_HANDLER return ret;}
  LANTERN_API void *(LANTERN_PTR _lantern_Layout_strided)();
  HOST_API void * lantern_Layout_strided() { void * ret = _lantern_Layout_strided(); LANTERN_HOST_HANDLER return ret;}
  LANTERN_API void *(LANTERN_PTR _lantern_Layout_sparse)();
  HOST_API void * lantern_Layout_sparse() { void * ret = _lantern_Layout_sparse(); LANTERN_HOST_HANDLER return ret;}
  LANTERN_API const char *(LANTERN_PTR _lantern_Layout_string)(void *x);
  HOST_API const char * lantern_Layout_string(void *x) { const char * ret = _lantern_Layout_string(x); LANTERN_HOST_HANDLER return ret;}
  LANTERN_API void *(LANTERN_PTR _lantern_TensorIndex_new)();
  HOST_API void * lantern_TensorIndex_new() { void * ret = _lantern_TensorIndex_new(); LANTERN_HOST_HANDLER return ret;}
  LANTERN_API void(LANTERN_PTR _lantern_TensorIndex_append_tensor)(void *self, void *x);
  HOST_API void lantern_TensorIndex_append_tensor(void *self, void *x) { _lantern_TensorIndex_append_tensor(self, x); LANTERN_HOST_HANDLER }
  LANTERN_API void(LANTERN_PTR _lantern_TensorIndex_append_ellipsis)(void *self);
  HOST_API void lantern_TensorIndex_append_ellipsis(void *self) { _lantern_TensorIndex_append_ellipsis(self); LANTERN_HOST_HANDLER }
  LANTERN_API void(LANTERN_PTR _lantern_TensorIndex_append_slice)(void *self, void *x);
  HOST_API void lantern_TensorIndex_append_slice(void *self, void *x) { _lantern_TensorIndex_append_slice(self, x); LANTERN_HOST_HANDLER }
  LANTERN_API void(LANTERN_PTR _lantern_TensorIndex_append_none)(void *self);
  HOST_API void lantern_TensorIndex_append_none(void *self) { _lantern_TensorIndex_append_none(self); LANTERN_HOST_HANDLER }
  LANTERN_API void(LANTERN_PTR _lantern_TensorIndex_append_bool)(void *self, bool x);
  HOST_API void lantern_TensorIndex_append_bool(void *self, bool x) { _lantern_TensorIndex_append_bool(self, x); LANTERN_HOST_HANDLER }
  LANTERN_API void(LANTERN_PTR _lantern_TensorIndex_append_int64)(void *self, int64_t x);
  HOST_API void lantern_TensorIndex_append_int64(void *self, int64_t x) { _lantern_TensorIndex_append_int64(self, x); LANTERN_HOST_HANDLER }
  LANTERN_API void *(LANTERN_PTR _lantern_Tensor_index)(void *self, void *index);
  HOST_API void * lantern_Tensor_index(void *self, void *index) { void * ret = _lantern_Tensor_index(self, index); LANTERN_HOST_HANDLER return ret;}
  LANTERN_API void(LANTERN_PTR _lantern_TensorIndex_delete)(void *x);
  HOST_API void lantern_TensorIndex_delete(void *x) { _lantern_TensorIndex_delete(x); LANTERN_HOST_HANDLER }
  LANTERN_API void *(LANTERN_PTR _lantern_Slice)(void *start, void *end, void *step);
  HOST_API void * lantern_Slice(void *start, void *end, void *step) { void * ret = _lantern_Slice(start, end, step); LANTERN_HOST_HANDLER return ret;}
  LANTERN_API void *(LANTERN_PTR _lantern_optional_int64_t)(int64_t x, bool is_null);
  HOST_API void * lantern_optional_int64_t(int64_t x, bool is_null) { void * ret = _lantern_optional_int64_t(x, is_null); LANTERN_HOST_HANDLER return ret;}
  LANTERN_API void(LANTERN_PTR _lantern_Slice_delete)(void *x);
  HOST_API void lantern_Slice_delete(void *x) { _lantern_Slice_delete(x); LANTERN_HOST_HANDLER }
  LANTERN_API void(LANTERN_PTR _lantern_optional_int64_t_delete)(void *x);
  HOST_API void lantern_optional_int64_t_delete(void *x) { _lantern_optional_int64_t_delete(x); LANTERN_HOST_HANDLER }
  LANTERN_API void *(LANTERN_PTR _lantern_Tensor_device)(void *self);
  HOST_API void * lantern_Tensor_device(void *self) { void * ret = _lantern_Tensor_device(self); LANTERN_HOST_HANDLER return ret;}
  LANTERN_API bool(LANTERN_PTR _lantern_cuda_is_available)();
  HOST_API bool lantern_cuda_is_available() { bool ret = _lantern_cuda_is_available(); LANTERN_HOST_HANDLER return ret;}
  LANTERN_API int(LANTERN_PTR _lantern_cuda_device_count)();
  HOST_API int lantern_cuda_device_count() { int ret = _lantern_cuda_device_count(); LANTERN_HOST_HANDLER return ret;}
  LANTERN_API int64_t(LANTERN_PTR _lantern_cuda_current_device)();
  HOST_API int64_t lantern_cuda_current_device() { int64_t ret = _lantern_cuda_current_device(); LANTERN_HOST_HANDLER return ret;}
  LANTERN_API void(LANTERN_PTR _lantern_cuda_show_config)();
  HOST_API void lantern_cuda_show_config() { _lantern_cuda_show_config(); LANTERN_HOST_HANDLER }
  LANTERN_API void *(LANTERN_PTR _lantern_nn_utils_rnn_pack_padded_sequence)(void *input, void *lengths, bool batch_first, bool enforce_sorted);
  HOST_API void * lantern_nn_utils_rnn_pack_padded_sequence(void *input, void *lengths, bool batch_first, bool enforce_sorted) { void * ret = _lantern_nn_utils_rnn_pack_padded_sequence(input, lengths, batch_first, enforce_sorted); LANTERN_HOST_HANDLER return ret;}
  LANTERN_API void(LANTERN_PTR _lantern_PackedSequence_delete)(void *x);
  HOST_API void lantern_PackedSequence_delete(void *x) { _lantern_PackedSequence_delete(x); LANTERN_HOST_HANDLER }
  LANTERN_API void *(LANTERN_PTR _lantern_nn_utils_PackedSequence_batch_sizes)(void *input);
  HOST_API void * lantern_nn_utils_PackedSequence_batch_sizes(void *input) { void * ret = _lantern_nn_utils_PackedSequence_batch_sizes(input); LANTERN_HOST_HANDLER return ret;}
  LANTERN_API void *(LANTERN_PTR _lantern_nn_utils_PackedSequence_data)(void *input);
  HOST_API void * lantern_nn_utils_PackedSequence_data(void *input) { void * ret = _lantern_nn_utils_PackedSequence_data(input); LANTERN_HOST_HANDLER return ret;}
  LANTERN_API void *(LANTERN_PTR _lantern_nn_utils_PackedSequence_sorted_indices)(void *input);
  HOST_API void * lantern_nn_utils_PackedSequence_sorted_indices(void *input) { void * ret = _lantern_nn_utils_PackedSequence_sorted_indices(input); LANTERN_HOST_HANDLER return ret;}
  LANTERN_API void *(LANTERN_PTR _lantern_nn_utils_PackedSequence_unsorted_indices)(void *input);
  HOST_API void * lantern_nn_utils_PackedSequence_unsorted_indices(void *input) { void * ret = _lantern_nn_utils_PackedSequence_unsorted_indices(input); LANTERN_HOST_HANDLER return ret;}
  LANTERN_API void *(LANTERN_PTR _lantern_nn_utils_rnn_pack_sequence)(void *sequence, bool enforce_sorted);
  HOST_API void * lantern_nn_utils_rnn_pack_sequence(void *sequence, bool enforce_sorted) { void * ret = _lantern_nn_utils_rnn_pack_sequence(sequence, enforce_sorted); LANTERN_HOST_HANDLER return ret;}
  LANTERN_API void *(LANTERN_PTR _lantern_nn_utils_rnn_pad_packed_sequence)(void *sequence, bool batch_first, double padding_value, void *total_length);
  HOST_API void * lantern_nn_utils_rnn_pad_packed_sequence(void *sequence, bool batch_first, double padding_value, void *total_length) { void * ret = _lantern_nn_utils_rnn_pad_packed_sequence(sequence, batch_first, padding_value, total_length); LANTERN_HOST_HANDLER return ret;}
  LANTERN_API void *(LANTERN_PTR _lantern_nn_utils_rnn_pad_sequence)(void *sequence, bool batch_first, double padding_value);
  HOST_API void * lantern_nn_utils_rnn_pad_sequence(void *sequence, bool batch_first, double padding_value) { void * ret = _lantern_nn_utils_rnn_pad_sequence(sequence, batch_first, padding_value); LANTERN_HOST_HANDLER return ret;}
  LANTERN_API void *(LANTERN_PTR _lantern_nn_utils_rnn_PackedSequence_new)(void *data, void *batch_sizes, void *sorted_indices, void *unsorted_indices);
  HOST_API void * lantern_nn_utils_rnn_PackedSequence_new(void *data, void *batch_sizes, void *sorted_indices, void *unsorted_indices) { void * ret = _lantern_nn_utils_rnn_PackedSequence_new(data, batch_sizes, sorted_indices, unsorted_indices); LANTERN_HOST_HANDLER return ret;}
  LANTERN_API void *(LANTERN_PTR _lantern_Scalar_dtype)(void *self);
  HOST_API void * lantern_Scalar_dtype(void *self) { void * ret = _lantern_Scalar_dtype(self); LANTERN_HOST_HANDLER return ret;}
  LANTERN_API float(LANTERN_PTR _lantern_Scalar_to_float)(void *self);
  HOST_API float lantern_Scalar_to_float(void *self) { float ret = _lantern_Scalar_to_float(self); LANTERN_HOST_HANDLER return ret;}
  LANTERN_API int(LANTERN_PTR _lantern_Scalar_to_int)(void *self);
  HOST_API int lantern_Scalar_to_int(void *self) { int ret = _lantern_Scalar_to_int(self); LANTERN_HOST_HANDLER return ret;}
  LANTERN_API double(LANTERN_PTR _lantern_Scalar_to_double)(void *self);
  HOST_API double lantern_Scalar_to_double(void *self) { double ret = _lantern_Scalar_to_double(self); LANTERN_HOST_HANDLER return ret;}
  LANTERN_API bool(LANTERN_PTR _lantern_Scalar_to_bool)(void *self);
  HOST_API bool lantern_Scalar_to_bool(void *self) { bool ret = _lantern_Scalar_to_bool(self); LANTERN_HOST_HANDLER return ret;}
  LANTERN_API bool(LANTERN_PTR _lantern_Tensor_is_undefined)(void *self);
  HOST_API bool lantern_Tensor_is_undefined(void *self) { bool ret = _lantern_Tensor_is_undefined(self); LANTERN_HOST_HANDLER return ret;}
  LANTERN_API void(LANTERN_PTR _lantern_set_default_dtype)(void *dtype);
  HOST_API void lantern_set_default_dtype(void *dtype) { _lantern_set_default_dtype(dtype); LANTERN_HOST_HANDLER }
  LANTERN_API void *(LANTERN_PTR _lantern_get_default_dtype)();
  HOST_API void * lantern_get_default_dtype() { void * ret = _lantern_get_default_dtype(); LANTERN_HOST_HANDLER return ret;}
  LANTERN_API void (LANTERN_PTR _lantern_Tensor_set_grad_)(void* self, void* new_grad);
  HOST_API void lantern_Tensor_set_grad_(void* self, void* new_grad) { _lantern_Tensor_set_grad_(self, new_grad); LANTERN_HOST_HANDLER }
  LANTERN_API void *(LANTERN_PTR _lantern_Tensor_storage)(void *self);
  HOST_API void * lantern_Tensor_storage(void *self) { void * ret = _lantern_Tensor_storage(self); LANTERN_HOST_HANDLER return ret;}
  LANTERN_API bool(LANTERN_PTR _lantern_Tensor_has_storage)(void *self);
  HOST_API bool lantern_Tensor_has_storage(void *self) { bool ret = _lantern_Tensor_has_storage(self); LANTERN_HOST_HANDLER return ret;}
  LANTERN_API void *(LANTERN_PTR _lantern_Storage_data_ptr)(void *self);
  HOST_API void * lantern_Storage_data_ptr(void *self) { void * ret = _lantern_Storage_data_ptr(self); LANTERN_HOST_HANDLER return ret;}
  LANTERN_API void(LANTERN_PTR _lantern_Storage_delete)(void *x);
  HOST_API void lantern_Storage_delete(void *x) { _lantern_Storage_delete(x); LANTERN_HOST_HANDLER }
  LANTERN_API bool(LANTERN_PTR _lantern_Tensor_is_contiguous)(void *self);
  HOST_API bool lantern_Tensor_is_contiguous(void *self) { bool ret = _lantern_Tensor_is_contiguous(self); LANTERN_HOST_HANDLER return ret;}
  LANTERN_API const char  * (LANTERN_PTR _lantern_tensor_save) (void* self);
  HOST_API const char  * lantern_tensor_save(void* self) { const char  * ret = _lantern_tensor_save(self); LANTERN_HOST_HANDLER return ret;}
  LANTERN_API void * (LANTERN_PTR _lantern_tensor_load) (const char * s, void* device);
  HOST_API void * lantern_tensor_load(const char * s, void* device) { void * ret = _lantern_tensor_load(s, device); LANTERN_HOST_HANDLER return ret;}
  LANTERN_API void * (LANTERN_PTR _lantern_test_tensor)();
  HOST_API void * lantern_test_tensor() { void * ret = _lantern_test_tensor(); LANTERN_HOST_HANDLER return ret;}
  LANTERN_API void (LANTERN_PTR _lantern_test_print)(void* x); 
  HOST_API void lantern_test_print(void* x) { _lantern_test_print(x); LANTERN_HOST_HANDLER }
  LANTERN_API size_t (LANTERN_PTR _lantern_tensor_serialized_size) (const char * s);
  HOST_API size_t lantern_tensor_serialized_size(const char * s) { size_t ret = _lantern_tensor_serialized_size(s); LANTERN_HOST_HANDLER return ret;}
  LANTERN_API void (LANTERN_PTR _lantern_const_char_delete) (const char * x);
  HOST_API void lantern_const_char_delete(const char * x) {_lantern_const_char_delete(x); LANTERN_HOST_HANDLER}  
  LANTERN_API void (LANTERN_PTR _lantern_Tensor_index_put_tensor_) (void* self, void* index, void* rhs);
  HOST_API void lantern_Tensor_index_put_tensor_ (void* self, void* index, void* rhs) { _lantern_Tensor_index_put_tensor_(self, index, rhs); LANTERN_HOST_HANDLER}
  LANTERN_API void (LANTERN_PTR _lantern_Tensor_index_put_scalar_) (void* self, void* index, void* rhs);
  HOST_API void lantern_Tensor_index_put_scalar_ (void* self, void* index, void* rhs) { _lantern_Tensor_index_put_scalar_(self, index, rhs); LANTERN_HOST_HANDLER}
  LANTERN_API void (LANTERN_PTR _lantern_manual_seed) (int64_t seed);
  HOST_API void lantern_manual_seed (int64_t seed) {_lantern_manual_seed(seed); LANTERN_HOST_HANDLER}

  LANTERN_API void* (LANTERN_PTR _lantern_load_state_dict) (const char * path);
  HOST_API void * lantern_load_state_dict (const char * path)
  {
    void * ret = _lantern_load_state_dict(path);
    LANTERN_HOST_HANDLER return ret;
  }

  LANTERN_API void* (LANTERN_PTR _lantern_get_state_dict_keys) (void * ivalue);
  HOST_API void* lantern_get_state_dict_keys (void* ivalue)
  {
    void * ret = _lantern_get_state_dict_keys(ivalue);
    LANTERN_HOST_HANDLER return ret;
  }

  LANTERN_API void* (LANTERN_PTR _lantern_get_state_dict_values) (void * ivalue);
  HOST_API void* lantern_get_state_dict_values (void* ivalue)
  {
    void * ret = _lantern_get_state_dict_values(ivalue);
    LANTERN_HOST_HANDLER return ret;
  }

  LANTERN_API void (LANTERN_PTR _lantern_IValue_delete) (void * x);
  HOST_API void lantern_IValue_delete (void* x)
  {
    _lantern_IValue_delete(x);
    LANTERN_HOST_HANDLER;
  }

  LANTERN_API void (LANTERN_PTR _lantern_vector_string_delete) (void * x);
  HOST_API void lantern_vector_string_delete (void* x)
  {
    _lantern_vector_string_delete(x);
    LANTERN_HOST_HANDLER;
  }

  LANTERN_API int64_t *(LANTERN_PTR _lantern_Tensor_data_ptr_int64_t)(void *self);
  HOST_API int64_t* lantern_Tensor_data_ptr_int64_t (void* self)
  {
    int64_t* ret = _lantern_Tensor_data_ptr_int64_t(self);
    LANTERN_HOST_HANDLER;
    return ret;
  }

  LANTERN_API bool  (LANTERN_PTR _lantern_Tensor_has_names) (void* self);
  HOST_API bool lantern_Tensor_has_names (void* self)
  {
    bool ret = _lantern_Tensor_has_names(self);
    LANTERN_HOST_HANDLER;
    return ret;
  }

  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_names) (void * self);
  HOST_API void* lantern_Tensor_names (void* self)
  {
    void* ret = _lantern_Tensor_names(self);
    LANTERN_HOST_HANDLER;
    return ret;
  }

  LANTERN_API void* (LANTERN_PTR _lantern_string_new) (const char * value);
  HOST_API void* lantern_string_new (const char* value)
  {
    void* ret = _lantern_string_new(value);
    LANTERN_HOST_HANDLER;
    return ret;
  }

  LANTERN_API void (LANTERN_PTR _lantern_string_delete) (void * x);
  HOST_API void lantern_string_delete (void* x)
  {
    _lantern_string_delete(x);
    LANTERN_HOST_HANDLER;
  }

  LANTERN_API void * (LANTERN_PTR _lantern_contrib_torch_sparsemax) (void * input, int dim);
  HOST_API void * lantern_contrib_torch_sparsemax (void* input, int dim)
  {
    void * ret = _lantern_contrib_torch_sparsemax(input, dim);
    LANTERN_HOST_HANDLER;
    return ret;
  }

LANTERN_API void (LANTERN_PTR _lantern_set_num_threads) (int n);
HOST_API void lantern_set_num_threads (int n)
{
  _lantern_set_num_threads(n);
  LANTERN_HOST_HANDLER;
}

LANTERN_API void (LANTERN_PTR _lantern_set_num_interop_threads) (int n);
HOST_API void lantern_set_num_interop_threads (int n)
{
  _lantern_set_num_interop_threads(n);
  LANTERN_HOST_HANDLER;
}

LANTERN_API int (LANTERN_PTR _lantern_get_num_threads) ();
HOST_API int lantern_get_num_threads ()
{
  int ret = _lantern_get_num_threads();
  LANTERN_HOST_HANDLER;
  return ret;
}

LANTERN_API int (LANTERN_PTR _lantern_get_num_interop_threads) ();
HOST_API int lantern_get_num_interop_threads ()
{
  int ret = _lantern_get_num_interop_threads();
  LANTERN_HOST_HANDLER;
  return ret;
}

LANTERN_API void * (LANTERN_PTR _lantern_optional_vector_int64_t) (int64_t * x, size_t x_size, bool is_null);
HOST_API void* lantern_optional_vector_int64_t (int64_t * x, size_t x_size, bool is_null)
{
  void* ret = _lantern_optional_vector_int64_t(x, x_size, is_null);
  LANTERN_HOST_HANDLER;
  return ret;
}

LANTERN_API void * (LANTERN_PTR _lantern_optional_vector_double) (double * x, size_t x_size, bool is_null);
HOST_API void* lantern_optional_vector_double (double * x, size_t x_size, bool is_null)
{
  void* ret = _lantern_optional_vector_double(x, x_size, is_null);
  LANTERN_HOST_HANDLER;
  return ret;
}

LANTERN_API void (LANTERN_PTR _trace_r_nn_module) ();
HOST_API void trace_r_nn_module ()
{
  _trace_r_nn_module();
  LANTERN_HOST_HANDLER;
}

LANTERN_API void * (LANTERN_PTR _lantern_Stack_new) ();
HOST_API void * lantern_Stack_new ()
{
  void* ret = _lantern_Stack_new();
  LANTERN_HOST_HANDLER;
  return ret;
}

LANTERN_API void (LANTERN_PTR _lantern_Stack_delete) (void * x);
HOST_API void lantern_Stack_delete (void * x)
{
  _lantern_Stack_delete(x);
  LANTERN_HOST_HANDLER;
}

LANTERN_API int64_t (LANTERN_PTR _lantern_Stack_size) (void* self);
HOST_API int64_t lantern_Stack_size (void* self)
{
  int64_t ret = _lantern_Stack_size(self);
  LANTERN_HOST_HANDLER;
  return ret;
}

LANTERN_API void* (LANTERN_PTR _lantern_create_traceable_fun) (void *(*r_caller)(void *, void *), void* fn);
HOST_API void* lantern_create_traceable_fun (void *(*r_caller)(void *, void *), void* fn)
{
  void* ret = _lantern_create_traceable_fun(r_caller, fn);
  LANTERN_HOST_HANDLER;
  return ret;
}

LANTERN_API void* (LANTERN_PTR _lantern_trace_fn) (void* fn, void* inputs, void* compilation_unit, bool strict, void* module, void* name, bool should_mangle);
HOST_API void* lantern_trace_fn (void* fn, void* inputs, void* compilation_unit, bool strict, void* module, void* name, bool should_mangle)
{
  void* ret = _lantern_trace_fn(fn, inputs, compilation_unit, strict, module, name, should_mangle);
  LANTERN_HOST_HANDLER;
  return ret;
}

LANTERN_API void* (LANTERN_PTR _lantern_call_traced_fn) (void* fn, void* inputs);
HOST_API void* lantern_call_traced_fn(void* fn, void* inputs)
{
  void* ret = _lantern_call_traced_fn(fn, inputs);
  LANTERN_HOST_HANDLER;
  return ret;
}

LANTERN_API void* (LANTERN_PTR _lantern_CompilationUnit_new) ();
HOST_API void* lantern_CompilationUnit_new ()
{
  void* ret = _lantern_CompilationUnit_new();
  LANTERN_HOST_HANDLER;
  return ret;
}

LANTERN_API void (LANTERN_PTR _lantern_CompilationUnit_delete) (void* x);
HOST_API void lantern_CompilationUnit_delete (void* x)
{
  _lantern_CompilationUnit_delete(x);
  LANTERN_HOST_HANDLER;
}

LANTERN_API void (LANTERN_PTR _lantern_traced_fn_save) (void* fn, const char * filename);
HOST_API void lantern_traced_fn_save (void* fn, const char * filename)
{
  _lantern_traced_fn_save(fn, filename);
  LANTERN_HOST_HANDLER;
}

LANTERN_API const char * (LANTERN_PTR _lantern_traced_fn_graph_print) (void* fn);
HOST_API const char * lantern_traced_fn_graph_print (void* fn)
{
  const char * ret = _lantern_traced_fn_graph_print(fn);
  LANTERN_HOST_HANDLER;
  return ret;
}

LANTERN_API bool (LANTERN_PTR _lantern_Tensor_has_any_zeros) (void * self);
HOST_API bool lantern_Tensor_has_any_zeros (void* self)
{
  bool ret = _lantern_Tensor_has_any_zeros(self);
  LANTERN_HOST_HANDLER;
  return ret;
}

LANTERN_API void* (LANTERN_PTR _lantern_jit_load) (const char * path);
HOST_API void* lantern_jit_load (const char * path)
{
  void* ret = _lantern_jit_load(path);
  LANTERN_HOST_HANDLER;
  return ret;
}

LANTERN_API void* (LANTERN_PTR _lantern_call_jit_script) (void* module, void* inputs);
HOST_API void* lantern_call_jit_script (void* module, void* inputs)
{
  void* ret = _lantern_call_jit_script(module, inputs);
  LANTERN_HOST_HANDLER;
  return ret;
}

LANTERN_API void (LANTERN_PTR _lantern_JITModule_delete) (void* x);
HOST_API void lantern_JITModule_delete (void* x)
{
  _lantern_JITModule_delete(x);
  LANTERN_HOST_HANDLER;
}

LANTERN_API void (LANTERN_PTR _lantern_TraceableFunction_delete) (void* x);
HOST_API void lantern_TraceableFunction_delete (void* x)
{
  _lantern_TraceableFunction_delete(x);
  LANTERN_HOST_HANDLER;
}

LANTERN_API void (LANTERN_PTR _set_lantern_allocator) (void (*r_gc) (), uint64_t threshold_mb);
HOST_API void set_lantern_allocator (void (*r_gc) (), uint64_t threshold_mb)
{
  _set_lantern_allocator(r_gc, threshold_mb);
  LANTERN_HOST_HANDLER;
}

LANTERN_API void (LANTERN_PTR _lantern_vector_bool_delete) (void* x);
HOST_API void lantern_vector_bool_delete (void* x)
{
  _lantern_vector_bool_delete(x);
  LANTERN_HOST_HANDLER;
}

LANTERN_API void* (LANTERN_PTR _lantern_normal_double_double_intarrayref_generator_tensoroptions) (double mean, double std, void* size, void* generator, void* options);
HOST_API void* lantern_normal_double_double_intarrayref_generator_tensoroptions (double mean, double std, void* size, void* generator, void* options) 
{
  void* ret = _lantern_normal_double_double_intarrayref_generator_tensoroptions(mean, std, size, generator, options);
  LANTERN_HOST_HANDLER 
  return ret;
}

LANTERN_API void* (LANTERN_PTR _lantern_normal_tensor_tensor_generator) (void* mean, void* std, void* generator);
HOST_API void* lantern_normal_tensor_tensor_generator (void* mean, void* std, void* generator)
{
  void* ret = _lantern_normal_tensor_tensor_generator(mean, std, generator);
  LANTERN_HOST_HANDLER 
  return ret;
}

LANTERN_API void* (LANTERN_PTR _lantern_normal_double_tensor_generator) (double mean, void* std, void* generator);
HOST_API void* lantern_normal_double_tensor_generator (double mean, void* std, void* generator)
{
  void* ret = _lantern_normal_double_tensor_generator(mean, std, generator);
  LANTERN_HOST_HANDLER 
  return ret;
}

LANTERN_API void* (LANTERN_PTR _lantern_normal_tensor_double_generator) (void* mean, double std, void* generator);
HOST_API void* lantern_normal_tensor_double_generator (void* mean, double std, void* generator)
{
  void* ret = _lantern_normal_tensor_double_generator(mean, std, generator);
  LANTERN_HOST_HANDLER 
  return ret;
}

LANTERN_API void (LANTERN_PTR _lantern_vector_void_delete) (void* x);
HOST_API void lantern_vector_void_delete (void* x)
{
  _lantern_vector_void_delete(x);
  LANTERN_HOST_HANDLER;
}

LANTERN_API bool (LANTERN_PTR _lantern_autograd_is_enabled) ();
HOST_API bool lantern_autograd_is_enabled ()
{
  bool ret = _lantern_autograd_is_enabled();
  LANTERN_HOST_HANDLER;
  return ret;
}

LANTERN_API void (LANTERN_PTR _lantern_print_stuff) (void* x);
HOST_API void lantern_print_stuff (void* x) {
  _lantern_print_stuff (x);
  LANTERN_HOST_HANDLER;
}

LANTERN_API void* (LANTERN_PTR _lantern_nn_functional_pad_circular) (void* input, void* padding);
HOST_API void* lantern_nn_functional_pad_circular (void* input, void* padding)
{
  void* ret = _lantern_nn_functional_pad_circular(input, padding);
  LANTERN_HOST_HANDLER;
  return ret;
}

LANTERN_API bool (LANTERN_PTR _lantern_backend_has_mkl) ();
HOST_API bool lantern_backend_has_mkl ()
{
  bool ret = _lantern_backend_has_mkl();
  LANTERN_HOST_HANDLER;
  return ret;
}

LANTERN_API bool (LANTERN_PTR _lantern_backend_has_openmp) ();
HOST_API bool lantern_backend_has_openmp ()
{
  bool ret = _lantern_backend_has_openmp();
  LANTERN_HOST_HANDLER;
  return ret;
}

LANTERN_API bool (LANTERN_PTR _lantern_backend_has_lapack) ();
HOST_API bool lantern_backend_has_lapack ()
{
  bool ret = _lantern_backend_has_lapack();
  LANTERN_HOST_HANDLER;
  return ret;
}

LANTERN_API bool (LANTERN_PTR _lantern_backend_has_mkldnn) ();
HOST_API bool lantern_backend_has_mkldnn ()
{
  bool ret = _lantern_backend_has_mkldnn();
  LANTERN_HOST_HANDLER;
  return ret;
}

LANTERN_API void* (LANTERN_PTR _lantern_OptionalTensorList) ();
HOST_API void* lantern_OptionalTensorList ()
{
  void* ret = _lantern_OptionalTensorList();
  LANTERN_HOST_HANDLER;
  return ret;
}

LANTERN_API void (LANTERN_PTR _lantern_OptionalTensorList_push_back) (void* self, void* x, bool is_null);
HOST_API void lantern_OptionalTensorList_push_back (void* self, void* x, bool is_null)
{
  _lantern_OptionalTensorList_push_back(self, x, is_null);
  LANTERN_HOST_HANDLER;
}

LANTERN_API void* (LANTERN_PTR _lantern_Stream) ();
HOST_API void* lantern_Stream ()
{
  void* ret = _lantern_Stream();
  LANTERN_HOST_HANDLER;
  return ret;
}

LANTERN_API void (LANTERN_PTR _lantern_optional_tensor_delete) (void* x);
HOST_API void lantern_optional_tensor_delete (void* x)
{
  _lantern_optional_tensor_delete(x);
  LANTERN_HOST_HANDLER;
}

LANTERN_API void* (LANTERN_PTR _lantern_optional_tensor) (void*x, bool is_null);
HOST_API void* lantern_optional_tensor (void* x, bool is_null)
{
  void* ret = _lantern_optional_tensor(x, is_null);
  LANTERN_HOST_HANDLER;
  return ret;
}

LANTERN_API bool (LANTERN_PTR _lantern_optional_tensor_has_value) (void*x);
HOST_API bool lantern_optional_tensor_has_value (void* x)
{
  bool ret = _lantern_optional_tensor_has_value(x);
  LANTERN_HOST_HANDLER;
  return ret;
}

LANTERN_API void* (LANTERN_PTR _lantern_OptionalDevice_from_device) (void *x, bool is_null);
HOST_API void* lantern_OptionalDevice_from_device (void *x, bool is_null)
{
  void * ret = _lantern_OptionalDevice_from_device(x, is_null);
  LANTERN_HOST_HANDLER;
  return ret;
}

LANTERN_API void (LANTERN_PTR _lantern_optional_device_delete) (void*x);
HOST_API void lantern_optional_device_delete (void* x)
{
  _lantern_optional_device_delete(x);
  LANTERN_HOST_HANDLER;
}

LANTERN_API void (LANTERN_PTR _lantern_tensor_set_pyobj) (void*x, void* ptr);
HOST_API void lantern_tensor_set_pyobj (void* x, void* ptr)
{
  _lantern_tensor_set_pyobj(x, ptr);
  LANTERN_HOST_HANDLER;
}

LANTERN_API void* (LANTERN_PTR _lantern_tensor_get_pyobj) (void* x);
HOST_API void* lantern_tensor_get_pyobj (void* x)
{
  void* ret = _lantern_tensor_get_pyobj(x);
  LANTERN_HOST_HANDLER;
  return ret;
}

LANTERN_API void* (LANTERN_PTR _lantern_ScriptModule_parameters) (void* module, bool recurse);
HOST_API void* lantern_ScriptModule_parameters (void* module, bool recurse)
{
  void* ret = _lantern_ScriptModule_parameters(module, recurse);
  LANTERN_HOST_HANDLER;
  return ret;
}

LANTERN_API void (LANTERN_PTR _lantern_jit_named_parameter_list_delete) (void* x);
HOST_API void lantern_jit_named_parameter_list_delete (void* x)
{
  _lantern_jit_named_parameter_list_delete(x);
  LANTERN_HOST_HANDLER;
}

LANTERN_API int (LANTERN_PTR _lantern_jit_named_parameter_list_size) (void* self);
HOST_API int lantern_jit_named_parameter_list_size (void* module)
{
  int ret = _lantern_jit_named_parameter_list_size(module);
  LANTERN_HOST_HANDLER;
  return ret;
}

LANTERN_API void* (LANTERN_PTR _lantern_jit_named_parameter_list_tensors) (void* self);
HOST_API void* lantern_jit_named_parameter_list_tensors (void* module)
{
  void* ret = _lantern_jit_named_parameter_list_tensors(module);
  LANTERN_HOST_HANDLER;
  return ret;
}

LANTERN_API void* (LANTERN_PTR _lantern_jit_named_parameter_list_names) (void* self);
HOST_API void* lantern_jit_named_parameter_list_names (void* module)
{
  void* ret = _lantern_jit_named_parameter_list_names(module);
  LANTERN_HOST_HANDLER;
  return ret;
}

LANTERN_API void* (LANTERN_PTR _lantern_ScriptModule_forward) (void* module, void* inputs);
HOST_API void* lantern_ScriptModule_forward (void* module, void* inputs)
{
  void* ret = _lantern_ScriptModule_forward(module, inputs);
  LANTERN_HOST_HANDLER;
  return ret;
}

LANTERN_API void (LANTERN_PTR _lantern_ScriptModule_train) (void* module, bool on);
HOST_API void lantern_ScriptModule_train (void* module, bool on)
{
   _lantern_ScriptModule_train(module, on);
  LANTERN_HOST_HANDLER;
  
}

LANTERN_API void (LANTERN_PTR _lantern_ScriptModule_to) (void* module, void* device, bool non_blocking);
HOST_API void lantern_ScriptModule_to (void* module, void* device, bool non_blocking)
{
   _lantern_ScriptModule_to(module, device, non_blocking);
  LANTERN_HOST_HANDLER;
  
}

LANTERN_API void (LANTERN_PTR _lantern_ScriptModule_set_optimized) (void* module, bool o);
HOST_API void lantern_ScriptModule_set_optimized (void* module, bool o)
{
   _lantern_ScriptModule_set_optimized(module, o);
  LANTERN_HOST_HANDLER;
  
}

LANTERN_API bool (LANTERN_PTR _lantern_ScriptModule_is_training) (void* module);
HOST_API bool lantern_ScriptModule_is_training (void* module)
{
  bool ret = _lantern_ScriptModule_is_training(module);
  LANTERN_HOST_HANDLER;
  return ret;
}

LANTERN_API bool (LANTERN_PTR _lantern_ScriptModule_is_optimized) (void* module);
HOST_API bool lantern_ScriptModule_is_optimized (void* module)
{
  bool ret = _lantern_ScriptModule_is_optimized(module);
  LANTERN_HOST_HANDLER;
  return ret;
}

LANTERN_API void* (LANTERN_PTR _lantern_ScriptModule_modules) (void* module);
HOST_API void* lantern_ScriptModule_modules (void* module)
{
  void* ret = _lantern_ScriptModule_modules(module);
  LANTERN_HOST_HANDLER;
  return ret;
}

LANTERN_API int (LANTERN_PTR _lantern_jit_named_module_list_size) (void* self);
HOST_API int lantern_jit_named_module_list_size (void* self)
{
  int ret = _lantern_jit_named_module_list_size(self);
  LANTERN_HOST_HANDLER;
  return ret;
}

LANTERN_API void* (LANTERN_PTR _lantern_jit_named_module_list_module_at) (void* self, int64_t index);
HOST_API void* lantern_jit_named_module_list_module_at (void* self, int64_t index)
{
  void* ret = _lantern_jit_named_module_list_module_at(self, index);
  LANTERN_HOST_HANDLER;
  return ret;
}

LANTERN_API void* (LANTERN_PTR _lantern_jit_named_module_list_names) (void* self);
HOST_API void* lantern_jit_named_module_list_names (void* self)
{
  void* ret = _lantern_jit_named_module_list_names(self);
  LANTERN_HOST_HANDLER;
  return ret;
}

LANTERN_API void (LANTERN_PTR _lantern_jit_named_module_list_delete) (void* x);
HOST_API void lantern_jit_named_module_list_delete (void* x)
{
   _lantern_jit_named_module_list_delete(x);
  LANTERN_HOST_HANDLER;
  
}

LANTERN_API void (LANTERN_PTR _lantern_ScriptModule_register_parameter) (void* module, void* name, void* v, bool is_buffer);
HOST_API void lantern_ScriptModule_register_parameter (void* module, void* name, void* v, bool is_buffer)
{
   _lantern_ScriptModule_register_parameter(module, name, v, is_buffer);
  LANTERN_HOST_HANDLER;
  
}

LANTERN_API void (LANTERN_PTR _lantern_ScriptModule_register_buffer) (void* module, void* name, void* v);
HOST_API void lantern_ScriptModule_register_buffer (void* module, void* name, void* v)
{
   _lantern_ScriptModule_register_buffer(module, name, v);
  LANTERN_HOST_HANDLER;
  
}

LANTERN_API void (LANTERN_PTR _lantern_ScriptModule_register_module) (void* self, void* name, void* module);
HOST_API void lantern_ScriptModule_register_module (void* self, void* name, void* module)
{
   _lantern_ScriptModule_register_module(self, name, module);
  LANTERN_HOST_HANDLER;
  
}

LANTERN_API void (LANTERN_PTR _lantern_ScriptModule_register_attribute) (void* module, void* name, void* t, void* v, bool is_param, bool is_buffer);
HOST_API void lantern_ScriptModule_register_attribute (void* module, void* name, void* t, void* v, bool is_param, bool is_buffer)
{
   _lantern_ScriptModule_register_attribute(module, name, t, v, is_param, is_buffer);
  LANTERN_HOST_HANDLER;
  
}

LANTERN_API void* (LANTERN_PTR _lantern_jit_named_buffer_list_names) (void* self);
HOST_API void* lantern_jit_named_buffer_list_names (void* self)
{
  void* ret = _lantern_jit_named_buffer_list_names(self);
  LANTERN_HOST_HANDLER;
  return ret;
}

LANTERN_API void* (LANTERN_PTR _lantern_jit_named_buffer_list_tensors) (void* self);
HOST_API void* lantern_jit_named_buffer_list_tensors (void* self)
{
  void* ret = _lantern_jit_named_buffer_list_tensors(self);
  LANTERN_HOST_HANDLER;
  return ret;
}

LANTERN_API int (LANTERN_PTR _lantern_jit_named_buffer_list_size) (void* self);
HOST_API int lantern_jit_named_buffer_list_size (void* self)
{
  int ret = _lantern_jit_named_buffer_list_size(self);
  LANTERN_HOST_HANDLER;
  return ret;
}

LANTERN_API void* (LANTERN_PTR _lantern_ScriptModule_buffers) (void* module, bool recurse);
HOST_API void* lantern_ScriptModule_buffers (void* module, bool recurse)
{
  void* ret = _lantern_ScriptModule_buffers(module, recurse);
  LANTERN_HOST_HANDLER;
  return ret;
}

LANTERN_API void (LANTERN_PTR _lantern_jit_named_buffer_list_delete) (void* x);
HOST_API void lantern_jit_named_buffer_list_delete (void* x)
{
   _lantern_jit_named_buffer_list_delete(x);
  LANTERN_HOST_HANDLER;
  
}

LANTERN_API void* (LANTERN_PTR _lantern_ScriptModule_children) (void* module);
HOST_API void* lantern_ScriptModule_children (void* module)
{
  void* ret = _lantern_ScriptModule_children(module);
  LANTERN_HOST_HANDLER;
  return ret;
}

LANTERN_API void (LANTERN_PTR _lantern_jit_ScriptMethod_delete) (void* x);
HOST_API void lantern_jit_ScriptMethod_delete (void* x)
{
   _lantern_jit_ScriptMethod_delete(x);
  LANTERN_HOST_HANDLER;
  
}

LANTERN_API void* (LANTERN_PTR _lantern_ScriptModule_find_method) (void* self, void* basename);
HOST_API void* lantern_ScriptModule_find_method (void* self, void* basename)
{
  void* ret = _lantern_ScriptModule_find_method(self, basename);
  LANTERN_HOST_HANDLER;
  return ret;
}

LANTERN_API void* (LANTERN_PTR _lantern_ScriptMethod_call) (void* self, void* inputs);
HOST_API void* lantern_ScriptMethod_call (void* self, void* inputs)
{
  void* ret = _lantern_ScriptMethod_call(self, inputs);
  LANTERN_HOST_HANDLER;
  return ret;
}

LANTERN_API int (LANTERN_PTR _lantern_IValue_type) (void* self);
HOST_API int lantern_IValue_type (void* self)
{
  int ret = _lantern_IValue_type(self);
  LANTERN_HOST_HANDLER;
  return ret;
}

LANTERN_API bool (LANTERN_PTR _lantern_IValue_Bool) (void * self);
HOST_API bool lantern_IValue_Bool (void * self)
{
  bool ret = _lantern_IValue_Bool(self);
  LANTERN_HOST_HANDLER;
  return ret;
}

LANTERN_API void* (LANTERN_PTR _lantern_IValue_BoolList) (void* self);
HOST_API void* lantern_IValue_BoolList (void* self)
{
  void* ret = _lantern_IValue_BoolList(self);
  LANTERN_HOST_HANDLER;
  return ret;
}

LANTERN_API void* (LANTERN_PTR _lantern_IValue_Device) (void* self);
HOST_API void* lantern_IValue_Device (void* self)
{
  void* ret = _lantern_IValue_Device(self);
  LANTERN_HOST_HANDLER;
  return ret;
}

LANTERN_API double (LANTERN_PTR _lantern_IValue_Double) (void* self);
HOST_API double lantern_IValue_Double (void* self)
{
  double ret = _lantern_IValue_Double(self);
  LANTERN_HOST_HANDLER;
  return ret;
}

LANTERN_API void* (LANTERN_PTR _lantern_IValue_DoubleList) (void* self);
HOST_API void* lantern_IValue_DoubleList (void* self)
{
  void* ret = _lantern_IValue_DoubleList(self);
  LANTERN_HOST_HANDLER;
  return ret;
}

LANTERN_API void* (LANTERN_PTR _lantern_IValue_Generator) (void* self);
HOST_API void* lantern_IValue_Generator (void* self)
{
  void* ret = _lantern_IValue_Generator(self);
  LANTERN_HOST_HANDLER;
  return ret;
}

LANTERN_API void* (LANTERN_PTR _lantern_IValue_GenericDict) (void* self);
HOST_API void* lantern_IValue_GenericDict (void* self)
{
  void* ret = _lantern_IValue_GenericDict(self);
  LANTERN_HOST_HANDLER;
  return ret;
}

LANTERN_API int64_t (LANTERN_PTR _lantern_IValue_Int) (void* self);
HOST_API int64_t lantern_IValue_Int (void* self)
{
  int64_t ret = _lantern_IValue_Int(self);
  LANTERN_HOST_HANDLER;
  return ret;
}

LANTERN_API void* (LANTERN_PTR _lantern_IValue_IntList) (void* self);
HOST_API void* lantern_IValue_IntList (void* self)
{
  void* ret = _lantern_IValue_IntList(self);
  LANTERN_HOST_HANDLER;
  return ret;
}

LANTERN_API void* (LANTERN_PTR _lantern_IValue_List) (void* self);
HOST_API void* lantern_IValue_List (void* self)
{
  void* ret = _lantern_IValue_List(self);
  LANTERN_HOST_HANDLER;
  return ret;
}

LANTERN_API void* (LANTERN_PTR _lantern_IValue_Module) (void* self);
HOST_API void* lantern_IValue_Module (void* self)
{
  void* ret = _lantern_IValue_Module(self);
  LANTERN_HOST_HANDLER;
  return ret;
}

LANTERN_API void* (LANTERN_PTR _lantern_IValue_Scalar) (void* self);
HOST_API void* lantern_IValue_Scalar (void* self)
{
  void* ret = _lantern_IValue_Scalar(self);
  LANTERN_HOST_HANDLER;
  return ret;
}

LANTERN_API void* (LANTERN_PTR _lantern_IValue_String) (void* self);
HOST_API void* lantern_IValue_String (void* self)
{
  void* ret = _lantern_IValue_String(self);
  LANTERN_HOST_HANDLER;
  return ret;
}

LANTERN_API void* (LANTERN_PTR _lantern_IValue_Tensor) (void* self);
HOST_API void* lantern_IValue_Tensor (void* self)
{
  void* ret = _lantern_IValue_Tensor(self);
  LANTERN_HOST_HANDLER;
  return ret;
}

LANTERN_API void* (LANTERN_PTR _lantern_IValue_TensorList) (void* self);
HOST_API void* lantern_IValue_TensorList (void* self)
{
  void* ret = _lantern_IValue_TensorList(self);
  LANTERN_HOST_HANDLER;
  return ret;
}

LANTERN_API void* (LANTERN_PTR _lantern_IValue_Tuple) (void* self);
HOST_API void* lantern_IValue_Tuple (void* self)
{
  void* ret = _lantern_IValue_Tuple(self);
  LANTERN_HOST_HANDLER;
  return ret;
}

LANTERN_API void (LANTERN_PTR _lantern_GenericDict_delete) (void* x);
HOST_API void lantern_GenericDict_delete (void* x)
{
   _lantern_GenericDict_delete(x);
  LANTERN_HOST_HANDLER;
  
}

LANTERN_API void (LANTERN_PTR _lantern_GenericList_delete) (void* x);
HOST_API void lantern_GenericList_delete (void* x)
{
   _lantern_GenericList_delete(x);
  LANTERN_HOST_HANDLER;
  
}

LANTERN_API void* (LANTERN_PTR _lantern_Stack_at) (void* self, int64_t index);
HOST_API void* lantern_Stack_at (void* self, int64_t index)
{
  void* ret = _lantern_Stack_at(self, index);
  LANTERN_HOST_HANDLER;
  return ret;
}

LANTERN_API void* (LANTERN_PTR _lantern_IValue_from_Bool) (bool self);
HOST_API void* lantern_IValue_from_Bool (bool self)
{
  void* ret = _lantern_IValue_from_Bool(self);
  LANTERN_HOST_HANDLER;
  return ret;
}

LANTERN_API void* (LANTERN_PTR _lantern_IValue_from_BoolList) (void* self);
HOST_API void* lantern_IValue_from_BoolList (void* self)
{
  void* ret = _lantern_IValue_from_BoolList(self);
  LANTERN_HOST_HANDLER;
  return ret;
}

LANTERN_API void* (LANTERN_PTR _lantern_IValue_from_Device) (void* self);
HOST_API void* lantern_IValue_from_Device (void* self)
{
  void* ret = _lantern_IValue_from_Device(self);
  LANTERN_HOST_HANDLER;
  return ret;
}

LANTERN_API void* (LANTERN_PTR _lantern_IValue_from_Double) (double self);
HOST_API void* lantern_IValue_from_Double (double self)
{
  void* ret = _lantern_IValue_from_Double(self);
  LANTERN_HOST_HANDLER;
  return ret;
}

LANTERN_API void* (LANTERN_PTR _lantern_IValue_from_DoubleList) (void* self);
HOST_API void* lantern_IValue_from_DoubleList (void* self)
{
  void* ret = _lantern_IValue_from_DoubleList(self);
  LANTERN_HOST_HANDLER;
  return ret;
}

LANTERN_API void* (LANTERN_PTR _lantern_IValue_from_Generator) (void* self);
HOST_API void* lantern_IValue_from_Generator (void* self)
{
  void* ret = _lantern_IValue_from_Generator(self);
  LANTERN_HOST_HANDLER;
  return ret;
}

LANTERN_API void* (LANTERN_PTR _lantern_IValue_from_GenericDict) (void* self);
HOST_API void* lantern_IValue_from_GenericDict (void* self)
{
  void* ret = _lantern_IValue_from_GenericDict(self);
  LANTERN_HOST_HANDLER;
  return ret;
}

LANTERN_API void* (LANTERN_PTR _lantern_IValue_from_Int) (int64_t self);
HOST_API void* lantern_IValue_from_Int (int64_t self)
{
  void* ret = _lantern_IValue_from_Int(self);
  LANTERN_HOST_HANDLER;
  return ret;
}

LANTERN_API void* (LANTERN_PTR _lantern_IValue_from_IntList) (void* self);
HOST_API void* lantern_IValue_from_IntList (void* self)
{
  void* ret = _lantern_IValue_from_IntList(self);
  LANTERN_HOST_HANDLER;
  return ret;
}

LANTERN_API void* (LANTERN_PTR _lantern_IValue_from_List) (void* self);
HOST_API void* lantern_IValue_from_List (void* self)
{
  void* ret = _lantern_IValue_from_List(self);
  LANTERN_HOST_HANDLER;
  return ret;
}

LANTERN_API void* (LANTERN_PTR _lantern_IValue_from_Module) (void* self);
HOST_API void* lantern_IValue_from_Module (void* self)
{
  void* ret = _lantern_IValue_from_Module(self);
  LANTERN_HOST_HANDLER;
  return ret;
}

LANTERN_API void* (LANTERN_PTR _lantern_IValue_from_Scalar) (void* self);
HOST_API void* lantern_IValue_from_Scalar (void* self)
{
  void* ret = _lantern_IValue_from_Scalar(self);
  LANTERN_HOST_HANDLER;
  return ret;
}

LANTERN_API void* (LANTERN_PTR _lantern_IValue_from_String) (void* self);
HOST_API void* lantern_IValue_from_String (void* self)
{
  void* ret = _lantern_IValue_from_String(self);
  LANTERN_HOST_HANDLER;
  return ret;
}

LANTERN_API void* (LANTERN_PTR _lantern_IValue_from_Tensor) (void* self);
HOST_API void* lantern_IValue_from_Tensor (void* self)
{
  void* ret = _lantern_IValue_from_Tensor(self);
  LANTERN_HOST_HANDLER;
  return ret;
}

LANTERN_API void* (LANTERN_PTR _lantern_IValue_from_TensorList) (void* self);
HOST_API void* lantern_IValue_from_TensorList (void* self)
{
  void* ret = _lantern_IValue_from_TensorList(self);
  LANTERN_HOST_HANDLER;
  return ret;
}

LANTERN_API int64_t (LANTERN_PTR _lantern_vector_int64_t_size) (void* self);
HOST_API int64_t lantern_vector_int64_t_size (void* self)
{
  int64_t ret = _lantern_vector_int64_t_size(self);
  LANTERN_HOST_HANDLER;
  return ret;
}

LANTERN_API int64_t (LANTERN_PTR _lantern_vector_int64_t_at) (void* self, int64_t index);
HOST_API int64_t lantern_vector_int64_t_at (void* self, int64_t index)
{
  int64_t ret = _lantern_vector_int64_t_at(self, index);
  LANTERN_HOST_HANDLER;
  return ret;
}

LANTERN_API double (LANTERN_PTR _lantern_vector_double_size) (void* self);
HOST_API double lantern_vector_double_size (void* self)
{
  double ret = _lantern_vector_double_size(self);
  LANTERN_HOST_HANDLER;
  return ret;
}

LANTERN_API double (LANTERN_PTR _lantern_vector_double_at) (void* self, int64_t index);
HOST_API double lantern_vector_double_at (void* self, int64_t index)
{
  double ret = _lantern_vector_double_at(self, index);
  LANTERN_HOST_HANDLER;
  return ret;
}

LANTERN_API void (LANTERN_PTR _lantern_vector_double_delete) (void* x);
HOST_API void lantern_vector_double_delete (void* x)
{
   _lantern_vector_double_delete(x);
  LANTERN_HOST_HANDLER;
  
}

LANTERN_API void (LANTERN_PTR _lantern_vector_int64_t2_delete) (void* x);
HOST_API void lantern_vector_int64_t2_delete (void* x)
{
   _lantern_vector_int64_t2_delete(x);
  LANTERN_HOST_HANDLER;
  
}

LANTERN_API void* (LANTERN_PTR _lantern_vector_double_new) ();
HOST_API void* lantern_vector_double_new ()
{
  void* ret = _lantern_vector_double_new();
  LANTERN_HOST_HANDLER;
  return ret;
}

LANTERN_API void* (LANTERN_PTR _lantern_vector_int64_t_new) ();
HOST_API void* lantern_vector_int64_t_new ()
{
  void* ret = _lantern_vector_int64_t_new();
  LANTERN_HOST_HANDLER;
  return ret;
}

LANTERN_API void (LANTERN_PTR _lantern_vector_double_push_back) (void* self, double x);
HOST_API void lantern_vector_double_push_back (void* self, double x)
{
   _lantern_vector_double_push_back(self, x);
  LANTERN_HOST_HANDLER;
  
}

LANTERN_API void (LANTERN_PTR _lantern_vector_int64_t_push_back) (void* self, int64_t x);
HOST_API void lantern_vector_int64_t_push_back (void* self, int64_t x)
{
   _lantern_vector_int64_t_push_back(self, x);
  LANTERN_HOST_HANDLER;
  
}

LANTERN_API const char * (LANTERN_PTR _lantern_string_get) (void* self);
HOST_API const char * lantern_string_get (void* self)
{
  const char * ret = _lantern_string_get(self);
  LANTERN_HOST_HANDLER;
  return ret;
}

LANTERN_API void (LANTERN_PTR _lantern_jit_Tuple_delete) (void *x);
HOST_API void lantern_jit_Tuple_delete (void *x)
{
   _lantern_jit_Tuple_delete(x);
  LANTERN_HOST_HANDLER;
  
}

LANTERN_API void* (LANTERN_PTR _lantern_IValue_from_Tuple) (void* self);
HOST_API void* lantern_IValue_from_Tuple (void* self)
{
  void* ret = _lantern_IValue_from_Tuple(self);
  LANTERN_HOST_HANDLER;
  return ret;
}

LANTERN_API void* (LANTERN_PTR _lantern_jit_Tuple_new) ();
HOST_API void* lantern_jit_Tuple_new ()
{
  void* ret = _lantern_jit_Tuple_new();
  LANTERN_HOST_HANDLER;
  return ret;
}

LANTERN_API void (LANTERN_PTR _lantern_jit_Tuple_push_back) (void* self, void* element);
HOST_API void lantern_jit_Tuple_push_back (void* self, void* element)
{
   _lantern_jit_Tuple_push_back(self, element);
  LANTERN_HOST_HANDLER;
  
}

LANTERN_API int64_t (LANTERN_PTR _lantern_jit_Tuple_size) (void* self);
HOST_API int64_t lantern_jit_Tuple_size (void* self)
{
  int64_t ret = _lantern_jit_Tuple_size(self);
  LANTERN_HOST_HANDLER;
  return ret;
}

LANTERN_API void* (LANTERN_PTR _lantern_jit_Tuple_at) (void* self, int64_t index);
HOST_API void* lantern_jit_Tuple_at (void* self, int64_t index)
{
  void* ret = _lantern_jit_Tuple_at(self, index);
  LANTERN_HOST_HANDLER;
  return ret;
}

LANTERN_API void (LANTERN_PTR _lantern_jit_TensorDict_delete) (void *x);
HOST_API void lantern_jit_TensorDict_delete (void *x)
{
   _lantern_jit_TensorDict_delete(x);
  LANTERN_HOST_HANDLER;
  
}

LANTERN_API void (LANTERN_PTR _lantern_jit_GenericDict_delete) (void *x);
HOST_API void lantern_jit_GenericDict_delete (void *x)
{
   _lantern_jit_GenericDict_delete(x);
  LANTERN_HOST_HANDLER;
  
}

LANTERN_API void (LANTERN_PTR _lantern_jit_GenericList_delete) (void *x);
HOST_API void lantern_jit_GenericList_delete (void *x)
{
   _lantern_jit_GenericList_delete(x);
  LANTERN_HOST_HANDLER;
  
}

LANTERN_API void* (LANTERN_PTR _lantern_jit_TensorDict_new) ();
HOST_API void* lantern_jit_TensorDict_new ()
{
  void* ret = _lantern_jit_TensorDict_new();
  LANTERN_HOST_HANDLER;
  return ret;
}

LANTERN_API void (LANTERN_PTR _lantern_jit_TensorDict_push_back) (void* self, void* key, void* value);
HOST_API void lantern_jit_TensorDict_push_back (void* self, void* key, void* value)
{
   _lantern_jit_TensorDict_push_back(self, key, value);
  LANTERN_HOST_HANDLER;
  
}

LANTERN_API void* (LANTERN_PTR _lantern_jit_GenericDict_keys) (void* self);
HOST_API void* lantern_jit_GenericDict_keys (void* self)
{
  void* ret = _lantern_jit_GenericDict_keys(self);
  LANTERN_HOST_HANDLER;
  return ret;
}

LANTERN_API void* (LANTERN_PTR _lantern_jit_GenericDict_at) (void* self, void* key);
HOST_API void* lantern_jit_GenericDict_at (void* self, void* key)
{
  void* ret = _lantern_jit_GenericDict_at(self, key);
  LANTERN_HOST_HANDLER;
  return ret;
}

LANTERN_API int64_t (LANTERN_PTR _lantern_jit_GenericList_size) (void* self);
HOST_API int64_t lantern_jit_GenericList_size (void* self)
{
  int64_t ret = _lantern_jit_GenericList_size(self);
  LANTERN_HOST_HANDLER;
  return ret;
}

LANTERN_API void* (LANTERN_PTR _lantern_jit_GenericList_at) (void* self, int64_t index);
HOST_API void* lantern_jit_GenericList_at (void* self, int64_t index)
{
  void* ret = _lantern_jit_GenericList_at(self, index);
  LANTERN_HOST_HANDLER;
  return ret;
}

LANTERN_API void* (LANTERN_PTR _lantern_IValue_from_TensorDict) (void* self);
HOST_API void* lantern_IValue_from_TensorDict (void* self)
{
  void* ret = _lantern_IValue_from_TensorDict(self);
  LANTERN_HOST_HANDLER;
  return ret;
}

LANTERN_API void (LANTERN_PTR _lantern_jit_vector_IValue_delete) (void* x);
HOST_API void lantern_jit_vector_IValue_delete (void* x)
{
   _lantern_jit_vector_IValue_delete(x);
  LANTERN_HOST_HANDLER;
  
}

LANTERN_API int64_t (LANTERN_PTR _lantern_jit_vector_IValue_size) (void* self);
HOST_API int64_t lantern_jit_vector_IValue_size (void* self)
{
  int64_t ret = _lantern_jit_vector_IValue_size(self);
  LANTERN_HOST_HANDLER;
  return ret;
}

LANTERN_API void* (LANTERN_PTR _lantern_jit_vector_IValue_at) (void* self, int64_t index);
HOST_API void* lantern_jit_vector_IValue_at (void* self, int64_t index)
{
  void* ret = _lantern_jit_vector_IValue_at(self, index);
  LANTERN_HOST_HANDLER;
  return ret;
}

LANTERN_API void* (LANTERN_PTR _lantern_jit_NamedTuple_new) ();
HOST_API void* lantern_jit_NamedTuple_new ()
{
  void* ret = _lantern_jit_NamedTuple_new();
  LANTERN_HOST_HANDLER;
  return ret;
}

LANTERN_API void (LANTERN_PTR _lantern_jit_NamedTuple_push_back) (void* self, void* name, void* element);
HOST_API void lantern_jit_NamedTuple_push_back (void* self, void* name, void* element)
{
   _lantern_jit_NamedTuple_push_back(self, name, element);
  LANTERN_HOST_HANDLER;
  
}

LANTERN_API void* (LANTERN_PTR _lantern_jit_NamedTupleHelper_keys) (void* self);
HOST_API void* lantern_jit_NamedTupleHelper_keys (void* self)
{
  void* ret = _lantern_jit_NamedTupleHelper_keys(self);
  LANTERN_HOST_HANDLER;
  return ret;
}

LANTERN_API void* (LANTERN_PTR _lantern_jit_NamedTupleHelper_elements) (void* self);
HOST_API void* lantern_jit_NamedTupleHelper_elements (void* self)
{
  void* ret = _lantern_jit_NamedTupleHelper_elements(self);
  LANTERN_HOST_HANDLER;
  return ret;
}

LANTERN_API void* (LANTERN_PTR _lantern_IValue_from_NamedTuple) (void* self);
HOST_API void* lantern_IValue_from_NamedTuple (void* self)
{
  void* ret = _lantern_IValue_from_NamedTuple(self);
  LANTERN_HOST_HANDLER;
  return ret;
}

LANTERN_API void (LANTERN_PTR _lantern_NamedTupleHelper_delete) (void* x);
HOST_API void lantern_NamedTupleHelper_delete (void* x)
{
   _lantern_NamedTupleHelper_delete(x);
  LANTERN_HOST_HANDLER;
  
}

LANTERN_API void (LANTERN_PTR _lantern_Stack_push_back_IValue) (void* self, void* x);
HOST_API void lantern_Stack_push_back_IValue (void* self, void* x)
{
   _lantern_Stack_push_back_IValue(self, x);
  LANTERN_HOST_HANDLER;
  
}

LANTERN_API void (LANTERN_PTR _lantern_FunctionPtr_delete) (void* x);
HOST_API void lantern_FunctionPtr_delete (void* x)
{
   _lantern_FunctionPtr_delete(x);
  LANTERN_HOST_HANDLER;
  
}

LANTERN_API void* (LANTERN_PTR _lantern_IValue_from_None) ();
HOST_API void* lantern_IValue_from_None ()
{
  void* ret = _lantern_IValue_from_None();
  LANTERN_HOST_HANDLER;
  return ret;
}

LANTERN_API void* (LANTERN_PTR _lantern_jit_compile_get_method) (void* cu, void* name);
HOST_API void* lantern_jit_compile_get_method (void* cu, void* name)
{
  void* ret = _lantern_jit_compile_get_method(cu, name);
  LANTERN_HOST_HANDLER;
  return ret;
}

LANTERN_API void* (LANTERN_PTR _lantern_jit_compile_list_methods) (void* cu);
HOST_API void* lantern_jit_compile_list_methods (void* cu)
{
  void* ret = _lantern_jit_compile_list_methods(cu);
  LANTERN_HOST_HANDLER;
  return ret;
}

LANTERN_API void* (LANTERN_PTR _lantern_jit_compile) (void* source, void* cu);
HOST_API void* lantern_jit_compile (void* source, void* cu)
{
  void* ret = _lantern_jit_compile(source, cu);
  LANTERN_HOST_HANDLER;
  return ret;
}

LANTERN_API void* (LANTERN_PTR _lantern_ScriptModule_new) (void* cu, void* name);
HOST_API void* lantern_ScriptModule_new (void* cu, void* name)
{
  void* ret = _lantern_ScriptModule_new(cu, name);
  LANTERN_HOST_HANDLER;
  return ret;
}

LANTERN_API void (LANTERN_PTR _lantern_ScriptModule_add_constant) (void* self, void* name, void* value);
HOST_API void lantern_ScriptModule_add_constant (void* self, void* name, void* value)
{
   _lantern_ScriptModule_add_constant(self, name, value);
  LANTERN_HOST_HANDLER;
  
}

LANTERN_API void* (LANTERN_PTR _lantern_ScriptModule_find_constant) (void* self, void* name);
HOST_API void* lantern_ScriptModule_find_constant (void* self, void* name)
{
  void* ret = _lantern_ScriptModule_find_constant(self, name);
  LANTERN_HOST_HANDLER;
  return ret;
}

LANTERN_API void (LANTERN_PTR _lantern_ScriptModule_add_method) (void* self, void* method);
HOST_API void lantern_ScriptModule_add_method (void* self, void* method)
{
   _lantern_ScriptModule_add_method(self, method);
  LANTERN_HOST_HANDLER;
  
}

LANTERN_API void (LANTERN_PTR _lantern_ScriptModule_save) (void* self, void* path);
HOST_API void lantern_ScriptModule_save (void* self, void* path)
{
   _lantern_ScriptModule_save(self, path);
  LANTERN_HOST_HANDLER;
  
}

  /* Autogen Headers -- Start */
  LANTERN_API void* (LANTERN_PTR _lantern__cast_byte_attensor_bool)(void* self, void* non_blocking);
  HOST_API void* lantern__cast_byte_attensor_bool(void* self, void* non_blocking) { void* ret = _lantern__cast_byte_attensor_bool(self, non_blocking); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__cast_char_attensor_bool)(void* self, void* non_blocking);
  HOST_API void* lantern__cast_char_attensor_bool(void* self, void* non_blocking) { void* ret = _lantern__cast_char_attensor_bool(self, non_blocking); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__cast_double_attensor_bool)(void* self, void* non_blocking);
  HOST_API void* lantern__cast_double_attensor_bool(void* self, void* non_blocking) { void* ret = _lantern__cast_double_attensor_bool(self, non_blocking); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__cast_float_attensor_bool)(void* self, void* non_blocking);
  HOST_API void* lantern__cast_float_attensor_bool(void* self, void* non_blocking) { void* ret = _lantern__cast_float_attensor_bool(self, non_blocking); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__cast_int_attensor_bool)(void* self, void* non_blocking);
  HOST_API void* lantern__cast_int_attensor_bool(void* self, void* non_blocking) { void* ret = _lantern__cast_int_attensor_bool(self, non_blocking); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__cast_long_attensor_bool)(void* self, void* non_blocking);
  HOST_API void* lantern__cast_long_attensor_bool(void* self, void* non_blocking) { void* ret = _lantern__cast_long_attensor_bool(self, non_blocking); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__cast_short_attensor_bool)(void* self, void* non_blocking);
  HOST_API void* lantern__cast_short_attensor_bool(void* self, void* non_blocking) { void* ret = _lantern__cast_short_attensor_bool(self, non_blocking); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__cast_half_attensor_bool)(void* self, void* non_blocking);
  HOST_API void* lantern__cast_half_attensor_bool(void* self, void* non_blocking) { void* ret = _lantern__cast_half_attensor_bool(self, non_blocking); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor__backward_attensor_attensorlist_attensor_bool_bool)(void* self, void* inputs, void* gradient, void* retain_graph, void* create_graph);
  HOST_API void* lantern_Tensor__backward_attensor_attensorlist_attensor_bool_bool(void* self, void* inputs, void* gradient, void* retain_graph, void* create_graph) { void* ret = _lantern_Tensor__backward_attensor_attensorlist_attensor_bool_bool(self, inputs, gradient, retain_graph, create_graph); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_set_data_attensor_attensor)(void* self, void* new_data);
  HOST_API void* lantern_Tensor_set_data_attensor_attensor(void* self, void* new_data) { void* ret = _lantern_Tensor_set_data_attensor_attensor(self, new_data); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_data_attensor)(void* self);
  HOST_API void* lantern_Tensor_data_attensor(void* self) { void* ret = _lantern_Tensor_data_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_is_leaf_attensor)(void* self);
  HOST_API void* lantern_Tensor_is_leaf_attensor(void* self) { void* ret = _lantern_Tensor_is_leaf_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_output_nr_attensor)(void* self);
  HOST_API void* lantern_Tensor_output_nr_attensor(void* self) { void* ret = _lantern_Tensor_output_nr_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor__version_attensor)(void* self);
  HOST_API void* lantern_Tensor__version_attensor(void* self) { void* ret = _lantern_Tensor__version_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_requires_grad__attensor_bool)(void* self, void* requires_grad);
  HOST_API void* lantern_Tensor_requires_grad__attensor_bool(void* self, void* requires_grad) { void* ret = _lantern_Tensor_requires_grad__attensor_bool(self, requires_grad); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_retain_grad_attensor)(void* self);
  HOST_API void* lantern_Tensor_retain_grad_attensor(void* self) { void* ret = _lantern_Tensor_retain_grad_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor__fw_primal_attensor_intt)(void* self, void* level);
  HOST_API void* lantern_Tensor__fw_primal_attensor_intt(void* self, void* level) { void* ret = _lantern_Tensor__fw_primal_attensor_intt(self, level); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__make_dual_attensor_attensor_intt)(void* primal, void* tangent, void* level);
  HOST_API void* lantern__make_dual_attensor_attensor_intt(void* primal, void* tangent, void* level) { void* ret = _lantern__make_dual_attensor_attensor_intt(primal, tangent, level); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__unpack_dual_attensor_intt)(void* dual, void* level);
  HOST_API void* lantern__unpack_dual_attensor_intt(void* dual, void* level) { void* ret = _lantern__unpack_dual_attensor_intt(dual, level); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_rename__attensor_atdimnamelist)(void* self, void* names);
  HOST_API void* lantern_Tensor_rename__attensor_atdimnamelist(void* self, void* names) { void* ret = _lantern_Tensor_rename__attensor_atdimnamelist(self, names); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_rename_attensor_atdimnamelist)(void* self, void* names);
  HOST_API void* lantern_Tensor_rename_attensor_atdimnamelist(void* self, void* names) { void* ret = _lantern_Tensor_rename_attensor_atdimnamelist(self, names); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_align_to_attensor_atdimnamelist)(void* self, void* names);
  HOST_API void* lantern_Tensor_align_to_attensor_atdimnamelist(void* self, void* names) { void* ret = _lantern_Tensor_align_to_attensor_atdimnamelist(self, names); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_align_to_attensor_atdimnamelist_intt)(void* self, void* order, void* ellipsis_idx);
  HOST_API void* lantern_Tensor_align_to_attensor_atdimnamelist_intt(void* self, void* order, void* ellipsis_idx) { void* ret = _lantern_Tensor_align_to_attensor_atdimnamelist_intt(self, order, ellipsis_idx); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_align_as_attensor_attensor)(void* self, void* other);
  HOST_API void* lantern_Tensor_align_as_attensor_attensor(void* self, void* other) { void* ret = _lantern_Tensor_align_as_attensor_attensor(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_align_tensors_attensorlist)(void* tensors);
  HOST_API void* lantern_align_tensors_attensorlist(void* tensors) { void* ret = _lantern_align_tensors_attensorlist(tensors); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__assert_async_attensor)(void* self);
  HOST_API void* lantern__assert_async_attensor(void* self) { void* ret = _lantern__assert_async_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_refine_names_attensor_atdimnamelist)(void* self, void* names);
  HOST_API void* lantern_Tensor_refine_names_attensor_atdimnamelist(void* self, void* names) { void* ret = _lantern_Tensor_refine_names_attensor_atdimnamelist(self, names); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__use_cudnn_ctc_loss_attensor_attensor_atintarrayref_atintarrayref_intt)(void* log_probs, void* targets, void* input_lengths, void* target_lengths, void* blank);
  HOST_API void* lantern__use_cudnn_ctc_loss_attensor_attensor_atintarrayref_atintarrayref_intt(void* log_probs, void* targets, void* input_lengths, void* target_lengths, void* blank) { void* ret = _lantern__use_cudnn_ctc_loss_attensor_attensor_atintarrayref_atintarrayref_intt(log_probs, targets, input_lengths, target_lengths, blank); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__cudnn_ctc_loss_attensor_attensor_atintarrayref_atintarrayref_intt_bool_bool)(void* log_probs, void* targets, void* input_lengths, void* target_lengths, void* blank, void* deterministic, void* zero_infinity);
  HOST_API void* lantern__cudnn_ctc_loss_attensor_attensor_atintarrayref_atintarrayref_intt_bool_bool(void* log_probs, void* targets, void* input_lengths, void* target_lengths, void* blank, void* deterministic, void* zero_infinity) { void* ret = _lantern__cudnn_ctc_loss_attensor_attensor_atintarrayref_atintarrayref_intt_bool_bool(log_probs, targets, input_lengths, target_lengths, blank, deterministic, zero_infinity); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__use_cudnn_rnn_flatten_weight)();
  HOST_API void* lantern__use_cudnn_rnn_flatten_weight() { void* ret = _lantern__use_cudnn_rnn_flatten_weight(); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__cudnn_rnn_flatten_weight_attensorlist_intt_intt_intt_intt_intt_intt_bool_bool)(void* weight_arr, void* weight_stride0, void* input_size, void* mode, void* hidden_size, void* proj_size, void* num_layers, void* batch_first, void* bidirectional);
  HOST_API void* lantern__cudnn_rnn_flatten_weight_attensorlist_intt_intt_intt_intt_intt_intt_bool_bool(void* weight_arr, void* weight_stride0, void* input_size, void* mode, void* hidden_size, void* proj_size, void* num_layers, void* batch_first, void* bidirectional) { void* ret = _lantern__cudnn_rnn_flatten_weight_attensorlist_intt_intt_intt_intt_intt_intt_bool_bool(weight_arr, weight_stride0, input_size, mode, hidden_size, proj_size, num_layers, batch_first, bidirectional); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__cudnn_rnn_attensor_attensorlist_intt_attensor_attensor_attensor_intt_intt_intt_intt_bool_double_bool_bool_atintarrayref_attensor)(void* input, void* weight, void* weight_stride0, void* weight_buf, void* hx, void* cx, void* mode, void* hidden_size, void* proj_size, void* num_layers, void* batch_first, void* dropout, void* train, void* bidirectional, void* batch_sizes, void* dropout_state);
  HOST_API void* lantern__cudnn_rnn_attensor_attensorlist_intt_attensor_attensor_attensor_intt_intt_intt_intt_bool_double_bool_bool_atintarrayref_attensor(void* input, void* weight, void* weight_stride0, void* weight_buf, void* hx, void* cx, void* mode, void* hidden_size, void* proj_size, void* num_layers, void* batch_first, void* dropout, void* train, void* bidirectional, void* batch_sizes, void* dropout_state) { void* ret = _lantern__cudnn_rnn_attensor_attensorlist_intt_attensor_attensor_attensor_intt_intt_intt_intt_bool_double_bool_bool_atintarrayref_attensor(input, weight, weight_stride0, weight_buf, hx, cx, mode, hidden_size, proj_size, num_layers, batch_first, dropout, train, bidirectional, batch_sizes, dropout_state); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__cudnn_rnn_backward_attensor_attensorlist_intt_attensor_attensor_attensor_attensor_attensor_attensor_attensor_intt_intt_intt_intt_bool_double_bool_bool_atintarrayref_attensor_attensor_stdarraybool)(void* input, void* weight, void* weight_stride0, void* weight_buf, void* hx, void* cx, void* output, void* grad_output, void* grad_hy, void* grad_cy, void* mode, void* hidden_size, void* proj_size, void* num_layers, void* batch_first, void* dropout, void* train, void* bidirectional, void* batch_sizes, void* dropout_state, void* reserve, void* output_mask);
  HOST_API void* lantern__cudnn_rnn_backward_attensor_attensorlist_intt_attensor_attensor_attensor_attensor_attensor_attensor_attensor_intt_intt_intt_intt_bool_double_bool_bool_atintarrayref_attensor_attensor_stdarraybool(void* input, void* weight, void* weight_stride0, void* weight_buf, void* hx, void* cx, void* output, void* grad_output, void* grad_hy, void* grad_cy, void* mode, void* hidden_size, void* proj_size, void* num_layers, void* batch_first, void* dropout, void* train, void* bidirectional, void* batch_sizes, void* dropout_state, void* reserve, void* output_mask) { void* ret = _lantern__cudnn_rnn_backward_attensor_attensorlist_intt_attensor_attensor_attensor_attensor_attensor_attensor_attensor_intt_intt_intt_intt_bool_double_bool_bool_atintarrayref_attensor_attensor_stdarraybool(input, weight, weight_stride0, weight_buf, hx, cx, output, grad_output, grad_hy, grad_cy, mode, hidden_size, proj_size, num_layers, batch_first, dropout, train, bidirectional, batch_sizes, dropout_state, reserve, output_mask); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__cudnn_init_dropout_state_double_bool_intt_attensoroptions)(void* dropout, void* train, void* dropout_seed, void* options);
  HOST_API void* lantern__cudnn_init_dropout_state_double_bool_intt_attensoroptions(void* dropout, void* train, void* dropout_seed, void* options) { void* ret = _lantern__cudnn_init_dropout_state_double_bool_intt_attensoroptions(dropout, train, dropout_seed, options); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__debug_has_internal_overlap_attensor)(void* self);
  HOST_API void* lantern__debug_has_internal_overlap_attensor(void* self) { void* ret = _lantern__debug_has_internal_overlap_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__fused_dropout_attensor_double_atgenerator)(void* self, void* p, void* generator);
  HOST_API void* lantern__fused_dropout_attensor_double_atgenerator(void* self, void* p, void* generator) { void* ret = _lantern__fused_dropout_attensor_double_atgenerator(self, p, generator); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__masked_scale_attensor_attensor_double)(void* self, void* mask, void* scale);
  HOST_API void* lantern__masked_scale_attensor_attensor_double(void* self, void* mask, void* scale) { void* ret = _lantern__masked_scale_attensor_attensor_double(self, mask, scale); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__sobol_engine_draw_attensor_intt_attensor_intt_intt_atscalartype)(void* quasi, void* n, void* sobolstate, void* dimension, void* num_generated, void* dtype);
  HOST_API void* lantern__sobol_engine_draw_attensor_intt_attensor_intt_intt_atscalartype(void* quasi, void* n, void* sobolstate, void* dimension, void* num_generated, void* dtype) { void* ret = _lantern__sobol_engine_draw_attensor_intt_attensor_intt_intt_atscalartype(quasi, n, sobolstate, dimension, num_generated, dtype); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__sobol_engine_ff__attensor_intt_attensor_intt_intt)(void* self, void* n, void* sobolstate, void* dimension, void* num_generated);
  HOST_API void* lantern__sobol_engine_ff__attensor_intt_attensor_intt_intt(void* self, void* n, void* sobolstate, void* dimension, void* num_generated) { void* ret = _lantern__sobol_engine_ff__attensor_intt_attensor_intt_intt(self, n, sobolstate, dimension, num_generated); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__sobol_engine_scramble__attensor_attensor_intt)(void* self, void* ltm, void* dimension);
  HOST_API void* lantern__sobol_engine_scramble__attensor_attensor_intt(void* self, void* ltm, void* dimension) { void* ret = _lantern__sobol_engine_scramble__attensor_attensor_intt(self, ltm, dimension); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__sobol_engine_initialize_state__attensor_intt)(void* self, void* dimension);
  HOST_API void* lantern__sobol_engine_initialize_state__attensor_intt(void* self, void* dimension) { void* ret = _lantern__sobol_engine_initialize_state__attensor_intt(self, dimension); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__reshape_from_tensor_attensor_attensor)(void* self, void* shape);
  HOST_API void* lantern__reshape_from_tensor_attensor_attensor(void* self, void* shape) { void* ret = _lantern__reshape_from_tensor_attensor_attensor(self, shape); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__shape_as_tensor_attensor)(void* self);
  HOST_API void* lantern__shape_as_tensor_attensor(void* self) { void* ret = _lantern__shape_as_tensor_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_dropout_attensor_double_bool)(void* input, void* p, void* train);
  HOST_API void* lantern_dropout_attensor_double_bool(void* input, void* p, void* train) { void* ret = _lantern_dropout_attensor_double_bool(input, p, train); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_dropout__attensor_double_bool)(void* self, void* p, void* train);
  HOST_API void* lantern_dropout__attensor_double_bool(void* self, void* p, void* train) { void* ret = _lantern_dropout__attensor_double_bool(self, p, train); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_feature_dropout_attensor_double_bool)(void* input, void* p, void* train);
  HOST_API void* lantern_feature_dropout_attensor_double_bool(void* input, void* p, void* train) { void* ret = _lantern_feature_dropout_attensor_double_bool(input, p, train); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_feature_dropout__attensor_double_bool)(void* self, void* p, void* train);
  HOST_API void* lantern_feature_dropout__attensor_double_bool(void* self, void* p, void* train) { void* ret = _lantern_feature_dropout__attensor_double_bool(self, p, train); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_alpha_dropout_attensor_double_bool)(void* input, void* p, void* train);
  HOST_API void* lantern_alpha_dropout_attensor_double_bool(void* input, void* p, void* train) { void* ret = _lantern_alpha_dropout_attensor_double_bool(input, p, train); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_alpha_dropout__attensor_double_bool)(void* self, void* p, void* train);
  HOST_API void* lantern_alpha_dropout__attensor_double_bool(void* self, void* p, void* train) { void* ret = _lantern_alpha_dropout__attensor_double_bool(self, p, train); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_feature_alpha_dropout_attensor_double_bool)(void* input, void* p, void* train);
  HOST_API void* lantern_feature_alpha_dropout_attensor_double_bool(void* input, void* p, void* train) { void* ret = _lantern_feature_alpha_dropout_attensor_double_bool(input, p, train); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_feature_alpha_dropout__attensor_double_bool)(void* self, void* p, void* train);
  HOST_API void* lantern_feature_alpha_dropout__attensor_double_bool(void* self, void* p, void* train) { void* ret = _lantern_feature_alpha_dropout__attensor_double_bool(self, p, train); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_abs_attensor)(void* self);
  HOST_API void* lantern_abs_attensor(void* self) { void* ret = _lantern_abs_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_abs_attensor)(void* self);
  HOST_API void* lantern_Tensor_abs_attensor(void* self) { void* ret = _lantern_Tensor_abs_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_abs__attensor)(void* self);
  HOST_API void* lantern_abs__attensor(void* self) { void* ret = _lantern_abs__attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_abs__attensor)(void* self);
  HOST_API void* lantern_Tensor_abs__attensor(void* self) { void* ret = _lantern_Tensor_abs__attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_abs_out_attensor_attensor)(void* out, void* self);
  HOST_API void* lantern_abs_out_attensor_attensor(void* out, void* self) { void* ret = _lantern_abs_out_attensor_attensor(out, self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_absolute_attensor)(void* self);
  HOST_API void* lantern_absolute_attensor(void* self) { void* ret = _lantern_absolute_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_absolute_attensor)(void* self);
  HOST_API void* lantern_Tensor_absolute_attensor(void* self) { void* ret = _lantern_Tensor_absolute_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_absolute__attensor)(void* self);
  HOST_API void* lantern_Tensor_absolute__attensor(void* self) { void* ret = _lantern_Tensor_absolute__attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_absolute_out_attensor_attensor)(void* out, void* self);
  HOST_API void* lantern_absolute_out_attensor_attensor(void* out, void* self) { void* ret = _lantern_absolute_out_attensor_attensor(out, self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_angle_attensor)(void* self);
  HOST_API void* lantern_angle_attensor(void* self) { void* ret = _lantern_angle_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_angle_attensor)(void* self);
  HOST_API void* lantern_Tensor_angle_attensor(void* self) { void* ret = _lantern_Tensor_angle_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_angle_out_attensor_attensor)(void* out, void* self);
  HOST_API void* lantern_angle_out_attensor_attensor(void* out, void* self) { void* ret = _lantern_angle_out_attensor_attensor(out, self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_view_as_real_attensor)(void* self);
  HOST_API void* lantern_view_as_real_attensor(void* self) { void* ret = _lantern_view_as_real_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_view_as_complex_attensor)(void* self);
  HOST_API void* lantern_view_as_complex_attensor(void* self) { void* ret = _lantern_view_as_complex_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_sgn_attensor)(void* self);
  HOST_API void* lantern_sgn_attensor(void* self) { void* ret = _lantern_sgn_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_sgn_attensor)(void* self);
  HOST_API void* lantern_Tensor_sgn_attensor(void* self) { void* ret = _lantern_Tensor_sgn_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_sgn__attensor)(void* self);
  HOST_API void* lantern_Tensor_sgn__attensor(void* self) { void* ret = _lantern_Tensor_sgn__attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_sgn_out_attensor_attensor)(void* out, void* self);
  HOST_API void* lantern_sgn_out_attensor_attensor(void* out, void* self) { void* ret = _lantern_sgn_out_attensor_attensor(out, self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_real_attensor)(void* self);
  HOST_API void* lantern_real_attensor(void* self) { void* ret = _lantern_real_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_imag_attensor)(void* self);
  HOST_API void* lantern_imag_attensor(void* self) { void* ret = _lantern_imag_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_conj_attensor)(void* self);
  HOST_API void* lantern_conj_attensor(void* self) { void* ret = _lantern_conj_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_conj_attensor)(void* self);
  HOST_API void* lantern_Tensor_conj_attensor(void* self) { void* ret = _lantern_Tensor_conj_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_conj_out_attensor_attensor)(void* out, void* self);
  HOST_API void* lantern_conj_out_attensor_attensor(void* out, void* self) { void* ret = _lantern_conj_out_attensor_attensor(out, self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__conj_attensor)(void* self);
  HOST_API void* lantern__conj_attensor(void* self) { void* ret = _lantern__conj_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_acos_attensor)(void* self);
  HOST_API void* lantern_acos_attensor(void* self) { void* ret = _lantern_acos_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_acos_attensor)(void* self);
  HOST_API void* lantern_Tensor_acos_attensor(void* self) { void* ret = _lantern_Tensor_acos_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_acos__attensor)(void* self);
  HOST_API void* lantern_acos__attensor(void* self) { void* ret = _lantern_acos__attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_acos__attensor)(void* self);
  HOST_API void* lantern_Tensor_acos__attensor(void* self) { void* ret = _lantern_Tensor_acos__attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_acos_out_attensor_attensor)(void* out, void* self);
  HOST_API void* lantern_acos_out_attensor_attensor(void* out, void* self) { void* ret = _lantern_acos_out_attensor_attensor(out, self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_arccos_attensor)(void* self);
  HOST_API void* lantern_arccos_attensor(void* self) { void* ret = _lantern_arccos_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_arccos_attensor)(void* self);
  HOST_API void* lantern_Tensor_arccos_attensor(void* self) { void* ret = _lantern_Tensor_arccos_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_arccos__attensor)(void* self);
  HOST_API void* lantern_arccos__attensor(void* self) { void* ret = _lantern_arccos__attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_arccos__attensor)(void* self);
  HOST_API void* lantern_Tensor_arccos__attensor(void* self) { void* ret = _lantern_Tensor_arccos__attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_arccos_out_attensor_attensor)(void* out, void* self);
  HOST_API void* lantern_arccos_out_attensor_attensor(void* out, void* self) { void* ret = _lantern_arccos_out_attensor_attensor(out, self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_avg_pool1d_attensor_atintarrayref_atintarrayref_atintarrayref_bool_bool)(void* self, void* kernel_size, void* stride, void* padding, void* ceil_mode, void* count_include_pad);
  HOST_API void* lantern_avg_pool1d_attensor_atintarrayref_atintarrayref_atintarrayref_bool_bool(void* self, void* kernel_size, void* stride, void* padding, void* ceil_mode, void* count_include_pad) { void* ret = _lantern_avg_pool1d_attensor_atintarrayref_atintarrayref_atintarrayref_bool_bool(self, kernel_size, stride, padding, ceil_mode, count_include_pad); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_adaptive_avg_pool1d_attensor_atintarrayref)(void* self, void* output_size);
  HOST_API void* lantern_adaptive_avg_pool1d_attensor_atintarrayref(void* self, void* output_size) { void* ret = _lantern_adaptive_avg_pool1d_attensor_atintarrayref(self, output_size); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_adaptive_max_pool1d_attensor_atintarrayref)(void* self, void* output_size);
  HOST_API void* lantern_adaptive_max_pool1d_attensor_atintarrayref(void* self, void* output_size) { void* ret = _lantern_adaptive_max_pool1d_attensor_atintarrayref(self, output_size); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_add_attensor_attensor_constatscalar)(void* self, void* other, void* alpha);
  HOST_API void* lantern_add_attensor_attensor_constatscalar(void* self, void* other, void* alpha) { void* ret = _lantern_add_attensor_attensor_constatscalar(self, other, alpha); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_add_attensor_attensor_constatscalar)(void* self, void* other, void* alpha);
  HOST_API void* lantern_Tensor_add_attensor_attensor_constatscalar(void* self, void* other, void* alpha) { void* ret = _lantern_Tensor_add_attensor_attensor_constatscalar(self, other, alpha); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_add__attensor_attensor_constatscalar)(void* self, void* other, void* alpha);
  HOST_API void* lantern_Tensor_add__attensor_attensor_constatscalar(void* self, void* other, void* alpha) { void* ret = _lantern_Tensor_add__attensor_attensor_constatscalar(self, other, alpha); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_add_out_attensor_attensor_attensor_constatscalar)(void* out, void* self, void* other, void* alpha);
  HOST_API void* lantern_add_out_attensor_attensor_attensor_constatscalar(void* out, void* self, void* other, void* alpha) { void* ret = _lantern_add_out_attensor_attensor_attensor_constatscalar(out, self, other, alpha); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__add_relu_attensor_attensor_constatscalar)(void* self, void* other, void* alpha);
  HOST_API void* lantern__add_relu_attensor_attensor_constatscalar(void* self, void* other, void* alpha) { void* ret = _lantern__add_relu_attensor_attensor_constatscalar(self, other, alpha); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__add_relu__attensor_attensor_constatscalar)(void* self, void* other, void* alpha);
  HOST_API void* lantern__add_relu__attensor_attensor_constatscalar(void* self, void* other, void* alpha) { void* ret = _lantern__add_relu__attensor_attensor_constatscalar(self, other, alpha); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__add_relu_out_attensor_attensor_attensor_constatscalar)(void* out, void* self, void* other, void* alpha);
  HOST_API void* lantern__add_relu_out_attensor_attensor_attensor_constatscalar(void* out, void* self, void* other, void* alpha) { void* ret = _lantern__add_relu_out_attensor_attensor_attensor_constatscalar(out, self, other, alpha); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_add_attensor_constatscalar_constatscalar)(void* self, void* other, void* alpha);
  HOST_API void* lantern_add_attensor_constatscalar_constatscalar(void* self, void* other, void* alpha) { void* ret = _lantern_add_attensor_constatscalar_constatscalar(self, other, alpha); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_add_attensor_constatscalar_constatscalar)(void* self, void* other, void* alpha);
  HOST_API void* lantern_Tensor_add_attensor_constatscalar_constatscalar(void* self, void* other, void* alpha) { void* ret = _lantern_Tensor_add_attensor_constatscalar_constatscalar(self, other, alpha); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_add__attensor_constatscalar_constatscalar)(void* self, void* other, void* alpha);
  HOST_API void* lantern_Tensor_add__attensor_constatscalar_constatscalar(void* self, void* other, void* alpha) { void* ret = _lantern_Tensor_add__attensor_constatscalar_constatscalar(self, other, alpha); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_addmv_attensor_attensor_attensor_constatscalar_constatscalar)(void* self, void* mat, void* vec, void* beta, void* alpha);
  HOST_API void* lantern_addmv_attensor_attensor_attensor_constatscalar_constatscalar(void* self, void* mat, void* vec, void* beta, void* alpha) { void* ret = _lantern_addmv_attensor_attensor_attensor_constatscalar_constatscalar(self, mat, vec, beta, alpha); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_addmv_attensor_attensor_attensor_constatscalar_constatscalar)(void* self, void* mat, void* vec, void* beta, void* alpha);
  HOST_API void* lantern_Tensor_addmv_attensor_attensor_attensor_constatscalar_constatscalar(void* self, void* mat, void* vec, void* beta, void* alpha) { void* ret = _lantern_Tensor_addmv_attensor_attensor_attensor_constatscalar_constatscalar(self, mat, vec, beta, alpha); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_addmv__attensor_attensor_attensor_constatscalar_constatscalar)(void* self, void* mat, void* vec, void* beta, void* alpha);
  HOST_API void* lantern_addmv__attensor_attensor_attensor_constatscalar_constatscalar(void* self, void* mat, void* vec, void* beta, void* alpha) { void* ret = _lantern_addmv__attensor_attensor_attensor_constatscalar_constatscalar(self, mat, vec, beta, alpha); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_addmv__attensor_attensor_attensor_constatscalar_constatscalar)(void* self, void* mat, void* vec, void* beta, void* alpha);
  HOST_API void* lantern_Tensor_addmv__attensor_attensor_attensor_constatscalar_constatscalar(void* self, void* mat, void* vec, void* beta, void* alpha) { void* ret = _lantern_Tensor_addmv__attensor_attensor_attensor_constatscalar_constatscalar(self, mat, vec, beta, alpha); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_addmv_out_attensor_attensor_attensor_attensor_constatscalar_constatscalar)(void* out, void* self, void* mat, void* vec, void* beta, void* alpha);
  HOST_API void* lantern_addmv_out_attensor_attensor_attensor_attensor_constatscalar_constatscalar(void* out, void* self, void* mat, void* vec, void* beta, void* alpha) { void* ret = _lantern_addmv_out_attensor_attensor_attensor_attensor_constatscalar_constatscalar(out, self, mat, vec, beta, alpha); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_addr_attensor_attensor_attensor_constatscalar_constatscalar)(void* self, void* vec1, void* vec2, void* beta, void* alpha);
  HOST_API void* lantern_addr_attensor_attensor_attensor_constatscalar_constatscalar(void* self, void* vec1, void* vec2, void* beta, void* alpha) { void* ret = _lantern_addr_attensor_attensor_attensor_constatscalar_constatscalar(self, vec1, vec2, beta, alpha); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_addr_attensor_attensor_attensor_constatscalar_constatscalar)(void* self, void* vec1, void* vec2, void* beta, void* alpha);
  HOST_API void* lantern_Tensor_addr_attensor_attensor_attensor_constatscalar_constatscalar(void* self, void* vec1, void* vec2, void* beta, void* alpha) { void* ret = _lantern_Tensor_addr_attensor_attensor_attensor_constatscalar_constatscalar(self, vec1, vec2, beta, alpha); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_addr__attensor_attensor_attensor_constatscalar_constatscalar)(void* self, void* vec1, void* vec2, void* beta, void* alpha);
  HOST_API void* lantern_Tensor_addr__attensor_attensor_attensor_constatscalar_constatscalar(void* self, void* vec1, void* vec2, void* beta, void* alpha) { void* ret = _lantern_Tensor_addr__attensor_attensor_attensor_constatscalar_constatscalar(self, vec1, vec2, beta, alpha); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_addr_out_attensor_attensor_attensor_attensor_constatscalar_constatscalar)(void* out, void* self, void* vec1, void* vec2, void* beta, void* alpha);
  HOST_API void* lantern_addr_out_attensor_attensor_attensor_attensor_constatscalar_constatscalar(void* out, void* self, void* vec1, void* vec2, void* beta, void* alpha) { void* ret = _lantern_addr_out_attensor_attensor_attensor_attensor_constatscalar_constatscalar(out, self, vec1, vec2, beta, alpha); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_affine_grid_generator_attensor_atintarrayref_bool)(void* theta, void* size, void* align_corners);
  HOST_API void* lantern_affine_grid_generator_attensor_atintarrayref_bool(void* theta, void* size, void* align_corners) { void* ret = _lantern_affine_grid_generator_attensor_atintarrayref_bool(theta, size, align_corners); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_affine_grid_generator_backward_attensor_atintarrayref_bool)(void* grad, void* size, void* align_corners);
  HOST_API void* lantern_affine_grid_generator_backward_attensor_atintarrayref_bool(void* grad, void* size, void* align_corners) { void* ret = _lantern_affine_grid_generator_backward_attensor_atintarrayref_bool(grad, size, align_corners); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_all_attensor_intt_bool)(void* self, void* dim, void* keepdim);
  HOST_API void* lantern_all_attensor_intt_bool(void* self, void* dim, void* keepdim) { void* ret = _lantern_all_attensor_intt_bool(self, dim, keepdim); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_all_attensor_intt_bool)(void* self, void* dim, void* keepdim);
  HOST_API void* lantern_Tensor_all_attensor_intt_bool(void* self, void* dim, void* keepdim) { void* ret = _lantern_Tensor_all_attensor_intt_bool(self, dim, keepdim); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_all_out_attensor_attensor_intt_bool)(void* out, void* self, void* dim, void* keepdim);
  HOST_API void* lantern_all_out_attensor_attensor_intt_bool(void* out, void* self, void* dim, void* keepdim) { void* ret = _lantern_all_out_attensor_attensor_intt_bool(out, self, dim, keepdim); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_all_attensor_atdimname_bool)(void* self, void* dim, void* keepdim);
  HOST_API void* lantern_all_attensor_atdimname_bool(void* self, void* dim, void* keepdim) { void* ret = _lantern_all_attensor_atdimname_bool(self, dim, keepdim); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_all_attensor_atdimname_bool)(void* self, void* dim, void* keepdim);
  HOST_API void* lantern_Tensor_all_attensor_atdimname_bool(void* self, void* dim, void* keepdim) { void* ret = _lantern_Tensor_all_attensor_atdimname_bool(self, dim, keepdim); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_all_out_attensor_attensor_atdimname_bool)(void* out, void* self, void* dim, void* keepdim);
  HOST_API void* lantern_all_out_attensor_attensor_atdimname_bool(void* out, void* self, void* dim, void* keepdim) { void* ret = _lantern_all_out_attensor_attensor_atdimname_bool(out, self, dim, keepdim); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_allclose_attensor_attensor_double_double_bool)(void* self, void* other, void* rtol, void* atol, void* equal_nan);
  HOST_API void* lantern_allclose_attensor_attensor_double_double_bool(void* self, void* other, void* rtol, void* atol, void* equal_nan) { void* ret = _lantern_allclose_attensor_attensor_double_double_bool(self, other, rtol, atol, equal_nan); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_allclose_attensor_attensor_double_double_bool)(void* self, void* other, void* rtol, void* atol, void* equal_nan);
  HOST_API void* lantern_Tensor_allclose_attensor_attensor_double_double_bool(void* self, void* other, void* rtol, void* atol, void* equal_nan) { void* ret = _lantern_Tensor_allclose_attensor_attensor_double_double_bool(self, other, rtol, atol, equal_nan); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_any_attensor_intt_bool)(void* self, void* dim, void* keepdim);
  HOST_API void* lantern_any_attensor_intt_bool(void* self, void* dim, void* keepdim) { void* ret = _lantern_any_attensor_intt_bool(self, dim, keepdim); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_any_attensor_intt_bool)(void* self, void* dim, void* keepdim);
  HOST_API void* lantern_Tensor_any_attensor_intt_bool(void* self, void* dim, void* keepdim) { void* ret = _lantern_Tensor_any_attensor_intt_bool(self, dim, keepdim); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_any_out_attensor_attensor_intt_bool)(void* out, void* self, void* dim, void* keepdim);
  HOST_API void* lantern_any_out_attensor_attensor_intt_bool(void* out, void* self, void* dim, void* keepdim) { void* ret = _lantern_any_out_attensor_attensor_intt_bool(out, self, dim, keepdim); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_any_attensor_atdimname_bool)(void* self, void* dim, void* keepdim);
  HOST_API void* lantern_any_attensor_atdimname_bool(void* self, void* dim, void* keepdim) { void* ret = _lantern_any_attensor_atdimname_bool(self, dim, keepdim); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_any_attensor_atdimname_bool)(void* self, void* dim, void* keepdim);
  HOST_API void* lantern_Tensor_any_attensor_atdimname_bool(void* self, void* dim, void* keepdim) { void* ret = _lantern_Tensor_any_attensor_atdimname_bool(self, dim, keepdim); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_any_out_attensor_attensor_atdimname_bool)(void* out, void* self, void* dim, void* keepdim);
  HOST_API void* lantern_any_out_attensor_attensor_atdimname_bool(void* out, void* self, void* dim, void* keepdim) { void* ret = _lantern_any_out_attensor_attensor_atdimname_bool(out, self, dim, keepdim); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_arange_constatscalar_attensoroptions)(void* end, void* options);
  HOST_API void* lantern_arange_constatscalar_attensoroptions(void* end, void* options) { void* ret = _lantern_arange_constatscalar_attensoroptions(end, options); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_arange_constatscalar_constatscalar_attensoroptions)(void* start, void* end, void* options);
  HOST_API void* lantern_arange_constatscalar_constatscalar_attensoroptions(void* start, void* end, void* options) { void* ret = _lantern_arange_constatscalar_constatscalar_attensoroptions(start, end, options); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_arange_constatscalar_constatscalar_constatscalar_attensoroptions)(void* start, void* end, void* step, void* options);
  HOST_API void* lantern_arange_constatscalar_constatscalar_constatscalar_attensoroptions(void* start, void* end, void* step, void* options) { void* ret = _lantern_arange_constatscalar_constatscalar_constatscalar_attensoroptions(start, end, step, options); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_arange_out_attensor_constatscalar)(void* out, void* end);
  HOST_API void* lantern_arange_out_attensor_constatscalar(void* out, void* end) { void* ret = _lantern_arange_out_attensor_constatscalar(out, end); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_arange_out_attensor_constatscalar_constatscalar_constatscalar)(void* out, void* start, void* end, void* step);
  HOST_API void* lantern_arange_out_attensor_constatscalar_constatscalar_constatscalar(void* out, void* start, void* end, void* step) { void* ret = _lantern_arange_out_attensor_constatscalar_constatscalar_constatscalar(out, start, end, step); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__dim_arange_attensor_intt)(void* like, void* dim);
  HOST_API void* lantern__dim_arange_attensor_intt(void* like, void* dim) { void* ret = _lantern__dim_arange_attensor_intt(like, dim); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_argmax_attensor_intt_bool)(void* self, void* dim, void* keepdim);
  HOST_API void* lantern_argmax_attensor_intt_bool(void* self, void* dim, void* keepdim) { void* ret = _lantern_argmax_attensor_intt_bool(self, dim, keepdim); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_argmax_attensor_intt_bool)(void* self, void* dim, void* keepdim);
  HOST_API void* lantern_Tensor_argmax_attensor_intt_bool(void* self, void* dim, void* keepdim) { void* ret = _lantern_Tensor_argmax_attensor_intt_bool(self, dim, keepdim); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_argmax_out_attensor_attensor_intt_bool)(void* out, void* self, void* dim, void* keepdim);
  HOST_API void* lantern_argmax_out_attensor_attensor_intt_bool(void* out, void* self, void* dim, void* keepdim) { void* ret = _lantern_argmax_out_attensor_attensor_intt_bool(out, self, dim, keepdim); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_argmin_attensor_intt_bool)(void* self, void* dim, void* keepdim);
  HOST_API void* lantern_argmin_attensor_intt_bool(void* self, void* dim, void* keepdim) { void* ret = _lantern_argmin_attensor_intt_bool(self, dim, keepdim); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_argmin_attensor_intt_bool)(void* self, void* dim, void* keepdim);
  HOST_API void* lantern_Tensor_argmin_attensor_intt_bool(void* self, void* dim, void* keepdim) { void* ret = _lantern_Tensor_argmin_attensor_intt_bool(self, dim, keepdim); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_argmin_out_attensor_attensor_intt_bool)(void* out, void* self, void* dim, void* keepdim);
  HOST_API void* lantern_argmin_out_attensor_attensor_intt_bool(void* out, void* self, void* dim, void* keepdim) { void* ret = _lantern_argmin_out_attensor_attensor_intt_bool(out, self, dim, keepdim); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_acosh_attensor)(void* self);
  HOST_API void* lantern_acosh_attensor(void* self) { void* ret = _lantern_acosh_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_acosh_attensor)(void* self);
  HOST_API void* lantern_Tensor_acosh_attensor(void* self) { void* ret = _lantern_Tensor_acosh_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_acosh__attensor)(void* self);
  HOST_API void* lantern_acosh__attensor(void* self) { void* ret = _lantern_acosh__attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_acosh__attensor)(void* self);
  HOST_API void* lantern_Tensor_acosh__attensor(void* self) { void* ret = _lantern_Tensor_acosh__attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_acosh_out_attensor_attensor)(void* out, void* self);
  HOST_API void* lantern_acosh_out_attensor_attensor(void* out, void* self) { void* ret = _lantern_acosh_out_attensor_attensor(out, self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_arccosh_attensor)(void* self);
  HOST_API void* lantern_arccosh_attensor(void* self) { void* ret = _lantern_arccosh_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_arccosh_attensor)(void* self);
  HOST_API void* lantern_Tensor_arccosh_attensor(void* self) { void* ret = _lantern_Tensor_arccosh_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_arccosh__attensor)(void* self);
  HOST_API void* lantern_arccosh__attensor(void* self) { void* ret = _lantern_arccosh__attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_arccosh__attensor)(void* self);
  HOST_API void* lantern_Tensor_arccosh__attensor(void* self) { void* ret = _lantern_Tensor_arccosh__attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_arccosh_out_attensor_attensor)(void* out, void* self);
  HOST_API void* lantern_arccosh_out_attensor_attensor(void* out, void* self) { void* ret = _lantern_arccosh_out_attensor_attensor(out, self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_asinh_attensor)(void* self);
  HOST_API void* lantern_asinh_attensor(void* self) { void* ret = _lantern_asinh_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_asinh_attensor)(void* self);
  HOST_API void* lantern_Tensor_asinh_attensor(void* self) { void* ret = _lantern_Tensor_asinh_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_asinh__attensor)(void* self);
  HOST_API void* lantern_asinh__attensor(void* self) { void* ret = _lantern_asinh__attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_asinh__attensor)(void* self);
  HOST_API void* lantern_Tensor_asinh__attensor(void* self) { void* ret = _lantern_Tensor_asinh__attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_asinh_out_attensor_attensor)(void* out, void* self);
  HOST_API void* lantern_asinh_out_attensor_attensor(void* out, void* self) { void* ret = _lantern_asinh_out_attensor_attensor(out, self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_arcsinh_attensor)(void* self);
  HOST_API void* lantern_arcsinh_attensor(void* self) { void* ret = _lantern_arcsinh_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_arcsinh_attensor)(void* self);
  HOST_API void* lantern_Tensor_arcsinh_attensor(void* self) { void* ret = _lantern_Tensor_arcsinh_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_arcsinh__attensor)(void* self);
  HOST_API void* lantern_arcsinh__attensor(void* self) { void* ret = _lantern_arcsinh__attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_arcsinh__attensor)(void* self);
  HOST_API void* lantern_Tensor_arcsinh__attensor(void* self) { void* ret = _lantern_Tensor_arcsinh__attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_arcsinh_out_attensor_attensor)(void* out, void* self);
  HOST_API void* lantern_arcsinh_out_attensor_attensor(void* out, void* self) { void* ret = _lantern_arcsinh_out_attensor_attensor(out, self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_atanh_attensor)(void* self);
  HOST_API void* lantern_atanh_attensor(void* self) { void* ret = _lantern_atanh_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_atanh_attensor)(void* self);
  HOST_API void* lantern_Tensor_atanh_attensor(void* self) { void* ret = _lantern_Tensor_atanh_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_atanh__attensor)(void* self);
  HOST_API void* lantern_atanh__attensor(void* self) { void* ret = _lantern_atanh__attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_atanh__attensor)(void* self);
  HOST_API void* lantern_Tensor_atanh__attensor(void* self) { void* ret = _lantern_Tensor_atanh__attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_atanh_out_attensor_attensor)(void* out, void* self);
  HOST_API void* lantern_atanh_out_attensor_attensor(void* out, void* self) { void* ret = _lantern_atanh_out_attensor_attensor(out, self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_arctanh_attensor)(void* self);
  HOST_API void* lantern_arctanh_attensor(void* self) { void* ret = _lantern_arctanh_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_arctanh_attensor)(void* self);
  HOST_API void* lantern_Tensor_arctanh_attensor(void* self) { void* ret = _lantern_Tensor_arctanh_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_arctanh__attensor)(void* self);
  HOST_API void* lantern_arctanh__attensor(void* self) { void* ret = _lantern_arctanh__attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_arctanh__attensor)(void* self);
  HOST_API void* lantern_Tensor_arctanh__attensor(void* self) { void* ret = _lantern_Tensor_arctanh__attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_arctanh_out_attensor_attensor)(void* out, void* self);
  HOST_API void* lantern_arctanh_out_attensor_attensor(void* out, void* self) { void* ret = _lantern_arctanh_out_attensor_attensor(out, self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_as_strided_attensor_atintarrayref_atintarrayref_intt)(void* self, void* size, void* stride, void* storage_offset);
  HOST_API void* lantern_as_strided_attensor_atintarrayref_atintarrayref_intt(void* self, void* size, void* stride, void* storage_offset) { void* ret = _lantern_as_strided_attensor_atintarrayref_atintarrayref_intt(self, size, stride, storage_offset); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_as_strided_attensor_atintarrayref_atintarrayref_intt)(void* self, void* size, void* stride, void* storage_offset);
  HOST_API void* lantern_Tensor_as_strided_attensor_atintarrayref_atintarrayref_intt(void* self, void* size, void* stride, void* storage_offset) { void* ret = _lantern_Tensor_as_strided_attensor_atintarrayref_atintarrayref_intt(self, size, stride, storage_offset); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_as_strided__attensor_atintarrayref_atintarrayref_intt)(void* self, void* size, void* stride, void* storage_offset);
  HOST_API void* lantern_as_strided__attensor_atintarrayref_atintarrayref_intt(void* self, void* size, void* stride, void* storage_offset) { void* ret = _lantern_as_strided__attensor_atintarrayref_atintarrayref_intt(self, size, stride, storage_offset); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_as_strided__attensor_atintarrayref_atintarrayref_intt)(void* self, void* size, void* stride, void* storage_offset);
  HOST_API void* lantern_Tensor_as_strided__attensor_atintarrayref_atintarrayref_intt(void* self, void* size, void* stride, void* storage_offset) { void* ret = _lantern_Tensor_as_strided__attensor_atintarrayref_atintarrayref_intt(self, size, stride, storage_offset); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_asin_attensor)(void* self);
  HOST_API void* lantern_asin_attensor(void* self) { void* ret = _lantern_asin_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_asin_attensor)(void* self);
  HOST_API void* lantern_Tensor_asin_attensor(void* self) { void* ret = _lantern_Tensor_asin_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_asin__attensor)(void* self);
  HOST_API void* lantern_asin__attensor(void* self) { void* ret = _lantern_asin__attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_asin__attensor)(void* self);
  HOST_API void* lantern_Tensor_asin__attensor(void* self) { void* ret = _lantern_Tensor_asin__attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_asin_out_attensor_attensor)(void* out, void* self);
  HOST_API void* lantern_asin_out_attensor_attensor(void* out, void* self) { void* ret = _lantern_asin_out_attensor_attensor(out, self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_arcsin_attensor)(void* self);
  HOST_API void* lantern_arcsin_attensor(void* self) { void* ret = _lantern_arcsin_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_arcsin_attensor)(void* self);
  HOST_API void* lantern_Tensor_arcsin_attensor(void* self) { void* ret = _lantern_Tensor_arcsin_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_arcsin__attensor)(void* self);
  HOST_API void* lantern_arcsin__attensor(void* self) { void* ret = _lantern_arcsin__attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_arcsin__attensor)(void* self);
  HOST_API void* lantern_Tensor_arcsin__attensor(void* self) { void* ret = _lantern_Tensor_arcsin__attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_arcsin_out_attensor_attensor)(void* out, void* self);
  HOST_API void* lantern_arcsin_out_attensor_attensor(void* out, void* self) { void* ret = _lantern_arcsin_out_attensor_attensor(out, self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_atan_attensor)(void* self);
  HOST_API void* lantern_atan_attensor(void* self) { void* ret = _lantern_atan_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_atan_attensor)(void* self);
  HOST_API void* lantern_Tensor_atan_attensor(void* self) { void* ret = _lantern_Tensor_atan_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_atan__attensor)(void* self);
  HOST_API void* lantern_atan__attensor(void* self) { void* ret = _lantern_atan__attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_atan__attensor)(void* self);
  HOST_API void* lantern_Tensor_atan__attensor(void* self) { void* ret = _lantern_Tensor_atan__attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_atan_out_attensor_attensor)(void* out, void* self);
  HOST_API void* lantern_atan_out_attensor_attensor(void* out, void* self) { void* ret = _lantern_atan_out_attensor_attensor(out, self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_arctan_attensor)(void* self);
  HOST_API void* lantern_arctan_attensor(void* self) { void* ret = _lantern_arctan_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_arctan_attensor)(void* self);
  HOST_API void* lantern_Tensor_arctan_attensor(void* self) { void* ret = _lantern_Tensor_arctan_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_arctan__attensor)(void* self);
  HOST_API void* lantern_arctan__attensor(void* self) { void* ret = _lantern_arctan__attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_arctan__attensor)(void* self);
  HOST_API void* lantern_Tensor_arctan__attensor(void* self) { void* ret = _lantern_Tensor_arctan__attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_arctan_out_attensor_attensor)(void* out, void* self);
  HOST_API void* lantern_arctan_out_attensor_attensor(void* out, void* self) { void* ret = _lantern_arctan_out_attensor_attensor(out, self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_atleast_1d_attensor)(void* self);
  HOST_API void* lantern_atleast_1d_attensor(void* self) { void* ret = _lantern_atleast_1d_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_atleast_1d_attensorlist)(void* tensors);
  HOST_API void* lantern_atleast_1d_attensorlist(void* tensors) { void* ret = _lantern_atleast_1d_attensorlist(tensors); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_atleast_2d_attensor)(void* self);
  HOST_API void* lantern_atleast_2d_attensor(void* self) { void* ret = _lantern_atleast_2d_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_atleast_2d_attensorlist)(void* tensors);
  HOST_API void* lantern_atleast_2d_attensorlist(void* tensors) { void* ret = _lantern_atleast_2d_attensorlist(tensors); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_atleast_3d_attensor)(void* self);
  HOST_API void* lantern_atleast_3d_attensor(void* self) { void* ret = _lantern_atleast_3d_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_atleast_3d_attensorlist)(void* tensors);
  HOST_API void* lantern_atleast_3d_attensorlist(void* tensors) { void* ret = _lantern_atleast_3d_attensorlist(tensors); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_baddbmm_attensor_attensor_attensor_constatscalar_constatscalar)(void* self, void* batch1, void* batch2, void* beta, void* alpha);
  HOST_API void* lantern_baddbmm_attensor_attensor_attensor_constatscalar_constatscalar(void* self, void* batch1, void* batch2, void* beta, void* alpha) { void* ret = _lantern_baddbmm_attensor_attensor_attensor_constatscalar_constatscalar(self, batch1, batch2, beta, alpha); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_baddbmm_attensor_attensor_attensor_constatscalar_constatscalar)(void* self, void* batch1, void* batch2, void* beta, void* alpha);
  HOST_API void* lantern_Tensor_baddbmm_attensor_attensor_attensor_constatscalar_constatscalar(void* self, void* batch1, void* batch2, void* beta, void* alpha) { void* ret = _lantern_Tensor_baddbmm_attensor_attensor_attensor_constatscalar_constatscalar(self, batch1, batch2, beta, alpha); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_baddbmm__attensor_attensor_attensor_constatscalar_constatscalar)(void* self, void* batch1, void* batch2, void* beta, void* alpha);
  HOST_API void* lantern_Tensor_baddbmm__attensor_attensor_attensor_constatscalar_constatscalar(void* self, void* batch1, void* batch2, void* beta, void* alpha) { void* ret = _lantern_Tensor_baddbmm__attensor_attensor_attensor_constatscalar_constatscalar(self, batch1, batch2, beta, alpha); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__baddbmm_mkl__attensor_attensor_attensor_constatscalar_constatscalar)(void* self, void* batch1, void* batch2, void* beta, void* alpha);
  HOST_API void* lantern__baddbmm_mkl__attensor_attensor_attensor_constatscalar_constatscalar(void* self, void* batch1, void* batch2, void* beta, void* alpha) { void* ret = _lantern__baddbmm_mkl__attensor_attensor_attensor_constatscalar_constatscalar(self, batch1, batch2, beta, alpha); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_baddbmm_out_attensor_attensor_attensor_attensor_constatscalar_constatscalar)(void* out, void* self, void* batch1, void* batch2, void* beta, void* alpha);
  HOST_API void* lantern_baddbmm_out_attensor_attensor_attensor_attensor_constatscalar_constatscalar(void* out, void* self, void* batch1, void* batch2, void* beta, void* alpha) { void* ret = _lantern_baddbmm_out_attensor_attensor_attensor_attensor_constatscalar_constatscalar(out, self, batch1, batch2, beta, alpha); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_bartlett_window_intt_attensoroptions)(void* window_length, void* options);
  HOST_API void* lantern_bartlett_window_intt_attensoroptions(void* window_length, void* options) { void* ret = _lantern_bartlett_window_intt_attensoroptions(window_length, options); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_bartlett_window_intt_bool_attensoroptions)(void* window_length, void* periodic, void* options);
  HOST_API void* lantern_bartlett_window_intt_bool_attensoroptions(void* window_length, void* periodic, void* options) { void* ret = _lantern_bartlett_window_intt_bool_attensoroptions(window_length, periodic, options); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_batch_norm_attensor_attensor_attensor_attensor_attensor_bool_double_double_bool)(void* input, void* weight, void* bias, void* running_mean, void* running_var, void* training, void* momentum, void* eps, void* cudnn_enabled);
  HOST_API void* lantern_batch_norm_attensor_attensor_attensor_attensor_attensor_bool_double_double_bool(void* input, void* weight, void* bias, void* running_mean, void* running_var, void* training, void* momentum, void* eps, void* cudnn_enabled) { void* ret = _lantern_batch_norm_attensor_attensor_attensor_attensor_attensor_bool_double_double_bool(input, weight, bias, running_mean, running_var, training, momentum, eps, cudnn_enabled); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_quantized_batch_norm_attensor_attensor_attensor_attensor_attensor_double_double_intt)(void* input, void* weight, void* bias, void* mean, void* var, void* eps, void* output_scale, void* output_zero_point);
  HOST_API void* lantern_quantized_batch_norm_attensor_attensor_attensor_attensor_attensor_double_double_intt(void* input, void* weight, void* bias, void* mean, void* var, void* eps, void* output_scale, void* output_zero_point) { void* ret = _lantern_quantized_batch_norm_attensor_attensor_attensor_attensor_attensor_double_double_intt(input, weight, bias, mean, var, eps, output_scale, output_zero_point); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__batch_norm_impl_index_attensor_attensor_attensor_attensor_attensor_bool_double_double_bool)(void* input, void* weight, void* bias, void* running_mean, void* running_var, void* training, void* momentum, void* eps, void* cudnn_enabled);
  HOST_API void* lantern__batch_norm_impl_index_attensor_attensor_attensor_attensor_attensor_bool_double_double_bool(void* input, void* weight, void* bias, void* running_mean, void* running_var, void* training, void* momentum, void* eps, void* cudnn_enabled) { void* ret = _lantern__batch_norm_impl_index_attensor_attensor_attensor_attensor_attensor_bool_double_double_bool(input, weight, bias, running_mean, running_var, training, momentum, eps, cudnn_enabled); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__batch_norm_impl_index_backward_intt_attensor_attensor_attensor_attensor_attensor_attensor_attensor_bool_double_stdarraybool_attensor)(void* impl_index, void* input, void* grad_output, void* weight, void* running_mean, void* running_var, void* save_mean, void* save_var_transform, void* train, void* eps, void* output_mask, void* reservedSpace);
  HOST_API void* lantern__batch_norm_impl_index_backward_intt_attensor_attensor_attensor_attensor_attensor_attensor_attensor_bool_double_stdarraybool_attensor(void* impl_index, void* input, void* grad_output, void* weight, void* running_mean, void* running_var, void* save_mean, void* save_var_transform, void* train, void* eps, void* output_mask, void* reservedSpace) { void* ret = _lantern__batch_norm_impl_index_backward_intt_attensor_attensor_attensor_attensor_attensor_attensor_attensor_bool_double_stdarraybool_attensor(impl_index, input, grad_output, weight, running_mean, running_var, save_mean, save_var_transform, train, eps, output_mask, reservedSpace); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_bernoulli_attensor_atgenerator)(void* self, void* generator);
  HOST_API void* lantern_bernoulli_attensor_atgenerator(void* self, void* generator) { void* ret = _lantern_bernoulli_attensor_atgenerator(self, generator); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_bernoulli_attensor_atgenerator)(void* self, void* generator);
  HOST_API void* lantern_Tensor_bernoulli_attensor_atgenerator(void* self, void* generator) { void* ret = _lantern_Tensor_bernoulli_attensor_atgenerator(self, generator); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_bernoulli_out_attensor_attensor_atgenerator)(void* out, void* self, void* generator);
  HOST_API void* lantern_bernoulli_out_attensor_attensor_atgenerator(void* out, void* self, void* generator) { void* ret = _lantern_bernoulli_out_attensor_attensor_atgenerator(out, self, generator); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_bernoulli__attensor_attensor_atgenerator)(void* self, void* p, void* generator);
  HOST_API void* lantern_Tensor_bernoulli__attensor_attensor_atgenerator(void* self, void* p, void* generator) { void* ret = _lantern_Tensor_bernoulli__attensor_attensor_atgenerator(self, p, generator); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_bernoulli__attensor_double_atgenerator)(void* self, void* p, void* generator);
  HOST_API void* lantern_Tensor_bernoulli__attensor_double_atgenerator(void* self, void* p, void* generator) { void* ret = _lantern_Tensor_bernoulli__attensor_double_atgenerator(self, p, generator); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_bernoulli_attensor_double_atgenerator)(void* self, void* p, void* generator);
  HOST_API void* lantern_bernoulli_attensor_double_atgenerator(void* self, void* p, void* generator) { void* ret = _lantern_bernoulli_attensor_double_atgenerator(self, p, generator); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_bernoulli_attensor_double_atgenerator)(void* self, void* p, void* generator);
  HOST_API void* lantern_Tensor_bernoulli_attensor_double_atgenerator(void* self, void* p, void* generator) { void* ret = _lantern_Tensor_bernoulli_attensor_double_atgenerator(self, p, generator); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_bilinear_attensor_attensor_attensor_attensor)(void* input1, void* input2, void* weight, void* bias);
  HOST_API void* lantern_bilinear_attensor_attensor_attensor_attensor(void* input1, void* input2, void* weight, void* bias) { void* ret = _lantern_bilinear_attensor_attensor_attensor_attensor(input1, input2, weight, bias); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_binary_cross_entropy_attensor_attensor_attensor_intt)(void* self, void* target, void* weight, void* reduction);
  HOST_API void* lantern_binary_cross_entropy_attensor_attensor_attensor_intt(void* self, void* target, void* weight, void* reduction) { void* ret = _lantern_binary_cross_entropy_attensor_attensor_attensor_intt(self, target, weight, reduction); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_binary_cross_entropy_out_attensor_attensor_attensor_attensor_intt)(void* out, void* self, void* target, void* weight, void* reduction);
  HOST_API void* lantern_binary_cross_entropy_out_attensor_attensor_attensor_attensor_intt(void* out, void* self, void* target, void* weight, void* reduction) { void* ret = _lantern_binary_cross_entropy_out_attensor_attensor_attensor_attensor_intt(out, self, target, weight, reduction); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_binary_cross_entropy_backward_attensor_attensor_attensor_attensor_intt)(void* grad_output, void* self, void* target, void* weight, void* reduction);
  HOST_API void* lantern_binary_cross_entropy_backward_attensor_attensor_attensor_attensor_intt(void* grad_output, void* self, void* target, void* weight, void* reduction) { void* ret = _lantern_binary_cross_entropy_backward_attensor_attensor_attensor_attensor_intt(grad_output, self, target, weight, reduction); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_binary_cross_entropy_backward_out_attensor_attensor_attensor_attensor_attensor_intt)(void* grad_input, void* grad_output, void* self, void* target, void* weight, void* reduction);
  HOST_API void* lantern_binary_cross_entropy_backward_out_attensor_attensor_attensor_attensor_attensor_intt(void* grad_input, void* grad_output, void* self, void* target, void* weight, void* reduction) { void* ret = _lantern_binary_cross_entropy_backward_out_attensor_attensor_attensor_attensor_attensor_intt(grad_input, grad_output, self, target, weight, reduction); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_binary_cross_entropy_with_logits_attensor_attensor_attensor_attensor_intt)(void* self, void* target, void* weight, void* pos_weight, void* reduction);
  HOST_API void* lantern_binary_cross_entropy_with_logits_attensor_attensor_attensor_attensor_intt(void* self, void* target, void* weight, void* pos_weight, void* reduction) { void* ret = _lantern_binary_cross_entropy_with_logits_attensor_attensor_attensor_attensor_intt(self, target, weight, pos_weight, reduction); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_binary_cross_entropy_with_logits_backward_attensor_attensor_attensor_attensor_attensor_intt)(void* grad_output, void* self, void* target, void* weight, void* pos_weight, void* reduction);
  HOST_API void* lantern_binary_cross_entropy_with_logits_backward_attensor_attensor_attensor_attensor_attensor_intt(void* grad_output, void* self, void* target, void* weight, void* pos_weight, void* reduction) { void* ret = _lantern_binary_cross_entropy_with_logits_backward_attensor_attensor_attensor_attensor_attensor_intt(grad_output, self, target, weight, pos_weight, reduction); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_bincount_attensor_attensor_intt)(void* self, void* weights, void* minlength);
  HOST_API void* lantern_bincount_attensor_attensor_intt(void* self, void* weights, void* minlength) { void* ret = _lantern_bincount_attensor_attensor_intt(self, weights, minlength); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_bincount_attensor_attensor_intt)(void* self, void* weights, void* minlength);
  HOST_API void* lantern_Tensor_bincount_attensor_attensor_intt(void* self, void* weights, void* minlength) { void* ret = _lantern_Tensor_bincount_attensor_attensor_intt(self, weights, minlength); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_bitwise_not_attensor)(void* self);
  HOST_API void* lantern_bitwise_not_attensor(void* self) { void* ret = _lantern_bitwise_not_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_bitwise_not_attensor)(void* self);
  HOST_API void* lantern_Tensor_bitwise_not_attensor(void* self) { void* ret = _lantern_Tensor_bitwise_not_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_bitwise_not__attensor)(void* self);
  HOST_API void* lantern_Tensor_bitwise_not__attensor(void* self) { void* ret = _lantern_Tensor_bitwise_not__attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_bitwise_not_out_attensor_attensor)(void* out, void* self);
  HOST_API void* lantern_bitwise_not_out_attensor_attensor(void* out, void* self) { void* ret = _lantern_bitwise_not_out_attensor_attensor(out, self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_copysign_out_attensor_attensor_attensor)(void* out, void* self, void* other);
  HOST_API void* lantern_copysign_out_attensor_attensor_attensor(void* out, void* self, void* other) { void* ret = _lantern_copysign_out_attensor_attensor_attensor(out, self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_copysign_attensor_attensor)(void* self, void* other);
  HOST_API void* lantern_copysign_attensor_attensor(void* self, void* other) { void* ret = _lantern_copysign_attensor_attensor(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_copysign_attensor_attensor)(void* self, void* other);
  HOST_API void* lantern_Tensor_copysign_attensor_attensor(void* self, void* other) { void* ret = _lantern_Tensor_copysign_attensor_attensor(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_copysign__attensor_attensor)(void* self, void* other);
  HOST_API void* lantern_Tensor_copysign__attensor_attensor(void* self, void* other) { void* ret = _lantern_Tensor_copysign__attensor_attensor(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_copysign_attensor_constatscalar)(void* self, void* other);
  HOST_API void* lantern_copysign_attensor_constatscalar(void* self, void* other) { void* ret = _lantern_copysign_attensor_constatscalar(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_copysign_attensor_constatscalar)(void* self, void* other);
  HOST_API void* lantern_Tensor_copysign_attensor_constatscalar(void* self, void* other) { void* ret = _lantern_Tensor_copysign_attensor_constatscalar(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_copysign__attensor_constatscalar)(void* self, void* other);
  HOST_API void* lantern_Tensor_copysign__attensor_constatscalar(void* self, void* other) { void* ret = _lantern_Tensor_copysign__attensor_constatscalar(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_copysign_out_attensor_attensor_constatscalar)(void* out, void* self, void* other);
  HOST_API void* lantern_copysign_out_attensor_attensor_constatscalar(void* out, void* self, void* other) { void* ret = _lantern_copysign_out_attensor_attensor_constatscalar(out, self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_logical_not_attensor)(void* self);
  HOST_API void* lantern_logical_not_attensor(void* self) { void* ret = _lantern_logical_not_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_logical_not_attensor)(void* self);
  HOST_API void* lantern_Tensor_logical_not_attensor(void* self) { void* ret = _lantern_Tensor_logical_not_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_logical_not__attensor)(void* self);
  HOST_API void* lantern_Tensor_logical_not__attensor(void* self) { void* ret = _lantern_Tensor_logical_not__attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_logical_not_out_attensor_attensor)(void* out, void* self);
  HOST_API void* lantern_logical_not_out_attensor_attensor(void* out, void* self) { void* ret = _lantern_logical_not_out_attensor_attensor(out, self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_logical_xor_attensor_attensor)(void* self, void* other);
  HOST_API void* lantern_logical_xor_attensor_attensor(void* self, void* other) { void* ret = _lantern_logical_xor_attensor_attensor(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_logical_xor_attensor_attensor)(void* self, void* other);
  HOST_API void* lantern_Tensor_logical_xor_attensor_attensor(void* self, void* other) { void* ret = _lantern_Tensor_logical_xor_attensor_attensor(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_logical_xor__attensor_attensor)(void* self, void* other);
  HOST_API void* lantern_Tensor_logical_xor__attensor_attensor(void* self, void* other) { void* ret = _lantern_Tensor_logical_xor__attensor_attensor(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_logical_xor_out_attensor_attensor_attensor)(void* out, void* self, void* other);
  HOST_API void* lantern_logical_xor_out_attensor_attensor_attensor(void* out, void* self, void* other) { void* ret = _lantern_logical_xor_out_attensor_attensor_attensor(out, self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_logical_and_attensor_attensor)(void* self, void* other);
  HOST_API void* lantern_logical_and_attensor_attensor(void* self, void* other) { void* ret = _lantern_logical_and_attensor_attensor(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_logical_and_attensor_attensor)(void* self, void* other);
  HOST_API void* lantern_Tensor_logical_and_attensor_attensor(void* self, void* other) { void* ret = _lantern_Tensor_logical_and_attensor_attensor(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_logical_and__attensor_attensor)(void* self, void* other);
  HOST_API void* lantern_Tensor_logical_and__attensor_attensor(void* self, void* other) { void* ret = _lantern_Tensor_logical_and__attensor_attensor(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_logical_and_out_attensor_attensor_attensor)(void* out, void* self, void* other);
  HOST_API void* lantern_logical_and_out_attensor_attensor_attensor(void* out, void* self, void* other) { void* ret = _lantern_logical_and_out_attensor_attensor_attensor(out, self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_logical_or_attensor_attensor)(void* self, void* other);
  HOST_API void* lantern_logical_or_attensor_attensor(void* self, void* other) { void* ret = _lantern_logical_or_attensor_attensor(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_logical_or_attensor_attensor)(void* self, void* other);
  HOST_API void* lantern_Tensor_logical_or_attensor_attensor(void* self, void* other) { void* ret = _lantern_Tensor_logical_or_attensor_attensor(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_logical_or__attensor_attensor)(void* self, void* other);
  HOST_API void* lantern_Tensor_logical_or__attensor_attensor(void* self, void* other) { void* ret = _lantern_Tensor_logical_or__attensor_attensor(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_logical_or_out_attensor_attensor_attensor)(void* out, void* self, void* other);
  HOST_API void* lantern_logical_or_out_attensor_attensor_attensor(void* out, void* self, void* other) { void* ret = _lantern_logical_or_out_attensor_attensor_attensor(out, self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_blackman_window_intt_attensoroptions)(void* window_length, void* options);
  HOST_API void* lantern_blackman_window_intt_attensoroptions(void* window_length, void* options) { void* ret = _lantern_blackman_window_intt_attensoroptions(window_length, options); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_blackman_window_intt_bool_attensoroptions)(void* window_length, void* periodic, void* options);
  HOST_API void* lantern_blackman_window_intt_bool_attensoroptions(void* window_length, void* periodic, void* options) { void* ret = _lantern_blackman_window_intt_bool_attensoroptions(window_length, periodic, options); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_bmm_attensor_attensor)(void* self, void* mat2);
  HOST_API void* lantern_bmm_attensor_attensor(void* self, void* mat2) { void* ret = _lantern_bmm_attensor_attensor(self, mat2); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_bmm_attensor_attensor)(void* self, void* mat2);
  HOST_API void* lantern_Tensor_bmm_attensor_attensor(void* self, void* mat2) { void* ret = _lantern_Tensor_bmm_attensor_attensor(self, mat2); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__bmm_attensor_attensor_bool)(void* self, void* mat2, void* deterministic);
  HOST_API void* lantern__bmm_attensor_attensor_bool(void* self, void* mat2, void* deterministic) { void* ret = _lantern__bmm_attensor_attensor_bool(self, mat2, deterministic); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_bmm_out_attensor_attensor_attensor)(void* out, void* self, void* mat2);
  HOST_API void* lantern_bmm_out_attensor_attensor_attensor(void* out, void* self, void* mat2) { void* ret = _lantern_bmm_out_attensor_attensor_attensor(out, self, mat2); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__bmm_out_attensor_attensor_attensor_bool)(void* out, void* self, void* mat2, void* deterministic);
  HOST_API void* lantern__bmm_out_attensor_attensor_attensor_bool(void* out, void* self, void* mat2, void* deterministic) { void* ret = _lantern__bmm_out_attensor_attensor_attensor_bool(out, self, mat2, deterministic); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_broadcast_tensors_attensorlist)(void* tensors);
  HOST_API void* lantern_broadcast_tensors_attensorlist(void* tensors) { void* ret = _lantern_broadcast_tensors_attensorlist(tensors); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_broadcast_to_attensor_atintarrayref)(void* self, void* size);
  HOST_API void* lantern_broadcast_to_attensor_atintarrayref(void* self, void* size) { void* ret = _lantern_broadcast_to_attensor_atintarrayref(self, size); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_broadcast_to_attensor_atintarrayref)(void* self, void* size);
  HOST_API void* lantern_Tensor_broadcast_to_attensor_atintarrayref(void* self, void* size) { void* ret = _lantern_Tensor_broadcast_to_attensor_atintarrayref(self, size); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_cat_attensorlist_intt)(void* tensors, void* dim);
  HOST_API void* lantern_cat_attensorlist_intt(void* tensors, void* dim) { void* ret = _lantern_cat_attensorlist_intt(tensors, dim); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_cat_out_attensor_attensorlist_intt)(void* out, void* tensors, void* dim);
  HOST_API void* lantern_cat_out_attensor_attensorlist_intt(void* out, void* tensors, void* dim) { void* ret = _lantern_cat_out_attensor_attensorlist_intt(out, tensors, dim); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_cat_attensorlist_atdimname)(void* tensors, void* dim);
  HOST_API void* lantern_cat_attensorlist_atdimname(void* tensors, void* dim) { void* ret = _lantern_cat_attensorlist_atdimname(tensors, dim); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_cat_out_attensor_attensorlist_atdimname)(void* out, void* tensors, void* dim);
  HOST_API void* lantern_cat_out_attensor_attensorlist_atdimname(void* out, void* tensors, void* dim) { void* ret = _lantern_cat_out_attensor_attensorlist_atdimname(out, tensors, dim); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_block_diag_attensorlist)(void* tensors);
  HOST_API void* lantern_block_diag_attensorlist(void* tensors) { void* ret = _lantern_block_diag_attensorlist(tensors); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_ceil_attensor)(void* self);
  HOST_API void* lantern_ceil_attensor(void* self) { void* ret = _lantern_ceil_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_ceil_attensor)(void* self);
  HOST_API void* lantern_Tensor_ceil_attensor(void* self) { void* ret = _lantern_Tensor_ceil_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_ceil__attensor)(void* self);
  HOST_API void* lantern_ceil__attensor(void* self) { void* ret = _lantern_ceil__attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_ceil__attensor)(void* self);
  HOST_API void* lantern_Tensor_ceil__attensor(void* self) { void* ret = _lantern_Tensor_ceil__attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_ceil_out_attensor_attensor)(void* out, void* self);
  HOST_API void* lantern_ceil_out_attensor_attensor(void* out, void* self) { void* ret = _lantern_ceil_out_attensor_attensor(out, self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_chain_matmul_attensorlist)(void* matrices);
  HOST_API void* lantern_chain_matmul_attensorlist(void* matrices) { void* ret = _lantern_chain_matmul_attensorlist(matrices); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_chain_matmul_out_attensor_attensorlist)(void* out, void* matrices);
  HOST_API void* lantern_chain_matmul_out_attensor_attensorlist(void* out, void* matrices) { void* ret = _lantern_chain_matmul_out_attensor_attensorlist(out, matrices); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_unsafe_chunk_attensor_intt_intt)(void* self, void* chunks, void* dim);
  HOST_API void* lantern_unsafe_chunk_attensor_intt_intt(void* self, void* chunks, void* dim) { void* ret = _lantern_unsafe_chunk_attensor_intt_intt(self, chunks, dim); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_unsafe_chunk_attensor_intt_intt)(void* self, void* chunks, void* dim);
  HOST_API void* lantern_Tensor_unsafe_chunk_attensor_intt_intt(void* self, void* chunks, void* dim) { void* ret = _lantern_Tensor_unsafe_chunk_attensor_intt_intt(self, chunks, dim); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_chunk_attensor_intt_intt)(void* self, void* chunks, void* dim);
  HOST_API void* lantern_chunk_attensor_intt_intt(void* self, void* chunks, void* dim) { void* ret = _lantern_chunk_attensor_intt_intt(self, chunks, dim); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_chunk_attensor_intt_intt)(void* self, void* chunks, void* dim);
  HOST_API void* lantern_Tensor_chunk_attensor_intt_intt(void* self, void* chunks, void* dim) { void* ret = _lantern_Tensor_chunk_attensor_intt_intt(self, chunks, dim); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_tensor_split_attensor_intt_intt)(void* self, void* sections, void* dim);
  HOST_API void* lantern_tensor_split_attensor_intt_intt(void* self, void* sections, void* dim) { void* ret = _lantern_tensor_split_attensor_intt_intt(self, sections, dim); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_tensor_split_attensor_intt_intt)(void* self, void* sections, void* dim);
  HOST_API void* lantern_Tensor_tensor_split_attensor_intt_intt(void* self, void* sections, void* dim) { void* ret = _lantern_Tensor_tensor_split_attensor_intt_intt(self, sections, dim); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_tensor_split_attensor_atintarrayref_intt)(void* self, void* indices, void* dim);
  HOST_API void* lantern_tensor_split_attensor_atintarrayref_intt(void* self, void* indices, void* dim) { void* ret = _lantern_tensor_split_attensor_atintarrayref_intt(self, indices, dim); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_tensor_split_attensor_atintarrayref_intt)(void* self, void* indices, void* dim);
  HOST_API void* lantern_Tensor_tensor_split_attensor_atintarrayref_intt(void* self, void* indices, void* dim) { void* ret = _lantern_Tensor_tensor_split_attensor_atintarrayref_intt(self, indices, dim); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_tensor_split_attensor_attensor_intt)(void* self, void* tensor_indices_or_sections, void* dim);
  HOST_API void* lantern_tensor_split_attensor_attensor_intt(void* self, void* tensor_indices_or_sections, void* dim) { void* ret = _lantern_tensor_split_attensor_attensor_intt(self, tensor_indices_or_sections, dim); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_tensor_split_attensor_attensor_intt)(void* self, void* tensor_indices_or_sections, void* dim);
  HOST_API void* lantern_Tensor_tensor_split_attensor_attensor_intt(void* self, void* tensor_indices_or_sections, void* dim) { void* ret = _lantern_Tensor_tensor_split_attensor_attensor_intt(self, tensor_indices_or_sections, dim); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_clamp_attensor_constatscalar_constatscalar)(void* self, void* min, void* max);
  HOST_API void* lantern_clamp_attensor_constatscalar_constatscalar(void* self, void* min, void* max) { void* ret = _lantern_clamp_attensor_constatscalar_constatscalar(self, min, max); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_clamp_attensor_constatscalar_constatscalar)(void* self, void* min, void* max);
  HOST_API void* lantern_Tensor_clamp_attensor_constatscalar_constatscalar(void* self, void* min, void* max) { void* ret = _lantern_Tensor_clamp_attensor_constatscalar_constatscalar(self, min, max); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_clamp_attensor_attensor_attensor)(void* self, void* min, void* max);
  HOST_API void* lantern_clamp_attensor_attensor_attensor(void* self, void* min, void* max) { void* ret = _lantern_clamp_attensor_attensor_attensor(self, min, max); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_clamp_attensor_attensor_attensor)(void* self, void* min, void* max);
  HOST_API void* lantern_Tensor_clamp_attensor_attensor_attensor(void* self, void* min, void* max) { void* ret = _lantern_Tensor_clamp_attensor_attensor_attensor(self, min, max); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_clamp__attensor_constatscalar_constatscalar)(void* self, void* min, void* max);
  HOST_API void* lantern_clamp__attensor_constatscalar_constatscalar(void* self, void* min, void* max) { void* ret = _lantern_clamp__attensor_constatscalar_constatscalar(self, min, max); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_clamp__attensor_constatscalar_constatscalar)(void* self, void* min, void* max);
  HOST_API void* lantern_Tensor_clamp__attensor_constatscalar_constatscalar(void* self, void* min, void* max) { void* ret = _lantern_Tensor_clamp__attensor_constatscalar_constatscalar(self, min, max); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_clamp__attensor_attensor_attensor)(void* self, void* min, void* max);
  HOST_API void* lantern_clamp__attensor_attensor_attensor(void* self, void* min, void* max) { void* ret = _lantern_clamp__attensor_attensor_attensor(self, min, max); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_clamp__attensor_attensor_attensor)(void* self, void* min, void* max);
  HOST_API void* lantern_Tensor_clamp__attensor_attensor_attensor(void* self, void* min, void* max) { void* ret = _lantern_Tensor_clamp__attensor_attensor_attensor(self, min, max); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_clamp_out_attensor_attensor_constatscalar_constatscalar)(void* out, void* self, void* min, void* max);
  HOST_API void* lantern_clamp_out_attensor_attensor_constatscalar_constatscalar(void* out, void* self, void* min, void* max) { void* ret = _lantern_clamp_out_attensor_attensor_constatscalar_constatscalar(out, self, min, max); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_clamp_out_attensor_attensor_attensor_attensor)(void* out, void* self, void* min, void* max);
  HOST_API void* lantern_clamp_out_attensor_attensor_attensor_attensor(void* out, void* self, void* min, void* max) { void* ret = _lantern_clamp_out_attensor_attensor_attensor_attensor(out, self, min, max); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_clamp_max_attensor_constatscalar)(void* self, void* max);
  HOST_API void* lantern_clamp_max_attensor_constatscalar(void* self, void* max) { void* ret = _lantern_clamp_max_attensor_constatscalar(self, max); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_clamp_max_attensor_constatscalar)(void* self, void* max);
  HOST_API void* lantern_Tensor_clamp_max_attensor_constatscalar(void* self, void* max) { void* ret = _lantern_Tensor_clamp_max_attensor_constatscalar(self, max); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_clamp_max_attensor_attensor)(void* self, void* max);
  HOST_API void* lantern_clamp_max_attensor_attensor(void* self, void* max) { void* ret = _lantern_clamp_max_attensor_attensor(self, max); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_clamp_max_attensor_attensor)(void* self, void* max);
  HOST_API void* lantern_Tensor_clamp_max_attensor_attensor(void* self, void* max) { void* ret = _lantern_Tensor_clamp_max_attensor_attensor(self, max); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_clamp_max__attensor_constatscalar)(void* self, void* max);
  HOST_API void* lantern_clamp_max__attensor_constatscalar(void* self, void* max) { void* ret = _lantern_clamp_max__attensor_constatscalar(self, max); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_clamp_max__attensor_constatscalar)(void* self, void* max);
  HOST_API void* lantern_Tensor_clamp_max__attensor_constatscalar(void* self, void* max) { void* ret = _lantern_Tensor_clamp_max__attensor_constatscalar(self, max); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_clamp_max__attensor_attensor)(void* self, void* max);
  HOST_API void* lantern_clamp_max__attensor_attensor(void* self, void* max) { void* ret = _lantern_clamp_max__attensor_attensor(self, max); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_clamp_max__attensor_attensor)(void* self, void* max);
  HOST_API void* lantern_Tensor_clamp_max__attensor_attensor(void* self, void* max) { void* ret = _lantern_Tensor_clamp_max__attensor_attensor(self, max); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_clamp_max_out_attensor_attensor_constatscalar)(void* out, void* self, void* max);
  HOST_API void* lantern_clamp_max_out_attensor_attensor_constatscalar(void* out, void* self, void* max) { void* ret = _lantern_clamp_max_out_attensor_attensor_constatscalar(out, self, max); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_clamp_max_out_attensor_attensor_attensor)(void* out, void* self, void* max);
  HOST_API void* lantern_clamp_max_out_attensor_attensor_attensor(void* out, void* self, void* max) { void* ret = _lantern_clamp_max_out_attensor_attensor_attensor(out, self, max); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_clamp_min_attensor_constatscalar)(void* self, void* min);
  HOST_API void* lantern_clamp_min_attensor_constatscalar(void* self, void* min) { void* ret = _lantern_clamp_min_attensor_constatscalar(self, min); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_clamp_min_attensor_constatscalar)(void* self, void* min);
  HOST_API void* lantern_Tensor_clamp_min_attensor_constatscalar(void* self, void* min) { void* ret = _lantern_Tensor_clamp_min_attensor_constatscalar(self, min); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_clamp_min_attensor_attensor)(void* self, void* min);
  HOST_API void* lantern_clamp_min_attensor_attensor(void* self, void* min) { void* ret = _lantern_clamp_min_attensor_attensor(self, min); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_clamp_min_attensor_attensor)(void* self, void* min);
  HOST_API void* lantern_Tensor_clamp_min_attensor_attensor(void* self, void* min) { void* ret = _lantern_Tensor_clamp_min_attensor_attensor(self, min); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_clamp_min__attensor_constatscalar)(void* self, void* min);
  HOST_API void* lantern_clamp_min__attensor_constatscalar(void* self, void* min) { void* ret = _lantern_clamp_min__attensor_constatscalar(self, min); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_clamp_min__attensor_constatscalar)(void* self, void* min);
  HOST_API void* lantern_Tensor_clamp_min__attensor_constatscalar(void* self, void* min) { void* ret = _lantern_Tensor_clamp_min__attensor_constatscalar(self, min); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_clamp_min__attensor_attensor)(void* self, void* min);
  HOST_API void* lantern_clamp_min__attensor_attensor(void* self, void* min) { void* ret = _lantern_clamp_min__attensor_attensor(self, min); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_clamp_min__attensor_attensor)(void* self, void* min);
  HOST_API void* lantern_Tensor_clamp_min__attensor_attensor(void* self, void* min) { void* ret = _lantern_Tensor_clamp_min__attensor_attensor(self, min); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_clamp_min_out_attensor_attensor_constatscalar)(void* out, void* self, void* min);
  HOST_API void* lantern_clamp_min_out_attensor_attensor_constatscalar(void* out, void* self, void* min) { void* ret = _lantern_clamp_min_out_attensor_attensor_constatscalar(out, self, min); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_clamp_min_out_attensor_attensor_attensor)(void* out, void* self, void* min);
  HOST_API void* lantern_clamp_min_out_attensor_attensor_attensor(void* out, void* self, void* min) { void* ret = _lantern_clamp_min_out_attensor_attensor_attensor(out, self, min); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_clip_attensor_constatscalar_constatscalar)(void* self, void* min, void* max);
  HOST_API void* lantern_clip_attensor_constatscalar_constatscalar(void* self, void* min, void* max) { void* ret = _lantern_clip_attensor_constatscalar_constatscalar(self, min, max); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_clip_attensor_constatscalar_constatscalar)(void* self, void* min, void* max);
  HOST_API void* lantern_Tensor_clip_attensor_constatscalar_constatscalar(void* self, void* min, void* max) { void* ret = _lantern_Tensor_clip_attensor_constatscalar_constatscalar(self, min, max); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_clip_attensor_attensor_attensor)(void* self, void* min, void* max);
  HOST_API void* lantern_clip_attensor_attensor_attensor(void* self, void* min, void* max) { void* ret = _lantern_clip_attensor_attensor_attensor(self, min, max); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_clip_attensor_attensor_attensor)(void* self, void* min, void* max);
  HOST_API void* lantern_Tensor_clip_attensor_attensor_attensor(void* self, void* min, void* max) { void* ret = _lantern_Tensor_clip_attensor_attensor_attensor(self, min, max); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_clip__attensor_constatscalar_constatscalar)(void* self, void* min, void* max);
  HOST_API void* lantern_clip__attensor_constatscalar_constatscalar(void* self, void* min, void* max) { void* ret = _lantern_clip__attensor_constatscalar_constatscalar(self, min, max); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_clip__attensor_constatscalar_constatscalar)(void* self, void* min, void* max);
  HOST_API void* lantern_Tensor_clip__attensor_constatscalar_constatscalar(void* self, void* min, void* max) { void* ret = _lantern_Tensor_clip__attensor_constatscalar_constatscalar(self, min, max); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_clip__attensor_attensor_attensor)(void* self, void* min, void* max);
  HOST_API void* lantern_clip__attensor_attensor_attensor(void* self, void* min, void* max) { void* ret = _lantern_clip__attensor_attensor_attensor(self, min, max); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_clip__attensor_attensor_attensor)(void* self, void* min, void* max);
  HOST_API void* lantern_Tensor_clip__attensor_attensor_attensor(void* self, void* min, void* max) { void* ret = _lantern_Tensor_clip__attensor_attensor_attensor(self, min, max); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_clip_out_attensor_attensor_constatscalar_constatscalar)(void* out, void* self, void* min, void* max);
  HOST_API void* lantern_clip_out_attensor_attensor_constatscalar_constatscalar(void* out, void* self, void* min, void* max) { void* ret = _lantern_clip_out_attensor_attensor_constatscalar_constatscalar(out, self, min, max); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_clip_out_attensor_attensor_attensor_attensor)(void* out, void* self, void* min, void* max);
  HOST_API void* lantern_clip_out_attensor_attensor_attensor_attensor(void* out, void* self, void* min, void* max) { void* ret = _lantern_clip_out_attensor_attensor_attensor_attensor(out, self, min, max); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_cudnn_is_acceptable_attensor)(void* self);
  HOST_API void* lantern_cudnn_is_acceptable_attensor(void* self) { void* ret = _lantern_cudnn_is_acceptable_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_complex_attensor_attensor)(void* real, void* imag);
  HOST_API void* lantern_complex_attensor_attensor(void* real, void* imag) { void* ret = _lantern_complex_attensor_attensor(real, imag); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_complex_out_attensor_attensor_attensor)(void* out, void* real, void* imag);
  HOST_API void* lantern_complex_out_attensor_attensor_attensor(void* out, void* real, void* imag) { void* ret = _lantern_complex_out_attensor_attensor_attensor(out, real, imag); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_polar_attensor_attensor)(void* abs, void* angle);
  HOST_API void* lantern_polar_attensor_attensor(void* abs, void* angle) { void* ret = _lantern_polar_attensor_attensor(abs, angle); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_polar_out_attensor_attensor_attensor)(void* out, void* abs, void* angle);
  HOST_API void* lantern_polar_out_attensor_attensor_attensor(void* out, void* abs, void* angle) { void* ret = _lantern_polar_out_attensor_attensor_attensor(out, abs, angle); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_constant_pad_nd_attensor_atintarrayref_constatscalar)(void* self, void* pad, void* value);
  HOST_API void* lantern_constant_pad_nd_attensor_atintarrayref_constatscalar(void* self, void* pad, void* value) { void* ret = _lantern_constant_pad_nd_attensor_atintarrayref_constatscalar(self, pad, value); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_contiguous_attensor_atmemoryformat)(void* self, void* memory_format);
  HOST_API void* lantern_Tensor_contiguous_attensor_atmemoryformat(void* self, void* memory_format) { void* ret = _lantern_Tensor_contiguous_attensor_atmemoryformat(self, memory_format); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_convolution_attensor_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_bool_atintarrayref_intt)(void* input, void* weight, void* bias, void* stride, void* padding, void* dilation, void* transposed, void* output_padding, void* groups);
  HOST_API void* lantern_convolution_attensor_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_bool_atintarrayref_intt(void* input, void* weight, void* bias, void* stride, void* padding, void* dilation, void* transposed, void* output_padding, void* groups) { void* ret = _lantern_convolution_attensor_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_bool_atintarrayref_intt(input, weight, bias, stride, padding, dilation, transposed, output_padding, groups); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_convolution_overrideable_attensor_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_bool_atintarrayref_intt)(void* input, void* weight, void* bias, void* stride, void* padding, void* dilation, void* transposed, void* output_padding, void* groups);
  HOST_API void* lantern_convolution_overrideable_attensor_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_bool_atintarrayref_intt(void* input, void* weight, void* bias, void* stride, void* padding, void* dilation, void* transposed, void* output_padding, void* groups) { void* ret = _lantern_convolution_overrideable_attensor_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_bool_atintarrayref_intt(input, weight, bias, stride, padding, dilation, transposed, output_padding, groups); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_convolution_backward_overrideable_attensor_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_bool_atintarrayref_intt_stdarraybool)(void* grad_output, void* input, void* weight, void* stride, void* padding, void* dilation, void* transposed, void* output_padding, void* groups, void* output_mask);
  HOST_API void* lantern_convolution_backward_overrideable_attensor_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_bool_atintarrayref_intt_stdarraybool(void* grad_output, void* input, void* weight, void* stride, void* padding, void* dilation, void* transposed, void* output_padding, void* groups, void* output_mask) { void* ret = _lantern_convolution_backward_overrideable_attensor_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_bool_atintarrayref_intt_stdarraybool(grad_output, input, weight, stride, padding, dilation, transposed, output_padding, groups, output_mask); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__convolution_attensor_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_bool_atintarrayref_intt_bool_bool_bool_bool)(void* input, void* weight, void* bias, void* stride, void* padding, void* dilation, void* transposed, void* output_padding, void* groups, void* benchmark, void* deterministic, void* cudnn_enabled, void* allow_tf32);
  HOST_API void* lantern__convolution_attensor_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_bool_atintarrayref_intt_bool_bool_bool_bool(void* input, void* weight, void* bias, void* stride, void* padding, void* dilation, void* transposed, void* output_padding, void* groups, void* benchmark, void* deterministic, void* cudnn_enabled, void* allow_tf32) { void* ret = _lantern__convolution_attensor_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_bool_atintarrayref_intt_bool_bool_bool_bool(input, weight, bias, stride, padding, dilation, transposed, output_padding, groups, benchmark, deterministic, cudnn_enabled, allow_tf32); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__convolution_attensor_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_bool_atintarrayref_intt_bool_bool_bool)(void* input, void* weight, void* bias, void* stride, void* padding, void* dilation, void* transposed, void* output_padding, void* groups, void* benchmark, void* deterministic, void* cudnn_enabled);
  HOST_API void* lantern__convolution_attensor_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_bool_atintarrayref_intt_bool_bool_bool(void* input, void* weight, void* bias, void* stride, void* padding, void* dilation, void* transposed, void* output_padding, void* groups, void* benchmark, void* deterministic, void* cudnn_enabled) { void* ret = _lantern__convolution_attensor_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_bool_atintarrayref_intt_bool_bool_bool(input, weight, bias, stride, padding, dilation, transposed, output_padding, groups, benchmark, deterministic, cudnn_enabled); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__convolution_mode_attensor_attensor_attensor_atintarrayref_stdstring_atintarrayref_intt)(void* input, void* weight, void* bias, void* stride, void* padding, void* dilation, void* groups);
  HOST_API void* lantern__convolution_mode_attensor_attensor_attensor_atintarrayref_stdstring_atintarrayref_intt(void* input, void* weight, void* bias, void* stride, void* padding, void* dilation, void* groups) { void* ret = _lantern__convolution_mode_attensor_attensor_attensor_atintarrayref_stdstring_atintarrayref_intt(input, weight, bias, stride, padding, dilation, groups); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__convolution_nogroup_attensor_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_bool_atintarrayref)(void* input, void* weight, void* bias, void* stride, void* padding, void* dilation, void* transposed, void* output_padding);
  HOST_API void* lantern__convolution_nogroup_attensor_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_bool_atintarrayref(void* input, void* weight, void* bias, void* stride, void* padding, void* dilation, void* transposed, void* output_padding) { void* ret = _lantern__convolution_nogroup_attensor_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_bool_atintarrayref(input, weight, bias, stride, padding, dilation, transposed, output_padding); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__convolution_double_backward_attensor_attensor_attensor_attensor_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_bool_atintarrayref_intt_bool_bool_bool_bool_stdarraybool)(void* ggI, void* ggW, void* ggb, void* gO, void* weight, void* self, void* stride, void* padding, void* dilation, void* transposed, void* output_padding, void* groups, void* benchmark, void* deterministic, void* cudnn_enabled, void* allow_tf32, void* output_mask);
  HOST_API void* lantern__convolution_double_backward_attensor_attensor_attensor_attensor_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_bool_atintarrayref_intt_bool_bool_bool_bool_stdarraybool(void* ggI, void* ggW, void* ggb, void* gO, void* weight, void* self, void* stride, void* padding, void* dilation, void* transposed, void* output_padding, void* groups, void* benchmark, void* deterministic, void* cudnn_enabled, void* allow_tf32, void* output_mask) { void* ret = _lantern__convolution_double_backward_attensor_attensor_attensor_attensor_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_bool_atintarrayref_intt_bool_bool_bool_bool_stdarraybool(ggI, ggW, ggb, gO, weight, self, stride, padding, dilation, transposed, output_padding, groups, benchmark, deterministic, cudnn_enabled, allow_tf32, output_mask); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_conv1d_attensor_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_intt)(void* input, void* weight, void* bias, void* stride, void* padding, void* dilation, void* groups);
  HOST_API void* lantern_conv1d_attensor_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_intt(void* input, void* weight, void* bias, void* stride, void* padding, void* dilation, void* groups) { void* ret = _lantern_conv1d_attensor_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_intt(input, weight, bias, stride, padding, dilation, groups); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_conv2d_attensor_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_intt)(void* input, void* weight, void* bias, void* stride, void* padding, void* dilation, void* groups);
  HOST_API void* lantern_conv2d_attensor_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_intt(void* input, void* weight, void* bias, void* stride, void* padding, void* dilation, void* groups) { void* ret = _lantern_conv2d_attensor_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_intt(input, weight, bias, stride, padding, dilation, groups); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_conv3d_attensor_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_intt)(void* input, void* weight, void* bias, void* stride, void* padding, void* dilation, void* groups);
  HOST_API void* lantern_conv3d_attensor_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_intt(void* input, void* weight, void* bias, void* stride, void* padding, void* dilation, void* groups) { void* ret = _lantern_conv3d_attensor_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_intt(input, weight, bias, stride, padding, dilation, groups); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_conv1d_attensor_attensor_attensor_atintarrayref_stdstring_atintarrayref_intt)(void* input, void* weight, void* bias, void* stride, void* padding, void* dilation, void* groups);
  HOST_API void* lantern_conv1d_attensor_attensor_attensor_atintarrayref_stdstring_atintarrayref_intt(void* input, void* weight, void* bias, void* stride, void* padding, void* dilation, void* groups) { void* ret = _lantern_conv1d_attensor_attensor_attensor_atintarrayref_stdstring_atintarrayref_intt(input, weight, bias, stride, padding, dilation, groups); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_conv2d_attensor_attensor_attensor_atintarrayref_stdstring_atintarrayref_intt)(void* input, void* weight, void* bias, void* stride, void* padding, void* dilation, void* groups);
  HOST_API void* lantern_conv2d_attensor_attensor_attensor_atintarrayref_stdstring_atintarrayref_intt(void* input, void* weight, void* bias, void* stride, void* padding, void* dilation, void* groups) { void* ret = _lantern_conv2d_attensor_attensor_attensor_atintarrayref_stdstring_atintarrayref_intt(input, weight, bias, stride, padding, dilation, groups); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_conv3d_attensor_attensor_attensor_atintarrayref_stdstring_atintarrayref_intt)(void* input, void* weight, void* bias, void* stride, void* padding, void* dilation, void* groups);
  HOST_API void* lantern_conv3d_attensor_attensor_attensor_atintarrayref_stdstring_atintarrayref_intt(void* input, void* weight, void* bias, void* stride, void* padding, void* dilation, void* groups) { void* ret = _lantern_conv3d_attensor_attensor_attensor_atintarrayref_stdstring_atintarrayref_intt(input, weight, bias, stride, padding, dilation, groups); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_conv_tbc_attensor_attensor_attensor_intt)(void* self, void* weight, void* bias, void* pad);
  HOST_API void* lantern_conv_tbc_attensor_attensor_attensor_intt(void* self, void* weight, void* bias, void* pad) { void* ret = _lantern_conv_tbc_attensor_attensor_attensor_intt(self, weight, bias, pad); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_conv_tbc_backward_attensor_attensor_attensor_attensor_intt)(void* self, void* input, void* weight, void* bias, void* pad);
  HOST_API void* lantern_conv_tbc_backward_attensor_attensor_attensor_attensor_intt(void* self, void* input, void* weight, void* bias, void* pad) { void* ret = _lantern_conv_tbc_backward_attensor_attensor_attensor_attensor_intt(self, input, weight, bias, pad); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_conv_transpose1d_attensor_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_intt_atintarrayref)(void* input, void* weight, void* bias, void* stride, void* padding, void* output_padding, void* groups, void* dilation);
  HOST_API void* lantern_conv_transpose1d_attensor_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_intt_atintarrayref(void* input, void* weight, void* bias, void* stride, void* padding, void* output_padding, void* groups, void* dilation) { void* ret = _lantern_conv_transpose1d_attensor_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_intt_atintarrayref(input, weight, bias, stride, padding, output_padding, groups, dilation); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_conv_transpose2d_attensor_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_intt_atintarrayref)(void* input, void* weight, void* bias, void* stride, void* padding, void* output_padding, void* groups, void* dilation);
  HOST_API void* lantern_conv_transpose2d_attensor_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_intt_atintarrayref(void* input, void* weight, void* bias, void* stride, void* padding, void* output_padding, void* groups, void* dilation) { void* ret = _lantern_conv_transpose2d_attensor_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_intt_atintarrayref(input, weight, bias, stride, padding, output_padding, groups, dilation); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_conv_transpose3d_attensor_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_intt_atintarrayref)(void* input, void* weight, void* bias, void* stride, void* padding, void* output_padding, void* groups, void* dilation);
  HOST_API void* lantern_conv_transpose3d_attensor_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_intt_atintarrayref(void* input, void* weight, void* bias, void* stride, void* padding, void* output_padding, void* groups, void* dilation) { void* ret = _lantern_conv_transpose3d_attensor_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_intt_atintarrayref(input, weight, bias, stride, padding, output_padding, groups, dilation); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_copy__attensor_attensor_bool)(void* self, void* src, void* non_blocking);
  HOST_API void* lantern_Tensor_copy__attensor_attensor_bool(void* self, void* src, void* non_blocking) { void* ret = _lantern_Tensor_copy__attensor_attensor_bool(self, src, non_blocking); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__copy_from_attensor_attensor_bool)(void* self, void* dst, void* non_blocking);
  HOST_API void* lantern__copy_from_attensor_attensor_bool(void* self, void* dst, void* non_blocking) { void* ret = _lantern__copy_from_attensor_attensor_bool(self, dst, non_blocking); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_cos_attensor)(void* self);
  HOST_API void* lantern_cos_attensor(void* self) { void* ret = _lantern_cos_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_cos_attensor)(void* self);
  HOST_API void* lantern_Tensor_cos_attensor(void* self) { void* ret = _lantern_Tensor_cos_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_cos__attensor)(void* self);
  HOST_API void* lantern_cos__attensor(void* self) { void* ret = _lantern_cos__attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_cos__attensor)(void* self);
  HOST_API void* lantern_Tensor_cos__attensor(void* self) { void* ret = _lantern_Tensor_cos__attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_cos_out_attensor_attensor)(void* out, void* self);
  HOST_API void* lantern_cos_out_attensor_attensor(void* out, void* self) { void* ret = _lantern_cos_out_attensor_attensor(out, self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_cosh_attensor)(void* self);
  HOST_API void* lantern_cosh_attensor(void* self) { void* ret = _lantern_cosh_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_cosh_attensor)(void* self);
  HOST_API void* lantern_Tensor_cosh_attensor(void* self) { void* ret = _lantern_Tensor_cosh_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_cosh__attensor)(void* self);
  HOST_API void* lantern_cosh__attensor(void* self) { void* ret = _lantern_cosh__attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_cosh__attensor)(void* self);
  HOST_API void* lantern_Tensor_cosh__attensor(void* self) { void* ret = _lantern_Tensor_cosh__attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_cosh_out_attensor_attensor)(void* out, void* self);
  HOST_API void* lantern_cosh_out_attensor_attensor(void* out, void* self) { void* ret = _lantern_cosh_out_attensor_attensor(out, self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_cosine_embedding_loss_attensor_attensor_attensor_double_intt)(void* input1, void* input2, void* target, void* margin, void* reduction);
  HOST_API void* lantern_cosine_embedding_loss_attensor_attensor_attensor_double_intt(void* input1, void* input2, void* target, void* margin, void* reduction) { void* ret = _lantern_cosine_embedding_loss_attensor_attensor_attensor_double_intt(input1, input2, target, margin, reduction); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_count_nonzero_attensor_atintarrayref)(void* self, void* dim);
  HOST_API void* lantern_count_nonzero_attensor_atintarrayref(void* self, void* dim) { void* ret = _lantern_count_nonzero_attensor_atintarrayref(self, dim); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_count_nonzero_attensor_atintarrayref)(void* self, void* dim);
  HOST_API void* lantern_Tensor_count_nonzero_attensor_atintarrayref(void* self, void* dim) { void* ret = _lantern_Tensor_count_nonzero_attensor_atintarrayref(self, dim); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_count_nonzero_attensor_intt)(void* self, void* dim);
  HOST_API void* lantern_count_nonzero_attensor_intt(void* self, void* dim) { void* ret = _lantern_count_nonzero_attensor_intt(self, dim); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_count_nonzero_attensor_intt)(void* self, void* dim);
  HOST_API void* lantern_Tensor_count_nonzero_attensor_intt(void* self, void* dim) { void* ret = _lantern_Tensor_count_nonzero_attensor_intt(self, dim); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_cudnn_affine_grid_generator_attensor_intt_intt_intt_intt)(void* theta, void* N, void* C, void* H, void* W);
  HOST_API void* lantern_cudnn_affine_grid_generator_attensor_intt_intt_intt_intt(void* theta, void* N, void* C, void* H, void* W) { void* ret = _lantern_cudnn_affine_grid_generator_attensor_intt_intt_intt_intt(theta, N, C, H, W); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_cudnn_affine_grid_generator_backward_attensor_intt_intt_intt_intt)(void* grad, void* N, void* C, void* H, void* W);
  HOST_API void* lantern_cudnn_affine_grid_generator_backward_attensor_intt_intt_intt_intt(void* grad, void* N, void* C, void* H, void* W) { void* ret = _lantern_cudnn_affine_grid_generator_backward_attensor_intt_intt_intt_intt(grad, N, C, H, W); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_cudnn_batch_norm_attensor_attensor_attensor_attensor_attensor_bool_double_double)(void* input, void* weight, void* bias, void* running_mean, void* running_var, void* training, void* exponential_average_factor, void* epsilon);
  HOST_API void* lantern_cudnn_batch_norm_attensor_attensor_attensor_attensor_attensor_bool_double_double(void* input, void* weight, void* bias, void* running_mean, void* running_var, void* training, void* exponential_average_factor, void* epsilon) { void* ret = _lantern_cudnn_batch_norm_attensor_attensor_attensor_attensor_attensor_bool_double_double(input, weight, bias, running_mean, running_var, training, exponential_average_factor, epsilon); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_cudnn_batch_norm_backward_attensor_attensor_attensor_attensor_attensor_attensor_attensor_double_attensor)(void* input, void* grad_output, void* weight, void* running_mean, void* running_var, void* save_mean, void* save_var, void* epsilon, void* reserveSpace);
  HOST_API void* lantern_cudnn_batch_norm_backward_attensor_attensor_attensor_attensor_attensor_attensor_attensor_double_attensor(void* input, void* grad_output, void* weight, void* running_mean, void* running_var, void* save_mean, void* save_var, void* epsilon, void* reserveSpace) { void* ret = _lantern_cudnn_batch_norm_backward_attensor_attensor_attensor_attensor_attensor_attensor_attensor_double_attensor(input, grad_output, weight, running_mean, running_var, save_mean, save_var, epsilon, reserveSpace); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_cudnn_convolution_attensor_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_intt_bool_bool)(void* self, void* weight, void* bias, void* padding, void* stride, void* dilation, void* groups, void* benchmark, void* deterministic);
  HOST_API void* lantern_cudnn_convolution_attensor_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_intt_bool_bool(void* self, void* weight, void* bias, void* padding, void* stride, void* dilation, void* groups, void* benchmark, void* deterministic) { void* ret = _lantern_cudnn_convolution_attensor_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_intt_bool_bool(self, weight, bias, padding, stride, dilation, groups, benchmark, deterministic); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_cudnn_convolution_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_intt_bool_bool)(void* self, void* weight, void* padding, void* stride, void* dilation, void* groups, void* benchmark, void* deterministic);
  HOST_API void* lantern_cudnn_convolution_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_intt_bool_bool(void* self, void* weight, void* padding, void* stride, void* dilation, void* groups, void* benchmark, void* deterministic) { void* ret = _lantern_cudnn_convolution_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_intt_bool_bool(self, weight, padding, stride, dilation, groups, benchmark, deterministic); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_cudnn_convolution_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_intt_bool_bool_bool)(void* self, void* weight, void* padding, void* stride, void* dilation, void* groups, void* benchmark, void* deterministic, void* allow_tf32);
  HOST_API void* lantern_cudnn_convolution_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_intt_bool_bool_bool(void* self, void* weight, void* padding, void* stride, void* dilation, void* groups, void* benchmark, void* deterministic, void* allow_tf32) { void* ret = _lantern_cudnn_convolution_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_intt_bool_bool_bool(self, weight, padding, stride, dilation, groups, benchmark, deterministic, allow_tf32); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_cudnn_convolution_backward_input_atintarrayref_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_intt_bool_bool_bool)(void* self_size, void* grad_output, void* weight, void* padding, void* stride, void* dilation, void* groups, void* benchmark, void* deterministic, void* allow_tf32);
  HOST_API void* lantern_cudnn_convolution_backward_input_atintarrayref_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_intt_bool_bool_bool(void* self_size, void* grad_output, void* weight, void* padding, void* stride, void* dilation, void* groups, void* benchmark, void* deterministic, void* allow_tf32) { void* ret = _lantern_cudnn_convolution_backward_input_atintarrayref_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_intt_bool_bool_bool(self_size, grad_output, weight, padding, stride, dilation, groups, benchmark, deterministic, allow_tf32); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_cudnn_convolution_backward_attensor_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_intt_bool_bool_bool_stdarraybool)(void* self, void* grad_output, void* weight, void* padding, void* stride, void* dilation, void* groups, void* benchmark, void* deterministic, void* allow_tf32, void* output_mask);
  HOST_API void* lantern_cudnn_convolution_backward_attensor_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_intt_bool_bool_bool_stdarraybool(void* self, void* grad_output, void* weight, void* padding, void* stride, void* dilation, void* groups, void* benchmark, void* deterministic, void* allow_tf32, void* output_mask) { void* ret = _lantern_cudnn_convolution_backward_attensor_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_intt_bool_bool_bool_stdarraybool(self, grad_output, weight, padding, stride, dilation, groups, benchmark, deterministic, allow_tf32, output_mask); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_cudnn_convolution_backward_weight_atintarrayref_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_intt_bool_bool_bool)(void* weight_size, void* grad_output, void* self, void* padding, void* stride, void* dilation, void* groups, void* benchmark, void* deterministic, void* allow_tf32);
  HOST_API void* lantern_cudnn_convolution_backward_weight_atintarrayref_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_intt_bool_bool_bool(void* weight_size, void* grad_output, void* self, void* padding, void* stride, void* dilation, void* groups, void* benchmark, void* deterministic, void* allow_tf32) { void* ret = _lantern_cudnn_convolution_backward_weight_atintarrayref_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_intt_bool_bool_bool(weight_size, grad_output, self, padding, stride, dilation, groups, benchmark, deterministic, allow_tf32); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_cudnn_convolution_transpose_attensor_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_atintarrayref_intt_bool_bool)(void* self, void* weight, void* bias, void* padding, void* output_padding, void* stride, void* dilation, void* groups, void* benchmark, void* deterministic);
  HOST_API void* lantern_cudnn_convolution_transpose_attensor_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_atintarrayref_intt_bool_bool(void* self, void* weight, void* bias, void* padding, void* output_padding, void* stride, void* dilation, void* groups, void* benchmark, void* deterministic) { void* ret = _lantern_cudnn_convolution_transpose_attensor_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_atintarrayref_intt_bool_bool(self, weight, bias, padding, output_padding, stride, dilation, groups, benchmark, deterministic); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_cudnn_convolution_transpose_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_atintarrayref_intt_bool_bool)(void* self, void* weight, void* padding, void* output_padding, void* stride, void* dilation, void* groups, void* benchmark, void* deterministic);
  HOST_API void* lantern_cudnn_convolution_transpose_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_atintarrayref_intt_bool_bool(void* self, void* weight, void* padding, void* output_padding, void* stride, void* dilation, void* groups, void* benchmark, void* deterministic) { void* ret = _lantern_cudnn_convolution_transpose_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_atintarrayref_intt_bool_bool(self, weight, padding, output_padding, stride, dilation, groups, benchmark, deterministic); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_cudnn_convolution_transpose_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_atintarrayref_intt_bool_bool_bool)(void* self, void* weight, void* padding, void* output_padding, void* stride, void* dilation, void* groups, void* benchmark, void* deterministic, void* allow_tf32);
  HOST_API void* lantern_cudnn_convolution_transpose_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_atintarrayref_intt_bool_bool_bool(void* self, void* weight, void* padding, void* output_padding, void* stride, void* dilation, void* groups, void* benchmark, void* deterministic, void* allow_tf32) { void* ret = _lantern_cudnn_convolution_transpose_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_atintarrayref_intt_bool_bool_bool(self, weight, padding, output_padding, stride, dilation, groups, benchmark, deterministic, allow_tf32); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_cudnn_convolution_transpose_backward_attensor_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_atintarrayref_intt_bool_bool_bool_stdarraybool)(void* self, void* grad_output, void* weight, void* padding, void* output_padding, void* stride, void* dilation, void* groups, void* benchmark, void* deterministic, void* allow_tf32, void* output_mask);
  HOST_API void* lantern_cudnn_convolution_transpose_backward_attensor_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_atintarrayref_intt_bool_bool_bool_stdarraybool(void* self, void* grad_output, void* weight, void* padding, void* output_padding, void* stride, void* dilation, void* groups, void* benchmark, void* deterministic, void* allow_tf32, void* output_mask) { void* ret = _lantern_cudnn_convolution_transpose_backward_attensor_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_atintarrayref_intt_bool_bool_bool_stdarraybool(self, grad_output, weight, padding, output_padding, stride, dilation, groups, benchmark, deterministic, allow_tf32, output_mask); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_cudnn_convolution_transpose_backward_input_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_intt_bool_bool_bool)(void* grad_output, void* weight, void* padding, void* stride, void* dilation, void* groups, void* benchmark, void* deterministic, void* allow_tf32);
  HOST_API void* lantern_cudnn_convolution_transpose_backward_input_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_intt_bool_bool_bool(void* grad_output, void* weight, void* padding, void* stride, void* dilation, void* groups, void* benchmark, void* deterministic, void* allow_tf32) { void* ret = _lantern_cudnn_convolution_transpose_backward_input_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_intt_bool_bool_bool(grad_output, weight, padding, stride, dilation, groups, benchmark, deterministic, allow_tf32); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_cudnn_convolution_transpose_backward_weight_atintarrayref_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_intt_bool_bool_bool)(void* weight_size, void* grad_output, void* self, void* padding, void* stride, void* dilation, void* groups, void* benchmark, void* deterministic, void* allow_tf32);
  HOST_API void* lantern_cudnn_convolution_transpose_backward_weight_atintarrayref_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_intt_bool_bool_bool(void* weight_size, void* grad_output, void* self, void* padding, void* stride, void* dilation, void* groups, void* benchmark, void* deterministic, void* allow_tf32) { void* ret = _lantern_cudnn_convolution_transpose_backward_weight_atintarrayref_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_intt_bool_bool_bool(weight_size, grad_output, self, padding, stride, dilation, groups, benchmark, deterministic, allow_tf32); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_cudnn_convolution_relu_attensor_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_intt)(void* self, void* weight, void* bias, void* stride, void* padding, void* dilation, void* groups);
  HOST_API void* lantern_cudnn_convolution_relu_attensor_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_intt(void* self, void* weight, void* bias, void* stride, void* padding, void* dilation, void* groups) { void* ret = _lantern_cudnn_convolution_relu_attensor_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_intt(self, weight, bias, stride, padding, dilation, groups); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_cudnn_convolution_add_relu_attensor_attensor_attensor_constatscalar_attensor_atintarrayref_atintarrayref_atintarrayref_intt)(void* self, void* weight, void* z, void* alpha, void* bias, void* stride, void* padding, void* dilation, void* groups);
  HOST_API void* lantern_cudnn_convolution_add_relu_attensor_attensor_attensor_constatscalar_attensor_atintarrayref_atintarrayref_atintarrayref_intt(void* self, void* weight, void* z, void* alpha, void* bias, void* stride, void* padding, void* dilation, void* groups) { void* ret = _lantern_cudnn_convolution_add_relu_attensor_attensor_attensor_constatscalar_attensor_atintarrayref_atintarrayref_atintarrayref_intt(self, weight, z, alpha, bias, stride, padding, dilation, groups); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_cudnn_grid_sampler_attensor_attensor)(void* self, void* grid);
  HOST_API void* lantern_cudnn_grid_sampler_attensor_attensor(void* self, void* grid) { void* ret = _lantern_cudnn_grid_sampler_attensor_attensor(self, grid); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_cudnn_grid_sampler_backward_attensor_attensor_attensor)(void* self, void* grid, void* grad_output);
  HOST_API void* lantern_cudnn_grid_sampler_backward_attensor_attensor_attensor(void* self, void* grid, void* grad_output) { void* ret = _lantern_cudnn_grid_sampler_backward_attensor_attensor_attensor(self, grid, grad_output); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_cummax_attensor_intt)(void* self, void* dim);
  HOST_API void* lantern_cummax_attensor_intt(void* self, void* dim) { void* ret = _lantern_cummax_attensor_intt(self, dim); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_cummax_attensor_intt)(void* self, void* dim);
  HOST_API void* lantern_Tensor_cummax_attensor_intt(void* self, void* dim) { void* ret = _lantern_Tensor_cummax_attensor_intt(self, dim); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_cummax_out_attensor_attensor_attensor_intt)(void* values, void* indices, void* self, void* dim);
  HOST_API void* lantern_cummax_out_attensor_attensor_attensor_intt(void* values, void* indices, void* self, void* dim) { void* ret = _lantern_cummax_out_attensor_attensor_attensor_intt(values, indices, self, dim); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_cummax_attensor_atdimname)(void* self, void* dim);
  HOST_API void* lantern_cummax_attensor_atdimname(void* self, void* dim) { void* ret = _lantern_cummax_attensor_atdimname(self, dim); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_cummax_attensor_atdimname)(void* self, void* dim);
  HOST_API void* lantern_Tensor_cummax_attensor_atdimname(void* self, void* dim) { void* ret = _lantern_Tensor_cummax_attensor_atdimname(self, dim); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_cummax_out_attensor_attensor_attensor_atdimname)(void* values, void* indices, void* self, void* dim);
  HOST_API void* lantern_cummax_out_attensor_attensor_attensor_atdimname(void* values, void* indices, void* self, void* dim) { void* ret = _lantern_cummax_out_attensor_attensor_attensor_atdimname(values, indices, self, dim); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__cummax_helper_attensor_attensor_attensor_intt)(void* self, void* values, void* indices, void* dim);
  HOST_API void* lantern__cummax_helper_attensor_attensor_attensor_intt(void* self, void* values, void* indices, void* dim) { void* ret = _lantern__cummax_helper_attensor_attensor_attensor_intt(self, values, indices, dim); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_cummin_attensor_intt)(void* self, void* dim);
  HOST_API void* lantern_cummin_attensor_intt(void* self, void* dim) { void* ret = _lantern_cummin_attensor_intt(self, dim); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_cummin_attensor_intt)(void* self, void* dim);
  HOST_API void* lantern_Tensor_cummin_attensor_intt(void* self, void* dim) { void* ret = _lantern_Tensor_cummin_attensor_intt(self, dim); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_cummin_out_attensor_attensor_attensor_intt)(void* values, void* indices, void* self, void* dim);
  HOST_API void* lantern_cummin_out_attensor_attensor_attensor_intt(void* values, void* indices, void* self, void* dim) { void* ret = _lantern_cummin_out_attensor_attensor_attensor_intt(values, indices, self, dim); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_cummin_attensor_atdimname)(void* self, void* dim);
  HOST_API void* lantern_cummin_attensor_atdimname(void* self, void* dim) { void* ret = _lantern_cummin_attensor_atdimname(self, dim); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_cummin_attensor_atdimname)(void* self, void* dim);
  HOST_API void* lantern_Tensor_cummin_attensor_atdimname(void* self, void* dim) { void* ret = _lantern_Tensor_cummin_attensor_atdimname(self, dim); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_cummin_out_attensor_attensor_attensor_atdimname)(void* values, void* indices, void* self, void* dim);
  HOST_API void* lantern_cummin_out_attensor_attensor_attensor_atdimname(void* values, void* indices, void* self, void* dim) { void* ret = _lantern_cummin_out_attensor_attensor_attensor_atdimname(values, indices, self, dim); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__cummin_helper_attensor_attensor_attensor_intt)(void* self, void* values, void* indices, void* dim);
  HOST_API void* lantern__cummin_helper_attensor_attensor_attensor_intt(void* self, void* values, void* indices, void* dim) { void* ret = _lantern__cummin_helper_attensor_attensor_attensor_intt(self, values, indices, dim); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_cummaxmin_backward_attensor_attensor_attensor_intt)(void* grad, void* input, void* indices, void* dim);
  HOST_API void* lantern_cummaxmin_backward_attensor_attensor_attensor_intt(void* grad, void* input, void* indices, void* dim) { void* ret = _lantern_cummaxmin_backward_attensor_attensor_attensor_intt(grad, input, indices, dim); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_cumprod_attensor_intt_atscalartype)(void* self, void* dim, void* dtype);
  HOST_API void* lantern_cumprod_attensor_intt_atscalartype(void* self, void* dim, void* dtype) { void* ret = _lantern_cumprod_attensor_intt_atscalartype(self, dim, dtype); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_cumprod_attensor_intt_atscalartype)(void* self, void* dim, void* dtype);
  HOST_API void* lantern_Tensor_cumprod_attensor_intt_atscalartype(void* self, void* dim, void* dtype) { void* ret = _lantern_Tensor_cumprod_attensor_intt_atscalartype(self, dim, dtype); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_cumprod__attensor_intt_atscalartype)(void* self, void* dim, void* dtype);
  HOST_API void* lantern_Tensor_cumprod__attensor_intt_atscalartype(void* self, void* dim, void* dtype) { void* ret = _lantern_Tensor_cumprod__attensor_intt_atscalartype(self, dim, dtype); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_cumprod_out_attensor_attensor_intt_atscalartype)(void* out, void* self, void* dim, void* dtype);
  HOST_API void* lantern_cumprod_out_attensor_attensor_intt_atscalartype(void* out, void* self, void* dim, void* dtype) { void* ret = _lantern_cumprod_out_attensor_attensor_intt_atscalartype(out, self, dim, dtype); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_cumprod_attensor_atdimname_atscalartype)(void* self, void* dim, void* dtype);
  HOST_API void* lantern_cumprod_attensor_atdimname_atscalartype(void* self, void* dim, void* dtype) { void* ret = _lantern_cumprod_attensor_atdimname_atscalartype(self, dim, dtype); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_cumprod_attensor_atdimname_atscalartype)(void* self, void* dim, void* dtype);
  HOST_API void* lantern_Tensor_cumprod_attensor_atdimname_atscalartype(void* self, void* dim, void* dtype) { void* ret = _lantern_Tensor_cumprod_attensor_atdimname_atscalartype(self, dim, dtype); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_cumprod__attensor_atdimname_atscalartype)(void* self, void* dim, void* dtype);
  HOST_API void* lantern_Tensor_cumprod__attensor_atdimname_atscalartype(void* self, void* dim, void* dtype) { void* ret = _lantern_Tensor_cumprod__attensor_atdimname_atscalartype(self, dim, dtype); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_cumprod_out_attensor_attensor_atdimname_atscalartype)(void* out, void* self, void* dim, void* dtype);
  HOST_API void* lantern_cumprod_out_attensor_attensor_atdimname_atscalartype(void* out, void* self, void* dim, void* dtype) { void* ret = _lantern_cumprod_out_attensor_attensor_atdimname_atscalartype(out, self, dim, dtype); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_cumprod_backward_attensor_attensor_intt_attensor)(void* grad, void* input, void* dim, void* output);
  HOST_API void* lantern_cumprod_backward_attensor_attensor_intt_attensor(void* grad, void* input, void* dim, void* output) { void* ret = _lantern_cumprod_backward_attensor_attensor_intt_attensor(grad, input, dim, output); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_cumsum_attensor_intt_atscalartype)(void* self, void* dim, void* dtype);
  HOST_API void* lantern_cumsum_attensor_intt_atscalartype(void* self, void* dim, void* dtype) { void* ret = _lantern_cumsum_attensor_intt_atscalartype(self, dim, dtype); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_cumsum_attensor_intt_atscalartype)(void* self, void* dim, void* dtype);
  HOST_API void* lantern_Tensor_cumsum_attensor_intt_atscalartype(void* self, void* dim, void* dtype) { void* ret = _lantern_Tensor_cumsum_attensor_intt_atscalartype(self, dim, dtype); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_cumsum__attensor_intt_atscalartype)(void* self, void* dim, void* dtype);
  HOST_API void* lantern_Tensor_cumsum__attensor_intt_atscalartype(void* self, void* dim, void* dtype) { void* ret = _lantern_Tensor_cumsum__attensor_intt_atscalartype(self, dim, dtype); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_cumsum_out_attensor_attensor_intt_atscalartype)(void* out, void* self, void* dim, void* dtype);
  HOST_API void* lantern_cumsum_out_attensor_attensor_intt_atscalartype(void* out, void* self, void* dim, void* dtype) { void* ret = _lantern_cumsum_out_attensor_attensor_intt_atscalartype(out, self, dim, dtype); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_cumsum_attensor_atdimname_atscalartype)(void* self, void* dim, void* dtype);
  HOST_API void* lantern_cumsum_attensor_atdimname_atscalartype(void* self, void* dim, void* dtype) { void* ret = _lantern_cumsum_attensor_atdimname_atscalartype(self, dim, dtype); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_cumsum_attensor_atdimname_atscalartype)(void* self, void* dim, void* dtype);
  HOST_API void* lantern_Tensor_cumsum_attensor_atdimname_atscalartype(void* self, void* dim, void* dtype) { void* ret = _lantern_Tensor_cumsum_attensor_atdimname_atscalartype(self, dim, dtype); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_cumsum__attensor_atdimname_atscalartype)(void* self, void* dim, void* dtype);
  HOST_API void* lantern_Tensor_cumsum__attensor_atdimname_atscalartype(void* self, void* dim, void* dtype) { void* ret = _lantern_Tensor_cumsum__attensor_atdimname_atscalartype(self, dim, dtype); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_cumsum_out_attensor_attensor_atdimname_atscalartype)(void* out, void* self, void* dim, void* dtype);
  HOST_API void* lantern_cumsum_out_attensor_attensor_atdimname_atscalartype(void* out, void* self, void* dim, void* dtype) { void* ret = _lantern_cumsum_out_attensor_attensor_atdimname_atscalartype(out, self, dim, dtype); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_ctc_loss_attensor_attensor_atintarrayref_atintarrayref_intt_intt_bool)(void* log_probs, void* targets, void* input_lengths, void* target_lengths, void* blank, void* reduction, void* zero_infinity);
  HOST_API void* lantern_ctc_loss_attensor_attensor_atintarrayref_atintarrayref_intt_intt_bool(void* log_probs, void* targets, void* input_lengths, void* target_lengths, void* blank, void* reduction, void* zero_infinity) { void* ret = _lantern_ctc_loss_attensor_attensor_atintarrayref_atintarrayref_intt_intt_bool(log_probs, targets, input_lengths, target_lengths, blank, reduction, zero_infinity); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_ctc_loss_attensor_attensor_attensor_attensor_intt_intt_bool)(void* log_probs, void* targets, void* input_lengths, void* target_lengths, void* blank, void* reduction, void* zero_infinity);
  HOST_API void* lantern_ctc_loss_attensor_attensor_attensor_attensor_intt_intt_bool(void* log_probs, void* targets, void* input_lengths, void* target_lengths, void* blank, void* reduction, void* zero_infinity) { void* ret = _lantern_ctc_loss_attensor_attensor_attensor_attensor_intt_intt_bool(log_probs, targets, input_lengths, target_lengths, blank, reduction, zero_infinity); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__ctc_loss_attensor_attensor_atintarrayref_atintarrayref_intt_bool)(void* log_probs, void* targets, void* input_lengths, void* target_lengths, void* blank, void* zero_infinity);
  HOST_API void* lantern__ctc_loss_attensor_attensor_atintarrayref_atintarrayref_intt_bool(void* log_probs, void* targets, void* input_lengths, void* target_lengths, void* blank, void* zero_infinity) { void* ret = _lantern__ctc_loss_attensor_attensor_atintarrayref_atintarrayref_intt_bool(log_probs, targets, input_lengths, target_lengths, blank, zero_infinity); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__ctc_loss_backward_attensor_attensor_attensor_atintarrayref_atintarrayref_attensor_attensor_intt_bool)(void* grad, void* log_probs, void* targets, void* input_lengths, void* target_lengths, void* neg_log_likelihood, void* log_alpha, void* blank, void* zero_infinity);
  HOST_API void* lantern__ctc_loss_backward_attensor_attensor_attensor_atintarrayref_atintarrayref_attensor_attensor_intt_bool(void* grad, void* log_probs, void* targets, void* input_lengths, void* target_lengths, void* neg_log_likelihood, void* log_alpha, void* blank, void* zero_infinity) { void* ret = _lantern__ctc_loss_backward_attensor_attensor_attensor_atintarrayref_atintarrayref_attensor_attensor_intt_bool(grad, log_probs, targets, input_lengths, target_lengths, neg_log_likelihood, log_alpha, blank, zero_infinity); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_diag_embed_attensor_intt_intt_intt)(void* self, void* offset, void* dim1, void* dim2);
  HOST_API void* lantern_diag_embed_attensor_intt_intt_intt(void* self, void* offset, void* dim1, void* dim2) { void* ret = _lantern_diag_embed_attensor_intt_intt_intt(self, offset, dim1, dim2); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_diag_embed_attensor_intt_intt_intt)(void* self, void* offset, void* dim1, void* dim2);
  HOST_API void* lantern_Tensor_diag_embed_attensor_intt_intt_intt(void* self, void* offset, void* dim1, void* dim2) { void* ret = _lantern_Tensor_diag_embed_attensor_intt_intt_intt(self, offset, dim1, dim2); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_diagflat_attensor_intt)(void* self, void* offset);
  HOST_API void* lantern_diagflat_attensor_intt(void* self, void* offset) { void* ret = _lantern_diagflat_attensor_intt(self, offset); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_diagflat_attensor_intt)(void* self, void* offset);
  HOST_API void* lantern_Tensor_diagflat_attensor_intt(void* self, void* offset) { void* ret = _lantern_Tensor_diagflat_attensor_intt(self, offset); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_diagonal_attensor_intt_intt_intt)(void* self, void* offset, void* dim1, void* dim2);
  HOST_API void* lantern_diagonal_attensor_intt_intt_intt(void* self, void* offset, void* dim1, void* dim2) { void* ret = _lantern_diagonal_attensor_intt_intt_intt(self, offset, dim1, dim2); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_diagonal_attensor_intt_intt_intt)(void* self, void* offset, void* dim1, void* dim2);
  HOST_API void* lantern_Tensor_diagonal_attensor_intt_intt_intt(void* self, void* offset, void* dim1, void* dim2) { void* ret = _lantern_Tensor_diagonal_attensor_intt_intt_intt(self, offset, dim1, dim2); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_diagonal_attensor_atdimname_atdimname_atdimname_intt)(void* self, void* outdim, void* dim1, void* dim2, void* offset);
  HOST_API void* lantern_diagonal_attensor_atdimname_atdimname_atdimname_intt(void* self, void* outdim, void* dim1, void* dim2, void* offset) { void* ret = _lantern_diagonal_attensor_atdimname_atdimname_atdimname_intt(self, outdim, dim1, dim2, offset); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_diagonal_attensor_atdimname_atdimname_atdimname_intt)(void* self, void* outdim, void* dim1, void* dim2, void* offset);
  HOST_API void* lantern_Tensor_diagonal_attensor_atdimname_atdimname_atdimname_intt(void* self, void* outdim, void* dim1, void* dim2, void* offset) { void* ret = _lantern_Tensor_diagonal_attensor_atdimname_atdimname_atdimname_intt(self, outdim, dim1, dim2, offset); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_diagonal_backward_attensor_atintarrayref_intt_intt_intt)(void* grad, void* input_sizes, void* offset, void* dim1, void* dim2);
  HOST_API void* lantern_diagonal_backward_attensor_atintarrayref_intt_intt_intt(void* grad, void* input_sizes, void* offset, void* dim1, void* dim2) { void* ret = _lantern_diagonal_backward_attensor_atintarrayref_intt_intt_intt(grad, input_sizes, offset, dim1, dim2); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_fill_diagonal__attensor_constatscalar_bool)(void* self, void* fill_value, void* wrap);
  HOST_API void* lantern_Tensor_fill_diagonal__attensor_constatscalar_bool(void* self, void* fill_value, void* wrap) { void* ret = _lantern_Tensor_fill_diagonal__attensor_constatscalar_bool(self, fill_value, wrap); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_diff_attensor_intt_intt_attensor_attensor)(void* self, void* n, void* dim, void* prepend, void* append);
  HOST_API void* lantern_diff_attensor_intt_intt_attensor_attensor(void* self, void* n, void* dim, void* prepend, void* append) { void* ret = _lantern_diff_attensor_intt_intt_attensor_attensor(self, n, dim, prepend, append); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_diff_attensor_intt_intt_attensor_attensor)(void* self, void* n, void* dim, void* prepend, void* append);
  HOST_API void* lantern_Tensor_diff_attensor_intt_intt_attensor_attensor(void* self, void* n, void* dim, void* prepend, void* append) { void* ret = _lantern_Tensor_diff_attensor_intt_intt_attensor_attensor(self, n, dim, prepend, append); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_diff_out_attensor_attensor_intt_intt_attensor_attensor)(void* out, void* self, void* n, void* dim, void* prepend, void* append);
  HOST_API void* lantern_diff_out_attensor_attensor_intt_intt_attensor_attensor(void* out, void* self, void* n, void* dim, void* prepend, void* append) { void* ret = _lantern_diff_out_attensor_attensor_intt_intt_attensor_attensor(out, self, n, dim, prepend, append); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_gradient_attensor_constatscalar_intt_intt)(void* self, void* spacing, void* dim, void* edge_order);
  HOST_API void* lantern_gradient_attensor_constatscalar_intt_intt(void* self, void* spacing, void* dim, void* edge_order) { void* ret = _lantern_gradient_attensor_constatscalar_intt_intt(self, spacing, dim, edge_order); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_gradient_attensor_constatscalar_atintarrayref_intt)(void* self, void* spacing, void* dim, void* edge_order);
  HOST_API void* lantern_gradient_attensor_constatscalar_atintarrayref_intt(void* self, void* spacing, void* dim, void* edge_order) { void* ret = _lantern_gradient_attensor_constatscalar_atintarrayref_intt(self, spacing, dim, edge_order); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_gradient_attensor_atintarrayref_intt)(void* self, void* dim, void* edge_order);
  HOST_API void* lantern_gradient_attensor_atintarrayref_intt(void* self, void* dim, void* edge_order) { void* ret = _lantern_gradient_attensor_atintarrayref_intt(self, dim, edge_order); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_gradient_attensor_atarrayrefatscalar_intt_intt)(void* self, void* spacing, void* dim, void* edge_order);
  HOST_API void* lantern_gradient_attensor_atarrayrefatscalar_intt_intt(void* self, void* spacing, void* dim, void* edge_order) { void* ret = _lantern_gradient_attensor_atarrayrefatscalar_intt_intt(self, spacing, dim, edge_order); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_gradient_attensor_atarrayrefatscalar_atintarrayref_intt)(void* self, void* spacing, void* dim, void* edge_order);
  HOST_API void* lantern_gradient_attensor_atarrayrefatscalar_atintarrayref_intt(void* self, void* spacing, void* dim, void* edge_order) { void* ret = _lantern_gradient_attensor_atarrayrefatscalar_atintarrayref_intt(self, spacing, dim, edge_order); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_gradient_attensor_attensorlist_intt_intt)(void* self, void* spacing, void* dim, void* edge_order);
  HOST_API void* lantern_gradient_attensor_attensorlist_intt_intt(void* self, void* spacing, void* dim, void* edge_order) { void* ret = _lantern_gradient_attensor_attensorlist_intt_intt(self, spacing, dim, edge_order); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_gradient_attensor_attensorlist_atintarrayref_intt)(void* self, void* spacing, void* dim, void* edge_order);
  HOST_API void* lantern_gradient_attensor_attensorlist_atintarrayref_intt(void* self, void* spacing, void* dim, void* edge_order) { void* ret = _lantern_gradient_attensor_attensorlist_atintarrayref_intt(self, spacing, dim, edge_order); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_div_attensor_attensor)(void* self, void* other);
  HOST_API void* lantern_div_attensor_attensor(void* self, void* other) { void* ret = _lantern_div_attensor_attensor(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_div_attensor_attensor)(void* self, void* other);
  HOST_API void* lantern_Tensor_div_attensor_attensor(void* self, void* other) { void* ret = _lantern_Tensor_div_attensor_attensor(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_div__attensor_attensor)(void* self, void* other);
  HOST_API void* lantern_Tensor_div__attensor_attensor(void* self, void* other) { void* ret = _lantern_Tensor_div__attensor_attensor(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_div_out_attensor_attensor_attensor)(void* out, void* self, void* other);
  HOST_API void* lantern_div_out_attensor_attensor_attensor(void* out, void* self, void* other) { void* ret = _lantern_div_out_attensor_attensor_attensor(out, self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_div_attensor_attensor_stdstring)(void* self, void* other, void* rounding_mode);
  HOST_API void* lantern_div_attensor_attensor_stdstring(void* self, void* other, void* rounding_mode) { void* ret = _lantern_div_attensor_attensor_stdstring(self, other, rounding_mode); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_div_attensor_attensor_stdstring)(void* self, void* other, void* rounding_mode);
  HOST_API void* lantern_Tensor_div_attensor_attensor_stdstring(void* self, void* other, void* rounding_mode) { void* ret = _lantern_Tensor_div_attensor_attensor_stdstring(self, other, rounding_mode); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_div__attensor_attensor_stdstring)(void* self, void* other, void* rounding_mode);
  HOST_API void* lantern_Tensor_div__attensor_attensor_stdstring(void* self, void* other, void* rounding_mode) { void* ret = _lantern_Tensor_div__attensor_attensor_stdstring(self, other, rounding_mode); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_div_out_attensor_attensor_attensor_stdstring)(void* out, void* self, void* other, void* rounding_mode);
  HOST_API void* lantern_div_out_attensor_attensor_attensor_stdstring(void* out, void* self, void* other, void* rounding_mode) { void* ret = _lantern_div_out_attensor_attensor_attensor_stdstring(out, self, other, rounding_mode); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_div_attensor_constatscalar)(void* self, void* other);
  HOST_API void* lantern_div_attensor_constatscalar(void* self, void* other) { void* ret = _lantern_div_attensor_constatscalar(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_div_attensor_constatscalar)(void* self, void* other);
  HOST_API void* lantern_Tensor_div_attensor_constatscalar(void* self, void* other) { void* ret = _lantern_Tensor_div_attensor_constatscalar(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_div__attensor_constatscalar)(void* self, void* other);
  HOST_API void* lantern_Tensor_div__attensor_constatscalar(void* self, void* other) { void* ret = _lantern_Tensor_div__attensor_constatscalar(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_div_attensor_constatscalar_stdstring)(void* self, void* other, void* rounding_mode);
  HOST_API void* lantern_div_attensor_constatscalar_stdstring(void* self, void* other, void* rounding_mode) { void* ret = _lantern_div_attensor_constatscalar_stdstring(self, other, rounding_mode); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_div_attensor_constatscalar_stdstring)(void* self, void* other, void* rounding_mode);
  HOST_API void* lantern_Tensor_div_attensor_constatscalar_stdstring(void* self, void* other, void* rounding_mode) { void* ret = _lantern_Tensor_div_attensor_constatscalar_stdstring(self, other, rounding_mode); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_div__attensor_constatscalar_stdstring)(void* self, void* other, void* rounding_mode);
  HOST_API void* lantern_Tensor_div__attensor_constatscalar_stdstring(void* self, void* other, void* rounding_mode) { void* ret = _lantern_Tensor_div__attensor_constatscalar_stdstring(self, other, rounding_mode); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_divide_attensor_attensor)(void* self, void* other);
  HOST_API void* lantern_divide_attensor_attensor(void* self, void* other) { void* ret = _lantern_divide_attensor_attensor(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_divide_attensor_attensor)(void* self, void* other);
  HOST_API void* lantern_Tensor_divide_attensor_attensor(void* self, void* other) { void* ret = _lantern_Tensor_divide_attensor_attensor(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_divide__attensor_attensor)(void* self, void* other);
  HOST_API void* lantern_Tensor_divide__attensor_attensor(void* self, void* other) { void* ret = _lantern_Tensor_divide__attensor_attensor(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_divide_out_attensor_attensor_attensor)(void* out, void* self, void* other);
  HOST_API void* lantern_divide_out_attensor_attensor_attensor(void* out, void* self, void* other) { void* ret = _lantern_divide_out_attensor_attensor_attensor(out, self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_divide_attensor_constatscalar)(void* self, void* other);
  HOST_API void* lantern_divide_attensor_constatscalar(void* self, void* other) { void* ret = _lantern_divide_attensor_constatscalar(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_divide_attensor_constatscalar)(void* self, void* other);
  HOST_API void* lantern_Tensor_divide_attensor_constatscalar(void* self, void* other) { void* ret = _lantern_Tensor_divide_attensor_constatscalar(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_divide__attensor_constatscalar)(void* self, void* other);
  HOST_API void* lantern_Tensor_divide__attensor_constatscalar(void* self, void* other) { void* ret = _lantern_Tensor_divide__attensor_constatscalar(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_divide_attensor_attensor_stdstring)(void* self, void* other, void* rounding_mode);
  HOST_API void* lantern_divide_attensor_attensor_stdstring(void* self, void* other, void* rounding_mode) { void* ret = _lantern_divide_attensor_attensor_stdstring(self, other, rounding_mode); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_divide_attensor_attensor_stdstring)(void* self, void* other, void* rounding_mode);
  HOST_API void* lantern_Tensor_divide_attensor_attensor_stdstring(void* self, void* other, void* rounding_mode) { void* ret = _lantern_Tensor_divide_attensor_attensor_stdstring(self, other, rounding_mode); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_divide__attensor_attensor_stdstring)(void* self, void* other, void* rounding_mode);
  HOST_API void* lantern_Tensor_divide__attensor_attensor_stdstring(void* self, void* other, void* rounding_mode) { void* ret = _lantern_Tensor_divide__attensor_attensor_stdstring(self, other, rounding_mode); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_divide_out_attensor_attensor_attensor_stdstring)(void* out, void* self, void* other, void* rounding_mode);
  HOST_API void* lantern_divide_out_attensor_attensor_attensor_stdstring(void* out, void* self, void* other, void* rounding_mode) { void* ret = _lantern_divide_out_attensor_attensor_attensor_stdstring(out, self, other, rounding_mode); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_divide_attensor_constatscalar_stdstring)(void* self, void* other, void* rounding_mode);
  HOST_API void* lantern_divide_attensor_constatscalar_stdstring(void* self, void* other, void* rounding_mode) { void* ret = _lantern_divide_attensor_constatscalar_stdstring(self, other, rounding_mode); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_divide_attensor_constatscalar_stdstring)(void* self, void* other, void* rounding_mode);
  HOST_API void* lantern_Tensor_divide_attensor_constatscalar_stdstring(void* self, void* other, void* rounding_mode) { void* ret = _lantern_Tensor_divide_attensor_constatscalar_stdstring(self, other, rounding_mode); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_divide__attensor_constatscalar_stdstring)(void* self, void* other, void* rounding_mode);
  HOST_API void* lantern_Tensor_divide__attensor_constatscalar_stdstring(void* self, void* other, void* rounding_mode) { void* ret = _lantern_Tensor_divide__attensor_constatscalar_stdstring(self, other, rounding_mode); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_true_divide_attensor_attensor)(void* self, void* other);
  HOST_API void* lantern_true_divide_attensor_attensor(void* self, void* other) { void* ret = _lantern_true_divide_attensor_attensor(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_true_divide_attensor_attensor)(void* self, void* other);
  HOST_API void* lantern_Tensor_true_divide_attensor_attensor(void* self, void* other) { void* ret = _lantern_Tensor_true_divide_attensor_attensor(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_true_divide__attensor_attensor)(void* self, void* other);
  HOST_API void* lantern_Tensor_true_divide__attensor_attensor(void* self, void* other) { void* ret = _lantern_Tensor_true_divide__attensor_attensor(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_true_divide_out_attensor_attensor_attensor)(void* out, void* self, void* other);
  HOST_API void* lantern_true_divide_out_attensor_attensor_attensor(void* out, void* self, void* other) { void* ret = _lantern_true_divide_out_attensor_attensor_attensor(out, self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_true_divide_attensor_constatscalar)(void* self, void* other);
  HOST_API void* lantern_true_divide_attensor_constatscalar(void* self, void* other) { void* ret = _lantern_true_divide_attensor_constatscalar(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_true_divide_attensor_constatscalar)(void* self, void* other);
  HOST_API void* lantern_Tensor_true_divide_attensor_constatscalar(void* self, void* other) { void* ret = _lantern_Tensor_true_divide_attensor_constatscalar(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_true_divide__attensor_constatscalar)(void* self, void* other);
  HOST_API void* lantern_Tensor_true_divide__attensor_constatscalar(void* self, void* other) { void* ret = _lantern_Tensor_true_divide__attensor_constatscalar(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_dot_attensor_attensor)(void* self, void* tensor);
  HOST_API void* lantern_dot_attensor_attensor(void* self, void* tensor) { void* ret = _lantern_dot_attensor_attensor(self, tensor); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_dot_attensor_attensor)(void* self, void* tensor);
  HOST_API void* lantern_Tensor_dot_attensor_attensor(void* self, void* tensor) { void* ret = _lantern_Tensor_dot_attensor_attensor(self, tensor); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_dot_out_attensor_attensor_attensor)(void* out, void* self, void* tensor);
  HOST_API void* lantern_dot_out_attensor_attensor_attensor(void* out, void* self, void* tensor) { void* ret = _lantern_dot_out_attensor_attensor_attensor(out, self, tensor); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_vdot_attensor_attensor)(void* self, void* other);
  HOST_API void* lantern_vdot_attensor_attensor(void* self, void* other) { void* ret = _lantern_vdot_attensor_attensor(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_vdot_attensor_attensor)(void* self, void* other);
  HOST_API void* lantern_Tensor_vdot_attensor_attensor(void* self, void* other) { void* ret = _lantern_Tensor_vdot_attensor_attensor(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_vdot_out_attensor_attensor_attensor)(void* out, void* self, void* other);
  HOST_API void* lantern_vdot_out_attensor_attensor_attensor(void* out, void* self, void* other) { void* ret = _lantern_vdot_out_attensor_attensor_attensor(out, self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_einsum_stdstring_attensorlist)(void* equation, void* tensors);
  HOST_API void* lantern_einsum_stdstring_attensorlist(void* equation, void* tensors) { void* ret = _lantern_einsum_stdstring_attensorlist(equation, tensors); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_embedding_attensor_attensor_intt_bool_bool)(void* weight, void* indices, void* padding_idx, void* scale_grad_by_freq, void* sparse);
  HOST_API void* lantern_embedding_attensor_attensor_intt_bool_bool(void* weight, void* indices, void* padding_idx, void* scale_grad_by_freq, void* sparse) { void* ret = _lantern_embedding_attensor_attensor_intt_bool_bool(weight, indices, padding_idx, scale_grad_by_freq, sparse); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_embedding_backward_attensor_attensor_intt_intt_bool_bool)(void* grad, void* indices, void* num_weights, void* padding_idx, void* scale_grad_by_freq, void* sparse);
  HOST_API void* lantern_embedding_backward_attensor_attensor_intt_intt_bool_bool(void* grad, void* indices, void* num_weights, void* padding_idx, void* scale_grad_by_freq, void* sparse) { void* ret = _lantern_embedding_backward_attensor_attensor_intt_intt_bool_bool(grad, indices, num_weights, padding_idx, scale_grad_by_freq, sparse); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_embedding_dense_backward_attensor_attensor_intt_intt_bool)(void* grad_output, void* indices, void* num_weights, void* padding_idx, void* scale_grad_by_freq);
  HOST_API void* lantern_embedding_dense_backward_attensor_attensor_intt_intt_bool(void* grad_output, void* indices, void* num_weights, void* padding_idx, void* scale_grad_by_freq) { void* ret = _lantern_embedding_dense_backward_attensor_attensor_intt_intt_bool(grad_output, indices, num_weights, padding_idx, scale_grad_by_freq); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_embedding_renorm__attensor_attensor_double_double)(void* self, void* indices, void* max_norm, void* norm_type);
  HOST_API void* lantern_embedding_renorm__attensor_attensor_double_double(void* self, void* indices, void* max_norm, void* norm_type) { void* ret = _lantern_embedding_renorm__attensor_attensor_double_double(self, indices, max_norm, norm_type); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_embedding_sparse_backward_attensor_attensor_intt_intt_bool)(void* grad, void* indices, void* num_weights, void* padding_idx, void* scale_grad_by_freq);
  HOST_API void* lantern_embedding_sparse_backward_attensor_attensor_intt_intt_bool(void* grad, void* indices, void* num_weights, void* padding_idx, void* scale_grad_by_freq) { void* ret = _lantern_embedding_sparse_backward_attensor_attensor_intt_intt_bool(grad, indices, num_weights, padding_idx, scale_grad_by_freq); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__embedding_bag_forward_only_attensor_attensor_attensor_bool_intt_bool_attensor_bool_intt)(void* weight, void* indices, void* offsets, void* scale_grad_by_freq, void* mode, void* sparse, void* per_sample_weights, void* include_last_offset, void* padding_idx);
  HOST_API void* lantern__embedding_bag_forward_only_attensor_attensor_attensor_bool_intt_bool_attensor_bool_intt(void* weight, void* indices, void* offsets, void* scale_grad_by_freq, void* mode, void* sparse, void* per_sample_weights, void* include_last_offset, void* padding_idx) { void* ret = _lantern__embedding_bag_forward_only_attensor_attensor_attensor_bool_intt_bool_attensor_bool_intt(weight, indices, offsets, scale_grad_by_freq, mode, sparse, per_sample_weights, include_last_offset, padding_idx); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__rowwise_prune_attensor_attensor_atscalartype)(void* weight, void* mask, void* compressed_indices_dtype);
  HOST_API void* lantern__rowwise_prune_attensor_attensor_atscalartype(void* weight, void* mask, void* compressed_indices_dtype) { void* ret = _lantern__rowwise_prune_attensor_attensor_atscalartype(weight, mask, compressed_indices_dtype); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_row_stack_attensorlist)(void* tensors);
  HOST_API void* lantern_row_stack_attensorlist(void* tensors) { void* ret = _lantern_row_stack_attensorlist(tensors); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_row_stack_out_attensor_attensorlist)(void* out, void* tensors);
  HOST_API void* lantern_row_stack_out_attensor_attensorlist(void* out, void* tensors) { void* ret = _lantern_row_stack_out_attensor_attensorlist(out, tensors); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_embedding_bag_attensor_attensor_attensor_bool_intt_bool_attensor_bool)(void* weight, void* indices, void* offsets, void* scale_grad_by_freq, void* mode, void* sparse, void* per_sample_weights, void* include_last_offset);
  HOST_API void* lantern_embedding_bag_attensor_attensor_attensor_bool_intt_bool_attensor_bool(void* weight, void* indices, void* offsets, void* scale_grad_by_freq, void* mode, void* sparse, void* per_sample_weights, void* include_last_offset) { void* ret = _lantern_embedding_bag_attensor_attensor_attensor_bool_intt_bool_attensor_bool(weight, indices, offsets, scale_grad_by_freq, mode, sparse, per_sample_weights, include_last_offset); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_embedding_bag_attensor_attensor_attensor_bool_intt_bool_attensor_bool_intt)(void* weight, void* indices, void* offsets, void* scale_grad_by_freq, void* mode, void* sparse, void* per_sample_weights, void* include_last_offset, void* padding_idx);
  HOST_API void* lantern_embedding_bag_attensor_attensor_attensor_bool_intt_bool_attensor_bool_intt(void* weight, void* indices, void* offsets, void* scale_grad_by_freq, void* mode, void* sparse, void* per_sample_weights, void* include_last_offset, void* padding_idx) { void* ret = _lantern_embedding_bag_attensor_attensor_attensor_bool_intt_bool_attensor_bool_intt(weight, indices, offsets, scale_grad_by_freq, mode, sparse, per_sample_weights, include_last_offset, padding_idx); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__embedding_bag_attensor_attensor_attensor_bool_intt_bool_attensor_bool_intt)(void* weight, void* indices, void* offsets, void* scale_grad_by_freq, void* mode, void* sparse, void* per_sample_weights, void* include_last_offset, void* padding_idx);
  HOST_API void* lantern__embedding_bag_attensor_attensor_attensor_bool_intt_bool_attensor_bool_intt(void* weight, void* indices, void* offsets, void* scale_grad_by_freq, void* mode, void* sparse, void* per_sample_weights, void* include_last_offset, void* padding_idx) { void* ret = _lantern__embedding_bag_attensor_attensor_attensor_bool_intt_bool_attensor_bool_intt(weight, indices, offsets, scale_grad_by_freq, mode, sparse, per_sample_weights, include_last_offset, padding_idx); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__embedding_bag_backward_attensor_attensor_attensor_attensor_attensor_attensor_intt_bool_intt_bool_attensor_intt)(void* grad, void* indices, void* offsets, void* offset2bag, void* bag_size, void* maximum_indices, void* num_weights, void* scale_grad_by_freq, void* mode, void* sparse, void* per_sample_weights, void* padding_idx);
  HOST_API void* lantern__embedding_bag_backward_attensor_attensor_attensor_attensor_attensor_attensor_intt_bool_intt_bool_attensor_intt(void* grad, void* indices, void* offsets, void* offset2bag, void* bag_size, void* maximum_indices, void* num_weights, void* scale_grad_by_freq, void* mode, void* sparse, void* per_sample_weights, void* padding_idx) { void* ret = _lantern__embedding_bag_backward_attensor_attensor_attensor_attensor_attensor_attensor_intt_bool_intt_bool_attensor_intt(grad, indices, offsets, offset2bag, bag_size, maximum_indices, num_weights, scale_grad_by_freq, mode, sparse, per_sample_weights, padding_idx); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__embedding_bag_sparse_backward_attensor_attensor_attensor_attensor_attensor_intt_bool_intt_attensor_intt)(void* grad, void* indices, void* offsets, void* offset2bag, void* bag_size, void* num_weights, void* scale_grad_by_freq, void* mode, void* per_sample_weights, void* padding_idx);
  HOST_API void* lantern__embedding_bag_sparse_backward_attensor_attensor_attensor_attensor_attensor_intt_bool_intt_attensor_intt(void* grad, void* indices, void* offsets, void* offset2bag, void* bag_size, void* num_weights, void* scale_grad_by_freq, void* mode, void* per_sample_weights, void* padding_idx) { void* ret = _lantern__embedding_bag_sparse_backward_attensor_attensor_attensor_attensor_attensor_intt_bool_intt_attensor_intt(grad, indices, offsets, offset2bag, bag_size, num_weights, scale_grad_by_freq, mode, per_sample_weights, padding_idx); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__embedding_bag_dense_backward_attensor_attensor_attensor_attensor_attensor_intt_bool_intt_attensor_intt)(void* grad, void* indices, void* offset2bag, void* bag_size, void* maximum_indices, void* num_weights, void* scale_grad_by_freq, void* mode, void* per_sample_weights, void* padding_idx);
  HOST_API void* lantern__embedding_bag_dense_backward_attensor_attensor_attensor_attensor_attensor_intt_bool_intt_attensor_intt(void* grad, void* indices, void* offset2bag, void* bag_size, void* maximum_indices, void* num_weights, void* scale_grad_by_freq, void* mode, void* per_sample_weights, void* padding_idx) { void* ret = _lantern__embedding_bag_dense_backward_attensor_attensor_attensor_attensor_attensor_intt_bool_intt_attensor_intt(grad, indices, offset2bag, bag_size, maximum_indices, num_weights, scale_grad_by_freq, mode, per_sample_weights, padding_idx); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__embedding_bag_per_sample_weights_backward_attensor_attensor_attensor_attensor_attensor_intt_intt)(void* grad, void* weight, void* indices, void* offsets, void* offset2bag, void* mode, void* padding_idx);
  HOST_API void* lantern__embedding_bag_per_sample_weights_backward_attensor_attensor_attensor_attensor_attensor_intt_intt(void* grad, void* weight, void* indices, void* offsets, void* offset2bag, void* mode, void* padding_idx) { void* ret = _lantern__embedding_bag_per_sample_weights_backward_attensor_attensor_attensor_attensor_attensor_intt_intt(grad, weight, indices, offsets, offset2bag, mode, padding_idx); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_empty_atintarrayref_atdimnamelist_attensoroptions_atmemoryformat)(void* size, void* names, void* options, void* memory_format);
  HOST_API void* lantern_empty_atintarrayref_atdimnamelist_attensoroptions_atmemoryformat(void* size, void* names, void* options, void* memory_format) { void* ret = _lantern_empty_atintarrayref_atdimnamelist_attensoroptions_atmemoryformat(size, names, options, memory_format); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_empty_atintarrayref_attensoroptions_atmemoryformat)(void* size, void* options, void* memory_format);
  HOST_API void* lantern_empty_atintarrayref_attensoroptions_atmemoryformat(void* size, void* options, void* memory_format) { void* ret = _lantern_empty_atintarrayref_attensoroptions_atmemoryformat(size, options, memory_format); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_new_empty_attensor_atintarrayref_attensoroptions)(void* self, void* size, void* options);
  HOST_API void* lantern_Tensor_new_empty_attensor_atintarrayref_attensoroptions(void* self, void* size, void* options) { void* ret = _lantern_Tensor_new_empty_attensor_atintarrayref_attensoroptions(self, size, options); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_new_empty_strided_attensor_atintarrayref_atintarrayref_attensoroptions)(void* self, void* size, void* stride, void* options);
  HOST_API void* lantern_Tensor_new_empty_strided_attensor_atintarrayref_atintarrayref_attensoroptions(void* self, void* size, void* stride, void* options) { void* ret = _lantern_Tensor_new_empty_strided_attensor_atintarrayref_atintarrayref_attensoroptions(self, size, stride, options); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_new_full_attensor_atintarrayref_constatscalar_attensoroptions)(void* self, void* size, void* fill_value, void* options);
  HOST_API void* lantern_Tensor_new_full_attensor_atintarrayref_constatscalar_attensoroptions(void* self, void* size, void* fill_value, void* options) { void* ret = _lantern_Tensor_new_full_attensor_atintarrayref_constatscalar_attensoroptions(self, size, fill_value, options); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_new_zeros_attensor_atintarrayref_attensoroptions)(void* self, void* size, void* options);
  HOST_API void* lantern_Tensor_new_zeros_attensor_atintarrayref_attensoroptions(void* self, void* size, void* options) { void* ret = _lantern_Tensor_new_zeros_attensor_atintarrayref_attensoroptions(self, size, options); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__empty_affine_quantized_atintarrayref_attensoroptions_double_intt_atmemoryformat)(void* size, void* options, void* scale, void* zero_point, void* memory_format);
  HOST_API void* lantern__empty_affine_quantized_atintarrayref_attensoroptions_double_intt_atmemoryformat(void* size, void* options, void* scale, void* zero_point, void* memory_format) { void* ret = _lantern__empty_affine_quantized_atintarrayref_attensoroptions_double_intt_atmemoryformat(size, options, scale, zero_point, memory_format); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__empty_per_channel_affine_quantized_atintarrayref_attensor_attensor_intt_attensoroptions_atmemoryformat)(void* size, void* scales, void* zero_points, void* axis, void* options, void* memory_format);
  HOST_API void* lantern__empty_per_channel_affine_quantized_atintarrayref_attensor_attensor_intt_attensoroptions_atmemoryformat(void* size, void* scales, void* zero_points, void* axis, void* options, void* memory_format) { void* ret = _lantern__empty_per_channel_affine_quantized_atintarrayref_attensor_attensor_intt_attensoroptions_atmemoryformat(size, scales, zero_points, axis, options, memory_format); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_resize__attensor_atintarrayref_atmemoryformat)(void* self, void* size, void* memory_format);
  HOST_API void* lantern_Tensor_resize__attensor_atintarrayref_atmemoryformat(void* self, void* size, void* memory_format) { void* ret = _lantern_Tensor_resize__attensor_atintarrayref_atmemoryformat(self, size, memory_format); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_empty_quantized_atintarrayref_attensor)(void* size, void* qtensor);
  HOST_API void* lantern_empty_quantized_atintarrayref_attensor(void* size, void* qtensor) { void* ret = _lantern_empty_quantized_atintarrayref_attensor(size, qtensor); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_empty_out_attensor_atintarrayref_atmemoryformat)(void* out, void* size, void* memory_format);
  HOST_API void* lantern_empty_out_attensor_atintarrayref_atmemoryformat(void* out, void* size, void* memory_format) { void* ret = _lantern_empty_out_attensor_atintarrayref_atmemoryformat(out, size, memory_format); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_empty_like_attensor_attensoroptions_atmemoryformat)(void* self, void* options, void* memory_format);
  HOST_API void* lantern_empty_like_attensor_attensoroptions_atmemoryformat(void* self, void* options, void* memory_format) { void* ret = _lantern_empty_like_attensor_attensoroptions_atmemoryformat(self, options, memory_format); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_empty_strided_atintarrayref_atintarrayref_attensoroptions)(void* size, void* stride, void* options);
  HOST_API void* lantern_empty_strided_atintarrayref_atintarrayref_attensoroptions(void* size, void* stride, void* options) { void* ret = _lantern_empty_strided_atintarrayref_atintarrayref_attensoroptions(size, stride, options); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_erf_attensor)(void* self);
  HOST_API void* lantern_erf_attensor(void* self) { void* ret = _lantern_erf_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_erf_attensor)(void* self);
  HOST_API void* lantern_Tensor_erf_attensor(void* self) { void* ret = _lantern_Tensor_erf_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_erf__attensor)(void* self);
  HOST_API void* lantern_erf__attensor(void* self) { void* ret = _lantern_erf__attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_erf__attensor)(void* self);
  HOST_API void* lantern_Tensor_erf__attensor(void* self) { void* ret = _lantern_Tensor_erf__attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_erf_out_attensor_attensor)(void* out, void* self);
  HOST_API void* lantern_erf_out_attensor_attensor(void* out, void* self) { void* ret = _lantern_erf_out_attensor_attensor(out, self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_erfc_attensor)(void* self);
  HOST_API void* lantern_erfc_attensor(void* self) { void* ret = _lantern_erfc_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_erfc_attensor)(void* self);
  HOST_API void* lantern_Tensor_erfc_attensor(void* self) { void* ret = _lantern_Tensor_erfc_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_erfc__attensor)(void* self);
  HOST_API void* lantern_erfc__attensor(void* self) { void* ret = _lantern_erfc__attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_erfc__attensor)(void* self);
  HOST_API void* lantern_Tensor_erfc__attensor(void* self) { void* ret = _lantern_Tensor_erfc__attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_erfc_out_attensor_attensor)(void* out, void* self);
  HOST_API void* lantern_erfc_out_attensor_attensor(void* out, void* self) { void* ret = _lantern_erfc_out_attensor_attensor(out, self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_exp_attensor)(void* self);
  HOST_API void* lantern_exp_attensor(void* self) { void* ret = _lantern_exp_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_exp_attensor)(void* self);
  HOST_API void* lantern_Tensor_exp_attensor(void* self) { void* ret = _lantern_Tensor_exp_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_exp__attensor)(void* self);
  HOST_API void* lantern_exp__attensor(void* self) { void* ret = _lantern_exp__attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_exp__attensor)(void* self);
  HOST_API void* lantern_Tensor_exp__attensor(void* self) { void* ret = _lantern_Tensor_exp__attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_exp_out_attensor_attensor)(void* out, void* self);
  HOST_API void* lantern_exp_out_attensor_attensor(void* out, void* self) { void* ret = _lantern_exp_out_attensor_attensor(out, self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_exp2_attensor)(void* self);
  HOST_API void* lantern_exp2_attensor(void* self) { void* ret = _lantern_exp2_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_exp2_attensor)(void* self);
  HOST_API void* lantern_Tensor_exp2_attensor(void* self) { void* ret = _lantern_Tensor_exp2_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_exp2__attensor)(void* self);
  HOST_API void* lantern_exp2__attensor(void* self) { void* ret = _lantern_exp2__attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_exp2__attensor)(void* self);
  HOST_API void* lantern_Tensor_exp2__attensor(void* self) { void* ret = _lantern_Tensor_exp2__attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_exp2_out_attensor_attensor)(void* out, void* self);
  HOST_API void* lantern_exp2_out_attensor_attensor(void* out, void* self) { void* ret = _lantern_exp2_out_attensor_attensor(out, self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_expm1_attensor)(void* self);
  HOST_API void* lantern_expm1_attensor(void* self) { void* ret = _lantern_expm1_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_expm1_attensor)(void* self);
  HOST_API void* lantern_Tensor_expm1_attensor(void* self) { void* ret = _lantern_Tensor_expm1_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_expm1__attensor)(void* self);
  HOST_API void* lantern_expm1__attensor(void* self) { void* ret = _lantern_expm1__attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_expm1__attensor)(void* self);
  HOST_API void* lantern_Tensor_expm1__attensor(void* self) { void* ret = _lantern_Tensor_expm1__attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_expm1_out_attensor_attensor)(void* out, void* self);
  HOST_API void* lantern_expm1_out_attensor_attensor(void* out, void* self) { void* ret = _lantern_expm1_out_attensor_attensor(out, self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_expand_attensor_atintarrayref_bool)(void* self, void* size, void* implicit);
  HOST_API void* lantern_Tensor_expand_attensor_atintarrayref_bool(void* self, void* size, void* implicit) { void* ret = _lantern_Tensor_expand_attensor_atintarrayref_bool(self, size, implicit); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_expand_as_attensor_attensor)(void* self, void* other);
  HOST_API void* lantern_Tensor_expand_as_attensor_attensor(void* self, void* other) { void* ret = _lantern_Tensor_expand_as_attensor_attensor(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_eye_intt_attensoroptions)(void* n, void* options);
  HOST_API void* lantern_eye_intt_attensoroptions(void* n, void* options) { void* ret = _lantern_eye_intt_attensoroptions(n, options); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_eye_intt_intt_attensoroptions)(void* n, void* m, void* options);
  HOST_API void* lantern_eye_intt_intt_attensoroptions(void* n, void* m, void* options) { void* ret = _lantern_eye_intt_intt_attensoroptions(n, m, options); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_eye_out_attensor_intt)(void* out, void* n);
  HOST_API void* lantern_eye_out_attensor_intt(void* out, void* n) { void* ret = _lantern_eye_out_attensor_intt(out, n); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_eye_out_attensor_intt_intt)(void* out, void* n, void* m);
  HOST_API void* lantern_eye_out_attensor_intt_intt(void* out, void* n, void* m) { void* ret = _lantern_eye_out_attensor_intt_intt(out, n, m); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_flatten_attensor_intt_intt)(void* self, void* start_dim, void* end_dim);
  HOST_API void* lantern_flatten_attensor_intt_intt(void* self, void* start_dim, void* end_dim) { void* ret = _lantern_flatten_attensor_intt_intt(self, start_dim, end_dim); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_flatten_attensor_intt_intt)(void* self, void* start_dim, void* end_dim);
  HOST_API void* lantern_Tensor_flatten_attensor_intt_intt(void* self, void* start_dim, void* end_dim) { void* ret = _lantern_Tensor_flatten_attensor_intt_intt(self, start_dim, end_dim); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_flatten_attensor_intt_intt_atdimname)(void* self, void* start_dim, void* end_dim, void* out_dim);
  HOST_API void* lantern_flatten_attensor_intt_intt_atdimname(void* self, void* start_dim, void* end_dim, void* out_dim) { void* ret = _lantern_flatten_attensor_intt_intt_atdimname(self, start_dim, end_dim, out_dim); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_flatten_attensor_intt_intt_atdimname)(void* self, void* start_dim, void* end_dim, void* out_dim);
  HOST_API void* lantern_Tensor_flatten_attensor_intt_intt_atdimname(void* self, void* start_dim, void* end_dim, void* out_dim) { void* ret = _lantern_Tensor_flatten_attensor_intt_intt_atdimname(self, start_dim, end_dim, out_dim); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_flatten_attensor_atdimname_atdimname_atdimname)(void* self, void* start_dim, void* end_dim, void* out_dim);
  HOST_API void* lantern_flatten_attensor_atdimname_atdimname_atdimname(void* self, void* start_dim, void* end_dim, void* out_dim) { void* ret = _lantern_flatten_attensor_atdimname_atdimname_atdimname(self, start_dim, end_dim, out_dim); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_flatten_attensor_atdimname_atdimname_atdimname)(void* self, void* start_dim, void* end_dim, void* out_dim);
  HOST_API void* lantern_Tensor_flatten_attensor_atdimname_atdimname_atdimname(void* self, void* start_dim, void* end_dim, void* out_dim) { void* ret = _lantern_Tensor_flatten_attensor_atdimname_atdimname_atdimname(self, start_dim, end_dim, out_dim); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_flatten_attensor_atdimnamelist_atdimname)(void* self, void* dims, void* out_dim);
  HOST_API void* lantern_flatten_attensor_atdimnamelist_atdimname(void* self, void* dims, void* out_dim) { void* ret = _lantern_flatten_attensor_atdimnamelist_atdimname(self, dims, out_dim); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_flatten_attensor_atdimnamelist_atdimname)(void* self, void* dims, void* out_dim);
  HOST_API void* lantern_Tensor_flatten_attensor_atdimnamelist_atdimname(void* self, void* dims, void* out_dim) { void* ret = _lantern_Tensor_flatten_attensor_atdimnamelist_atdimname(self, dims, out_dim); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_unflatten_attensor_intt_atintarrayref_atdimnamelist)(void* self, void* dim, void* sizes, void* names);
  HOST_API void* lantern_Tensor_unflatten_attensor_intt_atintarrayref_atdimnamelist(void* self, void* dim, void* sizes, void* names) { void* ret = _lantern_Tensor_unflatten_attensor_intt_atintarrayref_atdimnamelist(self, dim, sizes, names); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_unflatten_attensor_atdimname_atintarrayref_atdimnamelist)(void* self, void* dim, void* sizes, void* names);
  HOST_API void* lantern_Tensor_unflatten_attensor_atdimname_atintarrayref_atdimnamelist(void* self, void* dim, void* sizes, void* names) { void* ret = _lantern_Tensor_unflatten_attensor_atdimname_atintarrayref_atdimnamelist(self, dim, sizes, names); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_fill__attensor_constatscalar)(void* self, void* value);
  HOST_API void* lantern_fill__attensor_constatscalar(void* self, void* value) { void* ret = _lantern_fill__attensor_constatscalar(self, value); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_fill__attensor_constatscalar)(void* self, void* value);
  HOST_API void* lantern_Tensor_fill__attensor_constatscalar(void* self, void* value) { void* ret = _lantern_Tensor_fill__attensor_constatscalar(self, value); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_fill__attensor_attensor)(void* self, void* value);
  HOST_API void* lantern_fill__attensor_attensor(void* self, void* value) { void* ret = _lantern_fill__attensor_attensor(self, value); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_fill__attensor_attensor)(void* self, void* value);
  HOST_API void* lantern_Tensor_fill__attensor_attensor(void* self, void* value) { void* ret = _lantern_Tensor_fill__attensor_attensor(self, value); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_floor_attensor)(void* self);
  HOST_API void* lantern_floor_attensor(void* self) { void* ret = _lantern_floor_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_floor_attensor)(void* self);
  HOST_API void* lantern_Tensor_floor_attensor(void* self) { void* ret = _lantern_Tensor_floor_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_floor__attensor)(void* self);
  HOST_API void* lantern_floor__attensor(void* self) { void* ret = _lantern_floor__attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_floor__attensor)(void* self);
  HOST_API void* lantern_Tensor_floor__attensor(void* self) { void* ret = _lantern_Tensor_floor__attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_floor_out_attensor_attensor)(void* out, void* self);
  HOST_API void* lantern_floor_out_attensor_attensor(void* out, void* self) { void* ret = _lantern_floor_out_attensor_attensor(out, self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_floor_divide_attensor_attensor)(void* self, void* other);
  HOST_API void* lantern_floor_divide_attensor_attensor(void* self, void* other) { void* ret = _lantern_floor_divide_attensor_attensor(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_floor_divide_attensor_attensor)(void* self, void* other);
  HOST_API void* lantern_Tensor_floor_divide_attensor_attensor(void* self, void* other) { void* ret = _lantern_Tensor_floor_divide_attensor_attensor(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_floor_divide__attensor_attensor)(void* self, void* other);
  HOST_API void* lantern_Tensor_floor_divide__attensor_attensor(void* self, void* other) { void* ret = _lantern_Tensor_floor_divide__attensor_attensor(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_floor_divide_out_attensor_attensor_attensor)(void* out, void* self, void* other);
  HOST_API void* lantern_floor_divide_out_attensor_attensor_attensor(void* out, void* self, void* other) { void* ret = _lantern_floor_divide_out_attensor_attensor_attensor(out, self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_floor_divide_attensor_constatscalar)(void* self, void* other);
  HOST_API void* lantern_floor_divide_attensor_constatscalar(void* self, void* other) { void* ret = _lantern_floor_divide_attensor_constatscalar(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_floor_divide_attensor_constatscalar)(void* self, void* other);
  HOST_API void* lantern_Tensor_floor_divide_attensor_constatscalar(void* self, void* other) { void* ret = _lantern_Tensor_floor_divide_attensor_constatscalar(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_floor_divide__attensor_constatscalar)(void* self, void* other);
  HOST_API void* lantern_Tensor_floor_divide__attensor_constatscalar(void* self, void* other) { void* ret = _lantern_Tensor_floor_divide__attensor_constatscalar(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_frac_attensor)(void* self);
  HOST_API void* lantern_frac_attensor(void* self) { void* ret = _lantern_frac_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_frac_attensor)(void* self);
  HOST_API void* lantern_Tensor_frac_attensor(void* self) { void* ret = _lantern_Tensor_frac_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_frac__attensor)(void* self);
  HOST_API void* lantern_frac__attensor(void* self) { void* ret = _lantern_frac__attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_frac__attensor)(void* self);
  HOST_API void* lantern_Tensor_frac__attensor(void* self) { void* ret = _lantern_Tensor_frac__attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_frac_out_attensor_attensor)(void* out, void* self);
  HOST_API void* lantern_frac_out_attensor_attensor(void* out, void* self) { void* ret = _lantern_frac_out_attensor_attensor(out, self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_full_atintarrayref_constatscalar_atdimnamelist_attensoroptions)(void* size, void* fill_value, void* names, void* options);
  HOST_API void* lantern_full_atintarrayref_constatscalar_atdimnamelist_attensoroptions(void* size, void* fill_value, void* names, void* options) { void* ret = _lantern_full_atintarrayref_constatscalar_atdimnamelist_attensoroptions(size, fill_value, names, options); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_full_atintarrayref_constatscalar_attensoroptions)(void* size, void* fill_value, void* options);
  HOST_API void* lantern_full_atintarrayref_constatscalar_attensoroptions(void* size, void* fill_value, void* options) { void* ret = _lantern_full_atintarrayref_constatscalar_attensoroptions(size, fill_value, options); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_full_out_attensor_atintarrayref_constatscalar)(void* out, void* size, void* fill_value);
  HOST_API void* lantern_full_out_attensor_atintarrayref_constatscalar(void* out, void* size, void* fill_value) { void* ret = _lantern_full_out_attensor_atintarrayref_constatscalar(out, size, fill_value); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_full_like_attensor_constatscalar_attensoroptions_atmemoryformat)(void* self, void* fill_value, void* options, void* memory_format);
  HOST_API void* lantern_full_like_attensor_constatscalar_attensoroptions_atmemoryformat(void* self, void* fill_value, void* options, void* memory_format) { void* ret = _lantern_full_like_attensor_constatscalar_attensoroptions_atmemoryformat(self, fill_value, options, memory_format); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_from_file_stdstring_bool_intt_attensoroptions)(void* filename, void* shared, void* size, void* options);
  HOST_API void* lantern_from_file_stdstring_bool_intt_attensoroptions(void* filename, void* shared, void* size, void* options) { void* ret = _lantern_from_file_stdstring_bool_intt_attensoroptions(filename, shared, size, options); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_gcd_out_attensor_attensor_attensor)(void* out, void* self, void* other);
  HOST_API void* lantern_gcd_out_attensor_attensor_attensor(void* out, void* self, void* other) { void* ret = _lantern_gcd_out_attensor_attensor_attensor(out, self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_gcd_attensor_attensor)(void* self, void* other);
  HOST_API void* lantern_gcd_attensor_attensor(void* self, void* other) { void* ret = _lantern_gcd_attensor_attensor(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_gcd_attensor_attensor)(void* self, void* other);
  HOST_API void* lantern_Tensor_gcd_attensor_attensor(void* self, void* other) { void* ret = _lantern_Tensor_gcd_attensor_attensor(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_gcd__attensor_attensor)(void* self, void* other);
  HOST_API void* lantern_gcd__attensor_attensor(void* self, void* other) { void* ret = _lantern_gcd__attensor_attensor(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_gcd__attensor_attensor)(void* self, void* other);
  HOST_API void* lantern_Tensor_gcd__attensor_attensor(void* self, void* other) { void* ret = _lantern_Tensor_gcd__attensor_attensor(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_lcm_out_attensor_attensor_attensor)(void* out, void* self, void* other);
  HOST_API void* lantern_lcm_out_attensor_attensor_attensor(void* out, void* self, void* other) { void* ret = _lantern_lcm_out_attensor_attensor_attensor(out, self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_lcm_attensor_attensor)(void* self, void* other);
  HOST_API void* lantern_lcm_attensor_attensor(void* self, void* other) { void* ret = _lantern_lcm_attensor_attensor(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_lcm_attensor_attensor)(void* self, void* other);
  HOST_API void* lantern_Tensor_lcm_attensor_attensor(void* self, void* other) { void* ret = _lantern_Tensor_lcm_attensor_attensor(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_lcm__attensor_attensor)(void* self, void* other);
  HOST_API void* lantern_lcm__attensor_attensor(void* self, void* other) { void* ret = _lantern_lcm__attensor_attensor(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_lcm__attensor_attensor)(void* self, void* other);
  HOST_API void* lantern_Tensor_lcm__attensor_attensor(void* self, void* other) { void* ret = _lantern_Tensor_lcm__attensor_attensor(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_grid_sampler_attensor_attensor_intt_intt_bool)(void* input, void* grid, void* interpolation_mode, void* padding_mode, void* align_corners);
  HOST_API void* lantern_grid_sampler_attensor_attensor_intt_intt_bool(void* input, void* grid, void* interpolation_mode, void* padding_mode, void* align_corners) { void* ret = _lantern_grid_sampler_attensor_attensor_intt_intt_bool(input, grid, interpolation_mode, padding_mode, align_corners); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_grid_sampler_2d_attensor_attensor_intt_intt_bool)(void* input, void* grid, void* interpolation_mode, void* padding_mode, void* align_corners);
  HOST_API void* lantern_grid_sampler_2d_attensor_attensor_intt_intt_bool(void* input, void* grid, void* interpolation_mode, void* padding_mode, void* align_corners) { void* ret = _lantern_grid_sampler_2d_attensor_attensor_intt_intt_bool(input, grid, interpolation_mode, padding_mode, align_corners); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_grid_sampler_2d_backward_attensor_attensor_attensor_intt_intt_bool)(void* grad_output, void* input, void* grid, void* interpolation_mode, void* padding_mode, void* align_corners);
  HOST_API void* lantern_grid_sampler_2d_backward_attensor_attensor_attensor_intt_intt_bool(void* grad_output, void* input, void* grid, void* interpolation_mode, void* padding_mode, void* align_corners) { void* ret = _lantern_grid_sampler_2d_backward_attensor_attensor_attensor_intt_intt_bool(grad_output, input, grid, interpolation_mode, padding_mode, align_corners); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__grid_sampler_2d_cpu_fallback_attensor_attensor_intt_intt_bool)(void* input, void* grid, void* interpolation_mode, void* padding_mode, void* align_corners);
  HOST_API void* lantern__grid_sampler_2d_cpu_fallback_attensor_attensor_intt_intt_bool(void* input, void* grid, void* interpolation_mode, void* padding_mode, void* align_corners) { void* ret = _lantern__grid_sampler_2d_cpu_fallback_attensor_attensor_intt_intt_bool(input, grid, interpolation_mode, padding_mode, align_corners); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__grid_sampler_2d_cpu_fallback_backward_attensor_attensor_attensor_intt_intt_bool)(void* grad_output, void* input, void* grid, void* interpolation_mode, void* padding_mode, void* align_corners);
  HOST_API void* lantern__grid_sampler_2d_cpu_fallback_backward_attensor_attensor_attensor_intt_intt_bool(void* grad_output, void* input, void* grid, void* interpolation_mode, void* padding_mode, void* align_corners) { void* ret = _lantern__grid_sampler_2d_cpu_fallback_backward_attensor_attensor_attensor_intt_intt_bool(grad_output, input, grid, interpolation_mode, padding_mode, align_corners); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_grid_sampler_3d_attensor_attensor_intt_intt_bool)(void* input, void* grid, void* interpolation_mode, void* padding_mode, void* align_corners);
  HOST_API void* lantern_grid_sampler_3d_attensor_attensor_intt_intt_bool(void* input, void* grid, void* interpolation_mode, void* padding_mode, void* align_corners) { void* ret = _lantern_grid_sampler_3d_attensor_attensor_intt_intt_bool(input, grid, interpolation_mode, padding_mode, align_corners); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_grid_sampler_3d_backward_attensor_attensor_attensor_intt_intt_bool)(void* grad_output, void* input, void* grid, void* interpolation_mode, void* padding_mode, void* align_corners);
  HOST_API void* lantern_grid_sampler_3d_backward_attensor_attensor_attensor_intt_intt_bool(void* grad_output, void* input, void* grid, void* interpolation_mode, void* padding_mode, void* align_corners) { void* ret = _lantern_grid_sampler_3d_backward_attensor_attensor_attensor_intt_intt_bool(grad_output, input, grid, interpolation_mode, padding_mode, align_corners); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_hann_window_intt_attensoroptions)(void* window_length, void* options);
  HOST_API void* lantern_hann_window_intt_attensoroptions(void* window_length, void* options) { void* ret = _lantern_hann_window_intt_attensoroptions(window_length, options); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_hann_window_intt_bool_attensoroptions)(void* window_length, void* periodic, void* options);
  HOST_API void* lantern_hann_window_intt_bool_attensoroptions(void* window_length, void* periodic, void* options) { void* ret = _lantern_hann_window_intt_bool_attensoroptions(window_length, periodic, options); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_hamming_window_intt_attensoroptions)(void* window_length, void* options);
  HOST_API void* lantern_hamming_window_intt_attensoroptions(void* window_length, void* options) { void* ret = _lantern_hamming_window_intt_attensoroptions(window_length, options); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_hamming_window_intt_bool_attensoroptions)(void* window_length, void* periodic, void* options);
  HOST_API void* lantern_hamming_window_intt_bool_attensoroptions(void* window_length, void* periodic, void* options) { void* ret = _lantern_hamming_window_intt_bool_attensoroptions(window_length, periodic, options); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_hamming_window_intt_bool_double_attensoroptions)(void* window_length, void* periodic, void* alpha, void* options);
  HOST_API void* lantern_hamming_window_intt_bool_double_attensoroptions(void* window_length, void* periodic, void* alpha, void* options) { void* ret = _lantern_hamming_window_intt_bool_double_attensoroptions(window_length, periodic, alpha, options); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_hamming_window_intt_bool_double_double_attensoroptions)(void* window_length, void* periodic, void* alpha, void* beta, void* options);
  HOST_API void* lantern_hamming_window_intt_bool_double_double_attensoroptions(void* window_length, void* periodic, void* alpha, void* beta, void* options) { void* ret = _lantern_hamming_window_intt_bool_double_double_attensoroptions(window_length, periodic, alpha, beta, options); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_kaiser_window_intt_attensoroptions)(void* window_length, void* options);
  HOST_API void* lantern_kaiser_window_intt_attensoroptions(void* window_length, void* options) { void* ret = _lantern_kaiser_window_intt_attensoroptions(window_length, options); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_kaiser_window_intt_bool_attensoroptions)(void* window_length, void* periodic, void* options);
  HOST_API void* lantern_kaiser_window_intt_bool_attensoroptions(void* window_length, void* periodic, void* options) { void* ret = _lantern_kaiser_window_intt_bool_attensoroptions(window_length, periodic, options); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_kaiser_window_intt_bool_double_attensoroptions)(void* window_length, void* periodic, void* beta, void* options);
  HOST_API void* lantern_kaiser_window_intt_bool_double_attensoroptions(void* window_length, void* periodic, void* beta, void* options) { void* ret = _lantern_kaiser_window_intt_bool_double_attensoroptions(window_length, periodic, beta, options); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_hinge_embedding_loss_attensor_attensor_double_intt)(void* self, void* target, void* margin, void* reduction);
  HOST_API void* lantern_hinge_embedding_loss_attensor_attensor_double_intt(void* self, void* target, void* margin, void* reduction) { void* ret = _lantern_hinge_embedding_loss_attensor_attensor_double_intt(self, target, margin, reduction); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_group_norm_attensor_intt_attensor_attensor_double_bool)(void* input, void* num_groups, void* weight, void* bias, void* eps, void* cudnn_enabled);
  HOST_API void* lantern_group_norm_attensor_intt_attensor_attensor_double_bool(void* input, void* num_groups, void* weight, void* bias, void* eps, void* cudnn_enabled) { void* ret = _lantern_group_norm_attensor_intt_attensor_attensor_double_bool(input, num_groups, weight, bias, eps, cudnn_enabled); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_native_group_norm_attensor_attensor_attensor_intt_intt_intt_intt_double)(void* input, void* weight, void* bias, void* N, void* C, void* HxW, void* group, void* eps);
  HOST_API void* lantern_native_group_norm_attensor_attensor_attensor_intt_intt_intt_intt_double(void* input, void* weight, void* bias, void* N, void* C, void* HxW, void* group, void* eps) { void* ret = _lantern_native_group_norm_attensor_attensor_attensor_intt_intt_intt_intt_double(input, weight, bias, N, C, HxW, group, eps); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_native_group_norm_backward_attensor_attensor_attensor_attensor_attensor_intt_intt_intt_intt_stdarraybool)(void* grad_out, void* input, void* mean, void* rstd, void* weight, void* N, void* C, void* HxW, void* group, void* output_mask);
  HOST_API void* lantern_native_group_norm_backward_attensor_attensor_attensor_attensor_attensor_intt_intt_intt_intt_stdarraybool(void* grad_out, void* input, void* mean, void* rstd, void* weight, void* N, void* C, void* HxW, void* group, void* output_mask) { void* ret = _lantern_native_group_norm_backward_attensor_attensor_attensor_attensor_attensor_intt_intt_intt_intt_stdarraybool(grad_out, input, mean, rstd, weight, N, C, HxW, group, output_mask); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__fft_r2c_attensor_atintarrayref_intt_bool)(void* self, void* dim, void* normalization, void* onesided);
  HOST_API void* lantern__fft_r2c_attensor_atintarrayref_intt_bool(void* self, void* dim, void* normalization, void* onesided) { void* ret = _lantern__fft_r2c_attensor_atintarrayref_intt_bool(self, dim, normalization, onesided); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__fft_r2c_out_attensor_attensor_atintarrayref_intt_bool)(void* out, void* self, void* dim, void* normalization, void* onesided);
  HOST_API void* lantern__fft_r2c_out_attensor_attensor_atintarrayref_intt_bool(void* out, void* self, void* dim, void* normalization, void* onesided) { void* ret = _lantern__fft_r2c_out_attensor_attensor_atintarrayref_intt_bool(out, self, dim, normalization, onesided); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__fft_c2r_attensor_atintarrayref_intt_intt)(void* self, void* dim, void* normalization, void* last_dim_size);
  HOST_API void* lantern__fft_c2r_attensor_atintarrayref_intt_intt(void* self, void* dim, void* normalization, void* last_dim_size) { void* ret = _lantern__fft_c2r_attensor_atintarrayref_intt_intt(self, dim, normalization, last_dim_size); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__fft_c2r_out_attensor_attensor_atintarrayref_intt_intt)(void* out, void* self, void* dim, void* normalization, void* last_dim_size);
  HOST_API void* lantern__fft_c2r_out_attensor_attensor_atintarrayref_intt_intt(void* out, void* self, void* dim, void* normalization, void* last_dim_size) { void* ret = _lantern__fft_c2r_out_attensor_attensor_atintarrayref_intt_intt(out, self, dim, normalization, last_dim_size); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__fft_c2c_attensor_atintarrayref_intt_bool)(void* self, void* dim, void* normalization, void* forward);
  HOST_API void* lantern__fft_c2c_attensor_atintarrayref_intt_bool(void* self, void* dim, void* normalization, void* forward) { void* ret = _lantern__fft_c2c_attensor_atintarrayref_intt_bool(self, dim, normalization, forward); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__fft_c2c_out_attensor_attensor_atintarrayref_intt_bool)(void* out, void* self, void* dim, void* normalization, void* forward);
  HOST_API void* lantern__fft_c2c_out_attensor_attensor_atintarrayref_intt_bool(void* out, void* self, void* dim, void* normalization, void* forward) { void* ret = _lantern__fft_c2c_out_attensor_attensor_atintarrayref_intt_bool(out, self, dim, normalization, forward); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__cufft_get_plan_cache_size_intt)(void* device_index);
  HOST_API void* lantern__cufft_get_plan_cache_size_intt(void* device_index) { void* ret = _lantern__cufft_get_plan_cache_size_intt(device_index); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__cufft_get_plan_cache_max_size_intt)(void* device_index);
  HOST_API void* lantern__cufft_get_plan_cache_max_size_intt(void* device_index) { void* ret = _lantern__cufft_get_plan_cache_max_size_intt(device_index); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__cufft_set_plan_cache_max_size_intt_intt)(void* device_index, void* max_size);
  HOST_API void* lantern__cufft_set_plan_cache_max_size_intt_intt(void* device_index, void* max_size) { void* ret = _lantern__cufft_set_plan_cache_max_size_intt_intt(device_index, max_size); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__cufft_clear_plan_cache_intt)(void* device_index);
  HOST_API void* lantern__cufft_clear_plan_cache_intt(void* device_index) { void* ret = _lantern__cufft_clear_plan_cache_intt(device_index); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_index_attensor_constclistcoptionalattensor)(void* self, void* indices);
  HOST_API void* lantern_index_attensor_constclistcoptionalattensor(void* self, void* indices) { void* ret = _lantern_index_attensor_constclistcoptionalattensor(self, indices); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_index_attensor_constclistcoptionalattensor)(void* self, void* indices);
  HOST_API void* lantern_Tensor_index_attensor_constclistcoptionalattensor(void* self, void* indices) { void* ret = _lantern_Tensor_index_attensor_constclistcoptionalattensor(self, indices); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_index_copy__attensor_intt_attensor_attensor)(void* self, void* dim, void* index, void* source);
  HOST_API void* lantern_Tensor_index_copy__attensor_intt_attensor_attensor(void* self, void* dim, void* index, void* source) { void* ret = _lantern_Tensor_index_copy__attensor_intt_attensor_attensor(self, dim, index, source); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_index_copy_attensor_intt_attensor_attensor)(void* self, void* dim, void* index, void* source);
  HOST_API void* lantern_index_copy_attensor_intt_attensor_attensor(void* self, void* dim, void* index, void* source) { void* ret = _lantern_index_copy_attensor_intt_attensor_attensor(self, dim, index, source); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_index_copy_attensor_intt_attensor_attensor)(void* self, void* dim, void* index, void* source);
  HOST_API void* lantern_Tensor_index_copy_attensor_intt_attensor_attensor(void* self, void* dim, void* index, void* source) { void* ret = _lantern_Tensor_index_copy_attensor_intt_attensor_attensor(self, dim, index, source); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_index_copy__attensor_atdimname_attensor_attensor)(void* self, void* dim, void* index, void* source);
  HOST_API void* lantern_Tensor_index_copy__attensor_atdimname_attensor_attensor(void* self, void* dim, void* index, void* source) { void* ret = _lantern_Tensor_index_copy__attensor_atdimname_attensor_attensor(self, dim, index, source); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_index_copy_attensor_atdimname_attensor_attensor)(void* self, void* dim, void* index, void* source);
  HOST_API void* lantern_index_copy_attensor_atdimname_attensor_attensor(void* self, void* dim, void* index, void* source) { void* ret = _lantern_index_copy_attensor_atdimname_attensor_attensor(self, dim, index, source); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_index_copy_attensor_atdimname_attensor_attensor)(void* self, void* dim, void* index, void* source);
  HOST_API void* lantern_Tensor_index_copy_attensor_atdimname_attensor_attensor(void* self, void* dim, void* index, void* source) { void* ret = _lantern_Tensor_index_copy_attensor_atdimname_attensor_attensor(self, dim, index, source); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_index_put__attensor_constclistcoptionalattensor_attensor_bool)(void* self, void* indices, void* values, void* accumulate);
  HOST_API void* lantern_index_put__attensor_constclistcoptionalattensor_attensor_bool(void* self, void* indices, void* values, void* accumulate) { void* ret = _lantern_index_put__attensor_constclistcoptionalattensor_attensor_bool(self, indices, values, accumulate); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_index_put__attensor_constclistcoptionalattensor_attensor_bool)(void* self, void* indices, void* values, void* accumulate);
  HOST_API void* lantern_Tensor_index_put__attensor_constclistcoptionalattensor_attensor_bool(void* self, void* indices, void* values, void* accumulate) { void* ret = _lantern_Tensor_index_put__attensor_constclistcoptionalattensor_attensor_bool(self, indices, values, accumulate); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_index_put_attensor_constclistcoptionalattensor_attensor_bool)(void* self, void* indices, void* values, void* accumulate);
  HOST_API void* lantern_index_put_attensor_constclistcoptionalattensor_attensor_bool(void* self, void* indices, void* values, void* accumulate) { void* ret = _lantern_index_put_attensor_constclistcoptionalattensor_attensor_bool(self, indices, values, accumulate); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_index_put_attensor_constclistcoptionalattensor_attensor_bool)(void* self, void* indices, void* values, void* accumulate);
  HOST_API void* lantern_Tensor_index_put_attensor_constclistcoptionalattensor_attensor_bool(void* self, void* indices, void* values, void* accumulate) { void* ret = _lantern_Tensor_index_put_attensor_constclistcoptionalattensor_attensor_bool(self, indices, values, accumulate); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__index_put_impl__attensor_constclistcoptionalattensor_attensor_bool_bool)(void* self, void* indices, void* values, void* accumulate, void* unsafe);
  HOST_API void* lantern__index_put_impl__attensor_constclistcoptionalattensor_attensor_bool_bool(void* self, void* indices, void* values, void* accumulate, void* unsafe) { void* ret = _lantern__index_put_impl__attensor_constclistcoptionalattensor_attensor_bool_bool(self, indices, values, accumulate, unsafe); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_instance_norm_attensor_attensor_attensor_attensor_attensor_bool_double_double_bool)(void* input, void* weight, void* bias, void* running_mean, void* running_var, void* use_input_stats, void* momentum, void* eps, void* cudnn_enabled);
  HOST_API void* lantern_instance_norm_attensor_attensor_attensor_attensor_attensor_bool_double_double_bool(void* input, void* weight, void* bias, void* running_mean, void* running_var, void* use_input_stats, void* momentum, void* eps, void* cudnn_enabled) { void* ret = _lantern_instance_norm_attensor_attensor_attensor_attensor_attensor_bool_double_double_bool(input, weight, bias, running_mean, running_var, use_input_stats, momentum, eps, cudnn_enabled); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_inverse_attensor)(void* self);
  HOST_API void* lantern_inverse_attensor(void* self) { void* ret = _lantern_inverse_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_inverse_attensor)(void* self);
  HOST_API void* lantern_Tensor_inverse_attensor(void* self) { void* ret = _lantern_Tensor_inverse_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_inverse_out_attensor_attensor)(void* out, void* self);
  HOST_API void* lantern_inverse_out_attensor_attensor(void* out, void* self) { void* ret = _lantern_inverse_out_attensor_attensor(out, self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__inverse_helper_attensor)(void* self);
  HOST_API void* lantern__inverse_helper_attensor(void* self) { void* ret = _lantern__inverse_helper_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_isclose_attensor_attensor_double_double_bool)(void* self, void* other, void* rtol, void* atol, void* equal_nan);
  HOST_API void* lantern_isclose_attensor_attensor_double_double_bool(void* self, void* other, void* rtol, void* atol, void* equal_nan) { void* ret = _lantern_isclose_attensor_attensor_double_double_bool(self, other, rtol, atol, equal_nan); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_isclose_attensor_attensor_double_double_bool)(void* self, void* other, void* rtol, void* atol, void* equal_nan);
  HOST_API void* lantern_Tensor_isclose_attensor_attensor_double_double_bool(void* self, void* other, void* rtol, void* atol, void* equal_nan) { void* ret = _lantern_Tensor_isclose_attensor_attensor_double_double_bool(self, other, rtol, atol, equal_nan); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_isnan_attensor)(void* self);
  HOST_API void* lantern_isnan_attensor(void* self) { void* ret = _lantern_isnan_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_isnan_attensor)(void* self);
  HOST_API void* lantern_Tensor_isnan_attensor(void* self) { void* ret = _lantern_Tensor_isnan_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_is_distributed_attensor)(void* self);
  HOST_API void* lantern_is_distributed_attensor(void* self) { void* ret = _lantern_is_distributed_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_is_distributed_attensor)(void* self);
  HOST_API void* lantern_Tensor_is_distributed_attensor(void* self) { void* ret = _lantern_Tensor_is_distributed_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_is_floating_point_attensor)(void* self);
  HOST_API void* lantern_is_floating_point_attensor(void* self) { void* ret = _lantern_is_floating_point_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_is_floating_point_attensor)(void* self);
  HOST_API void* lantern_Tensor_is_floating_point_attensor(void* self) { void* ret = _lantern_Tensor_is_floating_point_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_is_complex_attensor)(void* self);
  HOST_API void* lantern_is_complex_attensor(void* self) { void* ret = _lantern_is_complex_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_is_complex_attensor)(void* self);
  HOST_API void* lantern_Tensor_is_complex_attensor(void* self) { void* ret = _lantern_Tensor_is_complex_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_isreal_attensor)(void* self);
  HOST_API void* lantern_isreal_attensor(void* self) { void* ret = _lantern_isreal_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_isreal_attensor)(void* self);
  HOST_API void* lantern_Tensor_isreal_attensor(void* self) { void* ret = _lantern_Tensor_isreal_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_is_nonzero_attensor)(void* self);
  HOST_API void* lantern_is_nonzero_attensor(void* self) { void* ret = _lantern_is_nonzero_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_is_nonzero_attensor)(void* self);
  HOST_API void* lantern_Tensor_is_nonzero_attensor(void* self) { void* ret = _lantern_Tensor_is_nonzero_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_is_same_size_attensor_attensor)(void* self, void* other);
  HOST_API void* lantern_is_same_size_attensor_attensor(void* self, void* other) { void* ret = _lantern_is_same_size_attensor_attensor(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_is_same_size_attensor_attensor)(void* self, void* other);
  HOST_API void* lantern_Tensor_is_same_size_attensor_attensor(void* self, void* other) { void* ret = _lantern_Tensor_is_same_size_attensor_attensor(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_is_signed_attensor)(void* self);
  HOST_API void* lantern_is_signed_attensor(void* self) { void* ret = _lantern_is_signed_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_is_signed_attensor)(void* self);
  HOST_API void* lantern_Tensor_is_signed_attensor(void* self) { void* ret = _lantern_Tensor_is_signed_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_kl_div_attensor_attensor_intt_bool)(void* self, void* target, void* reduction, void* log_target);
  HOST_API void* lantern_kl_div_attensor_attensor_intt_bool(void* self, void* target, void* reduction, void* log_target) { void* ret = _lantern_kl_div_attensor_attensor_intt_bool(self, target, reduction, log_target); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_kl_div_backward_attensor_attensor_attensor_intt_bool)(void* grad_output, void* self, void* target, void* reduction, void* log_target);
  HOST_API void* lantern_kl_div_backward_attensor_attensor_attensor_intt_bool(void* grad_output, void* self, void* target, void* reduction, void* log_target) { void* ret = _lantern_kl_div_backward_attensor_attensor_attensor_intt_bool(grad_output, self, target, reduction, log_target); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_kron_attensor_attensor)(void* self, void* other);
  HOST_API void* lantern_kron_attensor_attensor(void* self, void* other) { void* ret = _lantern_kron_attensor_attensor(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_kron_attensor_attensor)(void* self, void* other);
  HOST_API void* lantern_Tensor_kron_attensor_attensor(void* self, void* other) { void* ret = _lantern_Tensor_kron_attensor_attensor(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_kron_out_attensor_attensor_attensor)(void* out, void* self, void* other);
  HOST_API void* lantern_kron_out_attensor_attensor_attensor(void* out, void* self, void* other) { void* ret = _lantern_kron_out_attensor_attensor_attensor(out, self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_kthvalue_attensor_intt_intt_bool)(void* self, void* k, void* dim, void* keepdim);
  HOST_API void* lantern_kthvalue_attensor_intt_intt_bool(void* self, void* k, void* dim, void* keepdim) { void* ret = _lantern_kthvalue_attensor_intt_intt_bool(self, k, dim, keepdim); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_kthvalue_attensor_intt_intt_bool)(void* self, void* k, void* dim, void* keepdim);
  HOST_API void* lantern_Tensor_kthvalue_attensor_intt_intt_bool(void* self, void* k, void* dim, void* keepdim) { void* ret = _lantern_Tensor_kthvalue_attensor_intt_intt_bool(self, k, dim, keepdim); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_kthvalue_out_attensor_attensor_attensor_intt_intt_bool)(void* values, void* indices, void* self, void* k, void* dim, void* keepdim);
  HOST_API void* lantern_kthvalue_out_attensor_attensor_attensor_intt_intt_bool(void* values, void* indices, void* self, void* k, void* dim, void* keepdim) { void* ret = _lantern_kthvalue_out_attensor_attensor_attensor_intt_intt_bool(values, indices, self, k, dim, keepdim); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_kthvalue_attensor_intt_atdimname_bool)(void* self, void* k, void* dim, void* keepdim);
  HOST_API void* lantern_kthvalue_attensor_intt_atdimname_bool(void* self, void* k, void* dim, void* keepdim) { void* ret = _lantern_kthvalue_attensor_intt_atdimname_bool(self, k, dim, keepdim); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_kthvalue_attensor_intt_atdimname_bool)(void* self, void* k, void* dim, void* keepdim);
  HOST_API void* lantern_Tensor_kthvalue_attensor_intt_atdimname_bool(void* self, void* k, void* dim, void* keepdim) { void* ret = _lantern_Tensor_kthvalue_attensor_intt_atdimname_bool(self, k, dim, keepdim); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_kthvalue_out_attensor_attensor_attensor_intt_atdimname_bool)(void* values, void* indices, void* self, void* k, void* dim, void* keepdim);
  HOST_API void* lantern_kthvalue_out_attensor_attensor_attensor_intt_atdimname_bool(void* values, void* indices, void* self, void* k, void* dim, void* keepdim) { void* ret = _lantern_kthvalue_out_attensor_attensor_attensor_intt_atdimname_bool(values, indices, self, k, dim, keepdim); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_layer_norm_attensor_atintarrayref_attensor_attensor_double_bool)(void* input, void* normalized_shape, void* weight, void* bias, void* eps, void* cudnn_enable);
  HOST_API void* lantern_layer_norm_attensor_atintarrayref_attensor_attensor_double_bool(void* input, void* normalized_shape, void* weight, void* bias, void* eps, void* cudnn_enable) { void* ret = _lantern_layer_norm_attensor_atintarrayref_attensor_attensor_double_bool(input, normalized_shape, weight, bias, eps, cudnn_enable); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_native_layer_norm_attensor_atintarrayref_attensor_attensor_double)(void* input, void* normalized_shape, void* weight, void* bias, void* eps);
  HOST_API void* lantern_native_layer_norm_attensor_atintarrayref_attensor_attensor_double(void* input, void* normalized_shape, void* weight, void* bias, void* eps) { void* ret = _lantern_native_layer_norm_attensor_atintarrayref_attensor_attensor_double(input, normalized_shape, weight, bias, eps); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_native_layer_norm_backward_attensor_attensor_atintarrayref_attensor_attensor_attensor_attensor_stdarraybool)(void* grad_out, void* input, void* normalized_shape, void* mean, void* rstd, void* weight, void* bias, void* output_mask);
  HOST_API void* lantern_native_layer_norm_backward_attensor_attensor_atintarrayref_attensor_attensor_attensor_attensor_stdarraybool(void* grad_out, void* input, void* normalized_shape, void* mean, void* rstd, void* weight, void* bias, void* output_mask) { void* ret = _lantern_native_layer_norm_backward_attensor_attensor_atintarrayref_attensor_attensor_attensor_attensor_stdarraybool(grad_out, input, normalized_shape, mean, rstd, weight, bias, output_mask); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_nan_to_num_attensor_double_double_double)(void* self, void* nan, void* posinf, void* neginf);
  HOST_API void* lantern_nan_to_num_attensor_double_double_double(void* self, void* nan, void* posinf, void* neginf) { void* ret = _lantern_nan_to_num_attensor_double_double_double(self, nan, posinf, neginf); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_nan_to_num_attensor_double_double_double)(void* self, void* nan, void* posinf, void* neginf);
  HOST_API void* lantern_Tensor_nan_to_num_attensor_double_double_double(void* self, void* nan, void* posinf, void* neginf) { void* ret = _lantern_Tensor_nan_to_num_attensor_double_double_double(self, nan, posinf, neginf); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_nan_to_num__attensor_double_double_double)(void* self, void* nan, void* posinf, void* neginf);
  HOST_API void* lantern_nan_to_num__attensor_double_double_double(void* self, void* nan, void* posinf, void* neginf) { void* ret = _lantern_nan_to_num__attensor_double_double_double(self, nan, posinf, neginf); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_nan_to_num__attensor_double_double_double)(void* self, void* nan, void* posinf, void* neginf);
  HOST_API void* lantern_Tensor_nan_to_num__attensor_double_double_double(void* self, void* nan, void* posinf, void* neginf) { void* ret = _lantern_Tensor_nan_to_num__attensor_double_double_double(self, nan, posinf, neginf); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_nan_to_num_out_attensor_attensor_double_double_double)(void* out, void* self, void* nan, void* posinf, void* neginf);
  HOST_API void* lantern_nan_to_num_out_attensor_attensor_double_double_double(void* out, void* self, void* nan, void* posinf, void* neginf) { void* ret = _lantern_nan_to_num_out_attensor_attensor_double_double_double(out, self, nan, posinf, neginf); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_linear_attensor_attensor_attensor)(void* input, void* weight, void* bias);
  HOST_API void* lantern_linear_attensor_attensor_attensor(void* input, void* weight, void* bias) { void* ret = _lantern_linear_attensor_attensor_attensor(input, weight, bias); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_mkldnn_linear_attensor_attensor_attensor)(void* self, void* weight, void* bias);
  HOST_API void* lantern_mkldnn_linear_attensor_attensor_attensor(void* self, void* weight, void* bias) { void* ret = _lantern_mkldnn_linear_attensor_attensor_attensor(self, weight, bias); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_mkldnn_linear_backward_input_atintarrayref_attensor_attensor)(void* input_size, void* grad_output, void* weight);
  HOST_API void* lantern_mkldnn_linear_backward_input_atintarrayref_attensor_attensor(void* input_size, void* grad_output, void* weight) { void* ret = _lantern_mkldnn_linear_backward_input_atintarrayref_attensor_attensor(input_size, grad_output, weight); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_mkldnn_linear_backward_weights_attensor_attensor_attensor_bool)(void* grad_output, void* input, void* weight, void* bias_defined);
  HOST_API void* lantern_mkldnn_linear_backward_weights_attensor_attensor_attensor_bool(void* grad_output, void* input, void* weight, void* bias_defined) { void* ret = _lantern_mkldnn_linear_backward_weights_attensor_attensor_attensor_bool(grad_output, input, weight, bias_defined); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_mkldnn_linear_backward_attensor_attensor_attensor_stdarraybool)(void* self, void* grad_output, void* weight, void* output_mask);
  HOST_API void* lantern_mkldnn_linear_backward_attensor_attensor_attensor_stdarraybool(void* self, void* grad_output, void* weight, void* output_mask) { void* ret = _lantern_mkldnn_linear_backward_attensor_attensor_attensor_stdarraybool(self, grad_output, weight, output_mask); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_fbgemm_linear_int8_weight_fp32_activation_attensor_attensor_attensor_attensor_constatscalar_constatscalar_attensor)(void* input, void* weight, void* packed, void* col_offsets, void* weight_scale, void* weight_zero_point, void* bias);
  HOST_API void* lantern_fbgemm_linear_int8_weight_fp32_activation_attensor_attensor_attensor_attensor_constatscalar_constatscalar_attensor(void* input, void* weight, void* packed, void* col_offsets, void* weight_scale, void* weight_zero_point, void* bias) { void* ret = _lantern_fbgemm_linear_int8_weight_fp32_activation_attensor_attensor_attensor_attensor_constatscalar_constatscalar_attensor(input, weight, packed, col_offsets, weight_scale, weight_zero_point, bias); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_fbgemm_linear_int8_weight_attensor_attensor_attensor_attensor_constatscalar_constatscalar_attensor)(void* input, void* weight, void* packed, void* col_offsets, void* weight_scale, void* weight_zero_point, void* bias);
  HOST_API void* lantern_fbgemm_linear_int8_weight_attensor_attensor_attensor_attensor_constatscalar_constatscalar_attensor(void* input, void* weight, void* packed, void* col_offsets, void* weight_scale, void* weight_zero_point, void* bias) { void* ret = _lantern_fbgemm_linear_int8_weight_attensor_attensor_attensor_attensor_constatscalar_constatscalar_attensor(input, weight, packed, col_offsets, weight_scale, weight_zero_point, bias); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_fbgemm_linear_quantize_weight_attensor)(void* input);
  HOST_API void* lantern_fbgemm_linear_quantize_weight_attensor(void* input) { void* ret = _lantern_fbgemm_linear_quantize_weight_attensor(input); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_fbgemm_pack_gemm_matrix_fp16_attensor)(void* input);
  HOST_API void* lantern_fbgemm_pack_gemm_matrix_fp16_attensor(void* input) { void* ret = _lantern_fbgemm_pack_gemm_matrix_fp16_attensor(input); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_fbgemm_linear_fp16_weight_fp32_activation_attensor_attensor_attensor)(void* input, void* packed_weight, void* bias);
  HOST_API void* lantern_fbgemm_linear_fp16_weight_fp32_activation_attensor_attensor_attensor(void* input, void* packed_weight, void* bias) { void* ret = _lantern_fbgemm_linear_fp16_weight_fp32_activation_attensor_attensor_attensor(input, packed_weight, bias); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_fbgemm_linear_fp16_weight_attensor_attensor_attensor)(void* input, void* packed_weight, void* bias);
  HOST_API void* lantern_fbgemm_linear_fp16_weight_attensor_attensor_attensor(void* input, void* packed_weight, void* bias) { void* ret = _lantern_fbgemm_linear_fp16_weight_attensor_attensor_attensor(input, packed_weight, bias); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_fbgemm_pack_quantized_matrix_attensor)(void* input);
  HOST_API void* lantern_fbgemm_pack_quantized_matrix_attensor(void* input) { void* ret = _lantern_fbgemm_pack_quantized_matrix_attensor(input); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_fbgemm_pack_quantized_matrix_attensor_intt_intt)(void* input, void* K, void* N);
  HOST_API void* lantern_fbgemm_pack_quantized_matrix_attensor_intt_intt(void* input, void* K, void* N) { void* ret = _lantern_fbgemm_pack_quantized_matrix_attensor_intt_intt(input, K, N); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_ldexp_attensor_attensor)(void* self, void* other);
  HOST_API void* lantern_ldexp_attensor_attensor(void* self, void* other) { void* ret = _lantern_ldexp_attensor_attensor(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_ldexp_attensor_attensor)(void* self, void* other);
  HOST_API void* lantern_Tensor_ldexp_attensor_attensor(void* self, void* other) { void* ret = _lantern_Tensor_ldexp_attensor_attensor(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_ldexp__attensor_attensor)(void* self, void* other);
  HOST_API void* lantern_ldexp__attensor_attensor(void* self, void* other) { void* ret = _lantern_ldexp__attensor_attensor(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_ldexp__attensor_attensor)(void* self, void* other);
  HOST_API void* lantern_Tensor_ldexp__attensor_attensor(void* self, void* other) { void* ret = _lantern_Tensor_ldexp__attensor_attensor(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_ldexp_out_attensor_attensor_attensor)(void* out, void* self, void* other);
  HOST_API void* lantern_ldexp_out_attensor_attensor_attensor(void* out, void* self, void* other) { void* ret = _lantern_ldexp_out_attensor_attensor_attensor(out, self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_linspace_constatscalar_constatscalar_intt_attensoroptions)(void* start, void* end, void* steps, void* options);
  HOST_API void* lantern_linspace_constatscalar_constatscalar_intt_attensoroptions(void* start, void* end, void* steps, void* options) { void* ret = _lantern_linspace_constatscalar_constatscalar_intt_attensoroptions(start, end, steps, options); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_linspace_out_attensor_constatscalar_constatscalar_intt)(void* out, void* start, void* end, void* steps);
  HOST_API void* lantern_linspace_out_attensor_constatscalar_constatscalar_intt(void* out, void* start, void* end, void* steps) { void* ret = _lantern_linspace_out_attensor_constatscalar_constatscalar_intt(out, start, end, steps); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_log_attensor)(void* self);
  HOST_API void* lantern_log_attensor(void* self) { void* ret = _lantern_log_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_log_attensor)(void* self);
  HOST_API void* lantern_Tensor_log_attensor(void* self) { void* ret = _lantern_Tensor_log_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_log__attensor)(void* self);
  HOST_API void* lantern_log__attensor(void* self) { void* ret = _lantern_log__attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_log__attensor)(void* self);
  HOST_API void* lantern_Tensor_log__attensor(void* self) { void* ret = _lantern_Tensor_log__attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_log_out_attensor_attensor)(void* out, void* self);
  HOST_API void* lantern_log_out_attensor_attensor(void* out, void* self) { void* ret = _lantern_log_out_attensor_attensor(out, self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_log10_attensor)(void* self);
  HOST_API void* lantern_log10_attensor(void* self) { void* ret = _lantern_log10_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_log10_attensor)(void* self);
  HOST_API void* lantern_Tensor_log10_attensor(void* self) { void* ret = _lantern_Tensor_log10_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_log10__attensor)(void* self);
  HOST_API void* lantern_log10__attensor(void* self) { void* ret = _lantern_log10__attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_log10__attensor)(void* self);
  HOST_API void* lantern_Tensor_log10__attensor(void* self) { void* ret = _lantern_Tensor_log10__attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_log10_out_attensor_attensor)(void* out, void* self);
  HOST_API void* lantern_log10_out_attensor_attensor(void* out, void* self) { void* ret = _lantern_log10_out_attensor_attensor(out, self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_log1p_attensor)(void* self);
  HOST_API void* lantern_log1p_attensor(void* self) { void* ret = _lantern_log1p_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_log1p_attensor)(void* self);
  HOST_API void* lantern_Tensor_log1p_attensor(void* self) { void* ret = _lantern_Tensor_log1p_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_log1p__attensor)(void* self);
  HOST_API void* lantern_log1p__attensor(void* self) { void* ret = _lantern_log1p__attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_log1p__attensor)(void* self);
  HOST_API void* lantern_Tensor_log1p__attensor(void* self) { void* ret = _lantern_Tensor_log1p__attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_log1p_out_attensor_attensor)(void* out, void* self);
  HOST_API void* lantern_log1p_out_attensor_attensor(void* out, void* self) { void* ret = _lantern_log1p_out_attensor_attensor(out, self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_log2_attensor)(void* self);
  HOST_API void* lantern_log2_attensor(void* self) { void* ret = _lantern_log2_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_log2_attensor)(void* self);
  HOST_API void* lantern_Tensor_log2_attensor(void* self) { void* ret = _lantern_Tensor_log2_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_log2__attensor)(void* self);
  HOST_API void* lantern_log2__attensor(void* self) { void* ret = _lantern_log2__attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_log2__attensor)(void* self);
  HOST_API void* lantern_Tensor_log2__attensor(void* self) { void* ret = _lantern_Tensor_log2__attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_log2_out_attensor_attensor)(void* out, void* self);
  HOST_API void* lantern_log2_out_attensor_attensor(void* out, void* self) { void* ret = _lantern_log2_out_attensor_attensor(out, self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_logaddexp_out_attensor_attensor_attensor)(void* out, void* self, void* other);
  HOST_API void* lantern_logaddexp_out_attensor_attensor_attensor(void* out, void* self, void* other) { void* ret = _lantern_logaddexp_out_attensor_attensor_attensor(out, self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_logaddexp_attensor_attensor)(void* self, void* other);
  HOST_API void* lantern_logaddexp_attensor_attensor(void* self, void* other) { void* ret = _lantern_logaddexp_attensor_attensor(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_logaddexp_attensor_attensor)(void* self, void* other);
  HOST_API void* lantern_Tensor_logaddexp_attensor_attensor(void* self, void* other) { void* ret = _lantern_Tensor_logaddexp_attensor_attensor(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_logaddexp2_out_attensor_attensor_attensor)(void* out, void* self, void* other);
  HOST_API void* lantern_logaddexp2_out_attensor_attensor_attensor(void* out, void* self, void* other) { void* ret = _lantern_logaddexp2_out_attensor_attensor_attensor(out, self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_logaddexp2_attensor_attensor)(void* self, void* other);
  HOST_API void* lantern_logaddexp2_attensor_attensor(void* self, void* other) { void* ret = _lantern_logaddexp2_attensor_attensor(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_logaddexp2_attensor_attensor)(void* self, void* other);
  HOST_API void* lantern_Tensor_logaddexp2_attensor_attensor(void* self, void* other) { void* ret = _lantern_Tensor_logaddexp2_attensor_attensor(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_xlogy_attensor_attensor)(void* self, void* other);
  HOST_API void* lantern_xlogy_attensor_attensor(void* self, void* other) { void* ret = _lantern_xlogy_attensor_attensor(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_xlogy_attensor_attensor)(void* self, void* other);
  HOST_API void* lantern_Tensor_xlogy_attensor_attensor(void* self, void* other) { void* ret = _lantern_Tensor_xlogy_attensor_attensor(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_xlogy_constatscalar_attensor)(void* self, void* other);
  HOST_API void* lantern_xlogy_constatscalar_attensor(void* self, void* other) { void* ret = _lantern_xlogy_constatscalar_attensor(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_xlogy_attensor_constatscalar)(void* self, void* other);
  HOST_API void* lantern_xlogy_attensor_constatscalar(void* self, void* other) { void* ret = _lantern_xlogy_attensor_constatscalar(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_xlogy_attensor_constatscalar)(void* self, void* other);
  HOST_API void* lantern_Tensor_xlogy_attensor_constatscalar(void* self, void* other) { void* ret = _lantern_Tensor_xlogy_attensor_constatscalar(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_xlogy__attensor_attensor)(void* self, void* other);
  HOST_API void* lantern_xlogy__attensor_attensor(void* self, void* other) { void* ret = _lantern_xlogy__attensor_attensor(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_xlogy__attensor_attensor)(void* self, void* other);
  HOST_API void* lantern_Tensor_xlogy__attensor_attensor(void* self, void* other) { void* ret = _lantern_Tensor_xlogy__attensor_attensor(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_xlogy__attensor_constatscalar)(void* self, void* other);
  HOST_API void* lantern_xlogy__attensor_constatscalar(void* self, void* other) { void* ret = _lantern_xlogy__attensor_constatscalar(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_xlogy__attensor_constatscalar)(void* self, void* other);
  HOST_API void* lantern_Tensor_xlogy__attensor_constatscalar(void* self, void* other) { void* ret = _lantern_Tensor_xlogy__attensor_constatscalar(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_xlogy_out_attensor_attensor_attensor)(void* out, void* self, void* other);
  HOST_API void* lantern_xlogy_out_attensor_attensor_attensor(void* out, void* self, void* other) { void* ret = _lantern_xlogy_out_attensor_attensor_attensor(out, self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_xlogy_out_attensor_constatscalar_attensor)(void* out, void* self, void* other);
  HOST_API void* lantern_xlogy_out_attensor_constatscalar_attensor(void* out, void* self, void* other) { void* ret = _lantern_xlogy_out_attensor_constatscalar_attensor(out, self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_xlogy_out_attensor_attensor_constatscalar)(void* out, void* self, void* other);
  HOST_API void* lantern_xlogy_out_attensor_attensor_constatscalar(void* out, void* self, void* other) { void* ret = _lantern_xlogy_out_attensor_attensor_constatscalar(out, self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_logdet_attensor)(void* self);
  HOST_API void* lantern_logdet_attensor(void* self) { void* ret = _lantern_logdet_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_logdet_attensor)(void* self);
  HOST_API void* lantern_Tensor_logdet_attensor(void* self) { void* ret = _lantern_Tensor_logdet_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_logspace_constatscalar_constatscalar_intt_double_attensoroptions)(void* start, void* end, void* steps, void* base, void* options);
  HOST_API void* lantern_logspace_constatscalar_constatscalar_intt_double_attensoroptions(void* start, void* end, void* steps, void* base, void* options) { void* ret = _lantern_logspace_constatscalar_constatscalar_intt_double_attensoroptions(start, end, steps, base, options); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_logspace_out_attensor_constatscalar_constatscalar_intt_double)(void* out, void* start, void* end, void* steps, void* base);
  HOST_API void* lantern_logspace_out_attensor_constatscalar_constatscalar_intt_double(void* out, void* start, void* end, void* steps, void* base) { void* ret = _lantern_logspace_out_attensor_constatscalar_constatscalar_intt_double(out, start, end, steps, base); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_log_softmax_attensor_intt_atscalartype)(void* self, void* dim, void* dtype);
  HOST_API void* lantern_log_softmax_attensor_intt_atscalartype(void* self, void* dim, void* dtype) { void* ret = _lantern_log_softmax_attensor_intt_atscalartype(self, dim, dtype); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_log_softmax_attensor_intt_atscalartype)(void* self, void* dim, void* dtype);
  HOST_API void* lantern_Tensor_log_softmax_attensor_intt_atscalartype(void* self, void* dim, void* dtype) { void* ret = _lantern_Tensor_log_softmax_attensor_intt_atscalartype(self, dim, dtype); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_log_softmax_attensor_atdimname_atscalartype)(void* self, void* dim, void* dtype);
  HOST_API void* lantern_log_softmax_attensor_atdimname_atscalartype(void* self, void* dim, void* dtype) { void* ret = _lantern_log_softmax_attensor_atdimname_atscalartype(self, dim, dtype); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_log_softmax_attensor_atdimname_atscalartype)(void* self, void* dim, void* dtype);
  HOST_API void* lantern_Tensor_log_softmax_attensor_atdimname_atscalartype(void* self, void* dim, void* dtype) { void* ret = _lantern_Tensor_log_softmax_attensor_atdimname_atscalartype(self, dim, dtype); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__log_softmax_attensor_intt_bool)(void* self, void* dim, void* half_to_float);
  HOST_API void* lantern__log_softmax_attensor_intt_bool(void* self, void* dim, void* half_to_float) { void* ret = _lantern__log_softmax_attensor_intt_bool(self, dim, half_to_float); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__log_softmax_backward_data_attensor_attensor_intt_attensor)(void* grad_output, void* output, void* dim, void* self);
  HOST_API void* lantern__log_softmax_backward_data_attensor_attensor_intt_attensor(void* grad_output, void* output, void* dim, void* self) { void* ret = _lantern__log_softmax_backward_data_attensor_attensor_intt_attensor(grad_output, output, dim, self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__logcumsumexp_attensor_intt)(void* self, void* dim);
  HOST_API void* lantern__logcumsumexp_attensor_intt(void* self, void* dim) { void* ret = _lantern__logcumsumexp_attensor_intt(self, dim); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__logcumsumexp_out_attensor_attensor_intt)(void* out, void* self, void* dim);
  HOST_API void* lantern__logcumsumexp_out_attensor_attensor_intt(void* out, void* self, void* dim) { void* ret = _lantern__logcumsumexp_out_attensor_attensor_intt(out, self, dim); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_logcumsumexp_attensor_intt)(void* self, void* dim);
  HOST_API void* lantern_logcumsumexp_attensor_intt(void* self, void* dim) { void* ret = _lantern_logcumsumexp_attensor_intt(self, dim); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_logcumsumexp_attensor_intt)(void* self, void* dim);
  HOST_API void* lantern_Tensor_logcumsumexp_attensor_intt(void* self, void* dim) { void* ret = _lantern_Tensor_logcumsumexp_attensor_intt(self, dim); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_logcumsumexp_out_attensor_attensor_intt)(void* out, void* self, void* dim);
  HOST_API void* lantern_logcumsumexp_out_attensor_attensor_intt(void* out, void* self, void* dim) { void* ret = _lantern_logcumsumexp_out_attensor_attensor_intt(out, self, dim); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_logcumsumexp_attensor_atdimname)(void* self, void* dim);
  HOST_API void* lantern_logcumsumexp_attensor_atdimname(void* self, void* dim) { void* ret = _lantern_logcumsumexp_attensor_atdimname(self, dim); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_logcumsumexp_attensor_atdimname)(void* self, void* dim);
  HOST_API void* lantern_Tensor_logcumsumexp_attensor_atdimname(void* self, void* dim) { void* ret = _lantern_Tensor_logcumsumexp_attensor_atdimname(self, dim); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_logcumsumexp_out_attensor_attensor_atdimname)(void* out, void* self, void* dim);
  HOST_API void* lantern_logcumsumexp_out_attensor_attensor_atdimname(void* out, void* self, void* dim) { void* ret = _lantern_logcumsumexp_out_attensor_attensor_atdimname(out, self, dim); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_logsumexp_attensor_atintarrayref_bool)(void* self, void* dim, void* keepdim);
  HOST_API void* lantern_logsumexp_attensor_atintarrayref_bool(void* self, void* dim, void* keepdim) { void* ret = _lantern_logsumexp_attensor_atintarrayref_bool(self, dim, keepdim); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_logsumexp_attensor_atintarrayref_bool)(void* self, void* dim, void* keepdim);
  HOST_API void* lantern_Tensor_logsumexp_attensor_atintarrayref_bool(void* self, void* dim, void* keepdim) { void* ret = _lantern_Tensor_logsumexp_attensor_atintarrayref_bool(self, dim, keepdim); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_logsumexp_out_attensor_attensor_atintarrayref_bool)(void* out, void* self, void* dim, void* keepdim);
  HOST_API void* lantern_logsumexp_out_attensor_attensor_atintarrayref_bool(void* out, void* self, void* dim, void* keepdim) { void* ret = _lantern_logsumexp_out_attensor_attensor_atintarrayref_bool(out, self, dim, keepdim); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_logsumexp_attensor_atdimnamelist_bool)(void* self, void* dim, void* keepdim);
  HOST_API void* lantern_logsumexp_attensor_atdimnamelist_bool(void* self, void* dim, void* keepdim) { void* ret = _lantern_logsumexp_attensor_atdimnamelist_bool(self, dim, keepdim); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_logsumexp_attensor_atdimnamelist_bool)(void* self, void* dim, void* keepdim);
  HOST_API void* lantern_Tensor_logsumexp_attensor_atdimnamelist_bool(void* self, void* dim, void* keepdim) { void* ret = _lantern_Tensor_logsumexp_attensor_atdimnamelist_bool(self, dim, keepdim); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_logsumexp_out_attensor_attensor_atdimnamelist_bool)(void* out, void* self, void* dim, void* keepdim);
  HOST_API void* lantern_logsumexp_out_attensor_attensor_atdimnamelist_bool(void* out, void* self, void* dim, void* keepdim) { void* ret = _lantern_logsumexp_out_attensor_attensor_atdimnamelist_bool(out, self, dim, keepdim); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_margin_ranking_loss_attensor_attensor_attensor_double_intt)(void* input1, void* input2, void* target, void* margin, void* reduction);
  HOST_API void* lantern_margin_ranking_loss_attensor_attensor_attensor_double_intt(void* input1, void* input2, void* target, void* margin, void* reduction) { void* ret = _lantern_margin_ranking_loss_attensor_attensor_attensor_double_intt(input1, input2, target, margin, reduction); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_matmul_attensor_attensor)(void* self, void* other);
  HOST_API void* lantern_matmul_attensor_attensor(void* self, void* other) { void* ret = _lantern_matmul_attensor_attensor(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_matmul_attensor_attensor)(void* self, void* other);
  HOST_API void* lantern_Tensor_matmul_attensor_attensor(void* self, void* other) { void* ret = _lantern_Tensor_matmul_attensor_attensor(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_matmul_out_attensor_attensor_attensor)(void* out, void* self, void* other);
  HOST_API void* lantern_matmul_out_attensor_attensor_attensor(void* out, void* self, void* other) { void* ret = _lantern_matmul_out_attensor_attensor_attensor(out, self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_matrix_rank_attensor_double_bool)(void* self, void* tol, void* symmetric);
  HOST_API void* lantern_matrix_rank_attensor_double_bool(void* self, void* tol, void* symmetric) { void* ret = _lantern_matrix_rank_attensor_double_bool(self, tol, symmetric); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_matrix_rank_attensor_bool)(void* self, void* symmetric);
  HOST_API void* lantern_matrix_rank_attensor_bool(void* self, void* symmetric) { void* ret = _lantern_matrix_rank_attensor_bool(self, symmetric); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_matrix_power_attensor_intt)(void* self, void* n);
  HOST_API void* lantern_matrix_power_attensor_intt(void* self, void* n) { void* ret = _lantern_matrix_power_attensor_intt(self, n); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_matrix_power_attensor_intt)(void* self, void* n);
  HOST_API void* lantern_Tensor_matrix_power_attensor_intt(void* self, void* n) { void* ret = _lantern_Tensor_matrix_power_attensor_intt(self, n); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_matrix_power_out_attensor_attensor_intt)(void* out, void* self, void* n);
  HOST_API void* lantern_matrix_power_out_attensor_attensor_intt(void* out, void* self, void* n) { void* ret = _lantern_matrix_power_out_attensor_attensor_intt(out, self, n); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_matrix_exp_attensor)(void* self);
  HOST_API void* lantern_matrix_exp_attensor(void* self) { void* ret = _lantern_matrix_exp_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_matrix_exp_attensor)(void* self);
  HOST_API void* lantern_Tensor_matrix_exp_attensor(void* self) { void* ret = _lantern_Tensor_matrix_exp_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_matrix_exp_backward_attensor_attensor)(void* self, void* grad);
  HOST_API void* lantern_matrix_exp_backward_attensor_attensor(void* self, void* grad) { void* ret = _lantern_matrix_exp_backward_attensor_attensor(self, grad); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__aminmax_attensor)(void* self);
  HOST_API void* lantern__aminmax_attensor(void* self) { void* ret = _lantern__aminmax_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__aminmax_attensor_intt_bool)(void* self, void* dim, void* keepdim);
  HOST_API void* lantern__aminmax_attensor_intt_bool(void* self, void* dim, void* keepdim) { void* ret = _lantern__aminmax_attensor_intt_bool(self, dim, keepdim); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__compute_linear_combination_attensor_attensor)(void* input, void* coefficients);
  HOST_API void* lantern__compute_linear_combination_attensor_attensor(void* input, void* coefficients) { void* ret = _lantern__compute_linear_combination_attensor_attensor(input, coefficients); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__compute_linear_combination_out_attensor_attensor_attensor)(void* out, void* input, void* coefficients);
  HOST_API void* lantern__compute_linear_combination_out_attensor_attensor_attensor(void* out, void* input, void* coefficients) { void* ret = _lantern__compute_linear_combination_out_attensor_attensor_attensor(out, input, coefficients); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_max_attensor_intt_bool)(void* self, void* dim, void* keepdim);
  HOST_API void* lantern_max_attensor_intt_bool(void* self, void* dim, void* keepdim) { void* ret = _lantern_max_attensor_intt_bool(self, dim, keepdim); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_max_attensor_intt_bool)(void* self, void* dim, void* keepdim);
  HOST_API void* lantern_Tensor_max_attensor_intt_bool(void* self, void* dim, void* keepdim) { void* ret = _lantern_Tensor_max_attensor_intt_bool(self, dim, keepdim); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_max_out_attensor_attensor_attensor_intt_bool)(void* max, void* max_values, void* self, void* dim, void* keepdim);
  HOST_API void* lantern_max_out_attensor_attensor_attensor_intt_bool(void* max, void* max_values, void* self, void* dim, void* keepdim) { void* ret = _lantern_max_out_attensor_attensor_attensor_intt_bool(max, max_values, self, dim, keepdim); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_max_attensor_atdimname_bool)(void* self, void* dim, void* keepdim);
  HOST_API void* lantern_max_attensor_atdimname_bool(void* self, void* dim, void* keepdim) { void* ret = _lantern_max_attensor_atdimname_bool(self, dim, keepdim); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_max_attensor_atdimname_bool)(void* self, void* dim, void* keepdim);
  HOST_API void* lantern_Tensor_max_attensor_atdimname_bool(void* self, void* dim, void* keepdim) { void* ret = _lantern_Tensor_max_attensor_atdimname_bool(self, dim, keepdim); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_max_out_attensor_attensor_attensor_atdimname_bool)(void* max, void* max_values, void* self, void* dim, void* keepdim);
  HOST_API void* lantern_max_out_attensor_attensor_attensor_atdimname_bool(void* max, void* max_values, void* self, void* dim, void* keepdim) { void* ret = _lantern_max_out_attensor_attensor_attensor_atdimname_bool(max, max_values, self, dim, keepdim); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_value_selecting_reduction_backward_attensor_intt_attensor_atintarrayref_bool)(void* grad, void* dim, void* indices, void* sizes, void* keepdim);
  HOST_API void* lantern_value_selecting_reduction_backward_attensor_intt_attensor_atintarrayref_bool(void* grad, void* dim, void* indices, void* sizes, void* keepdim) { void* ret = _lantern_value_selecting_reduction_backward_attensor_intt_attensor_atintarrayref_bool(grad, dim, indices, sizes, keepdim); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_amax_attensor_atintarrayref_bool)(void* self, void* dim, void* keepdim);
  HOST_API void* lantern_amax_attensor_atintarrayref_bool(void* self, void* dim, void* keepdim) { void* ret = _lantern_amax_attensor_atintarrayref_bool(self, dim, keepdim); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_amax_attensor_atintarrayref_bool)(void* self, void* dim, void* keepdim);
  HOST_API void* lantern_Tensor_amax_attensor_atintarrayref_bool(void* self, void* dim, void* keepdim) { void* ret = _lantern_Tensor_amax_attensor_atintarrayref_bool(self, dim, keepdim); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_amax_out_attensor_attensor_atintarrayref_bool)(void* out, void* self, void* dim, void* keepdim);
  HOST_API void* lantern_amax_out_attensor_attensor_atintarrayref_bool(void* out, void* self, void* dim, void* keepdim) { void* ret = _lantern_amax_out_attensor_attensor_atintarrayref_bool(out, self, dim, keepdim); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_max_pool1d_with_indices_attensor_atintarrayref_atintarrayref_atintarrayref_atintarrayref_bool)(void* self, void* kernel_size, void* stride, void* padding, void* dilation, void* ceil_mode);
  HOST_API void* lantern_max_pool1d_with_indices_attensor_atintarrayref_atintarrayref_atintarrayref_atintarrayref_bool(void* self, void* kernel_size, void* stride, void* padding, void* dilation, void* ceil_mode) { void* ret = _lantern_max_pool1d_with_indices_attensor_atintarrayref_atintarrayref_atintarrayref_atintarrayref_bool(self, kernel_size, stride, padding, dilation, ceil_mode); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_max_pool1d_attensor_atintarrayref_atintarrayref_atintarrayref_atintarrayref_bool)(void* self, void* kernel_size, void* stride, void* padding, void* dilation, void* ceil_mode);
  HOST_API void* lantern_max_pool1d_attensor_atintarrayref_atintarrayref_atintarrayref_atintarrayref_bool(void* self, void* kernel_size, void* stride, void* padding, void* dilation, void* ceil_mode) { void* ret = _lantern_max_pool1d_attensor_atintarrayref_atintarrayref_atintarrayref_atintarrayref_bool(self, kernel_size, stride, padding, dilation, ceil_mode); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_max_pool2d_attensor_atintarrayref_atintarrayref_atintarrayref_atintarrayref_bool)(void* self, void* kernel_size, void* stride, void* padding, void* dilation, void* ceil_mode);
  HOST_API void* lantern_max_pool2d_attensor_atintarrayref_atintarrayref_atintarrayref_atintarrayref_bool(void* self, void* kernel_size, void* stride, void* padding, void* dilation, void* ceil_mode) { void* ret = _lantern_max_pool2d_attensor_atintarrayref_atintarrayref_atintarrayref_atintarrayref_bool(self, kernel_size, stride, padding, dilation, ceil_mode); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_mkldnn_max_pool2d_attensor_atintarrayref_atintarrayref_atintarrayref_atintarrayref_bool)(void* self, void* kernel_size, void* stride, void* padding, void* dilation, void* ceil_mode);
  HOST_API void* lantern_mkldnn_max_pool2d_attensor_atintarrayref_atintarrayref_atintarrayref_atintarrayref_bool(void* self, void* kernel_size, void* stride, void* padding, void* dilation, void* ceil_mode) { void* ret = _lantern_mkldnn_max_pool2d_attensor_atintarrayref_atintarrayref_atintarrayref_atintarrayref_bool(self, kernel_size, stride, padding, dilation, ceil_mode); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_mkldnn_max_pool2d_backward_attensor_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_atintarrayref_bool)(void* grad_output, void* output, void* input, void* kernel_size, void* stride, void* padding, void* dilation, void* ceil_mode);
  HOST_API void* lantern_mkldnn_max_pool2d_backward_attensor_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_atintarrayref_bool(void* grad_output, void* output, void* input, void* kernel_size, void* stride, void* padding, void* dilation, void* ceil_mode) { void* ret = _lantern_mkldnn_max_pool2d_backward_attensor_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_atintarrayref_bool(grad_output, output, input, kernel_size, stride, padding, dilation, ceil_mode); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_mkldnn_max_pool3d_attensor_atintarrayref_atintarrayref_atintarrayref_atintarrayref_bool)(void* self, void* kernel_size, void* stride, void* padding, void* dilation, void* ceil_mode);
  HOST_API void* lantern_mkldnn_max_pool3d_attensor_atintarrayref_atintarrayref_atintarrayref_atintarrayref_bool(void* self, void* kernel_size, void* stride, void* padding, void* dilation, void* ceil_mode) { void* ret = _lantern_mkldnn_max_pool3d_attensor_atintarrayref_atintarrayref_atintarrayref_atintarrayref_bool(self, kernel_size, stride, padding, dilation, ceil_mode); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_mkldnn_max_pool3d_backward_attensor_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_atintarrayref_bool)(void* grad_output, void* output, void* input, void* kernel_size, void* stride, void* padding, void* dilation, void* ceil_mode);
  HOST_API void* lantern_mkldnn_max_pool3d_backward_attensor_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_atintarrayref_bool(void* grad_output, void* output, void* input, void* kernel_size, void* stride, void* padding, void* dilation, void* ceil_mode) { void* ret = _lantern_mkldnn_max_pool3d_backward_attensor_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_atintarrayref_bool(grad_output, output, input, kernel_size, stride, padding, dilation, ceil_mode); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_quantized_max_pool1d_attensor_atintarrayref_atintarrayref_atintarrayref_atintarrayref_bool)(void* self, void* kernel_size, void* stride, void* padding, void* dilation, void* ceil_mode);
  HOST_API void* lantern_quantized_max_pool1d_attensor_atintarrayref_atintarrayref_atintarrayref_atintarrayref_bool(void* self, void* kernel_size, void* stride, void* padding, void* dilation, void* ceil_mode) { void* ret = _lantern_quantized_max_pool1d_attensor_atintarrayref_atintarrayref_atintarrayref_atintarrayref_bool(self, kernel_size, stride, padding, dilation, ceil_mode); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_quantized_max_pool2d_attensor_atintarrayref_atintarrayref_atintarrayref_atintarrayref_bool)(void* self, void* kernel_size, void* stride, void* padding, void* dilation, void* ceil_mode);
  HOST_API void* lantern_quantized_max_pool2d_attensor_atintarrayref_atintarrayref_atintarrayref_atintarrayref_bool(void* self, void* kernel_size, void* stride, void* padding, void* dilation, void* ceil_mode) { void* ret = _lantern_quantized_max_pool2d_attensor_atintarrayref_atintarrayref_atintarrayref_atintarrayref_bool(self, kernel_size, stride, padding, dilation, ceil_mode); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_max_pool3d_attensor_atintarrayref_atintarrayref_atintarrayref_atintarrayref_bool)(void* self, void* kernel_size, void* stride, void* padding, void* dilation, void* ceil_mode);
  HOST_API void* lantern_max_pool3d_attensor_atintarrayref_atintarrayref_atintarrayref_atintarrayref_bool(void* self, void* kernel_size, void* stride, void* padding, void* dilation, void* ceil_mode) { void* ret = _lantern_max_pool3d_attensor_atintarrayref_atintarrayref_atintarrayref_atintarrayref_bool(self, kernel_size, stride, padding, dilation, ceil_mode); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_mean_attensor_atscalartype)(void* self, void* dtype);
  HOST_API void* lantern_mean_attensor_atscalartype(void* self, void* dtype) { void* ret = _lantern_mean_attensor_atscalartype(self, dtype); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_mean_attensor_atscalartype)(void* self, void* dtype);
  HOST_API void* lantern_Tensor_mean_attensor_atscalartype(void* self, void* dtype) { void* ret = _lantern_Tensor_mean_attensor_atscalartype(self, dtype); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_mean_attensor_atintarrayref_bool_atscalartype)(void* self, void* dim, void* keepdim, void* dtype);
  HOST_API void* lantern_mean_attensor_atintarrayref_bool_atscalartype(void* self, void* dim, void* keepdim, void* dtype) { void* ret = _lantern_mean_attensor_atintarrayref_bool_atscalartype(self, dim, keepdim, dtype); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_mean_attensor_atintarrayref_bool_atscalartype)(void* self, void* dim, void* keepdim, void* dtype);
  HOST_API void* lantern_Tensor_mean_attensor_atintarrayref_bool_atscalartype(void* self, void* dim, void* keepdim, void* dtype) { void* ret = _lantern_Tensor_mean_attensor_atintarrayref_bool_atscalartype(self, dim, keepdim, dtype); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_mean_out_attensor_attensor_atintarrayref_bool_atscalartype)(void* out, void* self, void* dim, void* keepdim, void* dtype);
  HOST_API void* lantern_mean_out_attensor_attensor_atintarrayref_bool_atscalartype(void* out, void* self, void* dim, void* keepdim, void* dtype) { void* ret = _lantern_mean_out_attensor_attensor_atintarrayref_bool_atscalartype(out, self, dim, keepdim, dtype); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_mean_attensor_atdimnamelist_bool_atscalartype)(void* self, void* dim, void* keepdim, void* dtype);
  HOST_API void* lantern_mean_attensor_atdimnamelist_bool_atscalartype(void* self, void* dim, void* keepdim, void* dtype) { void* ret = _lantern_mean_attensor_atdimnamelist_bool_atscalartype(self, dim, keepdim, dtype); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_mean_attensor_atdimnamelist_bool_atscalartype)(void* self, void* dim, void* keepdim, void* dtype);
  HOST_API void* lantern_Tensor_mean_attensor_atdimnamelist_bool_atscalartype(void* self, void* dim, void* keepdim, void* dtype) { void* ret = _lantern_Tensor_mean_attensor_atdimnamelist_bool_atscalartype(self, dim, keepdim, dtype); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_mean_out_attensor_attensor_atdimnamelist_bool_atscalartype)(void* out, void* self, void* dim, void* keepdim, void* dtype);
  HOST_API void* lantern_mean_out_attensor_attensor_atdimnamelist_bool_atscalartype(void* out, void* self, void* dim, void* keepdim, void* dtype) { void* ret = _lantern_mean_out_attensor_attensor_atdimnamelist_bool_atscalartype(out, self, dim, keepdim, dtype); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_median_attensor)(void* self);
  HOST_API void* lantern_median_attensor(void* self) { void* ret = _lantern_median_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_median_attensor)(void* self);
  HOST_API void* lantern_Tensor_median_attensor(void* self) { void* ret = _lantern_Tensor_median_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_median_attensor_intt_bool)(void* self, void* dim, void* keepdim);
  HOST_API void* lantern_median_attensor_intt_bool(void* self, void* dim, void* keepdim) { void* ret = _lantern_median_attensor_intt_bool(self, dim, keepdim); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_median_attensor_intt_bool)(void* self, void* dim, void* keepdim);
  HOST_API void* lantern_Tensor_median_attensor_intt_bool(void* self, void* dim, void* keepdim) { void* ret = _lantern_Tensor_median_attensor_intt_bool(self, dim, keepdim); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_median_out_attensor_attensor_attensor_intt_bool)(void* values, void* indices, void* self, void* dim, void* keepdim);
  HOST_API void* lantern_median_out_attensor_attensor_attensor_intt_bool(void* values, void* indices, void* self, void* dim, void* keepdim) { void* ret = _lantern_median_out_attensor_attensor_attensor_intt_bool(values, indices, self, dim, keepdim); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_median_attensor_atdimname_bool)(void* self, void* dim, void* keepdim);
  HOST_API void* lantern_median_attensor_atdimname_bool(void* self, void* dim, void* keepdim) { void* ret = _lantern_median_attensor_atdimname_bool(self, dim, keepdim); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_median_attensor_atdimname_bool)(void* self, void* dim, void* keepdim);
  HOST_API void* lantern_Tensor_median_attensor_atdimname_bool(void* self, void* dim, void* keepdim) { void* ret = _lantern_Tensor_median_attensor_atdimname_bool(self, dim, keepdim); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_median_out_attensor_attensor_attensor_atdimname_bool)(void* values, void* indices, void* self, void* dim, void* keepdim);
  HOST_API void* lantern_median_out_attensor_attensor_attensor_atdimname_bool(void* values, void* indices, void* self, void* dim, void* keepdim) { void* ret = _lantern_median_out_attensor_attensor_attensor_atdimname_bool(values, indices, self, dim, keepdim); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_nanmedian_attensor)(void* self);
  HOST_API void* lantern_nanmedian_attensor(void* self) { void* ret = _lantern_nanmedian_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_nanmedian_attensor)(void* self);
  HOST_API void* lantern_Tensor_nanmedian_attensor(void* self) { void* ret = _lantern_Tensor_nanmedian_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_nanmedian_attensor_intt_bool)(void* self, void* dim, void* keepdim);
  HOST_API void* lantern_nanmedian_attensor_intt_bool(void* self, void* dim, void* keepdim) { void* ret = _lantern_nanmedian_attensor_intt_bool(self, dim, keepdim); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_nanmedian_attensor_intt_bool)(void* self, void* dim, void* keepdim);
  HOST_API void* lantern_Tensor_nanmedian_attensor_intt_bool(void* self, void* dim, void* keepdim) { void* ret = _lantern_Tensor_nanmedian_attensor_intt_bool(self, dim, keepdim); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_nanmedian_out_attensor_attensor_attensor_intt_bool)(void* values, void* indices, void* self, void* dim, void* keepdim);
  HOST_API void* lantern_nanmedian_out_attensor_attensor_attensor_intt_bool(void* values, void* indices, void* self, void* dim, void* keepdim) { void* ret = _lantern_nanmedian_out_attensor_attensor_attensor_intt_bool(values, indices, self, dim, keepdim); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_nanmedian_attensor_atdimname_bool)(void* self, void* dim, void* keepdim);
  HOST_API void* lantern_nanmedian_attensor_atdimname_bool(void* self, void* dim, void* keepdim) { void* ret = _lantern_nanmedian_attensor_atdimname_bool(self, dim, keepdim); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_nanmedian_attensor_atdimname_bool)(void* self, void* dim, void* keepdim);
  HOST_API void* lantern_Tensor_nanmedian_attensor_atdimname_bool(void* self, void* dim, void* keepdim) { void* ret = _lantern_Tensor_nanmedian_attensor_atdimname_bool(self, dim, keepdim); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_nanmedian_out_attensor_attensor_attensor_atdimname_bool)(void* values, void* indices, void* self, void* dim, void* keepdim);
  HOST_API void* lantern_nanmedian_out_attensor_attensor_attensor_atdimname_bool(void* values, void* indices, void* self, void* dim, void* keepdim) { void* ret = _lantern_nanmedian_out_attensor_attensor_attensor_atdimname_bool(values, indices, self, dim, keepdim); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_min_attensor_intt_bool)(void* self, void* dim, void* keepdim);
  HOST_API void* lantern_min_attensor_intt_bool(void* self, void* dim, void* keepdim) { void* ret = _lantern_min_attensor_intt_bool(self, dim, keepdim); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_min_attensor_intt_bool)(void* self, void* dim, void* keepdim);
  HOST_API void* lantern_Tensor_min_attensor_intt_bool(void* self, void* dim, void* keepdim) { void* ret = _lantern_Tensor_min_attensor_intt_bool(self, dim, keepdim); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_min_out_attensor_attensor_attensor_intt_bool)(void* min, void* min_indices, void* self, void* dim, void* keepdim);
  HOST_API void* lantern_min_out_attensor_attensor_attensor_intt_bool(void* min, void* min_indices, void* self, void* dim, void* keepdim) { void* ret = _lantern_min_out_attensor_attensor_attensor_intt_bool(min, min_indices, self, dim, keepdim); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_min_attensor_atdimname_bool)(void* self, void* dim, void* keepdim);
  HOST_API void* lantern_min_attensor_atdimname_bool(void* self, void* dim, void* keepdim) { void* ret = _lantern_min_attensor_atdimname_bool(self, dim, keepdim); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_min_attensor_atdimname_bool)(void* self, void* dim, void* keepdim);
  HOST_API void* lantern_Tensor_min_attensor_atdimname_bool(void* self, void* dim, void* keepdim) { void* ret = _lantern_Tensor_min_attensor_atdimname_bool(self, dim, keepdim); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_min_out_attensor_attensor_attensor_atdimname_bool)(void* min, void* min_indices, void* self, void* dim, void* keepdim);
  HOST_API void* lantern_min_out_attensor_attensor_attensor_atdimname_bool(void* min, void* min_indices, void* self, void* dim, void* keepdim) { void* ret = _lantern_min_out_attensor_attensor_attensor_atdimname_bool(min, min_indices, self, dim, keepdim); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_amin_attensor_atintarrayref_bool)(void* self, void* dim, void* keepdim);
  HOST_API void* lantern_amin_attensor_atintarrayref_bool(void* self, void* dim, void* keepdim) { void* ret = _lantern_amin_attensor_atintarrayref_bool(self, dim, keepdim); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_amin_attensor_atintarrayref_bool)(void* self, void* dim, void* keepdim);
  HOST_API void* lantern_Tensor_amin_attensor_atintarrayref_bool(void* self, void* dim, void* keepdim) { void* ret = _lantern_Tensor_amin_attensor_atintarrayref_bool(self, dim, keepdim); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_amin_out_attensor_attensor_atintarrayref_bool)(void* out, void* self, void* dim, void* keepdim);
  HOST_API void* lantern_amin_out_attensor_attensor_atintarrayref_bool(void* out, void* self, void* dim, void* keepdim) { void* ret = _lantern_amin_out_attensor_attensor_atintarrayref_bool(out, self, dim, keepdim); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_mkldnn_convolution_attensor_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_intt)(void* self, void* weight, void* bias, void* padding, void* stride, void* dilation, void* groups);
  HOST_API void* lantern_mkldnn_convolution_attensor_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_intt(void* self, void* weight, void* bias, void* padding, void* stride, void* dilation, void* groups) { void* ret = _lantern_mkldnn_convolution_attensor_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_intt(self, weight, bias, padding, stride, dilation, groups); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_mkldnn_convolution_backward_input_atintarrayref_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_intt_bool)(void* self_size, void* grad_output, void* weight, void* padding, void* stride, void* dilation, void* groups, void* bias_defined);
  HOST_API void* lantern_mkldnn_convolution_backward_input_atintarrayref_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_intt_bool(void* self_size, void* grad_output, void* weight, void* padding, void* stride, void* dilation, void* groups, void* bias_defined) { void* ret = _lantern_mkldnn_convolution_backward_input_atintarrayref_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_intt_bool(self_size, grad_output, weight, padding, stride, dilation, groups, bias_defined); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_mkldnn_convolution_backward_weights_atintarrayref_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_intt_bool)(void* weight_size, void* grad_output, void* self, void* padding, void* stride, void* dilation, void* groups, void* bias_defined);
  HOST_API void* lantern_mkldnn_convolution_backward_weights_atintarrayref_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_intt_bool(void* weight_size, void* grad_output, void* self, void* padding, void* stride, void* dilation, void* groups, void* bias_defined) { void* ret = _lantern_mkldnn_convolution_backward_weights_atintarrayref_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_intt_bool(weight_size, grad_output, self, padding, stride, dilation, groups, bias_defined); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_mkldnn_convolution_backward_attensor_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_intt_stdarraybool)(void* self, void* grad_output, void* weight, void* padding, void* stride, void* dilation, void* groups, void* output_mask);
  HOST_API void* lantern_mkldnn_convolution_backward_attensor_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_intt_stdarraybool(void* self, void* grad_output, void* weight, void* padding, void* stride, void* dilation, void* groups, void* output_mask) { void* ret = _lantern_mkldnn_convolution_backward_attensor_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_intt_stdarraybool(self, grad_output, weight, padding, stride, dilation, groups, output_mask); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_miopen_batch_norm_attensor_attensor_attensor_attensor_attensor_bool_double_double)(void* input, void* weight, void* bias, void* running_mean, void* running_var, void* training, void* exponential_average_factor, void* epsilon);
  HOST_API void* lantern_miopen_batch_norm_attensor_attensor_attensor_attensor_attensor_bool_double_double(void* input, void* weight, void* bias, void* running_mean, void* running_var, void* training, void* exponential_average_factor, void* epsilon) { void* ret = _lantern_miopen_batch_norm_attensor_attensor_attensor_attensor_attensor_bool_double_double(input, weight, bias, running_mean, running_var, training, exponential_average_factor, epsilon); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_miopen_batch_norm_backward_attensor_attensor_attensor_attensor_attensor_attensor_attensor_double)(void* input, void* grad_output, void* weight, void* running_mean, void* running_var, void* save_mean, void* save_var, void* epsilon);
  HOST_API void* lantern_miopen_batch_norm_backward_attensor_attensor_attensor_attensor_attensor_attensor_attensor_double(void* input, void* grad_output, void* weight, void* running_mean, void* running_var, void* save_mean, void* save_var, void* epsilon) { void* ret = _lantern_miopen_batch_norm_backward_attensor_attensor_attensor_attensor_attensor_attensor_attensor_double(input, grad_output, weight, running_mean, running_var, save_mean, save_var, epsilon); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_miopen_convolution_attensor_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_intt_bool_bool)(void* self, void* weight, void* bias, void* padding, void* stride, void* dilation, void* groups, void* benchmark, void* deterministic);
  HOST_API void* lantern_miopen_convolution_attensor_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_intt_bool_bool(void* self, void* weight, void* bias, void* padding, void* stride, void* dilation, void* groups, void* benchmark, void* deterministic) { void* ret = _lantern_miopen_convolution_attensor_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_intt_bool_bool(self, weight, bias, padding, stride, dilation, groups, benchmark, deterministic); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_miopen_convolution_backward_input_atintarrayref_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_intt_bool_bool)(void* self_size, void* grad_output, void* weight, void* padding, void* stride, void* dilation, void* groups, void* benchmark, void* deterministic);
  HOST_API void* lantern_miopen_convolution_backward_input_atintarrayref_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_intt_bool_bool(void* self_size, void* grad_output, void* weight, void* padding, void* stride, void* dilation, void* groups, void* benchmark, void* deterministic) { void* ret = _lantern_miopen_convolution_backward_input_atintarrayref_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_intt_bool_bool(self_size, grad_output, weight, padding, stride, dilation, groups, benchmark, deterministic); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_miopen_convolution_backward_attensor_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_intt_bool_bool_stdarraybool)(void* self, void* grad_output, void* weight, void* padding, void* stride, void* dilation, void* groups, void* benchmark, void* deterministic, void* output_mask);
  HOST_API void* lantern_miopen_convolution_backward_attensor_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_intt_bool_bool_stdarraybool(void* self, void* grad_output, void* weight, void* padding, void* stride, void* dilation, void* groups, void* benchmark, void* deterministic, void* output_mask) { void* ret = _lantern_miopen_convolution_backward_attensor_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_intt_bool_bool_stdarraybool(self, grad_output, weight, padding, stride, dilation, groups, benchmark, deterministic, output_mask); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_miopen_convolution_backward_bias_attensor)(void* grad_output);
  HOST_API void* lantern_miopen_convolution_backward_bias_attensor(void* grad_output) { void* ret = _lantern_miopen_convolution_backward_bias_attensor(grad_output); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_miopen_convolution_backward_weight_atintarrayref_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_intt_bool_bool)(void* weight_size, void* grad_output, void* self, void* padding, void* stride, void* dilation, void* groups, void* benchmark, void* deterministic);
  HOST_API void* lantern_miopen_convolution_backward_weight_atintarrayref_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_intt_bool_bool(void* weight_size, void* grad_output, void* self, void* padding, void* stride, void* dilation, void* groups, void* benchmark, void* deterministic) { void* ret = _lantern_miopen_convolution_backward_weight_atintarrayref_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_intt_bool_bool(weight_size, grad_output, self, padding, stride, dilation, groups, benchmark, deterministic); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_miopen_convolution_transpose_attensor_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_atintarrayref_intt_bool_bool)(void* self, void* weight, void* bias, void* padding, void* output_padding, void* stride, void* dilation, void* groups, void* benchmark, void* deterministic);
  HOST_API void* lantern_miopen_convolution_transpose_attensor_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_atintarrayref_intt_bool_bool(void* self, void* weight, void* bias, void* padding, void* output_padding, void* stride, void* dilation, void* groups, void* benchmark, void* deterministic) { void* ret = _lantern_miopen_convolution_transpose_attensor_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_atintarrayref_intt_bool_bool(self, weight, bias, padding, output_padding, stride, dilation, groups, benchmark, deterministic); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_miopen_convolution_transpose_backward_attensor_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_atintarrayref_intt_bool_bool_stdarraybool)(void* self, void* grad_output, void* weight, void* padding, void* output_padding, void* stride, void* dilation, void* groups, void* benchmark, void* deterministic, void* output_mask);
  HOST_API void* lantern_miopen_convolution_transpose_backward_attensor_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_atintarrayref_intt_bool_bool_stdarraybool(void* self, void* grad_output, void* weight, void* padding, void* output_padding, void* stride, void* dilation, void* groups, void* benchmark, void* deterministic, void* output_mask) { void* ret = _lantern_miopen_convolution_transpose_backward_attensor_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_atintarrayref_intt_bool_bool_stdarraybool(self, grad_output, weight, padding, output_padding, stride, dilation, groups, benchmark, deterministic, output_mask); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_miopen_convolution_transpose_backward_input_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_intt_bool_bool)(void* grad_output, void* weight, void* padding, void* stride, void* dilation, void* groups, void* benchmark, void* deterministic);
  HOST_API void* lantern_miopen_convolution_transpose_backward_input_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_intt_bool_bool(void* grad_output, void* weight, void* padding, void* stride, void* dilation, void* groups, void* benchmark, void* deterministic) { void* ret = _lantern_miopen_convolution_transpose_backward_input_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_intt_bool_bool(grad_output, weight, padding, stride, dilation, groups, benchmark, deterministic); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_miopen_convolution_transpose_backward_weight_atintarrayref_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_intt_bool_bool)(void* weight_size, void* grad_output, void* self, void* padding, void* stride, void* dilation, void* groups, void* benchmark, void* deterministic);
  HOST_API void* lantern_miopen_convolution_transpose_backward_weight_atintarrayref_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_intt_bool_bool(void* weight_size, void* grad_output, void* self, void* padding, void* stride, void* dilation, void* groups, void* benchmark, void* deterministic) { void* ret = _lantern_miopen_convolution_transpose_backward_weight_atintarrayref_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_intt_bool_bool(weight_size, grad_output, self, padding, stride, dilation, groups, benchmark, deterministic); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_miopen_depthwise_convolution_attensor_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_intt_bool_bool)(void* self, void* weight, void* bias, void* padding, void* stride, void* dilation, void* groups, void* benchmark, void* deterministic);
  HOST_API void* lantern_miopen_depthwise_convolution_attensor_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_intt_bool_bool(void* self, void* weight, void* bias, void* padding, void* stride, void* dilation, void* groups, void* benchmark, void* deterministic) { void* ret = _lantern_miopen_depthwise_convolution_attensor_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_intt_bool_bool(self, weight, bias, padding, stride, dilation, groups, benchmark, deterministic); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_miopen_depthwise_convolution_backward_input_atintarrayref_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_intt_bool_bool)(void* self_size, void* grad_output, void* weight, void* padding, void* stride, void* dilation, void* groups, void* benchmark, void* deterministic);
  HOST_API void* lantern_miopen_depthwise_convolution_backward_input_atintarrayref_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_intt_bool_bool(void* self_size, void* grad_output, void* weight, void* padding, void* stride, void* dilation, void* groups, void* benchmark, void* deterministic) { void* ret = _lantern_miopen_depthwise_convolution_backward_input_atintarrayref_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_intt_bool_bool(self_size, grad_output, weight, padding, stride, dilation, groups, benchmark, deterministic); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_miopen_depthwise_convolution_backward_attensor_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_intt_bool_bool_stdarraybool)(void* self, void* grad_output, void* weight, void* padding, void* stride, void* dilation, void* groups, void* benchmark, void* deterministic, void* output_mask);
  HOST_API void* lantern_miopen_depthwise_convolution_backward_attensor_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_intt_bool_bool_stdarraybool(void* self, void* grad_output, void* weight, void* padding, void* stride, void* dilation, void* groups, void* benchmark, void* deterministic, void* output_mask) { void* ret = _lantern_miopen_depthwise_convolution_backward_attensor_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_intt_bool_bool_stdarraybool(self, grad_output, weight, padding, stride, dilation, groups, benchmark, deterministic, output_mask); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_miopen_depthwise_convolution_backward_weight_atintarrayref_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_intt_bool_bool)(void* weight_size, void* grad_output, void* self, void* padding, void* stride, void* dilation, void* groups, void* benchmark, void* deterministic);
  HOST_API void* lantern_miopen_depthwise_convolution_backward_weight_atintarrayref_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_intt_bool_bool(void* weight_size, void* grad_output, void* self, void* padding, void* stride, void* dilation, void* groups, void* benchmark, void* deterministic) { void* ret = _lantern_miopen_depthwise_convolution_backward_weight_atintarrayref_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_intt_bool_bool(weight_size, grad_output, self, padding, stride, dilation, groups, benchmark, deterministic); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_miopen_rnn_attensor_attensorlist_intt_attensor_attensor_intt_intt_intt_bool_double_bool_bool_atintarrayref_attensor)(void* input, void* weight, void* weight_stride0, void* hx, void* cx, void* mode, void* hidden_size, void* num_layers, void* batch_first, void* dropout, void* train, void* bidirectional, void* batch_sizes, void* dropout_state);
  HOST_API void* lantern_miopen_rnn_attensor_attensorlist_intt_attensor_attensor_intt_intt_intt_bool_double_bool_bool_atintarrayref_attensor(void* input, void* weight, void* weight_stride0, void* hx, void* cx, void* mode, void* hidden_size, void* num_layers, void* batch_first, void* dropout, void* train, void* bidirectional, void* batch_sizes, void* dropout_state) { void* ret = _lantern_miopen_rnn_attensor_attensorlist_intt_attensor_attensor_intt_intt_intt_bool_double_bool_bool_atintarrayref_attensor(input, weight, weight_stride0, hx, cx, mode, hidden_size, num_layers, batch_first, dropout, train, bidirectional, batch_sizes, dropout_state); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_miopen_rnn_backward_attensor_attensorlist_intt_attensor_attensor_attensor_attensor_attensor_attensor_attensor_intt_intt_intt_bool_double_bool_bool_atintarrayref_attensor_attensor_stdarraybool)(void* input, void* weight, void* weight_stride0, void* weight_buf, void* hx, void* cx, void* output, void* grad_output, void* grad_hy, void* grad_cy, void* mode, void* hidden_size, void* num_layers, void* batch_first, void* dropout, void* train, void* bidirectional, void* batch_sizes, void* dropout_state, void* reserve, void* output_mask);
  HOST_API void* lantern_miopen_rnn_backward_attensor_attensorlist_intt_attensor_attensor_attensor_attensor_attensor_attensor_attensor_intt_intt_intt_bool_double_bool_bool_atintarrayref_attensor_attensor_stdarraybool(void* input, void* weight, void* weight_stride0, void* weight_buf, void* hx, void* cx, void* output, void* grad_output, void* grad_hy, void* grad_cy, void* mode, void* hidden_size, void* num_layers, void* batch_first, void* dropout, void* train, void* bidirectional, void* batch_sizes, void* dropout_state, void* reserve, void* output_mask) { void* ret = _lantern_miopen_rnn_backward_attensor_attensorlist_intt_attensor_attensor_attensor_attensor_attensor_attensor_attensor_intt_intt_intt_bool_double_bool_bool_atintarrayref_attensor_attensor_stdarraybool(input, weight, weight_stride0, weight_buf, hx, cx, output, grad_output, grad_hy, grad_cy, mode, hidden_size, num_layers, batch_first, dropout, train, bidirectional, batch_sizes, dropout_state, reserve, output_mask); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_mm_attensor_attensor)(void* self, void* mat2);
  HOST_API void* lantern_mm_attensor_attensor(void* self, void* mat2) { void* ret = _lantern_mm_attensor_attensor(self, mat2); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_mm_attensor_attensor)(void* self, void* mat2);
  HOST_API void* lantern_Tensor_mm_attensor_attensor(void* self, void* mat2) { void* ret = _lantern_Tensor_mm_attensor_attensor(self, mat2); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_mm_out_attensor_attensor_attensor)(void* out, void* self, void* mat2);
  HOST_API void* lantern_mm_out_attensor_attensor_attensor(void* out, void* self, void* mat2) { void* ret = _lantern_mm_out_attensor_attensor_attensor(out, self, mat2); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__sparse_mm_attensor_attensor)(void* sparse, void* dense);
  HOST_API void* lantern__sparse_mm_attensor_attensor(void* sparse, void* dense) { void* ret = _lantern__sparse_mm_attensor_attensor(sparse, dense); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__sparse_sparse_matmul_attensor_attensor)(void* self, void* other);
  HOST_API void* lantern__sparse_sparse_matmul_attensor_attensor(void* self, void* other) { void* ret = _lantern__sparse_sparse_matmul_attensor_attensor(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__sparse_mask_helper_attensor_attensor)(void* t, void* mask_indices);
  HOST_API void* lantern__sparse_mask_helper_attensor_attensor(void* t, void* mask_indices) { void* ret = _lantern__sparse_mask_helper_attensor_attensor(t, mask_indices); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_mode_attensor_intt_bool)(void* self, void* dim, void* keepdim);
  HOST_API void* lantern_mode_attensor_intt_bool(void* self, void* dim, void* keepdim) { void* ret = _lantern_mode_attensor_intt_bool(self, dim, keepdim); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_mode_attensor_intt_bool)(void* self, void* dim, void* keepdim);
  HOST_API void* lantern_Tensor_mode_attensor_intt_bool(void* self, void* dim, void* keepdim) { void* ret = _lantern_Tensor_mode_attensor_intt_bool(self, dim, keepdim); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_mode_out_attensor_attensor_attensor_intt_bool)(void* values, void* indices, void* self, void* dim, void* keepdim);
  HOST_API void* lantern_mode_out_attensor_attensor_attensor_intt_bool(void* values, void* indices, void* self, void* dim, void* keepdim) { void* ret = _lantern_mode_out_attensor_attensor_attensor_intt_bool(values, indices, self, dim, keepdim); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_mode_attensor_atdimname_bool)(void* self, void* dim, void* keepdim);
  HOST_API void* lantern_mode_attensor_atdimname_bool(void* self, void* dim, void* keepdim) { void* ret = _lantern_mode_attensor_atdimname_bool(self, dim, keepdim); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_mode_attensor_atdimname_bool)(void* self, void* dim, void* keepdim);
  HOST_API void* lantern_Tensor_mode_attensor_atdimname_bool(void* self, void* dim, void* keepdim) { void* ret = _lantern_Tensor_mode_attensor_atdimname_bool(self, dim, keepdim); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_mode_out_attensor_attensor_attensor_atdimname_bool)(void* values, void* indices, void* self, void* dim, void* keepdim);
  HOST_API void* lantern_mode_out_attensor_attensor_attensor_atdimname_bool(void* values, void* indices, void* self, void* dim, void* keepdim) { void* ret = _lantern_mode_out_attensor_attensor_attensor_atdimname_bool(values, indices, self, dim, keepdim); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_mul_attensor_attensor)(void* self, void* other);
  HOST_API void* lantern_mul_attensor_attensor(void* self, void* other) { void* ret = _lantern_mul_attensor_attensor(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_mul_attensor_attensor)(void* self, void* other);
  HOST_API void* lantern_Tensor_mul_attensor_attensor(void* self, void* other) { void* ret = _lantern_Tensor_mul_attensor_attensor(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_mul__attensor_attensor)(void* self, void* other);
  HOST_API void* lantern_Tensor_mul__attensor_attensor(void* self, void* other) { void* ret = _lantern_Tensor_mul__attensor_attensor(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_mul_out_attensor_attensor_attensor)(void* out, void* self, void* other);
  HOST_API void* lantern_mul_out_attensor_attensor_attensor(void* out, void* self, void* other) { void* ret = _lantern_mul_out_attensor_attensor_attensor(out, self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_mul_attensor_constatscalar)(void* self, void* other);
  HOST_API void* lantern_mul_attensor_constatscalar(void* self, void* other) { void* ret = _lantern_mul_attensor_constatscalar(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_mul_attensor_constatscalar)(void* self, void* other);
  HOST_API void* lantern_Tensor_mul_attensor_constatscalar(void* self, void* other) { void* ret = _lantern_Tensor_mul_attensor_constatscalar(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_mul__attensor_constatscalar)(void* self, void* other);
  HOST_API void* lantern_Tensor_mul__attensor_constatscalar(void* self, void* other) { void* ret = _lantern_Tensor_mul__attensor_constatscalar(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_multiply_attensor_attensor)(void* self, void* other);
  HOST_API void* lantern_multiply_attensor_attensor(void* self, void* other) { void* ret = _lantern_multiply_attensor_attensor(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_multiply_attensor_attensor)(void* self, void* other);
  HOST_API void* lantern_Tensor_multiply_attensor_attensor(void* self, void* other) { void* ret = _lantern_Tensor_multiply_attensor_attensor(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_multiply__attensor_attensor)(void* self, void* other);
  HOST_API void* lantern_Tensor_multiply__attensor_attensor(void* self, void* other) { void* ret = _lantern_Tensor_multiply__attensor_attensor(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_multiply_out_attensor_attensor_attensor)(void* out, void* self, void* other);
  HOST_API void* lantern_multiply_out_attensor_attensor_attensor(void* out, void* self, void* other) { void* ret = _lantern_multiply_out_attensor_attensor_attensor(out, self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_multiply_attensor_constatscalar)(void* self, void* other);
  HOST_API void* lantern_multiply_attensor_constatscalar(void* self, void* other) { void* ret = _lantern_multiply_attensor_constatscalar(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_multiply_attensor_constatscalar)(void* self, void* other);
  HOST_API void* lantern_Tensor_multiply_attensor_constatscalar(void* self, void* other) { void* ret = _lantern_Tensor_multiply_attensor_constatscalar(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_multiply__attensor_constatscalar)(void* self, void* other);
  HOST_API void* lantern_Tensor_multiply__attensor_constatscalar(void* self, void* other) { void* ret = _lantern_Tensor_multiply__attensor_constatscalar(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_mv_attensor_attensor)(void* self, void* vec);
  HOST_API void* lantern_mv_attensor_attensor(void* self, void* vec) { void* ret = _lantern_mv_attensor_attensor(self, vec); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_mv_attensor_attensor)(void* self, void* vec);
  HOST_API void* lantern_Tensor_mv_attensor_attensor(void* self, void* vec) { void* ret = _lantern_Tensor_mv_attensor_attensor(self, vec); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_mv_out_attensor_attensor_attensor)(void* out, void* self, void* vec);
  HOST_API void* lantern_mv_out_attensor_attensor_attensor(void* out, void* self, void* vec) { void* ret = _lantern_mv_out_attensor_attensor_attensor(out, self, vec); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_mvlgamma_attensor_intt)(void* self, void* p);
  HOST_API void* lantern_mvlgamma_attensor_intt(void* self, void* p) { void* ret = _lantern_mvlgamma_attensor_intt(self, p); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_mvlgamma_attensor_intt)(void* self, void* p);
  HOST_API void* lantern_Tensor_mvlgamma_attensor_intt(void* self, void* p) { void* ret = _lantern_Tensor_mvlgamma_attensor_intt(self, p); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_mvlgamma__attensor_intt)(void* self, void* p);
  HOST_API void* lantern_Tensor_mvlgamma__attensor_intt(void* self, void* p) { void* ret = _lantern_Tensor_mvlgamma__attensor_intt(self, p); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_narrow_copy_attensor_intt_intt_intt)(void* self, void* dim, void* start, void* length);
  HOST_API void* lantern_narrow_copy_attensor_intt_intt_intt(void* self, void* dim, void* start, void* length) { void* ret = _lantern_narrow_copy_attensor_intt_intt_intt(self, dim, start, length); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_narrow_copy_attensor_intt_intt_intt)(void* self, void* dim, void* start, void* length);
  HOST_API void* lantern_Tensor_narrow_copy_attensor_intt_intt_intt(void* self, void* dim, void* start, void* length) { void* ret = _lantern_Tensor_narrow_copy_attensor_intt_intt_intt(self, dim, start, length); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_narrow_copy_out_attensor_attensor_intt_intt_intt)(void* out, void* self, void* dim, void* start, void* length);
  HOST_API void* lantern_narrow_copy_out_attensor_attensor_intt_intt_intt(void* out, void* self, void* dim, void* start, void* length) { void* ret = _lantern_narrow_copy_out_attensor_attensor_intt_intt_intt(out, self, dim, start, length); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_narrow_attensor_intt_intt_intt)(void* self, void* dim, void* start, void* length);
  HOST_API void* lantern_narrow_attensor_intt_intt_intt(void* self, void* dim, void* start, void* length) { void* ret = _lantern_narrow_attensor_intt_intt_intt(self, dim, start, length); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_narrow_attensor_intt_intt_intt)(void* self, void* dim, void* start, void* length);
  HOST_API void* lantern_Tensor_narrow_attensor_intt_intt_intt(void* self, void* dim, void* start, void* length) { void* ret = _lantern_Tensor_narrow_attensor_intt_intt_intt(self, dim, start, length); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_narrow_attensor_intt_attensor_intt)(void* self, void* dim, void* start, void* length);
  HOST_API void* lantern_narrow_attensor_intt_attensor_intt(void* self, void* dim, void* start, void* length) { void* ret = _lantern_narrow_attensor_intt_attensor_intt(self, dim, start, length); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_narrow_attensor_intt_attensor_intt)(void* self, void* dim, void* start, void* length);
  HOST_API void* lantern_Tensor_narrow_attensor_intt_attensor_intt(void* self, void* dim, void* start, void* length) { void* ret = _lantern_Tensor_narrow_attensor_intt_attensor_intt(self, dim, start, length); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_native_batch_norm_attensor_attensor_attensor_attensor_attensor_bool_double_double)(void* input, void* weight, void* bias, void* running_mean, void* running_var, void* training, void* momentum, void* eps);
  HOST_API void* lantern_native_batch_norm_attensor_attensor_attensor_attensor_attensor_bool_double_double(void* input, void* weight, void* bias, void* running_mean, void* running_var, void* training, void* momentum, void* eps) { void* ret = _lantern_native_batch_norm_attensor_attensor_attensor_attensor_attensor_bool_double_double(input, weight, bias, running_mean, running_var, training, momentum, eps); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_native_batch_norm_out_attensor_attensor_attensor_attensor_attensor_attensor_attensor_attensor_bool_double_double)(void* out, void* save_mean, void* save_invstd, void* input, void* weight, void* bias, void* running_mean, void* running_var, void* training, void* momentum, void* eps);
  HOST_API void* lantern_native_batch_norm_out_attensor_attensor_attensor_attensor_attensor_attensor_attensor_attensor_bool_double_double(void* out, void* save_mean, void* save_invstd, void* input, void* weight, void* bias, void* running_mean, void* running_var, void* training, void* momentum, void* eps) { void* ret = _lantern_native_batch_norm_out_attensor_attensor_attensor_attensor_attensor_attensor_attensor_attensor_bool_double_double(out, save_mean, save_invstd, input, weight, bias, running_mean, running_var, training, momentum, eps); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_batch_norm_stats_attensor_double)(void* input, void* eps);
  HOST_API void* lantern_batch_norm_stats_attensor_double(void* input, void* eps) { void* ret = _lantern_batch_norm_stats_attensor_double(input, eps); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_batch_norm_elemt_attensor_attensor_attensor_attensor_attensor_double)(void* input, void* weight, void* bias, void* mean, void* invstd, void* eps);
  HOST_API void* lantern_batch_norm_elemt_attensor_attensor_attensor_attensor_attensor_double(void* input, void* weight, void* bias, void* mean, void* invstd, void* eps) { void* ret = _lantern_batch_norm_elemt_attensor_attensor_attensor_attensor_attensor_double(input, weight, bias, mean, invstd, eps); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_batch_norm_elemt_out_attensor_attensor_attensor_attensor_attensor_attensor_double)(void* out, void* input, void* weight, void* bias, void* mean, void* invstd, void* eps);
  HOST_API void* lantern_batch_norm_elemt_out_attensor_attensor_attensor_attensor_attensor_attensor_double(void* out, void* input, void* weight, void* bias, void* mean, void* invstd, void* eps) { void* ret = _lantern_batch_norm_elemt_out_attensor_attensor_attensor_attensor_attensor_attensor_double(out, input, weight, bias, mean, invstd, eps); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_batch_norm_gather_stats_attensor_attensor_attensor_attensor_attensor_double_double_intt)(void* input, void* mean, void* invstd, void* running_mean, void* running_var, void* momentum, void* eps, void* count);
  HOST_API void* lantern_batch_norm_gather_stats_attensor_attensor_attensor_attensor_attensor_double_double_intt(void* input, void* mean, void* invstd, void* running_mean, void* running_var, void* momentum, void* eps, void* count) { void* ret = _lantern_batch_norm_gather_stats_attensor_attensor_attensor_attensor_attensor_double_double_intt(input, mean, invstd, running_mean, running_var, momentum, eps, count); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_batch_norm_gather_stats_with_counts_attensor_attensor_attensor_attensor_attensor_double_double_attensor)(void* input, void* mean, void* invstd, void* running_mean, void* running_var, void* momentum, void* eps, void* counts);
  HOST_API void* lantern_batch_norm_gather_stats_with_counts_attensor_attensor_attensor_attensor_attensor_double_double_attensor(void* input, void* mean, void* invstd, void* running_mean, void* running_var, void* momentum, void* eps, void* counts) { void* ret = _lantern_batch_norm_gather_stats_with_counts_attensor_attensor_attensor_attensor_attensor_double_double_attensor(input, mean, invstd, running_mean, running_var, momentum, eps, counts); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_native_batch_norm_backward_attensor_attensor_attensor_attensor_attensor_attensor_attensor_bool_double_stdarraybool)(void* grad_out, void* input, void* weight, void* running_mean, void* running_var, void* save_mean, void* save_invstd, void* train, void* eps, void* output_mask);
  HOST_API void* lantern_native_batch_norm_backward_attensor_attensor_attensor_attensor_attensor_attensor_attensor_bool_double_stdarraybool(void* grad_out, void* input, void* weight, void* running_mean, void* running_var, void* save_mean, void* save_invstd, void* train, void* eps, void* output_mask) { void* ret = _lantern_native_batch_norm_backward_attensor_attensor_attensor_attensor_attensor_attensor_attensor_bool_double_stdarraybool(grad_out, input, weight, running_mean, running_var, save_mean, save_invstd, train, eps, output_mask); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_batch_norm_backward_reduce_attensor_attensor_attensor_attensor_attensor_bool_bool_bool)(void* grad_out, void* input, void* mean, void* invstd, void* weight, void* input_g, void* weight_g, void* bias_g);
  HOST_API void* lantern_batch_norm_backward_reduce_attensor_attensor_attensor_attensor_attensor_bool_bool_bool(void* grad_out, void* input, void* mean, void* invstd, void* weight, void* input_g, void* weight_g, void* bias_g) { void* ret = _lantern_batch_norm_backward_reduce_attensor_attensor_attensor_attensor_attensor_bool_bool_bool(grad_out, input, mean, invstd, weight, input_g, weight_g, bias_g); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_batch_norm_backward_elemt_attensor_attensor_attensor_attensor_attensor_attensor_attensor_attensor)(void* grad_out, void* input, void* mean, void* invstd, void* weight, void* mean_dy, void* mean_dy_xmu, void* count);
  HOST_API void* lantern_batch_norm_backward_elemt_attensor_attensor_attensor_attensor_attensor_attensor_attensor_attensor(void* grad_out, void* input, void* mean, void* invstd, void* weight, void* mean_dy, void* mean_dy_xmu, void* count) { void* ret = _lantern_batch_norm_backward_elemt_attensor_attensor_attensor_attensor_attensor_attensor_attensor_attensor(grad_out, input, mean, invstd, weight, mean_dy, mean_dy_xmu, count); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_batch_norm_update_stats_attensor_attensor_attensor_double)(void* input, void* running_mean, void* running_var, void* momentum);
  HOST_API void* lantern_batch_norm_update_stats_attensor_attensor_attensor_double(void* input, void* running_mean, void* running_var, void* momentum) { void* ret = _lantern_batch_norm_update_stats_attensor_attensor_attensor_double(input, running_mean, running_var, momentum); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_is_vulkan_available)();
  HOST_API void* lantern_is_vulkan_available() { void* ret = _lantern_is_vulkan_available(); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__nnpack_available)();
  HOST_API void* lantern__nnpack_available() { void* ret = _lantern__nnpack_available(); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__nnpack_spatial_convolution_attensor_attensor_attensor_atintarrayref_atintarrayref)(void* input, void* weight, void* bias, void* padding, void* stride);
  HOST_API void* lantern__nnpack_spatial_convolution_attensor_attensor_attensor_atintarrayref_atintarrayref(void* input, void* weight, void* bias, void* padding, void* stride) { void* ret = _lantern__nnpack_spatial_convolution_attensor_attensor_attensor_atintarrayref_atintarrayref(input, weight, bias, padding, stride); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__nnpack_spatial_convolution_backward_attensor_attensor_attensor_atintarrayref_stdarraybool)(void* input, void* grad_output, void* weight, void* padding, void* output_mask);
  HOST_API void* lantern__nnpack_spatial_convolution_backward_attensor_attensor_attensor_atintarrayref_stdarraybool(void* input, void* grad_output, void* weight, void* padding, void* output_mask) { void* ret = _lantern__nnpack_spatial_convolution_backward_attensor_attensor_attensor_atintarrayref_stdarraybool(input, grad_output, weight, padding, output_mask); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__nnpack_spatial_convolution_backward_input_attensor_attensor_attensor_atintarrayref)(void* input, void* grad_output, void* weight, void* padding);
  HOST_API void* lantern__nnpack_spatial_convolution_backward_input_attensor_attensor_attensor_atintarrayref(void* input, void* grad_output, void* weight, void* padding) { void* ret = _lantern__nnpack_spatial_convolution_backward_input_attensor_attensor_attensor_atintarrayref(input, grad_output, weight, padding); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__nnpack_spatial_convolution_backward_weight_attensor_atintarrayref_attensor_atintarrayref)(void* input, void* weightsize, void* grad_output, void* padding);
  HOST_API void* lantern__nnpack_spatial_convolution_backward_weight_attensor_atintarrayref_attensor_atintarrayref(void* input, void* weightsize, void* grad_output, void* padding) { void* ret = _lantern__nnpack_spatial_convolution_backward_weight_attensor_atintarrayref_attensor_atintarrayref(input, weightsize, grad_output, padding); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_ones_atintarrayref_atdimnamelist_attensoroptions)(void* size, void* names, void* options);
  HOST_API void* lantern_ones_atintarrayref_atdimnamelist_attensoroptions(void* size, void* names, void* options) { void* ret = _lantern_ones_atintarrayref_atdimnamelist_attensoroptions(size, names, options); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_ones_atintarrayref_attensoroptions)(void* size, void* options);
  HOST_API void* lantern_ones_atintarrayref_attensoroptions(void* size, void* options) { void* ret = _lantern_ones_atintarrayref_attensoroptions(size, options); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_ones_out_attensor_atintarrayref)(void* out, void* size);
  HOST_API void* lantern_ones_out_attensor_atintarrayref(void* out, void* size) { void* ret = _lantern_ones_out_attensor_atintarrayref(out, size); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_ones_like_attensor_attensoroptions_atmemoryformat)(void* self, void* options, void* memory_format);
  HOST_API void* lantern_ones_like_attensor_attensoroptions_atmemoryformat(void* self, void* options, void* memory_format) { void* ret = _lantern_ones_like_attensor_attensoroptions_atmemoryformat(self, options, memory_format); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_pairwise_distance_attensor_attensor_double_double_bool)(void* x1, void* x2, void* p, void* eps, void* keepdim);
  HOST_API void* lantern_pairwise_distance_attensor_attensor_double_double_bool(void* x1, void* x2, void* p, void* eps, void* keepdim) { void* ret = _lantern_pairwise_distance_attensor_attensor_double_double_bool(x1, x2, p, eps, keepdim); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_cdist_attensor_attensor_double_intt)(void* x1, void* x2, void* p, void* compute_mode);
  HOST_API void* lantern_cdist_attensor_attensor_double_intt(void* x1, void* x2, void* p, void* compute_mode) { void* ret = _lantern_cdist_attensor_attensor_double_intt(x1, x2, p, compute_mode); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__euclidean_dist_attensor_attensor)(void* x1, void* x2);
  HOST_API void* lantern__euclidean_dist_attensor_attensor(void* x1, void* x2) { void* ret = _lantern__euclidean_dist_attensor_attensor(x1, x2); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__cdist_forward_attensor_attensor_double_intt)(void* x1, void* x2, void* p, void* compute_mode);
  HOST_API void* lantern__cdist_forward_attensor_attensor_double_intt(void* x1, void* x2, void* p, void* compute_mode) { void* ret = _lantern__cdist_forward_attensor_attensor_double_intt(x1, x2, p, compute_mode); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__cdist_backward_attensor_attensor_attensor_double_attensor)(void* grad, void* x1, void* x2, void* p, void* cdist);
  HOST_API void* lantern__cdist_backward_attensor_attensor_attensor_double_attensor(void* grad, void* x1, void* x2, void* p, void* cdist) { void* ret = _lantern__cdist_backward_attensor_attensor_attensor_double_attensor(grad, x1, x2, p, cdist); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_pdist_attensor_double)(void* self, void* p);
  HOST_API void* lantern_pdist_attensor_double(void* self, void* p) { void* ret = _lantern_pdist_attensor_double(self, p); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__pdist_forward_attensor_double)(void* self, void* p);
  HOST_API void* lantern__pdist_forward_attensor_double(void* self, void* p) { void* ret = _lantern__pdist_forward_attensor_double(self, p); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__pdist_backward_attensor_attensor_double_attensor)(void* grad, void* self, void* p, void* pdist);
  HOST_API void* lantern__pdist_backward_attensor_attensor_double_attensor(void* grad, void* self, void* p, void* pdist) { void* ret = _lantern__pdist_backward_attensor_attensor_double_attensor(grad, self, p, pdist); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_cosine_similarity_attensor_attensor_intt_double)(void* x1, void* x2, void* dim, void* eps);
  HOST_API void* lantern_cosine_similarity_attensor_attensor_intt_double(void* x1, void* x2, void* dim, void* eps) { void* ret = _lantern_cosine_similarity_attensor_attensor_intt_double(x1, x2, dim, eps); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_permute_attensor_atintarrayref)(void* self, void* dims);
  HOST_API void* lantern_permute_attensor_atintarrayref(void* self, void* dims) { void* ret = _lantern_permute_attensor_atintarrayref(self, dims); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_permute_attensor_atintarrayref)(void* self, void* dims);
  HOST_API void* lantern_Tensor_permute_attensor_atintarrayref(void* self, void* dims) { void* ret = _lantern_Tensor_permute_attensor_atintarrayref(self, dims); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_movedim_attensor_atintarrayref_atintarrayref)(void* self, void* source, void* destination);
  HOST_API void* lantern_movedim_attensor_atintarrayref_atintarrayref(void* self, void* source, void* destination) { void* ret = _lantern_movedim_attensor_atintarrayref_atintarrayref(self, source, destination); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_movedim_attensor_atintarrayref_atintarrayref)(void* self, void* source, void* destination);
  HOST_API void* lantern_Tensor_movedim_attensor_atintarrayref_atintarrayref(void* self, void* source, void* destination) { void* ret = _lantern_Tensor_movedim_attensor_atintarrayref_atintarrayref(self, source, destination); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_movedim_attensor_intt_intt)(void* self, void* source, void* destination);
  HOST_API void* lantern_movedim_attensor_intt_intt(void* self, void* source, void* destination) { void* ret = _lantern_movedim_attensor_intt_intt(self, source, destination); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_movedim_attensor_intt_intt)(void* self, void* source, void* destination);
  HOST_API void* lantern_Tensor_movedim_attensor_intt_intt(void* self, void* source, void* destination) { void* ret = _lantern_Tensor_movedim_attensor_intt_intt(self, source, destination); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_moveaxis_attensor_atintarrayref_atintarrayref)(void* self, void* source, void* destination);
  HOST_API void* lantern_moveaxis_attensor_atintarrayref_atintarrayref(void* self, void* source, void* destination) { void* ret = _lantern_moveaxis_attensor_atintarrayref_atintarrayref(self, source, destination); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_moveaxis_attensor_atintarrayref_atintarrayref)(void* self, void* source, void* destination);
  HOST_API void* lantern_Tensor_moveaxis_attensor_atintarrayref_atintarrayref(void* self, void* source, void* destination) { void* ret = _lantern_Tensor_moveaxis_attensor_atintarrayref_atintarrayref(self, source, destination); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_moveaxis_attensor_intt_intt)(void* self, void* source, void* destination);
  HOST_API void* lantern_moveaxis_attensor_intt_intt(void* self, void* source, void* destination) { void* ret = _lantern_moveaxis_attensor_intt_intt(self, source, destination); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_moveaxis_attensor_intt_intt)(void* self, void* source, void* destination);
  HOST_API void* lantern_Tensor_moveaxis_attensor_intt_intt(void* self, void* source, void* destination) { void* ret = _lantern_Tensor_moveaxis_attensor_intt_intt(self, source, destination); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_numpy_t_attensor)(void* self);
  HOST_API void* lantern_Tensor_numpy_t_attensor(void* self) { void* ret = _lantern_Tensor_numpy_t_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_pixel_shuffle_attensor_intt)(void* self, void* upscale_factor);
  HOST_API void* lantern_pixel_shuffle_attensor_intt(void* self, void* upscale_factor) { void* ret = _lantern_pixel_shuffle_attensor_intt(self, upscale_factor); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_pixel_unshuffle_attensor_intt)(void* self, void* downscale_factor);
  HOST_API void* lantern_pixel_unshuffle_attensor_intt(void* self, void* downscale_factor) { void* ret = _lantern_pixel_unshuffle_attensor_intt(self, downscale_factor); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_channel_shuffle_attensor_intt)(void* self, void* groups);
  HOST_API void* lantern_channel_shuffle_attensor_intt(void* self, void* groups) { void* ret = _lantern_channel_shuffle_attensor_intt(self, groups); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_is_pinned_attensor)(void* self);
  HOST_API void* lantern_Tensor_is_pinned_attensor(void* self) { void* ret = _lantern_Tensor_is_pinned_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_pin_memory_attensor)(void* self);
  HOST_API void* lantern_Tensor_pin_memory_attensor(void* self) { void* ret = _lantern_Tensor_pin_memory_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_pinverse_attensor_double)(void* self, void* rcond);
  HOST_API void* lantern_pinverse_attensor_double(void* self, void* rcond) { void* ret = _lantern_pinverse_attensor_double(self, rcond); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_pinverse_attensor_double)(void* self, void* rcond);
  HOST_API void* lantern_Tensor_pinverse_attensor_double(void* self, void* rcond) { void* ret = _lantern_Tensor_pinverse_attensor_double(self, rcond); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_poisson_nll_loss_attensor_attensor_bool_bool_double_intt)(void* input, void* target, void* log_input, void* full, void* eps, void* reduction);
  HOST_API void* lantern_poisson_nll_loss_attensor_attensor_bool_bool_double_intt(void* input, void* target, void* log_input, void* full, void* eps, void* reduction) { void* ret = _lantern_poisson_nll_loss_attensor_attensor_bool_bool_double_intt(input, target, log_input, full, eps, reduction); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_rad2deg_attensor)(void* self);
  HOST_API void* lantern_rad2deg_attensor(void* self) { void* ret = _lantern_rad2deg_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_rad2deg_attensor)(void* self);
  HOST_API void* lantern_Tensor_rad2deg_attensor(void* self) { void* ret = _lantern_Tensor_rad2deg_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_rad2deg__attensor)(void* self);
  HOST_API void* lantern_rad2deg__attensor(void* self) { void* ret = _lantern_rad2deg__attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_rad2deg__attensor)(void* self);
  HOST_API void* lantern_Tensor_rad2deg__attensor(void* self) { void* ret = _lantern_Tensor_rad2deg__attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_rad2deg_out_attensor_attensor)(void* out, void* self);
  HOST_API void* lantern_rad2deg_out_attensor_attensor(void* out, void* self) { void* ret = _lantern_rad2deg_out_attensor_attensor(out, self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_deg2rad_attensor)(void* self);
  HOST_API void* lantern_deg2rad_attensor(void* self) { void* ret = _lantern_deg2rad_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_deg2rad_attensor)(void* self);
  HOST_API void* lantern_Tensor_deg2rad_attensor(void* self) { void* ret = _lantern_Tensor_deg2rad_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_deg2rad__attensor)(void* self);
  HOST_API void* lantern_deg2rad__attensor(void* self) { void* ret = _lantern_deg2rad__attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_deg2rad__attensor)(void* self);
  HOST_API void* lantern_Tensor_deg2rad__attensor(void* self) { void* ret = _lantern_Tensor_deg2rad__attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_deg2rad_out_attensor_attensor)(void* out, void* self);
  HOST_API void* lantern_deg2rad_out_attensor_attensor(void* out, void* self) { void* ret = _lantern_deg2rad_out_attensor_attensor(out, self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_scalar_tensor_constatscalar_attensoroptions)(void* s, void* options);
  HOST_API void* lantern_scalar_tensor_constatscalar_attensoroptions(void* s, void* options) { void* ret = _lantern_scalar_tensor_constatscalar_attensoroptions(s, options); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_rand_atintarrayref_atdimnamelist_attensoroptions)(void* size, void* names, void* options);
  HOST_API void* lantern_rand_atintarrayref_atdimnamelist_attensoroptions(void* size, void* names, void* options) { void* ret = _lantern_rand_atintarrayref_atdimnamelist_attensoroptions(size, names, options); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_rand_atintarrayref_atgenerator_atdimnamelist_attensoroptions)(void* size, void* generator, void* names, void* options);
  HOST_API void* lantern_rand_atintarrayref_atgenerator_atdimnamelist_attensoroptions(void* size, void* generator, void* names, void* options) { void* ret = _lantern_rand_atintarrayref_atgenerator_atdimnamelist_attensoroptions(size, generator, names, options); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_rand_atintarrayref_attensoroptions)(void* size, void* options);
  HOST_API void* lantern_rand_atintarrayref_attensoroptions(void* size, void* options) { void* ret = _lantern_rand_atintarrayref_attensoroptions(size, options); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_rand_atintarrayref_atgenerator_attensoroptions)(void* size, void* generator, void* options);
  HOST_API void* lantern_rand_atintarrayref_atgenerator_attensoroptions(void* size, void* generator, void* options) { void* ret = _lantern_rand_atintarrayref_atgenerator_attensoroptions(size, generator, options); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_rand_out_attensor_atintarrayref)(void* out, void* size);
  HOST_API void* lantern_rand_out_attensor_atintarrayref(void* out, void* size) { void* ret = _lantern_rand_out_attensor_atintarrayref(out, size); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_rand_out_attensor_atintarrayref_atgenerator)(void* out, void* size, void* generator);
  HOST_API void* lantern_rand_out_attensor_atintarrayref_atgenerator(void* out, void* size, void* generator) { void* ret = _lantern_rand_out_attensor_atintarrayref_atgenerator(out, size, generator); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_rand_like_attensor_attensoroptions_atmemoryformat)(void* self, void* options, void* memory_format);
  HOST_API void* lantern_rand_like_attensor_attensoroptions_atmemoryformat(void* self, void* options, void* memory_format) { void* ret = _lantern_rand_like_attensor_attensoroptions_atmemoryformat(self, options, memory_format); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_randint_intt_atintarrayref_attensoroptions)(void* high, void* size, void* options);
  HOST_API void* lantern_randint_intt_atintarrayref_attensoroptions(void* high, void* size, void* options) { void* ret = _lantern_randint_intt_atintarrayref_attensoroptions(high, size, options); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_randint_intt_atintarrayref_atgenerator_attensoroptions)(void* high, void* size, void* generator, void* options);
  HOST_API void* lantern_randint_intt_atintarrayref_atgenerator_attensoroptions(void* high, void* size, void* generator, void* options) { void* ret = _lantern_randint_intt_atintarrayref_atgenerator_attensoroptions(high, size, generator, options); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_randint_intt_intt_atintarrayref_attensoroptions)(void* low, void* high, void* size, void* options);
  HOST_API void* lantern_randint_intt_intt_atintarrayref_attensoroptions(void* low, void* high, void* size, void* options) { void* ret = _lantern_randint_intt_intt_atintarrayref_attensoroptions(low, high, size, options); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_randint_intt_intt_atintarrayref_atgenerator_attensoroptions)(void* low, void* high, void* size, void* generator, void* options);
  HOST_API void* lantern_randint_intt_intt_atintarrayref_atgenerator_attensoroptions(void* low, void* high, void* size, void* generator, void* options) { void* ret = _lantern_randint_intt_intt_atintarrayref_atgenerator_attensoroptions(low, high, size, generator, options); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_randint_out_attensor_intt_atintarrayref)(void* out, void* high, void* size);
  HOST_API void* lantern_randint_out_attensor_intt_atintarrayref(void* out, void* high, void* size) { void* ret = _lantern_randint_out_attensor_intt_atintarrayref(out, high, size); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_randint_out_attensor_intt_atintarrayref_atgenerator)(void* out, void* high, void* size, void* generator);
  HOST_API void* lantern_randint_out_attensor_intt_atintarrayref_atgenerator(void* out, void* high, void* size, void* generator) { void* ret = _lantern_randint_out_attensor_intt_atintarrayref_atgenerator(out, high, size, generator); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_randint_out_attensor_intt_intt_atintarrayref)(void* out, void* low, void* high, void* size);
  HOST_API void* lantern_randint_out_attensor_intt_intt_atintarrayref(void* out, void* low, void* high, void* size) { void* ret = _lantern_randint_out_attensor_intt_intt_atintarrayref(out, low, high, size); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_randint_out_attensor_intt_intt_atintarrayref_atgenerator)(void* out, void* low, void* high, void* size, void* generator);
  HOST_API void* lantern_randint_out_attensor_intt_intt_atintarrayref_atgenerator(void* out, void* low, void* high, void* size, void* generator) { void* ret = _lantern_randint_out_attensor_intt_intt_atintarrayref_atgenerator(out, low, high, size, generator); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_randint_like_attensor_intt_attensoroptions_atmemoryformat)(void* self, void* high, void* options, void* memory_format);
  HOST_API void* lantern_randint_like_attensor_intt_attensoroptions_atmemoryformat(void* self, void* high, void* options, void* memory_format) { void* ret = _lantern_randint_like_attensor_intt_attensoroptions_atmemoryformat(self, high, options, memory_format); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_randint_like_attensor_intt_intt_attensoroptions_atmemoryformat)(void* self, void* low, void* high, void* options, void* memory_format);
  HOST_API void* lantern_randint_like_attensor_intt_intt_attensoroptions_atmemoryformat(void* self, void* low, void* high, void* options, void* memory_format) { void* ret = _lantern_randint_like_attensor_intt_intt_attensoroptions_atmemoryformat(self, low, high, options, memory_format); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_randn_atintarrayref_attensoroptions)(void* size, void* options);
  HOST_API void* lantern_randn_atintarrayref_attensoroptions(void* size, void* options) { void* ret = _lantern_randn_atintarrayref_attensoroptions(size, options); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_randn_atintarrayref_atgenerator_attensoroptions)(void* size, void* generator, void* options);
  HOST_API void* lantern_randn_atintarrayref_atgenerator_attensoroptions(void* size, void* generator, void* options) { void* ret = _lantern_randn_atintarrayref_atgenerator_attensoroptions(size, generator, options); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_randn_atintarrayref_atdimnamelist_attensoroptions)(void* size, void* names, void* options);
  HOST_API void* lantern_randn_atintarrayref_atdimnamelist_attensoroptions(void* size, void* names, void* options) { void* ret = _lantern_randn_atintarrayref_atdimnamelist_attensoroptions(size, names, options); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_randn_atintarrayref_atgenerator_atdimnamelist_attensoroptions)(void* size, void* generator, void* names, void* options);
  HOST_API void* lantern_randn_atintarrayref_atgenerator_atdimnamelist_attensoroptions(void* size, void* generator, void* names, void* options) { void* ret = _lantern_randn_atintarrayref_atgenerator_atdimnamelist_attensoroptions(size, generator, names, options); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_randn_out_attensor_atintarrayref)(void* out, void* size);
  HOST_API void* lantern_randn_out_attensor_atintarrayref(void* out, void* size) { void* ret = _lantern_randn_out_attensor_atintarrayref(out, size); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_randn_out_attensor_atintarrayref_atgenerator)(void* out, void* size, void* generator);
  HOST_API void* lantern_randn_out_attensor_atintarrayref_atgenerator(void* out, void* size, void* generator) { void* ret = _lantern_randn_out_attensor_atintarrayref_atgenerator(out, size, generator); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_randn_like_attensor_attensoroptions_atmemoryformat)(void* self, void* options, void* memory_format);
  HOST_API void* lantern_randn_like_attensor_attensoroptions_atmemoryformat(void* self, void* options, void* memory_format) { void* ret = _lantern_randn_like_attensor_attensoroptions_atmemoryformat(self, options, memory_format); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_randperm_intt_attensoroptions)(void* n, void* options);
  HOST_API void* lantern_randperm_intt_attensoroptions(void* n, void* options) { void* ret = _lantern_randperm_intt_attensoroptions(n, options); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_randperm_intt_atgenerator_attensoroptions)(void* n, void* generator, void* options);
  HOST_API void* lantern_randperm_intt_atgenerator_attensoroptions(void* n, void* generator, void* options) { void* ret = _lantern_randperm_intt_atgenerator_attensoroptions(n, generator, options); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_randperm_out_attensor_intt)(void* out, void* n);
  HOST_API void* lantern_randperm_out_attensor_intt(void* out, void* n) { void* ret = _lantern_randperm_out_attensor_intt(out, n); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_randperm_out_attensor_intt_atgenerator)(void* out, void* n, void* generator);
  HOST_API void* lantern_randperm_out_attensor_intt_atgenerator(void* out, void* n, void* generator) { void* ret = _lantern_randperm_out_attensor_intt_atgenerator(out, n, generator); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_range_constatscalar_constatscalar_constatscalar_attensoroptions)(void* start, void* end, void* step, void* options);
  HOST_API void* lantern_range_constatscalar_constatscalar_constatscalar_attensoroptions(void* start, void* end, void* step, void* options) { void* ret = _lantern_range_constatscalar_constatscalar_constatscalar_attensoroptions(start, end, step, options); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_range_constatscalar_constatscalar_attensoroptions)(void* start, void* end, void* options);
  HOST_API void* lantern_range_constatscalar_constatscalar_attensoroptions(void* start, void* end, void* options) { void* ret = _lantern_range_constatscalar_constatscalar_attensoroptions(start, end, options); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_range_out_attensor_constatscalar_constatscalar_constatscalar)(void* out, void* start, void* end, void* step);
  HOST_API void* lantern_range_out_attensor_constatscalar_constatscalar_constatscalar(void* out, void* start, void* end, void* step) { void* ret = _lantern_range_out_attensor_constatscalar_constatscalar_constatscalar(out, start, end, step); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_ravel_attensor)(void* self);
  HOST_API void* lantern_ravel_attensor(void* self) { void* ret = _lantern_ravel_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_ravel_attensor)(void* self);
  HOST_API void* lantern_Tensor_ravel_attensor(void* self) { void* ret = _lantern_Tensor_ravel_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_reciprocal_attensor)(void* self);
  HOST_API void* lantern_reciprocal_attensor(void* self) { void* ret = _lantern_reciprocal_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_reciprocal_attensor)(void* self);
  HOST_API void* lantern_Tensor_reciprocal_attensor(void* self) { void* ret = _lantern_Tensor_reciprocal_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_reciprocal__attensor)(void* self);
  HOST_API void* lantern_reciprocal__attensor(void* self) { void* ret = _lantern_reciprocal__attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_reciprocal__attensor)(void* self);
  HOST_API void* lantern_Tensor_reciprocal__attensor(void* self) { void* ret = _lantern_Tensor_reciprocal__attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_reciprocal_out_attensor_attensor)(void* out, void* self);
  HOST_API void* lantern_reciprocal_out_attensor_attensor(void* out, void* self) { void* ret = _lantern_reciprocal_out_attensor_attensor(out, self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_neg_attensor)(void* self);
  HOST_API void* lantern_neg_attensor(void* self) { void* ret = _lantern_neg_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_neg_attensor)(void* self);
  HOST_API void* lantern_Tensor_neg_attensor(void* self) { void* ret = _lantern_Tensor_neg_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_neg__attensor)(void* self);
  HOST_API void* lantern_neg__attensor(void* self) { void* ret = _lantern_neg__attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_neg__attensor)(void* self);
  HOST_API void* lantern_Tensor_neg__attensor(void* self) { void* ret = _lantern_Tensor_neg__attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_neg_out_attensor_attensor)(void* out, void* self);
  HOST_API void* lantern_neg_out_attensor_attensor(void* out, void* self) { void* ret = _lantern_neg_out_attensor_attensor(out, self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_negative_attensor)(void* self);
  HOST_API void* lantern_negative_attensor(void* self) { void* ret = _lantern_negative_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_negative_attensor)(void* self);
  HOST_API void* lantern_Tensor_negative_attensor(void* self) { void* ret = _lantern_Tensor_negative_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_negative__attensor)(void* self);
  HOST_API void* lantern_negative__attensor(void* self) { void* ret = _lantern_negative__attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_negative__attensor)(void* self);
  HOST_API void* lantern_Tensor_negative__attensor(void* self) { void* ret = _lantern_Tensor_negative__attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_negative_out_attensor_attensor)(void* out, void* self);
  HOST_API void* lantern_negative_out_attensor_attensor(void* out, void* self) { void* ret = _lantern_negative_out_attensor_attensor(out, self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_repeat_attensor_atintarrayref)(void* self, void* repeats);
  HOST_API void* lantern_Tensor_repeat_attensor_atintarrayref(void* self, void* repeats) { void* ret = _lantern_Tensor_repeat_attensor_atintarrayref(self, repeats); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_repeat_interleave_attensor)(void* repeats);
  HOST_API void* lantern_repeat_interleave_attensor(void* repeats) { void* ret = _lantern_repeat_interleave_attensor(repeats); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_repeat_interleave_attensor_attensor_intt)(void* self, void* repeats, void* dim);
  HOST_API void* lantern_repeat_interleave_attensor_attensor_intt(void* self, void* repeats, void* dim) { void* ret = _lantern_repeat_interleave_attensor_attensor_intt(self, repeats, dim); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_repeat_interleave_attensor_attensor_intt)(void* self, void* repeats, void* dim);
  HOST_API void* lantern_Tensor_repeat_interleave_attensor_attensor_intt(void* self, void* repeats, void* dim) { void* ret = _lantern_Tensor_repeat_interleave_attensor_attensor_intt(self, repeats, dim); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_repeat_interleave_attensor_intt_intt)(void* self, void* repeats, void* dim);
  HOST_API void* lantern_repeat_interleave_attensor_intt_intt(void* self, void* repeats, void* dim) { void* ret = _lantern_repeat_interleave_attensor_intt_intt(self, repeats, dim); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_repeat_interleave_attensor_intt_intt)(void* self, void* repeats, void* dim);
  HOST_API void* lantern_Tensor_repeat_interleave_attensor_intt_intt(void* self, void* repeats, void* dim) { void* ret = _lantern_Tensor_repeat_interleave_attensor_intt_intt(self, repeats, dim); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_reshape_attensor_atintarrayref)(void* self, void* shape);
  HOST_API void* lantern_reshape_attensor_atintarrayref(void* self, void* shape) { void* ret = _lantern_reshape_attensor_atintarrayref(self, shape); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_reshape_attensor_atintarrayref)(void* self, void* shape);
  HOST_API void* lantern_Tensor_reshape_attensor_atintarrayref(void* self, void* shape) { void* ret = _lantern_Tensor_reshape_attensor_atintarrayref(self, shape); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__mkldnn_reshape_attensor_atintarrayref)(void* self, void* shape);
  HOST_API void* lantern__mkldnn_reshape_attensor_atintarrayref(void* self, void* shape) { void* ret = _lantern__mkldnn_reshape_attensor_atintarrayref(self, shape); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_reshape_as_attensor_attensor)(void* self, void* other);
  HOST_API void* lantern_Tensor_reshape_as_attensor_attensor(void* self, void* other) { void* ret = _lantern_Tensor_reshape_as_attensor_attensor(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_round_attensor)(void* self);
  HOST_API void* lantern_round_attensor(void* self) { void* ret = _lantern_round_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_round_attensor)(void* self);
  HOST_API void* lantern_Tensor_round_attensor(void* self) { void* ret = _lantern_Tensor_round_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_round__attensor)(void* self);
  HOST_API void* lantern_round__attensor(void* self) { void* ret = _lantern_round__attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_round__attensor)(void* self);
  HOST_API void* lantern_Tensor_round__attensor(void* self) { void* ret = _lantern_Tensor_round__attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_round_out_attensor_attensor)(void* out, void* self);
  HOST_API void* lantern_round_out_attensor_attensor(void* out, void* self) { void* ret = _lantern_round_out_attensor_attensor(out, self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_rrelu_attensor_constatscalar_constatscalar_bool_atgenerator)(void* self, void* lower, void* upper, void* training, void* generator);
  HOST_API void* lantern_rrelu_attensor_constatscalar_constatscalar_bool_atgenerator(void* self, void* lower, void* upper, void* training, void* generator) { void* ret = _lantern_rrelu_attensor_constatscalar_constatscalar_bool_atgenerator(self, lower, upper, training, generator); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_rrelu__attensor_constatscalar_constatscalar_bool_atgenerator)(void* self, void* lower, void* upper, void* training, void* generator);
  HOST_API void* lantern_rrelu__attensor_constatscalar_constatscalar_bool_atgenerator(void* self, void* lower, void* upper, void* training, void* generator) { void* ret = _lantern_rrelu__attensor_constatscalar_constatscalar_bool_atgenerator(self, lower, upper, training, generator); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_relu_attensor)(void* self);
  HOST_API void* lantern_relu_attensor(void* self) { void* ret = _lantern_relu_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_relu_attensor)(void* self);
  HOST_API void* lantern_Tensor_relu_attensor(void* self) { void* ret = _lantern_Tensor_relu_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_relu__attensor)(void* self);
  HOST_API void* lantern_relu__attensor(void* self) { void* ret = _lantern_relu__attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_relu__attensor)(void* self);
  HOST_API void* lantern_Tensor_relu__attensor(void* self) { void* ret = _lantern_Tensor_relu__attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_relu6_attensor)(void* self);
  HOST_API void* lantern_relu6_attensor(void* self) { void* ret = _lantern_relu6_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_relu6__attensor)(void* self);
  HOST_API void* lantern_relu6__attensor(void* self) { void* ret = _lantern_relu6__attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_prelu_attensor_attensor)(void* self, void* weight);
  HOST_API void* lantern_prelu_attensor_attensor(void* self, void* weight) { void* ret = _lantern_prelu_attensor_attensor(self, weight); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_prelu_attensor_attensor)(void* self, void* weight);
  HOST_API void* lantern_Tensor_prelu_attensor_attensor(void* self, void* weight) { void* ret = _lantern_Tensor_prelu_attensor_attensor(self, weight); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_prelu_backward_attensor_attensor_attensor)(void* grad_output, void* self, void* weight);
  HOST_API void* lantern_prelu_backward_attensor_attensor_attensor(void* grad_output, void* self, void* weight) { void* ret = _lantern_prelu_backward_attensor_attensor_attensor(grad_output, self, weight); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_prelu_backward_attensor_attensor_attensor)(void* grad_output, void* self, void* weight);
  HOST_API void* lantern_Tensor_prelu_backward_attensor_attensor_attensor(void* grad_output, void* self, void* weight) { void* ret = _lantern_Tensor_prelu_backward_attensor_attensor_attensor(grad_output, self, weight); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_gelu_attensor)(void* self);
  HOST_API void* lantern_gelu_attensor(void* self) { void* ret = _lantern_gelu_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_gelu_backward_attensor_attensor)(void* grad, void* self);
  HOST_API void* lantern_gelu_backward_attensor_attensor(void* grad, void* self) { void* ret = _lantern_gelu_backward_attensor_attensor(grad, self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_infinitely_differentiable_gelu_backward_attensor_attensor)(void* grad, void* self);
  HOST_API void* lantern_infinitely_differentiable_gelu_backward_attensor_attensor(void* grad, void* self) { void* ret = _lantern_infinitely_differentiable_gelu_backward_attensor_attensor(grad, self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_hardshrink_attensor_constatscalar)(void* self, void* lambd);
  HOST_API void* lantern_hardshrink_attensor_constatscalar(void* self, void* lambd) { void* ret = _lantern_hardshrink_attensor_constatscalar(self, lambd); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_hardshrink_attensor_constatscalar)(void* self, void* lambd);
  HOST_API void* lantern_Tensor_hardshrink_attensor_constatscalar(void* self, void* lambd) { void* ret = _lantern_Tensor_hardshrink_attensor_constatscalar(self, lambd); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_hardshrink_backward_attensor_attensor_constatscalar)(void* grad_out, void* self, void* lambd);
  HOST_API void* lantern_hardshrink_backward_attensor_attensor_constatscalar(void* grad_out, void* self, void* lambd) { void* ret = _lantern_hardshrink_backward_attensor_attensor_constatscalar(grad_out, self, lambd); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_hardshrink_backward_attensor_attensor_constatscalar)(void* grad_out, void* self, void* lambd);
  HOST_API void* lantern_Tensor_hardshrink_backward_attensor_attensor_constatscalar(void* grad_out, void* self, void* lambd) { void* ret = _lantern_Tensor_hardshrink_backward_attensor_attensor_constatscalar(grad_out, self, lambd); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_rsqrt_attensor)(void* self);
  HOST_API void* lantern_rsqrt_attensor(void* self) { void* ret = _lantern_rsqrt_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_rsqrt_attensor)(void* self);
  HOST_API void* lantern_Tensor_rsqrt_attensor(void* self) { void* ret = _lantern_Tensor_rsqrt_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_rsqrt__attensor)(void* self);
  HOST_API void* lantern_rsqrt__attensor(void* self) { void* ret = _lantern_rsqrt__attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_rsqrt__attensor)(void* self);
  HOST_API void* lantern_Tensor_rsqrt__attensor(void* self) { void* ret = _lantern_Tensor_rsqrt__attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_rsqrt_out_attensor_attensor)(void* out, void* self);
  HOST_API void* lantern_rsqrt_out_attensor_attensor(void* out, void* self) { void* ret = _lantern_rsqrt_out_attensor_attensor(out, self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_select_attensor_atdimname_intt)(void* self, void* dim, void* index);
  HOST_API void* lantern_select_attensor_atdimname_intt(void* self, void* dim, void* index) { void* ret = _lantern_select_attensor_atdimname_intt(self, dim, index); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_select_attensor_atdimname_intt)(void* self, void* dim, void* index);
  HOST_API void* lantern_Tensor_select_attensor_atdimname_intt(void* self, void* dim, void* index) { void* ret = _lantern_Tensor_select_attensor_atdimname_intt(self, dim, index); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_select_attensor_intt_intt)(void* self, void* dim, void* index);
  HOST_API void* lantern_select_attensor_intt_intt(void* self, void* dim, void* index) { void* ret = _lantern_select_attensor_intt_intt(self, dim, index); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_select_attensor_intt_intt)(void* self, void* dim, void* index);
  HOST_API void* lantern_Tensor_select_attensor_intt_intt(void* self, void* dim, void* index) { void* ret = _lantern_Tensor_select_attensor_intt_intt(self, dim, index); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_select_backward_attensor_atintarrayref_intt_intt)(void* grad, void* input_sizes, void* dim, void* index);
  HOST_API void* lantern_select_backward_attensor_atintarrayref_intt_intt(void* grad, void* input_sizes, void* dim, void* index) { void* ret = _lantern_select_backward_attensor_atintarrayref_intt_intt(grad, input_sizes, dim, index); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_selu_attensor)(void* self);
  HOST_API void* lantern_selu_attensor(void* self) { void* ret = _lantern_selu_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_selu__attensor)(void* self);
  HOST_API void* lantern_selu__attensor(void* self) { void* ret = _lantern_selu__attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_celu_attensor_constatscalar)(void* self, void* alpha);
  HOST_API void* lantern_celu_attensor_constatscalar(void* self, void* alpha) { void* ret = _lantern_celu_attensor_constatscalar(self, alpha); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_celu__attensor_constatscalar)(void* self, void* alpha);
  HOST_API void* lantern_celu__attensor_constatscalar(void* self, void* alpha) { void* ret = _lantern_celu__attensor_constatscalar(self, alpha); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_silu_attensor)(void* self);
  HOST_API void* lantern_silu_attensor(void* self) { void* ret = _lantern_silu_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_silu__attensor)(void* self);
  HOST_API void* lantern_silu__attensor(void* self) { void* ret = _lantern_silu__attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_silu_out_attensor_attensor)(void* out, void* self);
  HOST_API void* lantern_silu_out_attensor_attensor(void* out, void* self) { void* ret = _lantern_silu_out_attensor_attensor(out, self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_silu_backward_attensor_attensor)(void* grad_output, void* self);
  HOST_API void* lantern_silu_backward_attensor_attensor(void* grad_output, void* self) { void* ret = _lantern_silu_backward_attensor_attensor(grad_output, self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_mish_attensor)(void* self);
  HOST_API void* lantern_mish_attensor(void* self) { void* ret = _lantern_mish_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_mish__attensor)(void* self);
  HOST_API void* lantern_mish__attensor(void* self) { void* ret = _lantern_mish__attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_mish_out_attensor_attensor)(void* out, void* self);
  HOST_API void* lantern_mish_out_attensor_attensor(void* out, void* self) { void* ret = _lantern_mish_out_attensor_attensor(out, self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_mish_backward_attensor_attensor)(void* grad_output, void* self);
  HOST_API void* lantern_mish_backward_attensor_attensor(void* grad_output, void* self) { void* ret = _lantern_mish_backward_attensor_attensor(grad_output, self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_sigmoid_attensor)(void* self);
  HOST_API void* lantern_sigmoid_attensor(void* self) { void* ret = _lantern_sigmoid_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_sigmoid_attensor)(void* self);
  HOST_API void* lantern_Tensor_sigmoid_attensor(void* self) { void* ret = _lantern_Tensor_sigmoid_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_sigmoid__attensor)(void* self);
  HOST_API void* lantern_sigmoid__attensor(void* self) { void* ret = _lantern_sigmoid__attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_sigmoid__attensor)(void* self);
  HOST_API void* lantern_Tensor_sigmoid__attensor(void* self) { void* ret = _lantern_Tensor_sigmoid__attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_sigmoid_out_attensor_attensor)(void* out, void* self);
  HOST_API void* lantern_sigmoid_out_attensor_attensor(void* out, void* self) { void* ret = _lantern_sigmoid_out_attensor_attensor(out, self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_logit_attensor_double)(void* self, void* eps);
  HOST_API void* lantern_logit_attensor_double(void* self, void* eps) { void* ret = _lantern_logit_attensor_double(self, eps); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_logit_attensor_double)(void* self, void* eps);
  HOST_API void* lantern_Tensor_logit_attensor_double(void* self, void* eps) { void* ret = _lantern_Tensor_logit_attensor_double(self, eps); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_logit__attensor_double)(void* self, void* eps);
  HOST_API void* lantern_logit__attensor_double(void* self, void* eps) { void* ret = _lantern_logit__attensor_double(self, eps); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_logit__attensor_double)(void* self, void* eps);
  HOST_API void* lantern_Tensor_logit__attensor_double(void* self, void* eps) { void* ret = _lantern_Tensor_logit__attensor_double(self, eps); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_logit_out_attensor_attensor_double)(void* out, void* self, void* eps);
  HOST_API void* lantern_logit_out_attensor_attensor_double(void* out, void* self, void* eps) { void* ret = _lantern_logit_out_attensor_attensor_double(out, self, eps); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_sin_attensor)(void* self);
  HOST_API void* lantern_sin_attensor(void* self) { void* ret = _lantern_sin_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_sin_attensor)(void* self);
  HOST_API void* lantern_Tensor_sin_attensor(void* self) { void* ret = _lantern_Tensor_sin_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_sin__attensor)(void* self);
  HOST_API void* lantern_sin__attensor(void* self) { void* ret = _lantern_sin__attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_sin__attensor)(void* self);
  HOST_API void* lantern_Tensor_sin__attensor(void* self) { void* ret = _lantern_Tensor_sin__attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_sin_out_attensor_attensor)(void* out, void* self);
  HOST_API void* lantern_sin_out_attensor_attensor(void* out, void* self) { void* ret = _lantern_sin_out_attensor_attensor(out, self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_sinc_attensor)(void* self);
  HOST_API void* lantern_sinc_attensor(void* self) { void* ret = _lantern_sinc_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_sinc_attensor)(void* self);
  HOST_API void* lantern_Tensor_sinc_attensor(void* self) { void* ret = _lantern_Tensor_sinc_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_sinc__attensor)(void* self);
  HOST_API void* lantern_sinc__attensor(void* self) { void* ret = _lantern_sinc__attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_sinc__attensor)(void* self);
  HOST_API void* lantern_Tensor_sinc__attensor(void* self) { void* ret = _lantern_Tensor_sinc__attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_sinc_out_attensor_attensor)(void* out, void* self);
  HOST_API void* lantern_sinc_out_attensor_attensor(void* out, void* self) { void* ret = _lantern_sinc_out_attensor_attensor(out, self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_sinh_attensor)(void* self);
  HOST_API void* lantern_sinh_attensor(void* self) { void* ret = _lantern_sinh_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_sinh_attensor)(void* self);
  HOST_API void* lantern_Tensor_sinh_attensor(void* self) { void* ret = _lantern_Tensor_sinh_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_sinh__attensor)(void* self);
  HOST_API void* lantern_sinh__attensor(void* self) { void* ret = _lantern_sinh__attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_sinh__attensor)(void* self);
  HOST_API void* lantern_Tensor_sinh__attensor(void* self) { void* ret = _lantern_Tensor_sinh__attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_sinh_out_attensor_attensor)(void* out, void* self);
  HOST_API void* lantern_sinh_out_attensor_attensor(void* out, void* self) { void* ret = _lantern_sinh_out_attensor_attensor(out, self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_detach_attensor)(void* self);
  HOST_API void* lantern_detach_attensor(void* self) { void* ret = _lantern_detach_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_detach_attensor)(void* self);
  HOST_API void* lantern_Tensor_detach_attensor(void* self) { void* ret = _lantern_Tensor_detach_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_detach__attensor)(void* self);
  HOST_API void* lantern_detach__attensor(void* self) { void* ret = _lantern_detach__attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_detach__attensor)(void* self);
  HOST_API void* lantern_Tensor_detach__attensor(void* self) { void* ret = _lantern_Tensor_detach__attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_size_attensor_intt)(void* self, void* dim);
  HOST_API void* lantern_size_attensor_intt(void* self, void* dim) { void* ret = _lantern_size_attensor_intt(self, dim); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_size_attensor_atdimname)(void* self, void* dim);
  HOST_API void* lantern_size_attensor_atdimname(void* self, void* dim) { void* ret = _lantern_size_attensor_atdimname(self, dim); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_size_attensor_atdimname)(void* self, void* dim);
  HOST_API void* lantern_Tensor_size_attensor_atdimname(void* self, void* dim) { void* ret = _lantern_Tensor_size_attensor_atdimname(self, dim); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_slice_attensor_intt_intt_intt_intt)(void* self, void* dim, void* start, void* end, void* step);
  HOST_API void* lantern_slice_attensor_intt_intt_intt_intt(void* self, void* dim, void* start, void* end, void* step) { void* ret = _lantern_slice_attensor_intt_intt_intt_intt(self, dim, start, end, step); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_slice_attensor_intt_intt_intt_intt)(void* self, void* dim, void* start, void* end, void* step);
  HOST_API void* lantern_Tensor_slice_attensor_intt_intt_intt_intt(void* self, void* dim, void* start, void* end, void* step) { void* ret = _lantern_Tensor_slice_attensor_intt_intt_intt_intt(self, dim, start, end, step); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_slice_backward_attensor_atintarrayref_intt_intt_intt_intt)(void* grad, void* input_sizes, void* dim, void* start, void* end, void* step);
  HOST_API void* lantern_slice_backward_attensor_atintarrayref_intt_intt_intt_intt(void* grad, void* input_sizes, void* dim, void* start, void* end, void* step) { void* ret = _lantern_slice_backward_attensor_atintarrayref_intt_intt_intt_intt(grad, input_sizes, dim, start, end, step); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_slogdet_attensor)(void* self);
  HOST_API void* lantern_slogdet_attensor(void* self) { void* ret = _lantern_slogdet_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_slogdet_attensor)(void* self);
  HOST_API void* lantern_Tensor_slogdet_attensor(void* self) { void* ret = _lantern_Tensor_slogdet_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_smm_attensor_attensor)(void* self, void* mat2);
  HOST_API void* lantern_smm_attensor_attensor(void* self, void* mat2) { void* ret = _lantern_smm_attensor_attensor(self, mat2); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_smm_attensor_attensor)(void* self, void* mat2);
  HOST_API void* lantern_Tensor_smm_attensor_attensor(void* self, void* mat2) { void* ret = _lantern_Tensor_smm_attensor_attensor(self, mat2); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_softmax_attensor_intt_atscalartype)(void* self, void* dim, void* dtype);
  HOST_API void* lantern_softmax_attensor_intt_atscalartype(void* self, void* dim, void* dtype) { void* ret = _lantern_softmax_attensor_intt_atscalartype(self, dim, dtype); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_softmax_attensor_intt_atscalartype)(void* self, void* dim, void* dtype);
  HOST_API void* lantern_Tensor_softmax_attensor_intt_atscalartype(void* self, void* dim, void* dtype) { void* ret = _lantern_Tensor_softmax_attensor_intt_atscalartype(self, dim, dtype); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_softmax_attensor_atdimname_atscalartype)(void* self, void* dim, void* dtype);
  HOST_API void* lantern_softmax_attensor_atdimname_atscalartype(void* self, void* dim, void* dtype) { void* ret = _lantern_softmax_attensor_atdimname_atscalartype(self, dim, dtype); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_softmax_attensor_atdimname_atscalartype)(void* self, void* dim, void* dtype);
  HOST_API void* lantern_Tensor_softmax_attensor_atdimname_atscalartype(void* self, void* dim, void* dtype) { void* ret = _lantern_Tensor_softmax_attensor_atdimname_atscalartype(self, dim, dtype); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__softmax_attensor_intt_bool)(void* self, void* dim, void* half_to_float);
  HOST_API void* lantern__softmax_attensor_intt_bool(void* self, void* dim, void* half_to_float) { void* ret = _lantern__softmax_attensor_intt_bool(self, dim, half_to_float); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__softmax_backward_data_attensor_attensor_intt_attensor)(void* grad_output, void* output, void* dim, void* self);
  HOST_API void* lantern__softmax_backward_data_attensor_attensor_intt_attensor(void* grad_output, void* output, void* dim, void* self) { void* ret = _lantern__softmax_backward_data_attensor_attensor_intt_attensor(grad_output, output, dim, self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_unsafe_split_attensor_intt_intt)(void* self, void* split_size, void* dim);
  HOST_API void* lantern_unsafe_split_attensor_intt_intt(void* self, void* split_size, void* dim) { void* ret = _lantern_unsafe_split_attensor_intt_intt(self, split_size, dim); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_unsafe_split_attensor_intt_intt)(void* self, void* split_size, void* dim);
  HOST_API void* lantern_Tensor_unsafe_split_attensor_intt_intt(void* self, void* split_size, void* dim) { void* ret = _lantern_Tensor_unsafe_split_attensor_intt_intt(self, split_size, dim); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_split_attensor_intt_intt)(void* self, void* split_size, void* dim);
  HOST_API void* lantern_split_attensor_intt_intt(void* self, void* split_size, void* dim) { void* ret = _lantern_split_attensor_intt_intt(self, split_size, dim); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_split_attensor_intt_intt)(void* self, void* split_size, void* dim);
  HOST_API void* lantern_Tensor_split_attensor_intt_intt(void* self, void* split_size, void* dim) { void* ret = _lantern_Tensor_split_attensor_intt_intt(self, split_size, dim); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_unsafe_split_with_sizes_attensor_atintarrayref_intt)(void* self, void* split_sizes, void* dim);
  HOST_API void* lantern_unsafe_split_with_sizes_attensor_atintarrayref_intt(void* self, void* split_sizes, void* dim) { void* ret = _lantern_unsafe_split_with_sizes_attensor_atintarrayref_intt(self, split_sizes, dim); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_unsafe_split_with_sizes_attensor_atintarrayref_intt)(void* self, void* split_sizes, void* dim);
  HOST_API void* lantern_Tensor_unsafe_split_with_sizes_attensor_atintarrayref_intt(void* self, void* split_sizes, void* dim) { void* ret = _lantern_Tensor_unsafe_split_with_sizes_attensor_atintarrayref_intt(self, split_sizes, dim); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_split_with_sizes_attensor_atintarrayref_intt)(void* self, void* split_sizes, void* dim);
  HOST_API void* lantern_split_with_sizes_attensor_atintarrayref_intt(void* self, void* split_sizes, void* dim) { void* ret = _lantern_split_with_sizes_attensor_atintarrayref_intt(self, split_sizes, dim); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_split_with_sizes_attensor_atintarrayref_intt)(void* self, void* split_sizes, void* dim);
  HOST_API void* lantern_Tensor_split_with_sizes_attensor_atintarrayref_intt(void* self, void* split_sizes, void* dim) { void* ret = _lantern_Tensor_split_with_sizes_attensor_atintarrayref_intt(self, split_sizes, dim); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_hsplit_attensor_intt)(void* self, void* sections);
  HOST_API void* lantern_hsplit_attensor_intt(void* self, void* sections) { void* ret = _lantern_hsplit_attensor_intt(self, sections); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_hsplit_attensor_intt)(void* self, void* sections);
  HOST_API void* lantern_Tensor_hsplit_attensor_intt(void* self, void* sections) { void* ret = _lantern_Tensor_hsplit_attensor_intt(self, sections); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_hsplit_attensor_atintarrayref)(void* self, void* indices);
  HOST_API void* lantern_hsplit_attensor_atintarrayref(void* self, void* indices) { void* ret = _lantern_hsplit_attensor_atintarrayref(self, indices); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_hsplit_attensor_atintarrayref)(void* self, void* indices);
  HOST_API void* lantern_Tensor_hsplit_attensor_atintarrayref(void* self, void* indices) { void* ret = _lantern_Tensor_hsplit_attensor_atintarrayref(self, indices); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_vsplit_attensor_intt)(void* self, void* sections);
  HOST_API void* lantern_vsplit_attensor_intt(void* self, void* sections) { void* ret = _lantern_vsplit_attensor_intt(self, sections); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_vsplit_attensor_intt)(void* self, void* sections);
  HOST_API void* lantern_Tensor_vsplit_attensor_intt(void* self, void* sections) { void* ret = _lantern_Tensor_vsplit_attensor_intt(self, sections); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_vsplit_attensor_atintarrayref)(void* self, void* indices);
  HOST_API void* lantern_vsplit_attensor_atintarrayref(void* self, void* indices) { void* ret = _lantern_vsplit_attensor_atintarrayref(self, indices); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_vsplit_attensor_atintarrayref)(void* self, void* indices);
  HOST_API void* lantern_Tensor_vsplit_attensor_atintarrayref(void* self, void* indices) { void* ret = _lantern_Tensor_vsplit_attensor_atintarrayref(self, indices); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_dsplit_attensor_intt)(void* self, void* sections);
  HOST_API void* lantern_dsplit_attensor_intt(void* self, void* sections) { void* ret = _lantern_dsplit_attensor_intt(self, sections); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_dsplit_attensor_intt)(void* self, void* sections);
  HOST_API void* lantern_Tensor_dsplit_attensor_intt(void* self, void* sections) { void* ret = _lantern_Tensor_dsplit_attensor_intt(self, sections); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_dsplit_attensor_atintarrayref)(void* self, void* indices);
  HOST_API void* lantern_dsplit_attensor_atintarrayref(void* self, void* indices) { void* ret = _lantern_dsplit_attensor_atintarrayref(self, indices); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_dsplit_attensor_atintarrayref)(void* self, void* indices);
  HOST_API void* lantern_Tensor_dsplit_attensor_atintarrayref(void* self, void* indices) { void* ret = _lantern_Tensor_dsplit_attensor_atintarrayref(self, indices); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_squeeze_attensor)(void* self);
  HOST_API void* lantern_squeeze_attensor(void* self) { void* ret = _lantern_squeeze_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_squeeze_attensor)(void* self);
  HOST_API void* lantern_Tensor_squeeze_attensor(void* self) { void* ret = _lantern_Tensor_squeeze_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_squeeze_attensor_intt)(void* self, void* dim);
  HOST_API void* lantern_squeeze_attensor_intt(void* self, void* dim) { void* ret = _lantern_squeeze_attensor_intt(self, dim); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_squeeze_attensor_intt)(void* self, void* dim);
  HOST_API void* lantern_Tensor_squeeze_attensor_intt(void* self, void* dim) { void* ret = _lantern_Tensor_squeeze_attensor_intt(self, dim); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_squeeze_attensor_atdimname)(void* self, void* dim);
  HOST_API void* lantern_squeeze_attensor_atdimname(void* self, void* dim) { void* ret = _lantern_squeeze_attensor_atdimname(self, dim); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_squeeze_attensor_atdimname)(void* self, void* dim);
  HOST_API void* lantern_Tensor_squeeze_attensor_atdimname(void* self, void* dim) { void* ret = _lantern_Tensor_squeeze_attensor_atdimname(self, dim); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_squeeze__attensor)(void* self);
  HOST_API void* lantern_Tensor_squeeze__attensor(void* self) { void* ret = _lantern_Tensor_squeeze__attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_squeeze__attensor_intt)(void* self, void* dim);
  HOST_API void* lantern_Tensor_squeeze__attensor_intt(void* self, void* dim) { void* ret = _lantern_Tensor_squeeze__attensor_intt(self, dim); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_squeeze__attensor_atdimname)(void* self, void* dim);
  HOST_API void* lantern_Tensor_squeeze__attensor_atdimname(void* self, void* dim) { void* ret = _lantern_Tensor_squeeze__attensor_atdimname(self, dim); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_sspaddmm_attensor_attensor_attensor_constatscalar_constatscalar)(void* self, void* mat1, void* mat2, void* beta, void* alpha);
  HOST_API void* lantern_sspaddmm_attensor_attensor_attensor_constatscalar_constatscalar(void* self, void* mat1, void* mat2, void* beta, void* alpha) { void* ret = _lantern_sspaddmm_attensor_attensor_attensor_constatscalar_constatscalar(self, mat1, mat2, beta, alpha); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_sspaddmm_attensor_attensor_attensor_constatscalar_constatscalar)(void* self, void* mat1, void* mat2, void* beta, void* alpha);
  HOST_API void* lantern_Tensor_sspaddmm_attensor_attensor_attensor_constatscalar_constatscalar(void* self, void* mat1, void* mat2, void* beta, void* alpha) { void* ret = _lantern_Tensor_sspaddmm_attensor_attensor_attensor_constatscalar_constatscalar(self, mat1, mat2, beta, alpha); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_sspaddmm_out_attensor_attensor_attensor_attensor_constatscalar_constatscalar)(void* out, void* self, void* mat1, void* mat2, void* beta, void* alpha);
  HOST_API void* lantern_sspaddmm_out_attensor_attensor_attensor_attensor_constatscalar_constatscalar(void* out, void* self, void* mat1, void* mat2, void* beta, void* alpha) { void* ret = _lantern_sspaddmm_out_attensor_attensor_attensor_attensor_constatscalar_constatscalar(out, self, mat1, mat2, beta, alpha); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_stack_attensorlist_intt)(void* tensors, void* dim);
  HOST_API void* lantern_stack_attensorlist_intt(void* tensors, void* dim) { void* ret = _lantern_stack_attensorlist_intt(tensors, dim); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_stack_out_attensor_attensorlist_intt)(void* out, void* tensors, void* dim);
  HOST_API void* lantern_stack_out_attensor_attensorlist_intt(void* out, void* tensors, void* dim) { void* ret = _lantern_stack_out_attensor_attensorlist_intt(out, tensors, dim); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__stack_attensorlist_intt)(void* tensors, void* dim);
  HOST_API void* lantern__stack_attensorlist_intt(void* tensors, void* dim) { void* ret = _lantern__stack_attensorlist_intt(tensors, dim); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__stack_out_attensor_attensorlist_intt)(void* out, void* tensors, void* dim);
  HOST_API void* lantern__stack_out_attensor_attensorlist_intt(void* out, void* tensors, void* dim) { void* ret = _lantern__stack_out_attensor_attensorlist_intt(out, tensors, dim); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_hstack_attensorlist)(void* tensors);
  HOST_API void* lantern_hstack_attensorlist(void* tensors) { void* ret = _lantern_hstack_attensorlist(tensors); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_hstack_out_attensor_attensorlist)(void* out, void* tensors);
  HOST_API void* lantern_hstack_out_attensor_attensorlist(void* out, void* tensors) { void* ret = _lantern_hstack_out_attensor_attensorlist(out, tensors); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_vstack_attensorlist)(void* tensors);
  HOST_API void* lantern_vstack_attensorlist(void* tensors) { void* ret = _lantern_vstack_attensorlist(tensors); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_vstack_out_attensor_attensorlist)(void* out, void* tensors);
  HOST_API void* lantern_vstack_out_attensor_attensorlist(void* out, void* tensors) { void* ret = _lantern_vstack_out_attensor_attensorlist(out, tensors); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_dstack_attensorlist)(void* tensors);
  HOST_API void* lantern_dstack_attensorlist(void* tensors) { void* ret = _lantern_dstack_attensorlist(tensors); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_dstack_out_attensor_attensorlist)(void* out, void* tensors);
  HOST_API void* lantern_dstack_out_attensor_attensorlist(void* out, void* tensors) { void* ret = _lantern_dstack_out_attensor_attensorlist(out, tensors); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_stft_attensor_intt_intt_intt_attensor_bool_bool_bool)(void* self, void* n_fft, void* hop_length, void* win_length, void* window, void* normalized, void* onesided, void* return_complex);
  HOST_API void* lantern_stft_attensor_intt_intt_intt_attensor_bool_bool_bool(void* self, void* n_fft, void* hop_length, void* win_length, void* window, void* normalized, void* onesided, void* return_complex) { void* ret = _lantern_stft_attensor_intt_intt_intt_attensor_bool_bool_bool(self, n_fft, hop_length, win_length, window, normalized, onesided, return_complex); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_stft_attensor_intt_intt_intt_attensor_bool_bool_bool)(void* self, void* n_fft, void* hop_length, void* win_length, void* window, void* normalized, void* onesided, void* return_complex);
  HOST_API void* lantern_Tensor_stft_attensor_intt_intt_intt_attensor_bool_bool_bool(void* self, void* n_fft, void* hop_length, void* win_length, void* window, void* normalized, void* onesided, void* return_complex) { void* ret = _lantern_Tensor_stft_attensor_intt_intt_intt_attensor_bool_bool_bool(self, n_fft, hop_length, win_length, window, normalized, onesided, return_complex); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_istft_attensor_intt_intt_intt_attensor_bool_bool_bool_intt_bool)(void* self, void* n_fft, void* hop_length, void* win_length, void* window, void* center, void* normalized, void* onesided, void* length, void* return_complex);
  HOST_API void* lantern_istft_attensor_intt_intt_intt_attensor_bool_bool_bool_intt_bool(void* self, void* n_fft, void* hop_length, void* win_length, void* window, void* center, void* normalized, void* onesided, void* length, void* return_complex) { void* ret = _lantern_istft_attensor_intt_intt_intt_attensor_bool_bool_bool_intt_bool(self, n_fft, hop_length, win_length, window, center, normalized, onesided, length, return_complex); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_istft_attensor_intt_intt_intt_attensor_bool_bool_bool_intt_bool)(void* self, void* n_fft, void* hop_length, void* win_length, void* window, void* center, void* normalized, void* onesided, void* length, void* return_complex);
  HOST_API void* lantern_Tensor_istft_attensor_intt_intt_intt_attensor_bool_bool_bool_intt_bool(void* self, void* n_fft, void* hop_length, void* win_length, void* window, void* center, void* normalized, void* onesided, void* length, void* return_complex) { void* ret = _lantern_Tensor_istft_attensor_intt_intt_intt_attensor_bool_bool_bool_intt_bool(self, n_fft, hop_length, win_length, window, center, normalized, onesided, length, return_complex); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_stride_attensor_intt)(void* self, void* dim);
  HOST_API void* lantern_stride_attensor_intt(void* self, void* dim) { void* ret = _lantern_stride_attensor_intt(self, dim); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_stride_attensor_intt)(void* self, void* dim);
  HOST_API void* lantern_Tensor_stride_attensor_intt(void* self, void* dim) { void* ret = _lantern_Tensor_stride_attensor_intt(self, dim); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_stride_attensor_atdimname)(void* self, void* dim);
  HOST_API void* lantern_stride_attensor_atdimname(void* self, void* dim) { void* ret = _lantern_stride_attensor_atdimname(self, dim); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_stride_attensor_atdimname)(void* self, void* dim);
  HOST_API void* lantern_Tensor_stride_attensor_atdimname(void* self, void* dim) { void* ret = _lantern_Tensor_stride_attensor_atdimname(self, dim); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_sum_attensor_atscalartype)(void* self, void* dtype);
  HOST_API void* lantern_sum_attensor_atscalartype(void* self, void* dtype) { void* ret = _lantern_sum_attensor_atscalartype(self, dtype); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_sum_attensor_atscalartype)(void* self, void* dtype);
  HOST_API void* lantern_Tensor_sum_attensor_atscalartype(void* self, void* dtype) { void* ret = _lantern_Tensor_sum_attensor_atscalartype(self, dtype); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_sum_attensor_atintarrayref_bool_atscalartype)(void* self, void* dim, void* keepdim, void* dtype);
  HOST_API void* lantern_sum_attensor_atintarrayref_bool_atscalartype(void* self, void* dim, void* keepdim, void* dtype) { void* ret = _lantern_sum_attensor_atintarrayref_bool_atscalartype(self, dim, keepdim, dtype); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_sum_attensor_atintarrayref_bool_atscalartype)(void* self, void* dim, void* keepdim, void* dtype);
  HOST_API void* lantern_Tensor_sum_attensor_atintarrayref_bool_atscalartype(void* self, void* dim, void* keepdim, void* dtype) { void* ret = _lantern_Tensor_sum_attensor_atintarrayref_bool_atscalartype(self, dim, keepdim, dtype); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_sum_attensor_atdimnamelist_bool_atscalartype)(void* self, void* dim, void* keepdim, void* dtype);
  HOST_API void* lantern_sum_attensor_atdimnamelist_bool_atscalartype(void* self, void* dim, void* keepdim, void* dtype) { void* ret = _lantern_sum_attensor_atdimnamelist_bool_atscalartype(self, dim, keepdim, dtype); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_sum_attensor_atdimnamelist_bool_atscalartype)(void* self, void* dim, void* keepdim, void* dtype);
  HOST_API void* lantern_Tensor_sum_attensor_atdimnamelist_bool_atscalartype(void* self, void* dim, void* keepdim, void* dtype) { void* ret = _lantern_Tensor_sum_attensor_atdimnamelist_bool_atscalartype(self, dim, keepdim, dtype); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_sum_out_attensor_attensor_atintarrayref_bool_atscalartype)(void* out, void* self, void* dim, void* keepdim, void* dtype);
  HOST_API void* lantern_sum_out_attensor_attensor_atintarrayref_bool_atscalartype(void* out, void* self, void* dim, void* keepdim, void* dtype) { void* ret = _lantern_sum_out_attensor_attensor_atintarrayref_bool_atscalartype(out, self, dim, keepdim, dtype); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_sum_out_attensor_attensor_atdimnamelist_bool_atscalartype)(void* out, void* self, void* dim, void* keepdim, void* dtype);
  HOST_API void* lantern_sum_out_attensor_attensor_atdimnamelist_bool_atscalartype(void* out, void* self, void* dim, void* keepdim, void* dtype) { void* ret = _lantern_sum_out_attensor_attensor_atdimnamelist_bool_atscalartype(out, self, dim, keepdim, dtype); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_nansum_attensor_atscalartype)(void* self, void* dtype);
  HOST_API void* lantern_nansum_attensor_atscalartype(void* self, void* dtype) { void* ret = _lantern_nansum_attensor_atscalartype(self, dtype); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_nansum_attensor_atscalartype)(void* self, void* dtype);
  HOST_API void* lantern_Tensor_nansum_attensor_atscalartype(void* self, void* dtype) { void* ret = _lantern_Tensor_nansum_attensor_atscalartype(self, dtype); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_nansum_attensor_atintarrayref_bool_atscalartype)(void* self, void* dim, void* keepdim, void* dtype);
  HOST_API void* lantern_nansum_attensor_atintarrayref_bool_atscalartype(void* self, void* dim, void* keepdim, void* dtype) { void* ret = _lantern_nansum_attensor_atintarrayref_bool_atscalartype(self, dim, keepdim, dtype); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_nansum_attensor_atintarrayref_bool_atscalartype)(void* self, void* dim, void* keepdim, void* dtype);
  HOST_API void* lantern_Tensor_nansum_attensor_atintarrayref_bool_atscalartype(void* self, void* dim, void* keepdim, void* dtype) { void* ret = _lantern_Tensor_nansum_attensor_atintarrayref_bool_atscalartype(self, dim, keepdim, dtype); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_nansum_out_attensor_attensor_atintarrayref_bool_atscalartype)(void* out, void* self, void* dim, void* keepdim, void* dtype);
  HOST_API void* lantern_nansum_out_attensor_attensor_atintarrayref_bool_atscalartype(void* out, void* self, void* dim, void* keepdim, void* dtype) { void* ret = _lantern_nansum_out_attensor_attensor_atintarrayref_bool_atscalartype(out, self, dim, keepdim, dtype); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_sum_to_size_attensor_atintarrayref)(void* self, void* size);
  HOST_API void* lantern_Tensor_sum_to_size_attensor_atintarrayref(void* self, void* size) { void* ret = _lantern_Tensor_sum_to_size_attensor_atintarrayref(self, size); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_sqrt_attensor)(void* self);
  HOST_API void* lantern_sqrt_attensor(void* self) { void* ret = _lantern_sqrt_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_sqrt_attensor)(void* self);
  HOST_API void* lantern_Tensor_sqrt_attensor(void* self) { void* ret = _lantern_Tensor_sqrt_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_sqrt__attensor)(void* self);
  HOST_API void* lantern_sqrt__attensor(void* self) { void* ret = _lantern_sqrt__attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_sqrt__attensor)(void* self);
  HOST_API void* lantern_Tensor_sqrt__attensor(void* self) { void* ret = _lantern_Tensor_sqrt__attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_sqrt_out_attensor_attensor)(void* out, void* self);
  HOST_API void* lantern_sqrt_out_attensor_attensor(void* out, void* self) { void* ret = _lantern_sqrt_out_attensor_attensor(out, self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_square_attensor)(void* self);
  HOST_API void* lantern_square_attensor(void* self) { void* ret = _lantern_square_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_square_attensor)(void* self);
  HOST_API void* lantern_Tensor_square_attensor(void* self) { void* ret = _lantern_Tensor_square_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_square__attensor)(void* self);
  HOST_API void* lantern_square__attensor(void* self) { void* ret = _lantern_square__attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_square__attensor)(void* self);
  HOST_API void* lantern_Tensor_square__attensor(void* self) { void* ret = _lantern_Tensor_square__attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_square_out_attensor_attensor)(void* out, void* self);
  HOST_API void* lantern_square_out_attensor_attensor(void* out, void* self) { void* ret = _lantern_square_out_attensor_attensor(out, self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_std_attensor_bool)(void* self, void* unbiased);
  HOST_API void* lantern_std_attensor_bool(void* self, void* unbiased) { void* ret = _lantern_std_attensor_bool(self, unbiased); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_std_attensor_bool)(void* self, void* unbiased);
  HOST_API void* lantern_Tensor_std_attensor_bool(void* self, void* unbiased) { void* ret = _lantern_Tensor_std_attensor_bool(self, unbiased); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_std_attensor_atintarrayref_bool_bool)(void* self, void* dim, void* unbiased, void* keepdim);
  HOST_API void* lantern_std_attensor_atintarrayref_bool_bool(void* self, void* dim, void* unbiased, void* keepdim) { void* ret = _lantern_std_attensor_atintarrayref_bool_bool(self, dim, unbiased, keepdim); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_std_attensor_atintarrayref_bool_bool)(void* self, void* dim, void* unbiased, void* keepdim);
  HOST_API void* lantern_Tensor_std_attensor_atintarrayref_bool_bool(void* self, void* dim, void* unbiased, void* keepdim) { void* ret = _lantern_Tensor_std_attensor_atintarrayref_bool_bool(self, dim, unbiased, keepdim); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_std_attensor_atintarrayref_intt_bool)(void* self, void* dim, void* correction, void* keepdim);
  HOST_API void* lantern_std_attensor_atintarrayref_intt_bool(void* self, void* dim, void* correction, void* keepdim) { void* ret = _lantern_std_attensor_atintarrayref_intt_bool(self, dim, correction, keepdim); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_std_attensor_atintarrayref_intt_bool)(void* self, void* dim, void* correction, void* keepdim);
  HOST_API void* lantern_Tensor_std_attensor_atintarrayref_intt_bool(void* self, void* dim, void* correction, void* keepdim) { void* ret = _lantern_Tensor_std_attensor_atintarrayref_intt_bool(self, dim, correction, keepdim); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_std_mean_attensor_bool)(void* self, void* unbiased);
  HOST_API void* lantern_std_mean_attensor_bool(void* self, void* unbiased) { void* ret = _lantern_std_mean_attensor_bool(self, unbiased); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_std_mean_attensor_atintarrayref_bool_bool)(void* self, void* dim, void* unbiased, void* keepdim);
  HOST_API void* lantern_std_mean_attensor_atintarrayref_bool_bool(void* self, void* dim, void* unbiased, void* keepdim) { void* ret = _lantern_std_mean_attensor_atintarrayref_bool_bool(self, dim, unbiased, keepdim); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_std_mean_attensor_atintarrayref_intt_bool)(void* self, void* dim, void* correction, void* keepdim);
  HOST_API void* lantern_std_mean_attensor_atintarrayref_intt_bool(void* self, void* dim, void* correction, void* keepdim) { void* ret = _lantern_std_mean_attensor_atintarrayref_intt_bool(self, dim, correction, keepdim); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_std_mean_attensor_atdimnamelist_bool_bool)(void* self, void* dim, void* unbiased, void* keepdim);
  HOST_API void* lantern_std_mean_attensor_atdimnamelist_bool_bool(void* self, void* dim, void* unbiased, void* keepdim) { void* ret = _lantern_std_mean_attensor_atdimnamelist_bool_bool(self, dim, unbiased, keepdim); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_std_mean_attensor_atdimnamelist_intt_bool)(void* self, void* dim, void* correction, void* keepdim);
  HOST_API void* lantern_std_mean_attensor_atdimnamelist_intt_bool(void* self, void* dim, void* correction, void* keepdim) { void* ret = _lantern_std_mean_attensor_atdimnamelist_intt_bool(self, dim, correction, keepdim); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_std_out_attensor_attensor_atintarrayref_bool_bool)(void* out, void* self, void* dim, void* unbiased, void* keepdim);
  HOST_API void* lantern_std_out_attensor_attensor_atintarrayref_bool_bool(void* out, void* self, void* dim, void* unbiased, void* keepdim) { void* ret = _lantern_std_out_attensor_attensor_atintarrayref_bool_bool(out, self, dim, unbiased, keepdim); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_std_out_attensor_attensor_atintarrayref_intt_bool)(void* out, void* self, void* dim, void* correction, void* keepdim);
  HOST_API void* lantern_std_out_attensor_attensor_atintarrayref_intt_bool(void* out, void* self, void* dim, void* correction, void* keepdim) { void* ret = _lantern_std_out_attensor_attensor_atintarrayref_intt_bool(out, self, dim, correction, keepdim); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_std_attensor_atdimnamelist_bool_bool)(void* self, void* dim, void* unbiased, void* keepdim);
  HOST_API void* lantern_std_attensor_atdimnamelist_bool_bool(void* self, void* dim, void* unbiased, void* keepdim) { void* ret = _lantern_std_attensor_atdimnamelist_bool_bool(self, dim, unbiased, keepdim); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_std_attensor_atdimnamelist_bool_bool)(void* self, void* dim, void* unbiased, void* keepdim);
  HOST_API void* lantern_Tensor_std_attensor_atdimnamelist_bool_bool(void* self, void* dim, void* unbiased, void* keepdim) { void* ret = _lantern_Tensor_std_attensor_atdimnamelist_bool_bool(self, dim, unbiased, keepdim); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_std_out_attensor_attensor_atdimnamelist_bool_bool)(void* out, void* self, void* dim, void* unbiased, void* keepdim);
  HOST_API void* lantern_std_out_attensor_attensor_atdimnamelist_bool_bool(void* out, void* self, void* dim, void* unbiased, void* keepdim) { void* ret = _lantern_std_out_attensor_attensor_atdimnamelist_bool_bool(out, self, dim, unbiased, keepdim); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_std_attensor_atdimnamelist_intt_bool)(void* self, void* dim, void* correction, void* keepdim);
  HOST_API void* lantern_std_attensor_atdimnamelist_intt_bool(void* self, void* dim, void* correction, void* keepdim) { void* ret = _lantern_std_attensor_atdimnamelist_intt_bool(self, dim, correction, keepdim); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_std_attensor_atdimnamelist_intt_bool)(void* self, void* dim, void* correction, void* keepdim);
  HOST_API void* lantern_Tensor_std_attensor_atdimnamelist_intt_bool(void* self, void* dim, void* correction, void* keepdim) { void* ret = _lantern_Tensor_std_attensor_atdimnamelist_intt_bool(self, dim, correction, keepdim); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_std_out_attensor_attensor_atdimnamelist_intt_bool)(void* out, void* self, void* dim, void* correction, void* keepdim);
  HOST_API void* lantern_std_out_attensor_attensor_atdimnamelist_intt_bool(void* out, void* self, void* dim, void* correction, void* keepdim) { void* ret = _lantern_std_out_attensor_attensor_atdimnamelist_intt_bool(out, self, dim, correction, keepdim); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_prod_attensor_atscalartype)(void* self, void* dtype);
  HOST_API void* lantern_prod_attensor_atscalartype(void* self, void* dtype) { void* ret = _lantern_prod_attensor_atscalartype(self, dtype); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_prod_attensor_atscalartype)(void* self, void* dtype);
  HOST_API void* lantern_Tensor_prod_attensor_atscalartype(void* self, void* dtype) { void* ret = _lantern_Tensor_prod_attensor_atscalartype(self, dtype); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_prod_attensor_intt_bool_atscalartype)(void* self, void* dim, void* keepdim, void* dtype);
  HOST_API void* lantern_prod_attensor_intt_bool_atscalartype(void* self, void* dim, void* keepdim, void* dtype) { void* ret = _lantern_prod_attensor_intt_bool_atscalartype(self, dim, keepdim, dtype); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_prod_attensor_intt_bool_atscalartype)(void* self, void* dim, void* keepdim, void* dtype);
  HOST_API void* lantern_Tensor_prod_attensor_intt_bool_atscalartype(void* self, void* dim, void* keepdim, void* dtype) { void* ret = _lantern_Tensor_prod_attensor_intt_bool_atscalartype(self, dim, keepdim, dtype); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_prod_out_attensor_attensor_intt_bool_atscalartype)(void* out, void* self, void* dim, void* keepdim, void* dtype);
  HOST_API void* lantern_prod_out_attensor_attensor_intt_bool_atscalartype(void* out, void* self, void* dim, void* keepdim, void* dtype) { void* ret = _lantern_prod_out_attensor_attensor_intt_bool_atscalartype(out, self, dim, keepdim, dtype); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_prod_attensor_atdimname_bool_atscalartype)(void* self, void* dim, void* keepdim, void* dtype);
  HOST_API void* lantern_prod_attensor_atdimname_bool_atscalartype(void* self, void* dim, void* keepdim, void* dtype) { void* ret = _lantern_prod_attensor_atdimname_bool_atscalartype(self, dim, keepdim, dtype); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_prod_attensor_atdimname_bool_atscalartype)(void* self, void* dim, void* keepdim, void* dtype);
  HOST_API void* lantern_Tensor_prod_attensor_atdimname_bool_atscalartype(void* self, void* dim, void* keepdim, void* dtype) { void* ret = _lantern_Tensor_prod_attensor_atdimname_bool_atscalartype(self, dim, keepdim, dtype); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_prod_out_attensor_attensor_atdimname_bool_atscalartype)(void* out, void* self, void* dim, void* keepdim, void* dtype);
  HOST_API void* lantern_prod_out_attensor_attensor_atdimname_bool_atscalartype(void* out, void* self, void* dim, void* keepdim, void* dtype) { void* ret = _lantern_prod_out_attensor_attensor_atdimname_bool_atscalartype(out, self, dim, keepdim, dtype); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_t_attensor)(void* self);
  HOST_API void* lantern_t_attensor(void* self) { void* ret = _lantern_t_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_t_attensor)(void* self);
  HOST_API void* lantern_Tensor_t_attensor(void* self) { void* ret = _lantern_Tensor_t_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_t__attensor)(void* self);
  HOST_API void* lantern_Tensor_t__attensor(void* self) { void* ret = _lantern_Tensor_t__attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_tan_attensor)(void* self);
  HOST_API void* lantern_tan_attensor(void* self) { void* ret = _lantern_tan_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_tan_attensor)(void* self);
  HOST_API void* lantern_Tensor_tan_attensor(void* self) { void* ret = _lantern_Tensor_tan_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_tan__attensor)(void* self);
  HOST_API void* lantern_tan__attensor(void* self) { void* ret = _lantern_tan__attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_tan__attensor)(void* self);
  HOST_API void* lantern_Tensor_tan__attensor(void* self) { void* ret = _lantern_Tensor_tan__attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_tan_out_attensor_attensor)(void* out, void* self);
  HOST_API void* lantern_tan_out_attensor_attensor(void* out, void* self) { void* ret = _lantern_tan_out_attensor_attensor(out, self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_tanh_attensor)(void* self);
  HOST_API void* lantern_tanh_attensor(void* self) { void* ret = _lantern_tanh_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_tanh_attensor)(void* self);
  HOST_API void* lantern_Tensor_tanh_attensor(void* self) { void* ret = _lantern_Tensor_tanh_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_tanh__attensor)(void* self);
  HOST_API void* lantern_tanh__attensor(void* self) { void* ret = _lantern_tanh__attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_tanh__attensor)(void* self);
  HOST_API void* lantern_Tensor_tanh__attensor(void* self) { void* ret = _lantern_Tensor_tanh__attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_tanh_out_attensor_attensor)(void* out, void* self);
  HOST_API void* lantern_tanh_out_attensor_attensor(void* out, void* self) { void* ret = _lantern_tanh_out_attensor_attensor(out, self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_tensordot_attensor_attensor_atintarrayref_atintarrayref)(void* self, void* other, void* dims_self, void* dims_other);
  HOST_API void* lantern_tensordot_attensor_attensor_atintarrayref_atintarrayref(void* self, void* other, void* dims_self, void* dims_other) { void* ret = _lantern_tensordot_attensor_attensor_atintarrayref_atintarrayref(self, other, dims_self, dims_other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_tensordot_out_attensor_attensor_attensor_atintarrayref_atintarrayref)(void* out, void* self, void* other, void* dims_self, void* dims_other);
  HOST_API void* lantern_tensordot_out_attensor_attensor_attensor_atintarrayref_atintarrayref(void* out, void* self, void* other, void* dims_self, void* dims_other) { void* ret = _lantern_tensordot_out_attensor_attensor_attensor_atintarrayref_atintarrayref(out, self, other, dims_self, dims_other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_threshold_attensor_constatscalar_constatscalar)(void* self, void* threshold, void* value);
  HOST_API void* lantern_threshold_attensor_constatscalar_constatscalar(void* self, void* threshold, void* value) { void* ret = _lantern_threshold_attensor_constatscalar_constatscalar(self, threshold, value); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_threshold__attensor_constatscalar_constatscalar)(void* self, void* threshold, void* value);
  HOST_API void* lantern_threshold__attensor_constatscalar_constatscalar(void* self, void* threshold, void* value) { void* ret = _lantern_threshold__attensor_constatscalar_constatscalar(self, threshold, value); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_threshold_out_attensor_attensor_constatscalar_constatscalar)(void* out, void* self, void* threshold, void* value);
  HOST_API void* lantern_threshold_out_attensor_attensor_constatscalar_constatscalar(void* out, void* self, void* threshold, void* value) { void* ret = _lantern_threshold_out_attensor_attensor_constatscalar_constatscalar(out, self, threshold, value); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_threshold_backward_out_attensor_attensor_attensor_constatscalar)(void* grad_input, void* grad_output, void* self, void* threshold);
  HOST_API void* lantern_threshold_backward_out_attensor_attensor_attensor_constatscalar(void* grad_input, void* grad_output, void* self, void* threshold) { void* ret = _lantern_threshold_backward_out_attensor_attensor_attensor_constatscalar(grad_input, grad_output, self, threshold); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_threshold_backward_attensor_attensor_constatscalar)(void* grad_output, void* self, void* threshold);
  HOST_API void* lantern_threshold_backward_attensor_attensor_constatscalar(void* grad_output, void* self, void* threshold) { void* ret = _lantern_threshold_backward_attensor_attensor_constatscalar(grad_output, self, threshold); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_tile_attensor_atintarrayref)(void* self, void* dims);
  HOST_API void* lantern_tile_attensor_atintarrayref(void* self, void* dims) { void* ret = _lantern_tile_attensor_atintarrayref(self, dims); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_tile_attensor_atintarrayref)(void* self, void* dims);
  HOST_API void* lantern_Tensor_tile_attensor_atintarrayref(void* self, void* dims) { void* ret = _lantern_Tensor_tile_attensor_atintarrayref(self, dims); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_transpose_attensor_intt_intt)(void* self, void* dim0, void* dim1);
  HOST_API void* lantern_transpose_attensor_intt_intt(void* self, void* dim0, void* dim1) { void* ret = _lantern_transpose_attensor_intt_intt(self, dim0, dim1); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_transpose_attensor_intt_intt)(void* self, void* dim0, void* dim1);
  HOST_API void* lantern_Tensor_transpose_attensor_intt_intt(void* self, void* dim0, void* dim1) { void* ret = _lantern_Tensor_transpose_attensor_intt_intt(self, dim0, dim1); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_transpose_attensor_atdimname_atdimname)(void* self, void* dim0, void* dim1);
  HOST_API void* lantern_transpose_attensor_atdimname_atdimname(void* self, void* dim0, void* dim1) { void* ret = _lantern_transpose_attensor_atdimname_atdimname(self, dim0, dim1); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_transpose_attensor_atdimname_atdimname)(void* self, void* dim0, void* dim1);
  HOST_API void* lantern_Tensor_transpose_attensor_atdimname_atdimname(void* self, void* dim0, void* dim1) { void* ret = _lantern_Tensor_transpose_attensor_atdimname_atdimname(self, dim0, dim1); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__mkldnn_transpose_attensor_intt_intt)(void* self, void* dim0, void* dim1);
  HOST_API void* lantern__mkldnn_transpose_attensor_intt_intt(void* self, void* dim0, void* dim1) { void* ret = _lantern__mkldnn_transpose_attensor_intt_intt(self, dim0, dim1); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_transpose__attensor_intt_intt)(void* self, void* dim0, void* dim1);
  HOST_API void* lantern_Tensor_transpose__attensor_intt_intt(void* self, void* dim0, void* dim1) { void* ret = _lantern_Tensor_transpose__attensor_intt_intt(self, dim0, dim1); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__mkldnn_transpose__attensor_intt_intt)(void* self, void* dim0, void* dim1);
  HOST_API void* lantern__mkldnn_transpose__attensor_intt_intt(void* self, void* dim0, void* dim1) { void* ret = _lantern__mkldnn_transpose__attensor_intt_intt(self, dim0, dim1); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_one_hot_attensor_intt)(void* self, void* num_classes);
  HOST_API void* lantern_one_hot_attensor_intt(void* self, void* num_classes) { void* ret = _lantern_one_hot_attensor_intt(self, num_classes); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_flip_attensor_atintarrayref)(void* self, void* dims);
  HOST_API void* lantern_flip_attensor_atintarrayref(void* self, void* dims) { void* ret = _lantern_flip_attensor_atintarrayref(self, dims); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_flip_attensor_atintarrayref)(void* self, void* dims);
  HOST_API void* lantern_Tensor_flip_attensor_atintarrayref(void* self, void* dims) { void* ret = _lantern_Tensor_flip_attensor_atintarrayref(self, dims); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_fliplr_attensor)(void* self);
  HOST_API void* lantern_fliplr_attensor(void* self) { void* ret = _lantern_fliplr_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_fliplr_attensor)(void* self);
  HOST_API void* lantern_Tensor_fliplr_attensor(void* self) { void* ret = _lantern_Tensor_fliplr_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_flipud_attensor)(void* self);
  HOST_API void* lantern_flipud_attensor(void* self) { void* ret = _lantern_flipud_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_flipud_attensor)(void* self);
  HOST_API void* lantern_Tensor_flipud_attensor(void* self) { void* ret = _lantern_Tensor_flipud_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_roll_attensor_atintarrayref_atintarrayref)(void* self, void* shifts, void* dims);
  HOST_API void* lantern_roll_attensor_atintarrayref_atintarrayref(void* self, void* shifts, void* dims) { void* ret = _lantern_roll_attensor_atintarrayref_atintarrayref(self, shifts, dims); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_roll_attensor_atintarrayref_atintarrayref)(void* self, void* shifts, void* dims);
  HOST_API void* lantern_Tensor_roll_attensor_atintarrayref_atintarrayref(void* self, void* shifts, void* dims) { void* ret = _lantern_Tensor_roll_attensor_atintarrayref_atintarrayref(self, shifts, dims); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_rot90_attensor_intt_atintarrayref)(void* self, void* k, void* dims);
  HOST_API void* lantern_rot90_attensor_intt_atintarrayref(void* self, void* k, void* dims) { void* ret = _lantern_rot90_attensor_intt_atintarrayref(self, k, dims); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_rot90_attensor_intt_atintarrayref)(void* self, void* k, void* dims);
  HOST_API void* lantern_Tensor_rot90_attensor_intt_atintarrayref(void* self, void* k, void* dims) { void* ret = _lantern_Tensor_rot90_attensor_intt_atintarrayref(self, k, dims); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_trapz_attensor_attensor_intt)(void* y, void* x, void* dim);
  HOST_API void* lantern_trapz_attensor_attensor_intt(void* y, void* x, void* dim) { void* ret = _lantern_trapz_attensor_attensor_intt(y, x, dim); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_trapz_attensor_double_intt)(void* y, void* dx, void* dim);
  HOST_API void* lantern_trapz_attensor_double_intt(void* y, void* dx, void* dim) { void* ret = _lantern_trapz_attensor_double_intt(y, dx, dim); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__trilinear_attensor_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_atintarrayref_intt)(void* i1, void* i2, void* i3, void* expand1, void* expand2, void* expand3, void* sumdim, void* unroll_dim);
  HOST_API void* lantern__trilinear_attensor_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_atintarrayref_intt(void* i1, void* i2, void* i3, void* expand1, void* expand2, void* expand3, void* sumdim, void* unroll_dim) { void* ret = _lantern__trilinear_attensor_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_atintarrayref_intt(i1, i2, i3, expand1, expand2, expand3, sumdim, unroll_dim); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_triplet_margin_loss_attensor_attensor_attensor_double_double_double_bool_intt)(void* anchor, void* positive, void* negative, void* margin, void* p, void* eps, void* swap, void* reduction);
  HOST_API void* lantern_triplet_margin_loss_attensor_attensor_attensor_double_double_double_bool_intt(void* anchor, void* positive, void* negative, void* margin, void* p, void* eps, void* swap, void* reduction) { void* ret = _lantern_triplet_margin_loss_attensor_attensor_attensor_double_double_double_bool_intt(anchor, positive, negative, margin, p, eps, swap, reduction); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_trunc_attensor)(void* self);
  HOST_API void* lantern_trunc_attensor(void* self) { void* ret = _lantern_trunc_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_trunc_attensor)(void* self);
  HOST_API void* lantern_Tensor_trunc_attensor(void* self) { void* ret = _lantern_Tensor_trunc_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_trunc__attensor)(void* self);
  HOST_API void* lantern_trunc__attensor(void* self) { void* ret = _lantern_trunc__attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_trunc__attensor)(void* self);
  HOST_API void* lantern_Tensor_trunc__attensor(void* self) { void* ret = _lantern_Tensor_trunc__attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_trunc_out_attensor_attensor)(void* out, void* self);
  HOST_API void* lantern_trunc_out_attensor_attensor(void* out, void* self) { void* ret = _lantern_trunc_out_attensor_attensor(out, self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_fix_attensor)(void* self);
  HOST_API void* lantern_fix_attensor(void* self) { void* ret = _lantern_fix_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_fix_attensor)(void* self);
  HOST_API void* lantern_Tensor_fix_attensor(void* self) { void* ret = _lantern_Tensor_fix_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_fix__attensor)(void* self);
  HOST_API void* lantern_fix__attensor(void* self) { void* ret = _lantern_fix__attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_fix__attensor)(void* self);
  HOST_API void* lantern_Tensor_fix__attensor(void* self) { void* ret = _lantern_Tensor_fix__attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_fix_out_attensor_attensor)(void* out, void* self);
  HOST_API void* lantern_fix_out_attensor_attensor(void* out, void* self) { void* ret = _lantern_fix_out_attensor_attensor(out, self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_type_as_attensor_attensor)(void* self, void* other);
  HOST_API void* lantern_Tensor_type_as_attensor_attensor(void* self, void* other) { void* ret = _lantern_Tensor_type_as_attensor_attensor(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__has_compatible_shallow_copy_type_attensor_attensor)(void* self, void* from);
  HOST_API void* lantern__has_compatible_shallow_copy_type_attensor_attensor(void* self, void* from) { void* ret = _lantern__has_compatible_shallow_copy_type_attensor_attensor(self, from); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__unique_attensor_bool_bool)(void* self, void* sorted, void* return_inverse);
  HOST_API void* lantern__unique_attensor_bool_bool(void* self, void* sorted, void* return_inverse) { void* ret = _lantern__unique_attensor_bool_bool(self, sorted, return_inverse); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_unique_dim_attensor_intt_bool_bool_bool)(void* self, void* dim, void* sorted, void* return_inverse, void* return_counts);
  HOST_API void* lantern_unique_dim_attensor_intt_bool_bool_bool(void* self, void* dim, void* sorted, void* return_inverse, void* return_counts) { void* ret = _lantern_unique_dim_attensor_intt_bool_bool_bool(self, dim, sorted, return_inverse, return_counts); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_unique_consecutive_attensor_bool_bool_intt)(void* self, void* return_inverse, void* return_counts, void* dim);
  HOST_API void* lantern_unique_consecutive_attensor_bool_bool_intt(void* self, void* return_inverse, void* return_counts, void* dim) { void* ret = _lantern_unique_consecutive_attensor_bool_bool_intt(self, return_inverse, return_counts, dim); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_unique_dim_consecutive_attensor_intt_bool_bool)(void* self, void* dim, void* return_inverse, void* return_counts);
  HOST_API void* lantern_unique_dim_consecutive_attensor_intt_bool_bool(void* self, void* dim, void* return_inverse, void* return_counts) { void* ret = _lantern_unique_dim_consecutive_attensor_intt_bool_bool(self, dim, return_inverse, return_counts); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__unique2_attensor_bool_bool_bool)(void* self, void* sorted, void* return_inverse, void* return_counts);
  HOST_API void* lantern__unique2_attensor_bool_bool_bool(void* self, void* sorted, void* return_inverse, void* return_counts) { void* ret = _lantern__unique2_attensor_bool_bool_bool(self, sorted, return_inverse, return_counts); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__unsafe_view_attensor_atintarrayref)(void* self, void* size);
  HOST_API void* lantern__unsafe_view_attensor_atintarrayref(void* self, void* size) { void* ret = _lantern__unsafe_view_attensor_atintarrayref(self, size); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_unsqueeze_attensor_intt)(void* self, void* dim);
  HOST_API void* lantern_unsqueeze_attensor_intt(void* self, void* dim) { void* ret = _lantern_unsqueeze_attensor_intt(self, dim); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_unsqueeze_attensor_intt)(void* self, void* dim);
  HOST_API void* lantern_Tensor_unsqueeze_attensor_intt(void* self, void* dim) { void* ret = _lantern_Tensor_unsqueeze_attensor_intt(self, dim); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_unsqueeze__attensor_intt)(void* self, void* dim);
  HOST_API void* lantern_Tensor_unsqueeze__attensor_intt(void* self, void* dim) { void* ret = _lantern_Tensor_unsqueeze__attensor_intt(self, dim); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_vander_attensor_intt_bool)(void* x, void* N, void* increasing);
  HOST_API void* lantern_vander_attensor_intt_bool(void* x, void* N, void* increasing) { void* ret = _lantern_vander_attensor_intt_bool(x, N, increasing); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_var_attensor_bool)(void* self, void* unbiased);
  HOST_API void* lantern_var_attensor_bool(void* self, void* unbiased) { void* ret = _lantern_var_attensor_bool(self, unbiased); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_var_attensor_bool)(void* self, void* unbiased);
  HOST_API void* lantern_Tensor_var_attensor_bool(void* self, void* unbiased) { void* ret = _lantern_Tensor_var_attensor_bool(self, unbiased); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_var_attensor_atintarrayref_bool_bool)(void* self, void* dim, void* unbiased, void* keepdim);
  HOST_API void* lantern_var_attensor_atintarrayref_bool_bool(void* self, void* dim, void* unbiased, void* keepdim) { void* ret = _lantern_var_attensor_atintarrayref_bool_bool(self, dim, unbiased, keepdim); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_var_attensor_atintarrayref_bool_bool)(void* self, void* dim, void* unbiased, void* keepdim);
  HOST_API void* lantern_Tensor_var_attensor_atintarrayref_bool_bool(void* self, void* dim, void* unbiased, void* keepdim) { void* ret = _lantern_Tensor_var_attensor_atintarrayref_bool_bool(self, dim, unbiased, keepdim); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_var_attensor_atintarrayref_intt_bool)(void* self, void* dim, void* correction, void* keepdim);
  HOST_API void* lantern_var_attensor_atintarrayref_intt_bool(void* self, void* dim, void* correction, void* keepdim) { void* ret = _lantern_var_attensor_atintarrayref_intt_bool(self, dim, correction, keepdim); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_var_attensor_atintarrayref_intt_bool)(void* self, void* dim, void* correction, void* keepdim);
  HOST_API void* lantern_Tensor_var_attensor_atintarrayref_intt_bool(void* self, void* dim, void* correction, void* keepdim) { void* ret = _lantern_Tensor_var_attensor_atintarrayref_intt_bool(self, dim, correction, keepdim); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_var_out_attensor_attensor_atintarrayref_bool_bool)(void* out, void* self, void* dim, void* unbiased, void* keepdim);
  HOST_API void* lantern_var_out_attensor_attensor_atintarrayref_bool_bool(void* out, void* self, void* dim, void* unbiased, void* keepdim) { void* ret = _lantern_var_out_attensor_attensor_atintarrayref_bool_bool(out, self, dim, unbiased, keepdim); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_var_out_attensor_attensor_atintarrayref_intt_bool)(void* out, void* self, void* dim, void* correction, void* keepdim);
  HOST_API void* lantern_var_out_attensor_attensor_atintarrayref_intt_bool(void* out, void* self, void* dim, void* correction, void* keepdim) { void* ret = _lantern_var_out_attensor_attensor_atintarrayref_intt_bool(out, self, dim, correction, keepdim); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_var_attensor_atdimnamelist_bool_bool)(void* self, void* dim, void* unbiased, void* keepdim);
  HOST_API void* lantern_var_attensor_atdimnamelist_bool_bool(void* self, void* dim, void* unbiased, void* keepdim) { void* ret = _lantern_var_attensor_atdimnamelist_bool_bool(self, dim, unbiased, keepdim); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_var_attensor_atdimnamelist_bool_bool)(void* self, void* dim, void* unbiased, void* keepdim);
  HOST_API void* lantern_Tensor_var_attensor_atdimnamelist_bool_bool(void* self, void* dim, void* unbiased, void* keepdim) { void* ret = _lantern_Tensor_var_attensor_atdimnamelist_bool_bool(self, dim, unbiased, keepdim); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_var_out_attensor_attensor_atdimnamelist_bool_bool)(void* out, void* self, void* dim, void* unbiased, void* keepdim);
  HOST_API void* lantern_var_out_attensor_attensor_atdimnamelist_bool_bool(void* out, void* self, void* dim, void* unbiased, void* keepdim) { void* ret = _lantern_var_out_attensor_attensor_atdimnamelist_bool_bool(out, self, dim, unbiased, keepdim); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_var_attensor_atdimnamelist_intt_bool)(void* self, void* dim, void* correction, void* keepdim);
  HOST_API void* lantern_var_attensor_atdimnamelist_intt_bool(void* self, void* dim, void* correction, void* keepdim) { void* ret = _lantern_var_attensor_atdimnamelist_intt_bool(self, dim, correction, keepdim); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_var_attensor_atdimnamelist_intt_bool)(void* self, void* dim, void* correction, void* keepdim);
  HOST_API void* lantern_Tensor_var_attensor_atdimnamelist_intt_bool(void* self, void* dim, void* correction, void* keepdim) { void* ret = _lantern_Tensor_var_attensor_atdimnamelist_intt_bool(self, dim, correction, keepdim); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_var_out_attensor_attensor_atdimnamelist_intt_bool)(void* out, void* self, void* dim, void* correction, void* keepdim);
  HOST_API void* lantern_var_out_attensor_attensor_atdimnamelist_intt_bool(void* out, void* self, void* dim, void* correction, void* keepdim) { void* ret = _lantern_var_out_attensor_attensor_atdimnamelist_intt_bool(out, self, dim, correction, keepdim); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_var_mean_attensor_bool)(void* self, void* unbiased);
  HOST_API void* lantern_var_mean_attensor_bool(void* self, void* unbiased) { void* ret = _lantern_var_mean_attensor_bool(self, unbiased); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_var_mean_attensor_atintarrayref_bool_bool)(void* self, void* dim, void* unbiased, void* keepdim);
  HOST_API void* lantern_var_mean_attensor_atintarrayref_bool_bool(void* self, void* dim, void* unbiased, void* keepdim) { void* ret = _lantern_var_mean_attensor_atintarrayref_bool_bool(self, dim, unbiased, keepdim); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_var_mean_attensor_atintarrayref_intt_bool)(void* self, void* dim, void* correction, void* keepdim);
  HOST_API void* lantern_var_mean_attensor_atintarrayref_intt_bool(void* self, void* dim, void* correction, void* keepdim) { void* ret = _lantern_var_mean_attensor_atintarrayref_intt_bool(self, dim, correction, keepdim); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_var_mean_attensor_atdimnamelist_bool_bool)(void* self, void* dim, void* unbiased, void* keepdim);
  HOST_API void* lantern_var_mean_attensor_atdimnamelist_bool_bool(void* self, void* dim, void* unbiased, void* keepdim) { void* ret = _lantern_var_mean_attensor_atdimnamelist_bool_bool(self, dim, unbiased, keepdim); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_var_mean_attensor_atdimnamelist_intt_bool)(void* self, void* dim, void* correction, void* keepdim);
  HOST_API void* lantern_var_mean_attensor_atdimnamelist_intt_bool(void* self, void* dim, void* correction, void* keepdim) { void* ret = _lantern_var_mean_attensor_atdimnamelist_intt_bool(self, dim, correction, keepdim); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_view_as_attensor_attensor)(void* self, void* other);
  HOST_API void* lantern_Tensor_view_as_attensor_attensor(void* self, void* other) { void* ret = _lantern_Tensor_view_as_attensor_attensor(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_where_attensor_attensor_attensor)(void* condition, void* self, void* other);
  HOST_API void* lantern_where_attensor_attensor_attensor(void* condition, void* self, void* other) { void* ret = _lantern_where_attensor_attensor_attensor(condition, self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_where_attensor_attensor_attensor)(void* condition, void* self, void* other);
  HOST_API void* lantern_Tensor_where_attensor_attensor_attensor(void* condition, void* self, void* other) { void* ret = _lantern_Tensor_where_attensor_attensor_attensor(condition, self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_where_attensor_constatscalar_attensor)(void* condition, void* self, void* other);
  HOST_API void* lantern_where_attensor_constatscalar_attensor(void* condition, void* self, void* other) { void* ret = _lantern_where_attensor_constatscalar_attensor(condition, self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_where_attensor_attensor_constatscalar)(void* condition, void* self, void* other);
  HOST_API void* lantern_where_attensor_attensor_constatscalar(void* condition, void* self, void* other) { void* ret = _lantern_where_attensor_attensor_constatscalar(condition, self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_where_attensor_constatscalar_constatscalar)(void* condition, void* self, void* other);
  HOST_API void* lantern_where_attensor_constatscalar_constatscalar(void* condition, void* self, void* other) { void* ret = _lantern_where_attensor_constatscalar_constatscalar(condition, self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_where_attensor)(void* condition);
  HOST_API void* lantern_where_attensor(void* condition) { void* ret = _lantern_where_attensor(condition); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__s_where_attensor_attensor_attensor)(void* condition, void* self, void* other);
  HOST_API void* lantern__s_where_attensor_attensor_attensor(void* condition, void* self, void* other) { void* ret = _lantern__s_where_attensor_attensor_attensor(condition, self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_norm_except_dim_attensor_intt_intt)(void* v, void* pow, void* dim);
  HOST_API void* lantern_norm_except_dim_attensor_intt_intt(void* v, void* pow, void* dim) { void* ret = _lantern_norm_except_dim_attensor_intt_intt(v, pow, dim); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__weight_norm_attensor_attensor_intt)(void* v, void* g, void* dim);
  HOST_API void* lantern__weight_norm_attensor_attensor_intt(void* v, void* g, void* dim) { void* ret = _lantern__weight_norm_attensor_attensor_intt(v, g, dim); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__weight_norm_cuda_interface_attensor_attensor_intt)(void* v, void* g, void* dim);
  HOST_API void* lantern__weight_norm_cuda_interface_attensor_attensor_intt(void* v, void* g, void* dim) { void* ret = _lantern__weight_norm_cuda_interface_attensor_attensor_intt(v, g, dim); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__weight_norm_cuda_interface_backward_attensor_attensor_attensor_attensor_intt)(void* grad_w, void* saved_v, void* saved_g, void* saved_norms, void* dim);
  HOST_API void* lantern__weight_norm_cuda_interface_backward_attensor_attensor_attensor_attensor_intt(void* grad_w, void* saved_v, void* saved_g, void* saved_norms, void* dim) { void* ret = _lantern__weight_norm_cuda_interface_backward_attensor_attensor_attensor_attensor_intt(grad_w, saved_v, saved_g, saved_norms, dim); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__weight_norm_differentiable_backward_attensor_attensor_attensor_attensor_intt)(void* grad_w, void* saved_v, void* saved_g, void* saved_norms, void* dim);
  HOST_API void* lantern__weight_norm_differentiable_backward_attensor_attensor_attensor_attensor_intt(void* grad_w, void* saved_v, void* saved_g, void* saved_norms, void* dim) { void* ret = _lantern__weight_norm_differentiable_backward_attensor_attensor_attensor_attensor_intt(grad_w, saved_v, saved_g, saved_norms, dim); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_zeros_atintarrayref_atdimnamelist_attensoroptions)(void* size, void* names, void* options);
  HOST_API void* lantern_zeros_atintarrayref_atdimnamelist_attensoroptions(void* size, void* names, void* options) { void* ret = _lantern_zeros_atintarrayref_atdimnamelist_attensoroptions(size, names, options); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_zeros_atintarrayref_attensoroptions)(void* size, void* options);
  HOST_API void* lantern_zeros_atintarrayref_attensoroptions(void* size, void* options) { void* ret = _lantern_zeros_atintarrayref_attensoroptions(size, options); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_zeros_out_attensor_atintarrayref)(void* out, void* size);
  HOST_API void* lantern_zeros_out_attensor_atintarrayref(void* out, void* size) { void* ret = _lantern_zeros_out_attensor_atintarrayref(out, size); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_zeros_like_attensor_attensoroptions_atmemoryformat)(void* self, void* options, void* memory_format);
  HOST_API void* lantern_zeros_like_attensor_attensoroptions_atmemoryformat(void* self, void* options, void* memory_format) { void* ret = _lantern_zeros_like_attensor_attensoroptions_atmemoryformat(self, options, memory_format); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__standard_gamma_grad_attensor_attensor)(void* self, void* output);
  HOST_API void* lantern__standard_gamma_grad_attensor_attensor(void* self, void* output) { void* ret = _lantern__standard_gamma_grad_attensor_attensor(self, output); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__standard_gamma_attensor_atgenerator)(void* self, void* generator);
  HOST_API void* lantern__standard_gamma_attensor_atgenerator(void* self, void* generator) { void* ret = _lantern__standard_gamma_attensor_atgenerator(self, generator); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__dirichlet_grad_attensor_attensor_attensor)(void* x, void* alpha, void* total);
  HOST_API void* lantern__dirichlet_grad_attensor_attensor_attensor(void* x, void* alpha, void* total) { void* ret = _lantern__dirichlet_grad_attensor_attensor_attensor(x, alpha, total); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__sample_dirichlet_attensor_atgenerator)(void* self, void* generator);
  HOST_API void* lantern__sample_dirichlet_attensor_atgenerator(void* self, void* generator) { void* ret = _lantern__sample_dirichlet_attensor_atgenerator(self, generator); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_poisson_attensor_atgenerator)(void* self, void* generator);
  HOST_API void* lantern_poisson_attensor_atgenerator(void* self, void* generator) { void* ret = _lantern_poisson_attensor_atgenerator(self, generator); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_binomial_attensor_attensor_atgenerator)(void* count, void* prob, void* generator);
  HOST_API void* lantern_binomial_attensor_attensor_atgenerator(void* count, void* prob, void* generator) { void* ret = _lantern_binomial_attensor_attensor_atgenerator(count, prob, generator); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_native_norm_attensor_constatscalar)(void* self, void* p);
  HOST_API void* lantern_native_norm_attensor_constatscalar(void* self, void* p) { void* ret = _lantern_native_norm_attensor_constatscalar(self, p); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_native_norm_attensor_constatscalar_atintarrayref_bool_atscalartype)(void* self, void* p, void* dim, void* keepdim, void* dtype);
  HOST_API void* lantern_native_norm_attensor_constatscalar_atintarrayref_bool_atscalartype(void* self, void* p, void* dim, void* keepdim, void* dtype) { void* ret = _lantern_native_norm_attensor_constatscalar_atintarrayref_bool_atscalartype(self, p, dim, keepdim, dtype); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__sparse_sum_attensor)(void* self);
  HOST_API void* lantern__sparse_sum_attensor(void* self) { void* ret = _lantern__sparse_sum_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__sparse_sum_attensor_atscalartype)(void* self, void* dtype);
  HOST_API void* lantern__sparse_sum_attensor_atscalartype(void* self, void* dtype) { void* ret = _lantern__sparse_sum_attensor_atscalartype(self, dtype); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__sparse_sum_attensor_atintarrayref)(void* self, void* dim);
  HOST_API void* lantern__sparse_sum_attensor_atintarrayref(void* self, void* dim) { void* ret = _lantern__sparse_sum_attensor_atintarrayref(self, dim); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__sparse_sum_attensor_atintarrayref_atscalartype)(void* self, void* dim, void* dtype);
  HOST_API void* lantern__sparse_sum_attensor_atintarrayref_atscalartype(void* self, void* dim, void* dtype) { void* ret = _lantern__sparse_sum_attensor_atintarrayref_atscalartype(self, dim, dtype); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__sparse_sum_backward_attensor_attensor_atintarrayref)(void* grad, void* self, void* dim);
  HOST_API void* lantern__sparse_sum_backward_attensor_attensor_atintarrayref(void* grad, void* self, void* dim) { void* ret = _lantern__sparse_sum_backward_attensor_attensor_atintarrayref(grad, self, dim); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__sparse_softmax_attensor_intt_atscalartype)(void* self, void* dim, void* dtype);
  HOST_API void* lantern__sparse_softmax_attensor_intt_atscalartype(void* self, void* dim, void* dtype) { void* ret = _lantern__sparse_softmax_attensor_intt_atscalartype(self, dim, dtype); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__sparse_softmax_attensor_atdimname_atscalartype)(void* self, void* dim, void* dtype);
  HOST_API void* lantern__sparse_softmax_attensor_atdimname_atscalartype(void* self, void* dim, void* dtype) { void* ret = _lantern__sparse_softmax_attensor_atdimname_atscalartype(self, dim, dtype); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__sparse_softmax_attensor_intt_bool)(void* self, void* dim, void* half_to_float);
  HOST_API void* lantern__sparse_softmax_attensor_intt_bool(void* self, void* dim, void* half_to_float) { void* ret = _lantern__sparse_softmax_attensor_intt_bool(self, dim, half_to_float); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__sparse_softmax_backward_data_attensor_attensor_intt_attensor)(void* grad_output, void* output, void* dim, void* self);
  HOST_API void* lantern__sparse_softmax_backward_data_attensor_attensor_intt_attensor(void* grad_output, void* output, void* dim, void* self) { void* ret = _lantern__sparse_softmax_backward_data_attensor_attensor_intt_attensor(grad_output, output, dim, self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__sparse_log_softmax_attensor_intt_atscalartype)(void* self, void* dim, void* dtype);
  HOST_API void* lantern__sparse_log_softmax_attensor_intt_atscalartype(void* self, void* dim, void* dtype) { void* ret = _lantern__sparse_log_softmax_attensor_intt_atscalartype(self, dim, dtype); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__sparse_log_softmax_attensor_atdimname_atscalartype)(void* self, void* dim, void* dtype);
  HOST_API void* lantern__sparse_log_softmax_attensor_atdimname_atscalartype(void* self, void* dim, void* dtype) { void* ret = _lantern__sparse_log_softmax_attensor_atdimname_atscalartype(self, dim, dtype); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__sparse_log_softmax_attensor_intt_bool)(void* self, void* dim, void* half_to_float);
  HOST_API void* lantern__sparse_log_softmax_attensor_intt_bool(void* self, void* dim, void* half_to_float) { void* ret = _lantern__sparse_log_softmax_attensor_intt_bool(self, dim, half_to_float); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__sparse_log_softmax_backward_data_attensor_attensor_intt_attensor)(void* grad_output, void* output, void* dim, void* self);
  HOST_API void* lantern__sparse_log_softmax_backward_data_attensor_attensor_intt_attensor(void* grad_output, void* output, void* dim, void* self) { void* ret = _lantern__sparse_log_softmax_backward_data_attensor_attensor_intt_attensor(grad_output, output, dim, self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_norm_attensor_constatscalar_atscalartype)(void* self, void* p, void* dtype);
  HOST_API void* lantern_norm_attensor_constatscalar_atscalartype(void* self, void* p, void* dtype) { void* ret = _lantern_norm_attensor_constatscalar_atscalartype(self, p, dtype); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_norm_attensor_constatscalar_atscalartype)(void* self, void* p, void* dtype);
  HOST_API void* lantern_Tensor_norm_attensor_constatscalar_atscalartype(void* self, void* p, void* dtype) { void* ret = _lantern_Tensor_norm_attensor_constatscalar_atscalartype(self, p, dtype); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_norm_attensor_constatscalar)(void* self, void* p);
  HOST_API void* lantern_norm_attensor_constatscalar(void* self, void* p) { void* ret = _lantern_norm_attensor_constatscalar(self, p); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_norm_attensor_constatscalar)(void* self, void* p);
  HOST_API void* lantern_Tensor_norm_attensor_constatscalar(void* self, void* p) { void* ret = _lantern_Tensor_norm_attensor_constatscalar(self, p); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_norm_attensor_constatscalar_atintarrayref_bool_atscalartype)(void* self, void* p, void* dim, void* keepdim, void* dtype);
  HOST_API void* lantern_norm_attensor_constatscalar_atintarrayref_bool_atscalartype(void* self, void* p, void* dim, void* keepdim, void* dtype) { void* ret = _lantern_norm_attensor_constatscalar_atintarrayref_bool_atscalartype(self, p, dim, keepdim, dtype); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_norm_attensor_constatscalar_atintarrayref_bool_atscalartype)(void* self, void* p, void* dim, void* keepdim, void* dtype);
  HOST_API void* lantern_Tensor_norm_attensor_constatscalar_atintarrayref_bool_atscalartype(void* self, void* p, void* dim, void* keepdim, void* dtype) { void* ret = _lantern_Tensor_norm_attensor_constatscalar_atintarrayref_bool_atscalartype(self, p, dim, keepdim, dtype); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_norm_attensor_constatscalar_atintarrayref_bool)(void* self, void* p, void* dim, void* keepdim);
  HOST_API void* lantern_norm_attensor_constatscalar_atintarrayref_bool(void* self, void* p, void* dim, void* keepdim) { void* ret = _lantern_norm_attensor_constatscalar_atintarrayref_bool(self, p, dim, keepdim); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_norm_attensor_constatscalar_atintarrayref_bool)(void* self, void* p, void* dim, void* keepdim);
  HOST_API void* lantern_Tensor_norm_attensor_constatscalar_atintarrayref_bool(void* self, void* p, void* dim, void* keepdim) { void* ret = _lantern_Tensor_norm_attensor_constatscalar_atintarrayref_bool(self, p, dim, keepdim); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_norm_out_attensor_attensor_constatscalar_atintarrayref_bool_atscalartype)(void* out, void* self, void* p, void* dim, void* keepdim, void* dtype);
  HOST_API void* lantern_norm_out_attensor_attensor_constatscalar_atintarrayref_bool_atscalartype(void* out, void* self, void* p, void* dim, void* keepdim, void* dtype) { void* ret = _lantern_norm_out_attensor_attensor_constatscalar_atintarrayref_bool_atscalartype(out, self, p, dim, keepdim, dtype); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_norm_out_attensor_attensor_constatscalar_atintarrayref_bool)(void* out, void* self, void* p, void* dim, void* keepdim);
  HOST_API void* lantern_norm_out_attensor_attensor_constatscalar_atintarrayref_bool(void* out, void* self, void* p, void* dim, void* keepdim) { void* ret = _lantern_norm_out_attensor_attensor_constatscalar_atintarrayref_bool(out, self, p, dim, keepdim); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_norm_attensor_constatscalar_atdimnamelist_bool_atscalartype)(void* self, void* p, void* dim, void* keepdim, void* dtype);
  HOST_API void* lantern_norm_attensor_constatscalar_atdimnamelist_bool_atscalartype(void* self, void* p, void* dim, void* keepdim, void* dtype) { void* ret = _lantern_norm_attensor_constatscalar_atdimnamelist_bool_atscalartype(self, p, dim, keepdim, dtype); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_norm_attensor_constatscalar_atdimnamelist_bool_atscalartype)(void* self, void* p, void* dim, void* keepdim, void* dtype);
  HOST_API void* lantern_Tensor_norm_attensor_constatscalar_atdimnamelist_bool_atscalartype(void* self, void* p, void* dim, void* keepdim, void* dtype) { void* ret = _lantern_Tensor_norm_attensor_constatscalar_atdimnamelist_bool_atscalartype(self, p, dim, keepdim, dtype); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_norm_attensor_constatscalar_atdimnamelist_bool)(void* self, void* p, void* dim, void* keepdim);
  HOST_API void* lantern_norm_attensor_constatscalar_atdimnamelist_bool(void* self, void* p, void* dim, void* keepdim) { void* ret = _lantern_norm_attensor_constatscalar_atdimnamelist_bool(self, p, dim, keepdim); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_norm_attensor_constatscalar_atdimnamelist_bool)(void* self, void* p, void* dim, void* keepdim);
  HOST_API void* lantern_Tensor_norm_attensor_constatscalar_atdimnamelist_bool(void* self, void* p, void* dim, void* keepdim) { void* ret = _lantern_Tensor_norm_attensor_constatscalar_atdimnamelist_bool(self, p, dim, keepdim); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_norm_out_attensor_attensor_constatscalar_atdimnamelist_bool_atscalartype)(void* out, void* self, void* p, void* dim, void* keepdim, void* dtype);
  HOST_API void* lantern_norm_out_attensor_attensor_constatscalar_atdimnamelist_bool_atscalartype(void* out, void* self, void* p, void* dim, void* keepdim, void* dtype) { void* ret = _lantern_norm_out_attensor_attensor_constatscalar_atdimnamelist_bool_atscalartype(out, self, p, dim, keepdim, dtype); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_norm_out_attensor_attensor_constatscalar_atdimnamelist_bool)(void* out, void* self, void* p, void* dim, void* keepdim);
  HOST_API void* lantern_norm_out_attensor_attensor_constatscalar_atdimnamelist_bool(void* out, void* self, void* p, void* dim, void* keepdim) { void* ret = _lantern_norm_out_attensor_attensor_constatscalar_atdimnamelist_bool(out, self, p, dim, keepdim); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_frexp_attensor)(void* self);
  HOST_API void* lantern_frexp_attensor(void* self) { void* ret = _lantern_frexp_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_frexp_attensor)(void* self);
  HOST_API void* lantern_Tensor_frexp_attensor(void* self) { void* ret = _lantern_Tensor_frexp_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_frexp_out_attensor_attensor_attensor)(void* mantissa, void* exponent, void* self);
  HOST_API void* lantern_frexp_out_attensor_attensor_attensor(void* mantissa, void* exponent, void* self) { void* ret = _lantern_frexp_out_attensor_attensor_attensor(mantissa, exponent, self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_frobenius_norm_attensor)(void* self);
  HOST_API void* lantern_frobenius_norm_attensor(void* self) { void* ret = _lantern_frobenius_norm_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_frobenius_norm_attensor_atintarrayref_bool)(void* self, void* dim, void* keepdim);
  HOST_API void* lantern_frobenius_norm_attensor_atintarrayref_bool(void* self, void* dim, void* keepdim) { void* ret = _lantern_frobenius_norm_attensor_atintarrayref_bool(self, dim, keepdim); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_frobenius_norm_out_attensor_attensor_atintarrayref_bool)(void* out, void* self, void* dim, void* keepdim);
  HOST_API void* lantern_frobenius_norm_out_attensor_attensor_atintarrayref_bool(void* out, void* self, void* dim, void* keepdim) { void* ret = _lantern_frobenius_norm_out_attensor_attensor_atintarrayref_bool(out, self, dim, keepdim); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_nuclear_norm_attensor_bool)(void* self, void* keepdim);
  HOST_API void* lantern_nuclear_norm_attensor_bool(void* self, void* keepdim) { void* ret = _lantern_nuclear_norm_attensor_bool(self, keepdim); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_nuclear_norm_out_attensor_attensor_bool)(void* out, void* self, void* keepdim);
  HOST_API void* lantern_nuclear_norm_out_attensor_attensor_bool(void* out, void* self, void* keepdim) { void* ret = _lantern_nuclear_norm_out_attensor_attensor_bool(out, self, keepdim); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_nuclear_norm_attensor_atintarrayref_bool)(void* self, void* dim, void* keepdim);
  HOST_API void* lantern_nuclear_norm_attensor_atintarrayref_bool(void* self, void* dim, void* keepdim) { void* ret = _lantern_nuclear_norm_attensor_atintarrayref_bool(self, dim, keepdim); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_nuclear_norm_out_attensor_attensor_atintarrayref_bool)(void* out, void* self, void* dim, void* keepdim);
  HOST_API void* lantern_nuclear_norm_out_attensor_attensor_atintarrayref_bool(void* out, void* self, void* dim, void* keepdim) { void* ret = _lantern_nuclear_norm_out_attensor_attensor_atintarrayref_bool(out, self, dim, keepdim); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_clone_attensor_atmemoryformat)(void* self, void* memory_format);
  HOST_API void* lantern_clone_attensor_atmemoryformat(void* self, void* memory_format) { void* ret = _lantern_clone_attensor_atmemoryformat(self, memory_format); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_clone_attensor_atmemoryformat)(void* self, void* memory_format);
  HOST_API void* lantern_Tensor_clone_attensor_atmemoryformat(void* self, void* memory_format) { void* ret = _lantern_Tensor_clone_attensor_atmemoryformat(self, memory_format); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_positive_attensor)(void* self);
  HOST_API void* lantern_positive_attensor(void* self) { void* ret = _lantern_positive_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_positive_attensor)(void* self);
  HOST_API void* lantern_Tensor_positive_attensor(void* self) { void* ret = _lantern_Tensor_positive_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_resize_as__attensor_attensor_atmemoryformat)(void* self, void* the_template, void* memory_format);
  HOST_API void* lantern_resize_as__attensor_attensor_atmemoryformat(void* self, void* the_template, void* memory_format) { void* ret = _lantern_resize_as__attensor_attensor_atmemoryformat(self, the_template, memory_format); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_resize_as__attensor_attensor_atmemoryformat)(void* self, void* the_template, void* memory_format);
  HOST_API void* lantern_Tensor_resize_as__attensor_attensor_atmemoryformat(void* self, void* the_template, void* memory_format) { void* ret = _lantern_Tensor_resize_as__attensor_attensor_atmemoryformat(self, the_template, memory_format); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_resize_as_sparse__attensor_attensor)(void* self, void* the_template);
  HOST_API void* lantern_resize_as_sparse__attensor_attensor(void* self, void* the_template) { void* ret = _lantern_resize_as_sparse__attensor_attensor(self, the_template); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_zero__attensor)(void* self);
  HOST_API void* lantern_zero__attensor(void* self) { void* ret = _lantern_zero__attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_zero__attensor)(void* self);
  HOST_API void* lantern_Tensor_zero__attensor(void* self) { void* ret = _lantern_Tensor_zero__attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_sub_out_attensor_attensor_attensor_constatscalar)(void* out, void* self, void* other, void* alpha);
  HOST_API void* lantern_sub_out_attensor_attensor_attensor_constatscalar(void* out, void* self, void* other, void* alpha) { void* ret = _lantern_sub_out_attensor_attensor_attensor_constatscalar(out, self, other, alpha); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_sub_attensor_attensor_constatscalar)(void* self, void* other, void* alpha);
  HOST_API void* lantern_sub_attensor_attensor_constatscalar(void* self, void* other, void* alpha) { void* ret = _lantern_sub_attensor_attensor_constatscalar(self, other, alpha); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_sub_attensor_attensor_constatscalar)(void* self, void* other, void* alpha);
  HOST_API void* lantern_Tensor_sub_attensor_attensor_constatscalar(void* self, void* other, void* alpha) { void* ret = _lantern_Tensor_sub_attensor_attensor_constatscalar(self, other, alpha); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_sub__attensor_attensor_constatscalar)(void* self, void* other, void* alpha);
  HOST_API void* lantern_Tensor_sub__attensor_attensor_constatscalar(void* self, void* other, void* alpha) { void* ret = _lantern_Tensor_sub__attensor_attensor_constatscalar(self, other, alpha); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_sub_attensor_constatscalar_constatscalar)(void* self, void* other, void* alpha);
  HOST_API void* lantern_sub_attensor_constatscalar_constatscalar(void* self, void* other, void* alpha) { void* ret = _lantern_sub_attensor_constatscalar_constatscalar(self, other, alpha); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_sub_attensor_constatscalar_constatscalar)(void* self, void* other, void* alpha);
  HOST_API void* lantern_Tensor_sub_attensor_constatscalar_constatscalar(void* self, void* other, void* alpha) { void* ret = _lantern_Tensor_sub_attensor_constatscalar_constatscalar(self, other, alpha); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_sub__attensor_constatscalar_constatscalar)(void* self, void* other, void* alpha);
  HOST_API void* lantern_Tensor_sub__attensor_constatscalar_constatscalar(void* self, void* other, void* alpha) { void* ret = _lantern_Tensor_sub__attensor_constatscalar_constatscalar(self, other, alpha); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_subtract_out_attensor_attensor_attensor_constatscalar)(void* out, void* self, void* other, void* alpha);
  HOST_API void* lantern_subtract_out_attensor_attensor_attensor_constatscalar(void* out, void* self, void* other, void* alpha) { void* ret = _lantern_subtract_out_attensor_attensor_attensor_constatscalar(out, self, other, alpha); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_subtract_attensor_attensor_constatscalar)(void* self, void* other, void* alpha);
  HOST_API void* lantern_subtract_attensor_attensor_constatscalar(void* self, void* other, void* alpha) { void* ret = _lantern_subtract_attensor_attensor_constatscalar(self, other, alpha); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_subtract_attensor_attensor_constatscalar)(void* self, void* other, void* alpha);
  HOST_API void* lantern_Tensor_subtract_attensor_attensor_constatscalar(void* self, void* other, void* alpha) { void* ret = _lantern_Tensor_subtract_attensor_attensor_constatscalar(self, other, alpha); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_subtract__attensor_attensor_constatscalar)(void* self, void* other, void* alpha);
  HOST_API void* lantern_Tensor_subtract__attensor_attensor_constatscalar(void* self, void* other, void* alpha) { void* ret = _lantern_Tensor_subtract__attensor_attensor_constatscalar(self, other, alpha); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_subtract_attensor_constatscalar_constatscalar)(void* self, void* other, void* alpha);
  HOST_API void* lantern_subtract_attensor_constatscalar_constatscalar(void* self, void* other, void* alpha) { void* ret = _lantern_subtract_attensor_constatscalar_constatscalar(self, other, alpha); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_subtract_attensor_constatscalar_constatscalar)(void* self, void* other, void* alpha);
  HOST_API void* lantern_Tensor_subtract_attensor_constatscalar_constatscalar(void* self, void* other, void* alpha) { void* ret = _lantern_Tensor_subtract_attensor_constatscalar_constatscalar(self, other, alpha); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_subtract__attensor_constatscalar_constatscalar)(void* self, void* other, void* alpha);
  HOST_API void* lantern_Tensor_subtract__attensor_constatscalar_constatscalar(void* self, void* other, void* alpha) { void* ret = _lantern_Tensor_subtract__attensor_constatscalar_constatscalar(self, other, alpha); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_rsub_attensor_attensor_constatscalar)(void* self, void* other, void* alpha);
  HOST_API void* lantern_rsub_attensor_attensor_constatscalar(void* self, void* other, void* alpha) { void* ret = _lantern_rsub_attensor_attensor_constatscalar(self, other, alpha); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_heaviside_out_attensor_attensor_attensor)(void* out, void* self, void* values);
  HOST_API void* lantern_heaviside_out_attensor_attensor_attensor(void* out, void* self, void* values) { void* ret = _lantern_heaviside_out_attensor_attensor_attensor(out, self, values); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_heaviside_attensor_attensor)(void* self, void* values);
  HOST_API void* lantern_heaviside_attensor_attensor(void* self, void* values) { void* ret = _lantern_heaviside_attensor_attensor(self, values); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_heaviside_attensor_attensor)(void* self, void* values);
  HOST_API void* lantern_Tensor_heaviside_attensor_attensor(void* self, void* values) { void* ret = _lantern_Tensor_heaviside_attensor_attensor(self, values); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_heaviside__attensor_attensor)(void* self, void* values);
  HOST_API void* lantern_Tensor_heaviside__attensor_attensor(void* self, void* values) { void* ret = _lantern_Tensor_heaviside__attensor_attensor(self, values); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_rsub_attensor_constatscalar_constatscalar)(void* self, void* other, void* alpha);
  HOST_API void* lantern_rsub_attensor_constatscalar_constatscalar(void* self, void* other, void* alpha) { void* ret = _lantern_rsub_attensor_constatscalar_constatscalar(self, other, alpha); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__sparse_addmm_attensor_attensor_attensor_constatscalar_constatscalar)(void* self, void* sparse, void* dense, void* beta, void* alpha);
  HOST_API void* lantern__sparse_addmm_attensor_attensor_attensor_constatscalar_constatscalar(void* self, void* sparse, void* dense, void* beta, void* alpha) { void* ret = _lantern__sparse_addmm_attensor_attensor_attensor_constatscalar_constatscalar(self, sparse, dense, beta, alpha); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_addmm_out_attensor_attensor_attensor_attensor_constatscalar_constatscalar)(void* out, void* self, void* mat1, void* mat2, void* beta, void* alpha);
  HOST_API void* lantern_addmm_out_attensor_attensor_attensor_attensor_constatscalar_constatscalar(void* out, void* self, void* mat1, void* mat2, void* beta, void* alpha) { void* ret = _lantern_addmm_out_attensor_attensor_attensor_attensor_constatscalar_constatscalar(out, self, mat1, mat2, beta, alpha); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_addmm_attensor_attensor_attensor_constatscalar_constatscalar)(void* self, void* mat1, void* mat2, void* beta, void* alpha);
  HOST_API void* lantern_addmm_attensor_attensor_attensor_constatscalar_constatscalar(void* self, void* mat1, void* mat2, void* beta, void* alpha) { void* ret = _lantern_addmm_attensor_attensor_attensor_constatscalar_constatscalar(self, mat1, mat2, beta, alpha); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_addmm_attensor_attensor_attensor_constatscalar_constatscalar)(void* self, void* mat1, void* mat2, void* beta, void* alpha);
  HOST_API void* lantern_Tensor_addmm_attensor_attensor_attensor_constatscalar_constatscalar(void* self, void* mat1, void* mat2, void* beta, void* alpha) { void* ret = _lantern_Tensor_addmm_attensor_attensor_attensor_constatscalar_constatscalar(self, mat1, mat2, beta, alpha); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_addmm__attensor_attensor_attensor_constatscalar_constatscalar)(void* self, void* mat1, void* mat2, void* beta, void* alpha);
  HOST_API void* lantern_Tensor_addmm__attensor_attensor_attensor_constatscalar_constatscalar(void* self, void* mat1, void* mat2, void* beta, void* alpha) { void* ret = _lantern_Tensor_addmm__attensor_attensor_attensor_constatscalar_constatscalar(self, mat1, mat2, beta, alpha); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__sparse_csr_tensor_attensor_attensor_attensor_atintarrayref_attensoroptions)(void* crow_indices, void* col_indices, void* values, void* size, void* options);
  HOST_API void* lantern__sparse_csr_tensor_attensor_attensor_attensor_atintarrayref_attensoroptions(void* crow_indices, void* col_indices, void* values, void* size, void* options) { void* ret = _lantern__sparse_csr_tensor_attensor_attensor_attensor_atintarrayref_attensoroptions(crow_indices, col_indices, values, size, options); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__sparse_csr_tensor_attensor_attensor_attensor_attensoroptions)(void* crow_indices, void* col_indices, void* values, void* options);
  HOST_API void* lantern__sparse_csr_tensor_attensor_attensor_attensor_attensoroptions(void* crow_indices, void* col_indices, void* values, void* options) { void* ret = _lantern__sparse_csr_tensor_attensor_attensor_attensor_attensoroptions(crow_indices, col_indices, values, options); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_sparse_coo_tensor_atintarrayref_attensoroptions)(void* size, void* options);
  HOST_API void* lantern_sparse_coo_tensor_atintarrayref_attensoroptions(void* size, void* options) { void* ret = _lantern_sparse_coo_tensor_atintarrayref_attensoroptions(size, options); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_sparse_coo_tensor_attensor_attensor_attensoroptions)(void* indices, void* values, void* options);
  HOST_API void* lantern_sparse_coo_tensor_attensor_attensor_attensoroptions(void* indices, void* values, void* options) { void* ret = _lantern_sparse_coo_tensor_attensor_attensor_attensoroptions(indices, values, options); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_sparse_coo_tensor_attensor_attensor_atintarrayref_attensoroptions)(void* indices, void* values, void* size, void* options);
  HOST_API void* lantern_sparse_coo_tensor_attensor_attensor_atintarrayref_attensoroptions(void* indices, void* values, void* size, void* options) { void* ret = _lantern_sparse_coo_tensor_attensor_attensor_atintarrayref_attensoroptions(indices, values, size, options); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__sparse_coo_tensor_unsafe_attensor_attensor_atintarrayref_attensoroptions)(void* indices, void* values, void* size, void* options);
  HOST_API void* lantern__sparse_coo_tensor_unsafe_attensor_attensor_atintarrayref_attensoroptions(void* indices, void* values, void* size, void* options) { void* ret = _lantern__sparse_coo_tensor_unsafe_attensor_attensor_atintarrayref_attensoroptions(indices, values, size, options); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__validate_sparse_coo_tensor_args_attensor_attensor_atintarrayref)(void* indices, void* values, void* size);
  HOST_API void* lantern__validate_sparse_coo_tensor_args_attensor_attensor_atintarrayref(void* indices, void* values, void* size) { void* ret = _lantern__validate_sparse_coo_tensor_args_attensor_attensor_atintarrayref(indices, values, size); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__sparse_coo_tensor_with_dims_intt_intt_atintarrayref_attensoroptions)(void* sparse_dim, void* dense_dim, void* size, void* options);
  HOST_API void* lantern__sparse_coo_tensor_with_dims_intt_intt_atintarrayref_attensoroptions(void* sparse_dim, void* dense_dim, void* size, void* options) { void* ret = _lantern__sparse_coo_tensor_with_dims_intt_intt_atintarrayref_attensoroptions(sparse_dim, dense_dim, size, options); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__sparse_coo_tensor_with_dims_and_tensors_intt_intt_atintarrayref_attensor_attensor_attensoroptions)(void* sparse_dim, void* dense_dim, void* size, void* indices, void* values, void* options);
  HOST_API void* lantern__sparse_coo_tensor_with_dims_and_tensors_intt_intt_atintarrayref_attensor_attensor_attensoroptions(void* sparse_dim, void* dense_dim, void* size, void* indices, void* values, void* options) { void* ret = _lantern__sparse_coo_tensor_with_dims_and_tensors_intt_intt_atintarrayref_attensor_attensor_attensoroptions(sparse_dim, dense_dim, size, indices, values, options); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_sparse_resize__attensor_atintarrayref_intt_intt)(void* self, void* size, void* sparse_dim, void* dense_dim);
  HOST_API void* lantern_Tensor_sparse_resize__attensor_atintarrayref_intt_intt(void* self, void* size, void* sparse_dim, void* dense_dim) { void* ret = _lantern_Tensor_sparse_resize__attensor_atintarrayref_intt_intt(self, size, sparse_dim, dense_dim); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_sparse_resize_and_clear__attensor_atintarrayref_intt_intt)(void* self, void* size, void* sparse_dim, void* dense_dim);
  HOST_API void* lantern_Tensor_sparse_resize_and_clear__attensor_atintarrayref_intt_intt(void* self, void* size, void* sparse_dim, void* dense_dim) { void* ret = _lantern_Tensor_sparse_resize_and_clear__attensor_atintarrayref_intt_intt(self, size, sparse_dim, dense_dim); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_sparse_mask_attensor_attensor)(void* self, void* mask);
  HOST_API void* lantern_Tensor_sparse_mask_attensor_attensor(void* self, void* mask) { void* ret = _lantern_Tensor_sparse_mask_attensor_attensor(self, mask); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_to_dense_attensor_atscalartype)(void* self, void* dtype);
  HOST_API void* lantern_Tensor_to_dense_attensor_atscalartype(void* self, void* dtype) { void* ret = _lantern_Tensor_to_dense_attensor_atscalartype(self, dtype); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_to_dense_backward_attensor_attensor)(void* grad, void* input);
  HOST_API void* lantern_to_dense_backward_attensor_attensor(void* grad, void* input) { void* ret = _lantern_to_dense_backward_attensor_attensor(grad, input); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_sparse_dim_attensor)(void* self);
  HOST_API void* lantern_Tensor_sparse_dim_attensor(void* self) { void* ret = _lantern_Tensor_sparse_dim_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor__dimi_attensor)(void* self);
  HOST_API void* lantern_Tensor__dimi_attensor(void* self) { void* ret = _lantern_Tensor__dimi_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_dense_dim_attensor)(void* self);
  HOST_API void* lantern_Tensor_dense_dim_attensor(void* self) { void* ret = _lantern_Tensor_dense_dim_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor__dimv_attensor)(void* self);
  HOST_API void* lantern_Tensor__dimv_attensor(void* self) { void* ret = _lantern_Tensor__dimv_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor__nnz_attensor)(void* self);
  HOST_API void* lantern_Tensor__nnz_attensor(void* self) { void* ret = _lantern_Tensor__nnz_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_coalesce_attensor)(void* self);
  HOST_API void* lantern_Tensor_coalesce_attensor(void* self) { void* ret = _lantern_Tensor_coalesce_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__coalesce_attensor)(void* self);
  HOST_API void* lantern__coalesce_attensor(void* self) { void* ret = _lantern__coalesce_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_is_coalesced_attensor)(void* self);
  HOST_API void* lantern_Tensor_is_coalesced_attensor(void* self) { void* ret = _lantern_Tensor_is_coalesced_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor__indices_attensor)(void* self);
  HOST_API void* lantern_Tensor__indices_attensor(void* self) { void* ret = _lantern_Tensor__indices_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor__values_attensor)(void* self);
  HOST_API void* lantern_Tensor__values_attensor(void* self) { void* ret = _lantern_Tensor__values_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor__coalesced__attensor_bool)(void* self, void* coalesced);
  HOST_API void* lantern_Tensor__coalesced__attensor_bool(void* self, void* coalesced) { void* ret = _lantern_Tensor__coalesced__attensor_bool(self, coalesced); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_indices_attensor)(void* self);
  HOST_API void* lantern_Tensor_indices_attensor(void* self) { void* ret = _lantern_Tensor_indices_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_values_attensor)(void* self);
  HOST_API void* lantern_Tensor_values_attensor(void* self) { void* ret = _lantern_Tensor_values_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_crow_indices_attensor)(void* self);
  HOST_API void* lantern_Tensor_crow_indices_attensor(void* self) { void* ret = _lantern_Tensor_crow_indices_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_col_indices_attensor)(void* self);
  HOST_API void* lantern_Tensor_col_indices_attensor(void* self) { void* ret = _lantern_Tensor_col_indices_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_hspmm_out_attensor_attensor_attensor)(void* out, void* mat1, void* mat2);
  HOST_API void* lantern_hspmm_out_attensor_attensor_attensor(void* out, void* mat1, void* mat2) { void* ret = _lantern_hspmm_out_attensor_attensor_attensor(out, mat1, mat2); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_hspmm_attensor_attensor)(void* mat1, void* mat2);
  HOST_API void* lantern_hspmm_attensor_attensor(void* mat1, void* mat2) { void* ret = _lantern_hspmm_attensor_attensor(mat1, mat2); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_copy_sparse_to_sparse__attensor_attensor_bool)(void* self, void* src, void* non_blocking);
  HOST_API void* lantern_copy_sparse_to_sparse__attensor_attensor_bool(void* self, void* src, void* non_blocking) { void* ret = _lantern_copy_sparse_to_sparse__attensor_attensor_bool(self, src, non_blocking); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_unbind_attensor_intt)(void* self, void* dim);
  HOST_API void* lantern_unbind_attensor_intt(void* self, void* dim) { void* ret = _lantern_unbind_attensor_intt(self, dim); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_unbind_attensor_intt)(void* self, void* dim);
  HOST_API void* lantern_Tensor_unbind_attensor_intt(void* self, void* dim) { void* ret = _lantern_Tensor_unbind_attensor_intt(self, dim); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_unbind_attensor_atdimname)(void* self, void* dim);
  HOST_API void* lantern_unbind_attensor_atdimname(void* self, void* dim) { void* ret = _lantern_unbind_attensor_atdimname(self, dim); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_unbind_attensor_atdimname)(void* self, void* dim);
  HOST_API void* lantern_Tensor_unbind_attensor_atdimname(void* self, void* dim) { void* ret = _lantern_Tensor_unbind_attensor_atdimname(self, dim); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_to_sparse_attensor_intt)(void* self, void* sparse_dim);
  HOST_API void* lantern_Tensor_to_sparse_attensor_intt(void* self, void* sparse_dim) { void* ret = _lantern_Tensor_to_sparse_attensor_intt(self, sparse_dim); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_to_sparse_attensor)(void* self);
  HOST_API void* lantern_Tensor_to_sparse_attensor(void* self) { void* ret = _lantern_Tensor_to_sparse_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_to_mkldnn_attensor_atscalartype)(void* self, void* dtype);
  HOST_API void* lantern_Tensor_to_mkldnn_attensor_atscalartype(void* self, void* dtype) { void* ret = _lantern_Tensor_to_mkldnn_attensor_atscalartype(self, dtype); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_mkldnn_reorder_conv2d_weight_attensor_atintarrayref_atintarrayref_atintarrayref_intt)(void* self, void* padding, void* stride, void* dilation, void* groups);
  HOST_API void* lantern_mkldnn_reorder_conv2d_weight_attensor_atintarrayref_atintarrayref_atintarrayref_intt(void* self, void* padding, void* stride, void* dilation, void* groups) { void* ret = _lantern_mkldnn_reorder_conv2d_weight_attensor_atintarrayref_atintarrayref_atintarrayref_intt(self, padding, stride, dilation, groups); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_mkldnn_reorder_conv3d_weight_attensor_atintarrayref_atintarrayref_atintarrayref_intt)(void* self, void* padding, void* stride, void* dilation, void* groups);
  HOST_API void* lantern_mkldnn_reorder_conv3d_weight_attensor_atintarrayref_atintarrayref_atintarrayref_intt(void* self, void* padding, void* stride, void* dilation, void* groups) { void* ret = _lantern_mkldnn_reorder_conv3d_weight_attensor_atintarrayref_atintarrayref_atintarrayref_intt(self, padding, stride, dilation, groups); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_to_mkldnn_backward_attensor_attensor)(void* grad, void* input);
  HOST_API void* lantern_to_mkldnn_backward_attensor_attensor(void* grad, void* input) { void* ret = _lantern_to_mkldnn_backward_attensor_attensor(grad, input); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_quantize_per_tensor_attensor_double_intt_atscalartype)(void* self, void* scale, void* zero_point, void* dtype);
  HOST_API void* lantern_quantize_per_tensor_attensor_double_intt_atscalartype(void* self, void* scale, void* zero_point, void* dtype) { void* ret = _lantern_quantize_per_tensor_attensor_double_intt_atscalartype(self, scale, zero_point, dtype); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_quantize_per_tensor_attensorlist_attensor_attensor_atscalartype)(void* tensors, void* scales, void* zero_points, void* dtype);
  HOST_API void* lantern_quantize_per_tensor_attensorlist_attensor_attensor_atscalartype(void* tensors, void* scales, void* zero_points, void* dtype) { void* ret = _lantern_quantize_per_tensor_attensorlist_attensor_attensor_atscalartype(tensors, scales, zero_points, dtype); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_quantize_per_channel_attensor_attensor_attensor_intt_atscalartype)(void* self, void* scales, void* zero_points, void* axis, void* dtype);
  HOST_API void* lantern_quantize_per_channel_attensor_attensor_attensor_intt_atscalartype(void* self, void* scales, void* zero_points, void* axis, void* dtype) { void* ret = _lantern_quantize_per_channel_attensor_attensor_attensor_intt_atscalartype(self, scales, zero_points, axis, dtype); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_dequantize_attensor)(void* self);
  HOST_API void* lantern_dequantize_attensor(void* self) { void* ret = _lantern_dequantize_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_dequantize_attensor)(void* self);
  HOST_API void* lantern_Tensor_dequantize_attensor(void* self) { void* ret = _lantern_Tensor_dequantize_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_dequantize_attensorlist)(void* tensors);
  HOST_API void* lantern_dequantize_attensorlist(void* tensors) { void* ret = _lantern_dequantize_attensorlist(tensors); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_q_scale_attensor)(void* self);
  HOST_API void* lantern_q_scale_attensor(void* self) { void* ret = _lantern_q_scale_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_q_scale_attensor)(void* self);
  HOST_API void* lantern_Tensor_q_scale_attensor(void* self) { void* ret = _lantern_Tensor_q_scale_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_q_zero_point_attensor)(void* self);
  HOST_API void* lantern_q_zero_point_attensor(void* self) { void* ret = _lantern_q_zero_point_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_q_zero_point_attensor)(void* self);
  HOST_API void* lantern_Tensor_q_zero_point_attensor(void* self) { void* ret = _lantern_Tensor_q_zero_point_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_q_per_channel_scales_attensor)(void* self);
  HOST_API void* lantern_q_per_channel_scales_attensor(void* self) { void* ret = _lantern_q_per_channel_scales_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_q_per_channel_scales_attensor)(void* self);
  HOST_API void* lantern_Tensor_q_per_channel_scales_attensor(void* self) { void* ret = _lantern_Tensor_q_per_channel_scales_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_q_per_channel_zero_points_attensor)(void* self);
  HOST_API void* lantern_q_per_channel_zero_points_attensor(void* self) { void* ret = _lantern_q_per_channel_zero_points_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_q_per_channel_zero_points_attensor)(void* self);
  HOST_API void* lantern_Tensor_q_per_channel_zero_points_attensor(void* self) { void* ret = _lantern_Tensor_q_per_channel_zero_points_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_q_per_channel_axis_attensor)(void* self);
  HOST_API void* lantern_q_per_channel_axis_attensor(void* self) { void* ret = _lantern_q_per_channel_axis_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_q_per_channel_axis_attensor)(void* self);
  HOST_API void* lantern_Tensor_q_per_channel_axis_attensor(void* self) { void* ret = _lantern_Tensor_q_per_channel_axis_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_int_repr_attensor)(void* self);
  HOST_API void* lantern_int_repr_attensor(void* self) { void* ret = _lantern_int_repr_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_int_repr_attensor)(void* self);
  HOST_API void* lantern_Tensor_int_repr_attensor(void* self) { void* ret = _lantern_Tensor_int_repr_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__make_per_tensor_quantized_tensor_attensor_double_intt)(void* self, void* scale, void* zero_point);
  HOST_API void* lantern__make_per_tensor_quantized_tensor_attensor_double_intt(void* self, void* scale, void* zero_point) { void* ret = _lantern__make_per_tensor_quantized_tensor_attensor_double_intt(self, scale, zero_point); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__make_per_channel_quantized_tensor_attensor_attensor_attensor_intt)(void* self, void* scale, void* zero_point, void* axis);
  HOST_API void* lantern__make_per_channel_quantized_tensor_attensor_attensor_attensor_intt(void* self, void* scale, void* zero_point, void* axis) { void* ret = _lantern__make_per_channel_quantized_tensor_attensor_attensor_attensor_intt(self, scale, zero_point, axis); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_qscheme_attensor)(void* self);
  HOST_API void* lantern_Tensor_qscheme_attensor(void* self) { void* ret = _lantern_Tensor_qscheme_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_fake_quantize_per_tensor_affine_attensor_double_intt_intt_intt)(void* self, void* scale, void* zero_point, void* quant_min, void* quant_max);
  HOST_API void* lantern_fake_quantize_per_tensor_affine_attensor_double_intt_intt_intt(void* self, void* scale, void* zero_point, void* quant_min, void* quant_max) { void* ret = _lantern_fake_quantize_per_tensor_affine_attensor_double_intt_intt_intt(self, scale, zero_point, quant_min, quant_max); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_fake_quantize_per_tensor_affine_cachemask_attensor_double_intt_intt_intt)(void* self, void* scale, void* zero_point, void* quant_min, void* quant_max);
  HOST_API void* lantern_fake_quantize_per_tensor_affine_cachemask_attensor_double_intt_intt_intt(void* self, void* scale, void* zero_point, void* quant_min, void* quant_max) { void* ret = _lantern_fake_quantize_per_tensor_affine_cachemask_attensor_double_intt_intt_intt(self, scale, zero_point, quant_min, quant_max); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_fake_quantize_per_tensor_affine_cachemask_backward_attensor_attensor)(void* grad, void* mask);
  HOST_API void* lantern_fake_quantize_per_tensor_affine_cachemask_backward_attensor_attensor(void* grad, void* mask) { void* ret = _lantern_fake_quantize_per_tensor_affine_cachemask_backward_attensor_attensor(grad, mask); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__fake_quantize_learnable_per_tensor_affine_attensor_attensor_attensor_intt_intt_double)(void* self, void* scale, void* zero_point, void* quant_min, void* quant_max, void* grad_factor);
  HOST_API void* lantern__fake_quantize_learnable_per_tensor_affine_attensor_attensor_attensor_intt_intt_double(void* self, void* scale, void* zero_point, void* quant_min, void* quant_max, void* grad_factor) { void* ret = _lantern__fake_quantize_learnable_per_tensor_affine_attensor_attensor_attensor_intt_intt_double(self, scale, zero_point, quant_min, quant_max, grad_factor); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__fake_quantize_learnable_per_tensor_affine_backward_attensor_attensor_attensor_attensor_intt_intt_double)(void* grad, void* self, void* scale, void* zero_point, void* quant_min, void* quant_max, void* grad_factor);
  HOST_API void* lantern__fake_quantize_learnable_per_tensor_affine_backward_attensor_attensor_attensor_attensor_intt_intt_double(void* grad, void* self, void* scale, void* zero_point, void* quant_min, void* quant_max, void* grad_factor) { void* ret = _lantern__fake_quantize_learnable_per_tensor_affine_backward_attensor_attensor_attensor_attensor_intt_intt_double(grad, self, scale, zero_point, quant_min, quant_max, grad_factor); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_fake_quantize_per_channel_affine_attensor_attensor_attensor_intt_intt_intt)(void* self, void* scale, void* zero_point, void* axis, void* quant_min, void* quant_max);
  HOST_API void* lantern_fake_quantize_per_channel_affine_attensor_attensor_attensor_intt_intt_intt(void* self, void* scale, void* zero_point, void* axis, void* quant_min, void* quant_max) { void* ret = _lantern_fake_quantize_per_channel_affine_attensor_attensor_attensor_intt_intt_intt(self, scale, zero_point, axis, quant_min, quant_max); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_fake_quantize_per_channel_affine_cachemask_attensor_attensor_attensor_intt_intt_intt)(void* self, void* scale, void* zero_point, void* axis, void* quant_min, void* quant_max);
  HOST_API void* lantern_fake_quantize_per_channel_affine_cachemask_attensor_attensor_attensor_intt_intt_intt(void* self, void* scale, void* zero_point, void* axis, void* quant_min, void* quant_max) { void* ret = _lantern_fake_quantize_per_channel_affine_cachemask_attensor_attensor_attensor_intt_intt_intt(self, scale, zero_point, axis, quant_min, quant_max); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_fake_quantize_per_channel_affine_cachemask_backward_attensor_attensor)(void* grad, void* mask);
  HOST_API void* lantern_fake_quantize_per_channel_affine_cachemask_backward_attensor_attensor(void* grad, void* mask) { void* ret = _lantern_fake_quantize_per_channel_affine_cachemask_backward_attensor_attensor(grad, mask); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__fake_quantize_learnable_per_channel_affine_attensor_attensor_attensor_intt_intt_intt_double)(void* self, void* scale, void* zero_point, void* axis, void* quant_min, void* quant_max, void* grad_factor);
  HOST_API void* lantern__fake_quantize_learnable_per_channel_affine_attensor_attensor_attensor_intt_intt_intt_double(void* self, void* scale, void* zero_point, void* axis, void* quant_min, void* quant_max, void* grad_factor) { void* ret = _lantern__fake_quantize_learnable_per_channel_affine_attensor_attensor_attensor_intt_intt_intt_double(self, scale, zero_point, axis, quant_min, quant_max, grad_factor); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__fake_quantize_learnable_per_channel_affine_backward_attensor_attensor_attensor_attensor_intt_intt_intt_double)(void* grad, void* self, void* scale, void* zero_point, void* axis, void* quant_min, void* quant_max, void* grad_factor);
  HOST_API void* lantern__fake_quantize_learnable_per_channel_affine_backward_attensor_attensor_attensor_attensor_intt_intt_intt_double(void* grad, void* self, void* scale, void* zero_point, void* axis, void* quant_min, void* quant_max, void* grad_factor) { void* ret = _lantern__fake_quantize_learnable_per_channel_affine_backward_attensor_attensor_attensor_attensor_intt_intt_intt_double(grad, self, scale, zero_point, axis, quant_min, quant_max, grad_factor); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__choose_qparams_per_tensor_attensor_bool)(void* self, void* reduce_range);
  HOST_API void* lantern__choose_qparams_per_tensor_attensor_bool(void* self, void* reduce_range) { void* ret = _lantern__choose_qparams_per_tensor_attensor_bool(self, reduce_range); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__saturate_weight_to_fp16_attensor)(void* weight);
  HOST_API void* lantern__saturate_weight_to_fp16_attensor(void* weight) { void* ret = _lantern__saturate_weight_to_fp16_attensor(weight); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_choose_qparams_optimized_attensor_intt_intt_double_intt)(void* input, void* numel, void* n_bins, void* ratio, void* bit_width);
  HOST_API void* lantern_choose_qparams_optimized_attensor_intt_intt_double_intt(void* input, void* numel, void* n_bins, void* ratio, void* bit_width) { void* ret = _lantern_choose_qparams_optimized_attensor_intt_intt_double_intt(input, numel, n_bins, ratio, bit_width); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_to_attensor_attensoroptions_bool_bool_atmemoryformat)(void* self, void* options, void* non_blocking, void* copy, void* memory_format);
  HOST_API void* lantern_Tensor_to_attensor_attensoroptions_bool_bool_atmemoryformat(void* self, void* options, void* non_blocking, void* copy, void* memory_format) { void* ret = _lantern_Tensor_to_attensor_attensoroptions_bool_bool_atmemoryformat(self, options, non_blocking, copy, memory_format); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_to_attensor_atdevice_atscalartype_bool_bool_atmemoryformat)(void* self, void* device, void* dtype, void* non_blocking, void* copy, void* memory_format);
  HOST_API void* lantern_Tensor_to_attensor_atdevice_atscalartype_bool_bool_atmemoryformat(void* self, void* device, void* dtype, void* non_blocking, void* copy, void* memory_format) { void* ret = _lantern_Tensor_to_attensor_atdevice_atscalartype_bool_bool_atmemoryformat(self, device, dtype, non_blocking, copy, memory_format); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_to_attensor_atscalartype_bool_bool_atmemoryformat)(void* self, void* dtype, void* non_blocking, void* copy, void* memory_format);
  HOST_API void* lantern_Tensor_to_attensor_atscalartype_bool_bool_atmemoryformat(void* self, void* dtype, void* non_blocking, void* copy, void* memory_format) { void* ret = _lantern_Tensor_to_attensor_atscalartype_bool_bool_atmemoryformat(self, dtype, non_blocking, copy, memory_format); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_to_attensor_attensor_bool_bool_atmemoryformat)(void* self, void* other, void* non_blocking, void* copy, void* memory_format);
  HOST_API void* lantern_Tensor_to_attensor_attensor_bool_bool_atmemoryformat(void* self, void* other, void* non_blocking, void* copy, void* memory_format) { void* ret = _lantern_Tensor_to_attensor_attensor_bool_bool_atmemoryformat(self, other, non_blocking, copy, memory_format); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_meshgrid_attensorlist)(void* tensors);
  HOST_API void* lantern_meshgrid_attensorlist(void* tensors) { void* ret = _lantern_meshgrid_attensorlist(tensors); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_cartesian_prod_attensorlist)(void* tensors);
  HOST_API void* lantern_cartesian_prod_attensorlist(void* tensors) { void* ret = _lantern_cartesian_prod_attensorlist(tensors); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_combinations_attensor_intt_bool)(void* self, void* r, void* with_replacement);
  HOST_API void* lantern_combinations_attensor_intt_bool(void* self, void* r, void* with_replacement) { void* ret = _lantern_combinations_attensor_intt_bool(self, r, with_replacement); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_item_attensor)(void* self);
  HOST_API void* lantern_Tensor_item_attensor(void* self) { void* ret = _lantern_Tensor_item_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_result_type_attensor_attensor)(void* tensor, void* other);
  HOST_API void* lantern_result_type_attensor_attensor(void* tensor, void* other) { void* ret = _lantern_result_type_attensor_attensor(tensor, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_result_type_attensor_constatscalar)(void* tensor, void* other);
  HOST_API void* lantern_result_type_attensor_constatscalar(void* tensor, void* other) { void* ret = _lantern_result_type_attensor_constatscalar(tensor, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_result_type_constatscalar_attensor)(void* scalar, void* tensor);
  HOST_API void* lantern_result_type_constatscalar_attensor(void* scalar, void* tensor) { void* ret = _lantern_result_type_constatscalar_attensor(scalar, tensor); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_result_type_constatscalar_constatscalar)(void* scalar1, void* scalar2);
  HOST_API void* lantern_result_type_constatscalar_constatscalar(void* scalar1, void* scalar2) { void* ret = _lantern_result_type_constatscalar_constatscalar(scalar1, scalar2); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_can_cast_atscalartype_atscalartype)(void* from, void* to);
  HOST_API void* lantern_can_cast_atscalartype_atscalartype(void* from, void* to) { void* ret = _lantern_can_cast_atscalartype_atscalartype(from, to); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_promote_types_atscalartype_atscalartype)(void* type1, void* type2);
  HOST_API void* lantern_promote_types_atscalartype_atscalartype(void* type1, void* type2) { void* ret = _lantern_promote_types_atscalartype_atscalartype(type1, type2); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__local_scalar_dense_attensor)(void* self);
  HOST_API void* lantern__local_scalar_dense_attensor(void* self) { void* ret = _lantern__local_scalar_dense_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__thnn_fused_lstm_cell_attensor_attensor_attensor_attensor_attensor)(void* input_gates, void* hidden_gates, void* cx, void* input_bias, void* hidden_bias);
  HOST_API void* lantern__thnn_fused_lstm_cell_attensor_attensor_attensor_attensor_attensor(void* input_gates, void* hidden_gates, void* cx, void* input_bias, void* hidden_bias) { void* ret = _lantern__thnn_fused_lstm_cell_attensor_attensor_attensor_attensor_attensor(input_gates, hidden_gates, cx, input_bias, hidden_bias); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__thnn_fused_lstm_cell_backward_attensor_attensor_attensor_attensor_attensor_bool)(void* grad_hy, void* grad_cy, void* cx, void* cy, void* workspace, void* has_bias);
  HOST_API void* lantern__thnn_fused_lstm_cell_backward_attensor_attensor_attensor_attensor_attensor_bool(void* grad_hy, void* grad_cy, void* cx, void* cy, void* workspace, void* has_bias) { void* ret = _lantern__thnn_fused_lstm_cell_backward_attensor_attensor_attensor_attensor_attensor_bool(grad_hy, grad_cy, cx, cy, workspace, has_bias); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__thnn_differentiable_lstm_cell_backward_attensor_attensor_attensor_attensor_attensor_attensor_attensor_attensor)(void* grad_hy, void* grad_cy, void* input_gates, void* hidden_gates, void* input_bias, void* hidden_bias, void* cx, void* cy);
  HOST_API void* lantern__thnn_differentiable_lstm_cell_backward_attensor_attensor_attensor_attensor_attensor_attensor_attensor_attensor(void* grad_hy, void* grad_cy, void* input_gates, void* hidden_gates, void* input_bias, void* hidden_bias, void* cx, void* cy) { void* ret = _lantern__thnn_differentiable_lstm_cell_backward_attensor_attensor_attensor_attensor_attensor_attensor_attensor_attensor(grad_hy, grad_cy, input_gates, hidden_gates, input_bias, hidden_bias, cx, cy); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__thnn_fused_gru_cell_attensor_attensor_attensor_attensor_attensor)(void* input_gates, void* hidden_gates, void* hx, void* input_bias, void* hidden_bias);
  HOST_API void* lantern__thnn_fused_gru_cell_attensor_attensor_attensor_attensor_attensor(void* input_gates, void* hidden_gates, void* hx, void* input_bias, void* hidden_bias) { void* ret = _lantern__thnn_fused_gru_cell_attensor_attensor_attensor_attensor_attensor(input_gates, hidden_gates, hx, input_bias, hidden_bias); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__thnn_fused_gru_cell_backward_attensor_attensor_bool)(void* grad_hy, void* workspace, void* has_bias);
  HOST_API void* lantern__thnn_fused_gru_cell_backward_attensor_attensor_bool(void* grad_hy, void* workspace, void* has_bias) { void* ret = _lantern__thnn_fused_gru_cell_backward_attensor_attensor_bool(grad_hy, workspace, has_bias); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__thnn_differentiable_gru_cell_backward_attensor_attensor_attensor_attensor_attensor_attensor)(void* grad_hy, void* input_gates, void* hidden_gates, void* hx, void* input_bias, void* hidden_bias);
  HOST_API void* lantern__thnn_differentiable_gru_cell_backward_attensor_attensor_attensor_attensor_attensor_attensor(void* grad_hy, void* input_gates, void* hidden_gates, void* hx, void* input_bias, void* hidden_bias) { void* ret = _lantern__thnn_differentiable_gru_cell_backward_attensor_attensor_attensor_attensor_attensor_attensor(grad_hy, input_gates, hidden_gates, hx, input_bias, hidden_bias); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_lstm_attensor_attensorlist_attensorlist_bool_intt_double_bool_bool_bool)(void* input, void* hx, void* params, void* has_biases, void* num_layers, void* dropout, void* train, void* bidirectional, void* batch_first);
  HOST_API void* lantern_lstm_attensor_attensorlist_attensorlist_bool_intt_double_bool_bool_bool(void* input, void* hx, void* params, void* has_biases, void* num_layers, void* dropout, void* train, void* bidirectional, void* batch_first) { void* ret = _lantern_lstm_attensor_attensorlist_attensorlist_bool_intt_double_bool_bool_bool(input, hx, params, has_biases, num_layers, dropout, train, bidirectional, batch_first); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_lstm_attensor_attensor_attensorlist_attensorlist_bool_intt_double_bool_bool)(void* data, void* batch_sizes, void* hx, void* params, void* has_biases, void* num_layers, void* dropout, void* train, void* bidirectional);
  HOST_API void* lantern_lstm_attensor_attensor_attensorlist_attensorlist_bool_intt_double_bool_bool(void* data, void* batch_sizes, void* hx, void* params, void* has_biases, void* num_layers, void* dropout, void* train, void* bidirectional) { void* ret = _lantern_lstm_attensor_attensor_attensorlist_attensorlist_bool_intt_double_bool_bool(data, batch_sizes, hx, params, has_biases, num_layers, dropout, train, bidirectional); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_gru_attensor_attensor_attensorlist_bool_intt_double_bool_bool_bool)(void* input, void* hx, void* params, void* has_biases, void* num_layers, void* dropout, void* train, void* bidirectional, void* batch_first);
  HOST_API void* lantern_gru_attensor_attensor_attensorlist_bool_intt_double_bool_bool_bool(void* input, void* hx, void* params, void* has_biases, void* num_layers, void* dropout, void* train, void* bidirectional, void* batch_first) { void* ret = _lantern_gru_attensor_attensor_attensorlist_bool_intt_double_bool_bool_bool(input, hx, params, has_biases, num_layers, dropout, train, bidirectional, batch_first); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_gru_attensor_attensor_attensor_attensorlist_bool_intt_double_bool_bool)(void* data, void* batch_sizes, void* hx, void* params, void* has_biases, void* num_layers, void* dropout, void* train, void* bidirectional);
  HOST_API void* lantern_gru_attensor_attensor_attensor_attensorlist_bool_intt_double_bool_bool(void* data, void* batch_sizes, void* hx, void* params, void* has_biases, void* num_layers, void* dropout, void* train, void* bidirectional) { void* ret = _lantern_gru_attensor_attensor_attensor_attensorlist_bool_intt_double_bool_bool(data, batch_sizes, hx, params, has_biases, num_layers, dropout, train, bidirectional); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_rnn_tanh_attensor_attensor_attensorlist_bool_intt_double_bool_bool_bool)(void* input, void* hx, void* params, void* has_biases, void* num_layers, void* dropout, void* train, void* bidirectional, void* batch_first);
  HOST_API void* lantern_rnn_tanh_attensor_attensor_attensorlist_bool_intt_double_bool_bool_bool(void* input, void* hx, void* params, void* has_biases, void* num_layers, void* dropout, void* train, void* bidirectional, void* batch_first) { void* ret = _lantern_rnn_tanh_attensor_attensor_attensorlist_bool_intt_double_bool_bool_bool(input, hx, params, has_biases, num_layers, dropout, train, bidirectional, batch_first); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_rnn_tanh_attensor_attensor_attensor_attensorlist_bool_intt_double_bool_bool)(void* data, void* batch_sizes, void* hx, void* params, void* has_biases, void* num_layers, void* dropout, void* train, void* bidirectional);
  HOST_API void* lantern_rnn_tanh_attensor_attensor_attensor_attensorlist_bool_intt_double_bool_bool(void* data, void* batch_sizes, void* hx, void* params, void* has_biases, void* num_layers, void* dropout, void* train, void* bidirectional) { void* ret = _lantern_rnn_tanh_attensor_attensor_attensor_attensorlist_bool_intt_double_bool_bool(data, batch_sizes, hx, params, has_biases, num_layers, dropout, train, bidirectional); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_rnn_relu_attensor_attensor_attensorlist_bool_intt_double_bool_bool_bool)(void* input, void* hx, void* params, void* has_biases, void* num_layers, void* dropout, void* train, void* bidirectional, void* batch_first);
  HOST_API void* lantern_rnn_relu_attensor_attensor_attensorlist_bool_intt_double_bool_bool_bool(void* input, void* hx, void* params, void* has_biases, void* num_layers, void* dropout, void* train, void* bidirectional, void* batch_first) { void* ret = _lantern_rnn_relu_attensor_attensor_attensorlist_bool_intt_double_bool_bool_bool(input, hx, params, has_biases, num_layers, dropout, train, bidirectional, batch_first); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_rnn_relu_attensor_attensor_attensor_attensorlist_bool_intt_double_bool_bool)(void* data, void* batch_sizes, void* hx, void* params, void* has_biases, void* num_layers, void* dropout, void* train, void* bidirectional);
  HOST_API void* lantern_rnn_relu_attensor_attensor_attensor_attensorlist_bool_intt_double_bool_bool(void* data, void* batch_sizes, void* hx, void* params, void* has_biases, void* num_layers, void* dropout, void* train, void* bidirectional) { void* ret = _lantern_rnn_relu_attensor_attensor_attensor_attensorlist_bool_intt_double_bool_bool(data, batch_sizes, hx, params, has_biases, num_layers, dropout, train, bidirectional); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_lstm_cell_attensor_attensorlist_attensor_attensor_attensor_attensor)(void* input, void* hx, void* w_ih, void* w_hh, void* b_ih, void* b_hh);
  HOST_API void* lantern_lstm_cell_attensor_attensorlist_attensor_attensor_attensor_attensor(void* input, void* hx, void* w_ih, void* w_hh, void* b_ih, void* b_hh) { void* ret = _lantern_lstm_cell_attensor_attensorlist_attensor_attensor_attensor_attensor(input, hx, w_ih, w_hh, b_ih, b_hh); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_gru_cell_attensor_attensor_attensor_attensor_attensor_attensor)(void* input, void* hx, void* w_ih, void* w_hh, void* b_ih, void* b_hh);
  HOST_API void* lantern_gru_cell_attensor_attensor_attensor_attensor_attensor_attensor(void* input, void* hx, void* w_ih, void* w_hh, void* b_ih, void* b_hh) { void* ret = _lantern_gru_cell_attensor_attensor_attensor_attensor_attensor_attensor(input, hx, w_ih, w_hh, b_ih, b_hh); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_rnn_tanh_cell_attensor_attensor_attensor_attensor_attensor_attensor)(void* input, void* hx, void* w_ih, void* w_hh, void* b_ih, void* b_hh);
  HOST_API void* lantern_rnn_tanh_cell_attensor_attensor_attensor_attensor_attensor_attensor(void* input, void* hx, void* w_ih, void* w_hh, void* b_ih, void* b_hh) { void* ret = _lantern_rnn_tanh_cell_attensor_attensor_attensor_attensor_attensor_attensor(input, hx, w_ih, w_hh, b_ih, b_hh); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_rnn_relu_cell_attensor_attensor_attensor_attensor_attensor_attensor)(void* input, void* hx, void* w_ih, void* w_hh, void* b_ih, void* b_hh);
  HOST_API void* lantern_rnn_relu_cell_attensor_attensor_attensor_attensor_attensor_attensor(void* input, void* hx, void* w_ih, void* w_hh, void* b_ih, void* b_hh) { void* ret = _lantern_rnn_relu_cell_attensor_attensor_attensor_attensor_attensor_attensor(input, hx, w_ih, w_hh, b_ih, b_hh); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_quantized_lstm_cell_attensor_attensorlist_attensor_attensor_attensor_attensor_attensor_attensor_attensor_attensor_constatscalar_constatscalar_constatscalar_constatscalar)(void* input, void* hx, void* w_ih, void* w_hh, void* b_ih, void* b_hh, void* packed_ih, void* packed_hh, void* col_offsets_ih, void* col_offsets_hh, void* scale_ih, void* scale_hh, void* zero_point_ih, void* zero_point_hh);
  HOST_API void* lantern_quantized_lstm_cell_attensor_attensorlist_attensor_attensor_attensor_attensor_attensor_attensor_attensor_attensor_constatscalar_constatscalar_constatscalar_constatscalar(void* input, void* hx, void* w_ih, void* w_hh, void* b_ih, void* b_hh, void* packed_ih, void* packed_hh, void* col_offsets_ih, void* col_offsets_hh, void* scale_ih, void* scale_hh, void* zero_point_ih, void* zero_point_hh) { void* ret = _lantern_quantized_lstm_cell_attensor_attensorlist_attensor_attensor_attensor_attensor_attensor_attensor_attensor_attensor_constatscalar_constatscalar_constatscalar_constatscalar(input, hx, w_ih, w_hh, b_ih, b_hh, packed_ih, packed_hh, col_offsets_ih, col_offsets_hh, scale_ih, scale_hh, zero_point_ih, zero_point_hh); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_quantized_gru_cell_attensor_attensor_attensor_attensor_attensor_attensor_attensor_attensor_attensor_attensor_constatscalar_constatscalar_constatscalar_constatscalar)(void* input, void* hx, void* w_ih, void* w_hh, void* b_ih, void* b_hh, void* packed_ih, void* packed_hh, void* col_offsets_ih, void* col_offsets_hh, void* scale_ih, void* scale_hh, void* zero_point_ih, void* zero_point_hh);
  HOST_API void* lantern_quantized_gru_cell_attensor_attensor_attensor_attensor_attensor_attensor_attensor_attensor_attensor_attensor_constatscalar_constatscalar_constatscalar_constatscalar(void* input, void* hx, void* w_ih, void* w_hh, void* b_ih, void* b_hh, void* packed_ih, void* packed_hh, void* col_offsets_ih, void* col_offsets_hh, void* scale_ih, void* scale_hh, void* zero_point_ih, void* zero_point_hh) { void* ret = _lantern_quantized_gru_cell_attensor_attensor_attensor_attensor_attensor_attensor_attensor_attensor_attensor_attensor_constatscalar_constatscalar_constatscalar_constatscalar(input, hx, w_ih, w_hh, b_ih, b_hh, packed_ih, packed_hh, col_offsets_ih, col_offsets_hh, scale_ih, scale_hh, zero_point_ih, zero_point_hh); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_quantized_rnn_relu_cell_attensor_attensor_attensor_attensor_attensor_attensor_attensor_attensor_attensor_attensor_constatscalar_constatscalar_constatscalar_constatscalar)(void* input, void* hx, void* w_ih, void* w_hh, void* b_ih, void* b_hh, void* packed_ih, void* packed_hh, void* col_offsets_ih, void* col_offsets_hh, void* scale_ih, void* scale_hh, void* zero_point_ih, void* zero_point_hh);
  HOST_API void* lantern_quantized_rnn_relu_cell_attensor_attensor_attensor_attensor_attensor_attensor_attensor_attensor_attensor_attensor_constatscalar_constatscalar_constatscalar_constatscalar(void* input, void* hx, void* w_ih, void* w_hh, void* b_ih, void* b_hh, void* packed_ih, void* packed_hh, void* col_offsets_ih, void* col_offsets_hh, void* scale_ih, void* scale_hh, void* zero_point_ih, void* zero_point_hh) { void* ret = _lantern_quantized_rnn_relu_cell_attensor_attensor_attensor_attensor_attensor_attensor_attensor_attensor_attensor_attensor_constatscalar_constatscalar_constatscalar_constatscalar(input, hx, w_ih, w_hh, b_ih, b_hh, packed_ih, packed_hh, col_offsets_ih, col_offsets_hh, scale_ih, scale_hh, zero_point_ih, zero_point_hh); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_quantized_rnn_tanh_cell_attensor_attensor_attensor_attensor_attensor_attensor_attensor_attensor_attensor_attensor_constatscalar_constatscalar_constatscalar_constatscalar)(void* input, void* hx, void* w_ih, void* w_hh, void* b_ih, void* b_hh, void* packed_ih, void* packed_hh, void* col_offsets_ih, void* col_offsets_hh, void* scale_ih, void* scale_hh, void* zero_point_ih, void* zero_point_hh);
  HOST_API void* lantern_quantized_rnn_tanh_cell_attensor_attensor_attensor_attensor_attensor_attensor_attensor_attensor_attensor_attensor_constatscalar_constatscalar_constatscalar_constatscalar(void* input, void* hx, void* w_ih, void* w_hh, void* b_ih, void* b_hh, void* packed_ih, void* packed_hh, void* col_offsets_ih, void* col_offsets_hh, void* scale_ih, void* scale_hh, void* zero_point_ih, void* zero_point_hh) { void* ret = _lantern_quantized_rnn_tanh_cell_attensor_attensor_attensor_attensor_attensor_attensor_attensor_attensor_attensor_attensor_constatscalar_constatscalar_constatscalar_constatscalar(input, hx, w_ih, w_hh, b_ih, b_hh, packed_ih, packed_hh, col_offsets_ih, col_offsets_hh, scale_ih, scale_hh, zero_point_ih, zero_point_hh); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__pack_padded_sequence_attensor_attensor_bool)(void* input, void* lengths, void* batch_first);
  HOST_API void* lantern__pack_padded_sequence_attensor_attensor_bool(void* input, void* lengths, void* batch_first) { void* ret = _lantern__pack_padded_sequence_attensor_attensor_bool(input, lengths, batch_first); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__pack_padded_sequence_backward_attensor_atintarrayref_attensor_bool)(void* grad, void* input_size, void* batch_sizes, void* batch_first);
  HOST_API void* lantern__pack_padded_sequence_backward_attensor_atintarrayref_attensor_bool(void* grad, void* input_size, void* batch_sizes, void* batch_first) { void* ret = _lantern__pack_padded_sequence_backward_attensor_atintarrayref_attensor_bool(grad, input_size, batch_sizes, batch_first); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__pad_packed_sequence_attensor_attensor_bool_constatscalar_intt)(void* data, void* batch_sizes, void* batch_first, void* padding_value, void* total_length);
  HOST_API void* lantern__pad_packed_sequence_attensor_attensor_bool_constatscalar_intt(void* data, void* batch_sizes, void* batch_first, void* padding_value, void* total_length) { void* ret = _lantern__pad_packed_sequence_attensor_attensor_bool_constatscalar_intt(data, batch_sizes, batch_first, padding_value, total_length); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_set__attensor_atstorage)(void* self, void* source);
  HOST_API void* lantern_Tensor_set__attensor_atstorage(void* self, void* source) { void* ret = _lantern_Tensor_set__attensor_atstorage(self, source); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_set__attensor_atstorage_intt_atintarrayref_atintarrayref)(void* self, void* source, void* storage_offset, void* size, void* stride);
  HOST_API void* lantern_Tensor_set__attensor_atstorage_intt_atintarrayref_atintarrayref(void* self, void* source, void* storage_offset, void* size, void* stride) { void* ret = _lantern_Tensor_set__attensor_atstorage_intt_atintarrayref_atintarrayref(self, source, storage_offset, size, stride); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_set__attensor_attensor)(void* self, void* source);
  HOST_API void* lantern_Tensor_set__attensor_attensor(void* self, void* source) { void* ret = _lantern_Tensor_set__attensor_attensor(self, source); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_set__attensor)(void* self);
  HOST_API void* lantern_Tensor_set__attensor(void* self) { void* ret = _lantern_Tensor_set__attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_is_set_to_attensor_attensor)(void* self, void* tensor);
  HOST_API void* lantern_Tensor_is_set_to_attensor_attensor(void* self, void* tensor) { void* ret = _lantern_Tensor_is_set_to_attensor_attensor(self, tensor); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_masked_fill__attensor_attensor_constatscalar)(void* self, void* mask, void* value);
  HOST_API void* lantern_Tensor_masked_fill__attensor_attensor_constatscalar(void* self, void* mask, void* value) { void* ret = _lantern_Tensor_masked_fill__attensor_attensor_constatscalar(self, mask, value); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_masked_fill_attensor_attensor_constatscalar)(void* self, void* mask, void* value);
  HOST_API void* lantern_masked_fill_attensor_attensor_constatscalar(void* self, void* mask, void* value) { void* ret = _lantern_masked_fill_attensor_attensor_constatscalar(self, mask, value); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_masked_fill_attensor_attensor_constatscalar)(void* self, void* mask, void* value);
  HOST_API void* lantern_Tensor_masked_fill_attensor_attensor_constatscalar(void* self, void* mask, void* value) { void* ret = _lantern_Tensor_masked_fill_attensor_attensor_constatscalar(self, mask, value); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_masked_fill__attensor_attensor_attensor)(void* self, void* mask, void* value);
  HOST_API void* lantern_Tensor_masked_fill__attensor_attensor_attensor(void* self, void* mask, void* value) { void* ret = _lantern_Tensor_masked_fill__attensor_attensor_attensor(self, mask, value); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_masked_fill_attensor_attensor_attensor)(void* self, void* mask, void* value);
  HOST_API void* lantern_masked_fill_attensor_attensor_attensor(void* self, void* mask, void* value) { void* ret = _lantern_masked_fill_attensor_attensor_attensor(self, mask, value); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_masked_fill_attensor_attensor_attensor)(void* self, void* mask, void* value);
  HOST_API void* lantern_Tensor_masked_fill_attensor_attensor_attensor(void* self, void* mask, void* value) { void* ret = _lantern_Tensor_masked_fill_attensor_attensor_attensor(self, mask, value); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_masked_scatter__attensor_attensor_attensor)(void* self, void* mask, void* source);
  HOST_API void* lantern_Tensor_masked_scatter__attensor_attensor_attensor(void* self, void* mask, void* source) { void* ret = _lantern_Tensor_masked_scatter__attensor_attensor_attensor(self, mask, source); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_masked_scatter_attensor_attensor_attensor)(void* self, void* mask, void* source);
  HOST_API void* lantern_masked_scatter_attensor_attensor_attensor(void* self, void* mask, void* source) { void* ret = _lantern_masked_scatter_attensor_attensor_attensor(self, mask, source); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_masked_scatter_attensor_attensor_attensor)(void* self, void* mask, void* source);
  HOST_API void* lantern_Tensor_masked_scatter_attensor_attensor_attensor(void* self, void* mask, void* source) { void* ret = _lantern_Tensor_masked_scatter_attensor_attensor_attensor(self, mask, source); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_view_attensor_atintarrayref)(void* self, void* size);
  HOST_API void* lantern_Tensor_view_attensor_atintarrayref(void* self, void* size) { void* ret = _lantern_Tensor_view_attensor_atintarrayref(self, size); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_view_attensor_atscalartype)(void* self, void* dtype);
  HOST_API void* lantern_Tensor_view_attensor_atscalartype(void* self, void* dtype) { void* ret = _lantern_Tensor_view_attensor_atscalartype(self, dtype); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_put__attensor_attensor_attensor_bool)(void* self, void* index, void* source, void* accumulate);
  HOST_API void* lantern_Tensor_put__attensor_attensor_attensor_bool(void* self, void* index, void* source, void* accumulate) { void* ret = _lantern_Tensor_put__attensor_attensor_attensor_bool(self, index, source, accumulate); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_put_attensor_attensor_attensor_bool)(void* self, void* index, void* source, void* accumulate);
  HOST_API void* lantern_put_attensor_attensor_attensor_bool(void* self, void* index, void* source, void* accumulate) { void* ret = _lantern_put_attensor_attensor_attensor_bool(self, index, source, accumulate); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_put_attensor_attensor_attensor_bool)(void* self, void* index, void* source, void* accumulate);
  HOST_API void* lantern_Tensor_put_attensor_attensor_attensor_bool(void* self, void* index, void* source, void* accumulate) { void* ret = _lantern_Tensor_put_attensor_attensor_attensor_bool(self, index, source, accumulate); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_index_add__attensor_intt_attensor_attensor)(void* self, void* dim, void* index, void* source);
  HOST_API void* lantern_Tensor_index_add__attensor_intt_attensor_attensor(void* self, void* dim, void* index, void* source) { void* ret = _lantern_Tensor_index_add__attensor_intt_attensor_attensor(self, dim, index, source); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_index_add__attensor_intt_attensor_attensor_constatscalar)(void* self, void* dim, void* index, void* source, void* alpha);
  HOST_API void* lantern_Tensor_index_add__attensor_intt_attensor_attensor_constatscalar(void* self, void* dim, void* index, void* source, void* alpha) { void* ret = _lantern_Tensor_index_add__attensor_intt_attensor_attensor_constatscalar(self, dim, index, source, alpha); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_index_add_attensor_intt_attensor_attensor)(void* self, void* dim, void* index, void* source);
  HOST_API void* lantern_index_add_attensor_intt_attensor_attensor(void* self, void* dim, void* index, void* source) { void* ret = _lantern_index_add_attensor_intt_attensor_attensor(self, dim, index, source); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_index_add_attensor_intt_attensor_attensor)(void* self, void* dim, void* index, void* source);
  HOST_API void* lantern_Tensor_index_add_attensor_intt_attensor_attensor(void* self, void* dim, void* index, void* source) { void* ret = _lantern_Tensor_index_add_attensor_intt_attensor_attensor(self, dim, index, source); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_index_add_attensor_intt_attensor_attensor_constatscalar)(void* self, void* dim, void* index, void* source, void* alpha);
  HOST_API void* lantern_index_add_attensor_intt_attensor_attensor_constatscalar(void* self, void* dim, void* index, void* source, void* alpha) { void* ret = _lantern_index_add_attensor_intt_attensor_attensor_constatscalar(self, dim, index, source, alpha); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_index_add_attensor_intt_attensor_attensor_constatscalar)(void* self, void* dim, void* index, void* source, void* alpha);
  HOST_API void* lantern_Tensor_index_add_attensor_intt_attensor_attensor_constatscalar(void* self, void* dim, void* index, void* source, void* alpha) { void* ret = _lantern_Tensor_index_add_attensor_intt_attensor_attensor_constatscalar(self, dim, index, source, alpha); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_index_add_attensor_atdimname_attensor_attensor_constatscalar)(void* self, void* dim, void* index, void* source, void* alpha);
  HOST_API void* lantern_index_add_attensor_atdimname_attensor_attensor_constatscalar(void* self, void* dim, void* index, void* source, void* alpha) { void* ret = _lantern_index_add_attensor_atdimname_attensor_attensor_constatscalar(self, dim, index, source, alpha); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_index_add_attensor_atdimname_attensor_attensor_constatscalar)(void* self, void* dim, void* index, void* source, void* alpha);
  HOST_API void* lantern_Tensor_index_add_attensor_atdimname_attensor_attensor_constatscalar(void* self, void* dim, void* index, void* source, void* alpha) { void* ret = _lantern_Tensor_index_add_attensor_atdimname_attensor_attensor_constatscalar(self, dim, index, source, alpha); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_index_fill__attensor_intt_attensor_constatscalar)(void* self, void* dim, void* index, void* value);
  HOST_API void* lantern_Tensor_index_fill__attensor_intt_attensor_constatscalar(void* self, void* dim, void* index, void* value) { void* ret = _lantern_Tensor_index_fill__attensor_intt_attensor_constatscalar(self, dim, index, value); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_index_fill_attensor_intt_attensor_constatscalar)(void* self, void* dim, void* index, void* value);
  HOST_API void* lantern_index_fill_attensor_intt_attensor_constatscalar(void* self, void* dim, void* index, void* value) { void* ret = _lantern_index_fill_attensor_intt_attensor_constatscalar(self, dim, index, value); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_index_fill_attensor_intt_attensor_constatscalar)(void* self, void* dim, void* index, void* value);
  HOST_API void* lantern_Tensor_index_fill_attensor_intt_attensor_constatscalar(void* self, void* dim, void* index, void* value) { void* ret = _lantern_Tensor_index_fill_attensor_intt_attensor_constatscalar(self, dim, index, value); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_index_fill__attensor_intt_attensor_attensor)(void* self, void* dim, void* index, void* value);
  HOST_API void* lantern_Tensor_index_fill__attensor_intt_attensor_attensor(void* self, void* dim, void* index, void* value) { void* ret = _lantern_Tensor_index_fill__attensor_intt_attensor_attensor(self, dim, index, value); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_index_fill_attensor_intt_attensor_attensor)(void* self, void* dim, void* index, void* value);
  HOST_API void* lantern_index_fill_attensor_intt_attensor_attensor(void* self, void* dim, void* index, void* value) { void* ret = _lantern_index_fill_attensor_intt_attensor_attensor(self, dim, index, value); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_index_fill_attensor_intt_attensor_attensor)(void* self, void* dim, void* index, void* value);
  HOST_API void* lantern_Tensor_index_fill_attensor_intt_attensor_attensor(void* self, void* dim, void* index, void* value) { void* ret = _lantern_Tensor_index_fill_attensor_intt_attensor_attensor(self, dim, index, value); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_index_fill__attensor_atdimname_attensor_constatscalar)(void* self, void* dim, void* index, void* value);
  HOST_API void* lantern_Tensor_index_fill__attensor_atdimname_attensor_constatscalar(void* self, void* dim, void* index, void* value) { void* ret = _lantern_Tensor_index_fill__attensor_atdimname_attensor_constatscalar(self, dim, index, value); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_index_fill__attensor_atdimname_attensor_attensor)(void* self, void* dim, void* index, void* value);
  HOST_API void* lantern_Tensor_index_fill__attensor_atdimname_attensor_attensor(void* self, void* dim, void* index, void* value) { void* ret = _lantern_Tensor_index_fill__attensor_atdimname_attensor_attensor(self, dim, index, value); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_index_fill_attensor_atdimname_attensor_constatscalar)(void* self, void* dim, void* index, void* value);
  HOST_API void* lantern_index_fill_attensor_atdimname_attensor_constatscalar(void* self, void* dim, void* index, void* value) { void* ret = _lantern_index_fill_attensor_atdimname_attensor_constatscalar(self, dim, index, value); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_index_fill_attensor_atdimname_attensor_constatscalar)(void* self, void* dim, void* index, void* value);
  HOST_API void* lantern_Tensor_index_fill_attensor_atdimname_attensor_constatscalar(void* self, void* dim, void* index, void* value) { void* ret = _lantern_Tensor_index_fill_attensor_atdimname_attensor_constatscalar(self, dim, index, value); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_index_fill_attensor_atdimname_attensor_attensor)(void* self, void* dim, void* index, void* value);
  HOST_API void* lantern_index_fill_attensor_atdimname_attensor_attensor(void* self, void* dim, void* index, void* value) { void* ret = _lantern_index_fill_attensor_atdimname_attensor_attensor(self, dim, index, value); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_index_fill_attensor_atdimname_attensor_attensor)(void* self, void* dim, void* index, void* value);
  HOST_API void* lantern_Tensor_index_fill_attensor_atdimname_attensor_attensor(void* self, void* dim, void* index, void* value) { void* ret = _lantern_Tensor_index_fill_attensor_atdimname_attensor_attensor(self, dim, index, value); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_scatter__attensor_intt_attensor_attensor)(void* self, void* dim, void* index, void* src);
  HOST_API void* lantern_Tensor_scatter__attensor_intt_attensor_attensor(void* self, void* dim, void* index, void* src) { void* ret = _lantern_Tensor_scatter__attensor_intt_attensor_attensor(self, dim, index, src); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_scatter_attensor_intt_attensor_attensor)(void* self, void* dim, void* index, void* src);
  HOST_API void* lantern_scatter_attensor_intt_attensor_attensor(void* self, void* dim, void* index, void* src) { void* ret = _lantern_scatter_attensor_intt_attensor_attensor(self, dim, index, src); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_scatter_attensor_intt_attensor_attensor)(void* self, void* dim, void* index, void* src);
  HOST_API void* lantern_Tensor_scatter_attensor_intt_attensor_attensor(void* self, void* dim, void* index, void* src) { void* ret = _lantern_Tensor_scatter_attensor_intt_attensor_attensor(self, dim, index, src); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_scatter__attensor_intt_attensor_constatscalar)(void* self, void* dim, void* index, void* value);
  HOST_API void* lantern_Tensor_scatter__attensor_intt_attensor_constatscalar(void* self, void* dim, void* index, void* value) { void* ret = _lantern_Tensor_scatter__attensor_intt_attensor_constatscalar(self, dim, index, value); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_scatter_attensor_intt_attensor_constatscalar)(void* self, void* dim, void* index, void* value);
  HOST_API void* lantern_scatter_attensor_intt_attensor_constatscalar(void* self, void* dim, void* index, void* value) { void* ret = _lantern_scatter_attensor_intt_attensor_constatscalar(self, dim, index, value); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_scatter_attensor_intt_attensor_constatscalar)(void* self, void* dim, void* index, void* value);
  HOST_API void* lantern_Tensor_scatter_attensor_intt_attensor_constatscalar(void* self, void* dim, void* index, void* value) { void* ret = _lantern_Tensor_scatter_attensor_intt_attensor_constatscalar(self, dim, index, value); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_scatter_attensor_atdimname_attensor_attensor)(void* self, void* dim, void* index, void* src);
  HOST_API void* lantern_scatter_attensor_atdimname_attensor_attensor(void* self, void* dim, void* index, void* src) { void* ret = _lantern_scatter_attensor_atdimname_attensor_attensor(self, dim, index, src); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_scatter_attensor_atdimname_attensor_attensor)(void* self, void* dim, void* index, void* src);
  HOST_API void* lantern_Tensor_scatter_attensor_atdimname_attensor_attensor(void* self, void* dim, void* index, void* src) { void* ret = _lantern_Tensor_scatter_attensor_atdimname_attensor_attensor(self, dim, index, src); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_scatter_attensor_atdimname_attensor_constatscalar)(void* self, void* dim, void* index, void* value);
  HOST_API void* lantern_scatter_attensor_atdimname_attensor_constatscalar(void* self, void* dim, void* index, void* value) { void* ret = _lantern_scatter_attensor_atdimname_attensor_constatscalar(self, dim, index, value); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_scatter_attensor_atdimname_attensor_constatscalar)(void* self, void* dim, void* index, void* value);
  HOST_API void* lantern_Tensor_scatter_attensor_atdimname_attensor_constatscalar(void* self, void* dim, void* index, void* value) { void* ret = _lantern_Tensor_scatter_attensor_atdimname_attensor_constatscalar(self, dim, index, value); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_scatter__attensor_intt_attensor_attensor_stdstring)(void* self, void* dim, void* index, void* src, void* reduce);
  HOST_API void* lantern_Tensor_scatter__attensor_intt_attensor_attensor_stdstring(void* self, void* dim, void* index, void* src, void* reduce) { void* ret = _lantern_Tensor_scatter__attensor_intt_attensor_attensor_stdstring(self, dim, index, src, reduce); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_scatter__attensor_intt_attensor_constatscalar_stdstring)(void* self, void* dim, void* index, void* value, void* reduce);
  HOST_API void* lantern_Tensor_scatter__attensor_intt_attensor_constatscalar_stdstring(void* self, void* dim, void* index, void* value, void* reduce) { void* ret = _lantern_Tensor_scatter__attensor_intt_attensor_constatscalar_stdstring(self, dim, index, value, reduce); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_scatter_add__attensor_intt_attensor_attensor)(void* self, void* dim, void* index, void* src);
  HOST_API void* lantern_Tensor_scatter_add__attensor_intt_attensor_attensor(void* self, void* dim, void* index, void* src) { void* ret = _lantern_Tensor_scatter_add__attensor_intt_attensor_attensor(self, dim, index, src); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_scatter_add_attensor_intt_attensor_attensor)(void* self, void* dim, void* index, void* src);
  HOST_API void* lantern_scatter_add_attensor_intt_attensor_attensor(void* self, void* dim, void* index, void* src) { void* ret = _lantern_scatter_add_attensor_intt_attensor_attensor(self, dim, index, src); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_scatter_add_attensor_intt_attensor_attensor)(void* self, void* dim, void* index, void* src);
  HOST_API void* lantern_Tensor_scatter_add_attensor_intt_attensor_attensor(void* self, void* dim, void* index, void* src) { void* ret = _lantern_Tensor_scatter_add_attensor_intt_attensor_attensor(self, dim, index, src); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_scatter_add_attensor_atdimname_attensor_attensor)(void* self, void* dim, void* index, void* src);
  HOST_API void* lantern_scatter_add_attensor_atdimname_attensor_attensor(void* self, void* dim, void* index, void* src) { void* ret = _lantern_scatter_add_attensor_atdimname_attensor_attensor(self, dim, index, src); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_scatter_add_attensor_atdimname_attensor_attensor)(void* self, void* dim, void* index, void* src);
  HOST_API void* lantern_Tensor_scatter_add_attensor_atdimname_attensor_attensor(void* self, void* dim, void* index, void* src) { void* ret = _lantern_Tensor_scatter_add_attensor_atdimname_attensor_attensor(self, dim, index, src); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_eq__attensor_constatscalar)(void* self, void* other);
  HOST_API void* lantern_Tensor_eq__attensor_constatscalar(void* self, void* other) { void* ret = _lantern_Tensor_eq__attensor_constatscalar(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_eq__attensor_attensor)(void* self, void* other);
  HOST_API void* lantern_Tensor_eq__attensor_attensor(void* self, void* other) { void* ret = _lantern_Tensor_eq__attensor_attensor(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_bitwise_and_out_attensor_attensor_attensor)(void* out, void* self, void* other);
  HOST_API void* lantern_bitwise_and_out_attensor_attensor_attensor(void* out, void* self, void* other) { void* ret = _lantern_bitwise_and_out_attensor_attensor_attensor(out, self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_bitwise_and_out_attensor_attensor_constatscalar)(void* out, void* self, void* other);
  HOST_API void* lantern_bitwise_and_out_attensor_attensor_constatscalar(void* out, void* self, void* other) { void* ret = _lantern_bitwise_and_out_attensor_attensor_constatscalar(out, self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_bitwise_and_attensor_constatscalar)(void* self, void* other);
  HOST_API void* lantern_bitwise_and_attensor_constatscalar(void* self, void* other) { void* ret = _lantern_bitwise_and_attensor_constatscalar(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_bitwise_and_attensor_constatscalar)(void* self, void* other);
  HOST_API void* lantern_Tensor_bitwise_and_attensor_constatscalar(void* self, void* other) { void* ret = _lantern_Tensor_bitwise_and_attensor_constatscalar(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_bitwise_and_attensor_attensor)(void* self, void* other);
  HOST_API void* lantern_bitwise_and_attensor_attensor(void* self, void* other) { void* ret = _lantern_bitwise_and_attensor_attensor(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_bitwise_and_attensor_attensor)(void* self, void* other);
  HOST_API void* lantern_Tensor_bitwise_and_attensor_attensor(void* self, void* other) { void* ret = _lantern_Tensor_bitwise_and_attensor_attensor(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_bitwise_and__attensor_constatscalar)(void* self, void* other);
  HOST_API void* lantern_Tensor_bitwise_and__attensor_constatscalar(void* self, void* other) { void* ret = _lantern_Tensor_bitwise_and__attensor_constatscalar(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_bitwise_and__attensor_attensor)(void* self, void* other);
  HOST_API void* lantern_Tensor_bitwise_and__attensor_attensor(void* self, void* other) { void* ret = _lantern_Tensor_bitwise_and__attensor_attensor(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern___and___attensor_constatscalar)(void* self, void* other);
  HOST_API void* lantern___and___attensor_constatscalar(void* self, void* other) { void* ret = _lantern___and___attensor_constatscalar(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor___and___attensor_constatscalar)(void* self, void* other);
  HOST_API void* lantern_Tensor___and___attensor_constatscalar(void* self, void* other) { void* ret = _lantern_Tensor___and___attensor_constatscalar(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern___and___attensor_attensor)(void* self, void* other);
  HOST_API void* lantern___and___attensor_attensor(void* self, void* other) { void* ret = _lantern___and___attensor_attensor(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor___and___attensor_attensor)(void* self, void* other);
  HOST_API void* lantern_Tensor___and___attensor_attensor(void* self, void* other) { void* ret = _lantern_Tensor___and___attensor_attensor(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor___iand___attensor_constatscalar)(void* self, void* other);
  HOST_API void* lantern_Tensor___iand___attensor_constatscalar(void* self, void* other) { void* ret = _lantern_Tensor___iand___attensor_constatscalar(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor___iand___attensor_attensor)(void* self, void* other);
  HOST_API void* lantern_Tensor___iand___attensor_attensor(void* self, void* other) { void* ret = _lantern_Tensor___iand___attensor_attensor(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_bitwise_or_out_attensor_attensor_attensor)(void* out, void* self, void* other);
  HOST_API void* lantern_bitwise_or_out_attensor_attensor_attensor(void* out, void* self, void* other) { void* ret = _lantern_bitwise_or_out_attensor_attensor_attensor(out, self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_bitwise_or_out_attensor_attensor_constatscalar)(void* out, void* self, void* other);
  HOST_API void* lantern_bitwise_or_out_attensor_attensor_constatscalar(void* out, void* self, void* other) { void* ret = _lantern_bitwise_or_out_attensor_attensor_constatscalar(out, self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_bitwise_or_attensor_constatscalar)(void* self, void* other);
  HOST_API void* lantern_bitwise_or_attensor_constatscalar(void* self, void* other) { void* ret = _lantern_bitwise_or_attensor_constatscalar(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_bitwise_or_attensor_constatscalar)(void* self, void* other);
  HOST_API void* lantern_Tensor_bitwise_or_attensor_constatscalar(void* self, void* other) { void* ret = _lantern_Tensor_bitwise_or_attensor_constatscalar(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_bitwise_or_attensor_attensor)(void* self, void* other);
  HOST_API void* lantern_bitwise_or_attensor_attensor(void* self, void* other) { void* ret = _lantern_bitwise_or_attensor_attensor(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_bitwise_or_attensor_attensor)(void* self, void* other);
  HOST_API void* lantern_Tensor_bitwise_or_attensor_attensor(void* self, void* other) { void* ret = _lantern_Tensor_bitwise_or_attensor_attensor(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_bitwise_or__attensor_constatscalar)(void* self, void* other);
  HOST_API void* lantern_Tensor_bitwise_or__attensor_constatscalar(void* self, void* other) { void* ret = _lantern_Tensor_bitwise_or__attensor_constatscalar(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_bitwise_or__attensor_attensor)(void* self, void* other);
  HOST_API void* lantern_Tensor_bitwise_or__attensor_attensor(void* self, void* other) { void* ret = _lantern_Tensor_bitwise_or__attensor_attensor(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern___or___attensor_constatscalar)(void* self, void* other);
  HOST_API void* lantern___or___attensor_constatscalar(void* self, void* other) { void* ret = _lantern___or___attensor_constatscalar(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor___or___attensor_constatscalar)(void* self, void* other);
  HOST_API void* lantern_Tensor___or___attensor_constatscalar(void* self, void* other) { void* ret = _lantern_Tensor___or___attensor_constatscalar(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern___or___attensor_attensor)(void* self, void* other);
  HOST_API void* lantern___or___attensor_attensor(void* self, void* other) { void* ret = _lantern___or___attensor_attensor(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor___or___attensor_attensor)(void* self, void* other);
  HOST_API void* lantern_Tensor___or___attensor_attensor(void* self, void* other) { void* ret = _lantern_Tensor___or___attensor_attensor(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor___ior___attensor_constatscalar)(void* self, void* other);
  HOST_API void* lantern_Tensor___ior___attensor_constatscalar(void* self, void* other) { void* ret = _lantern_Tensor___ior___attensor_constatscalar(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor___ior___attensor_attensor)(void* self, void* other);
  HOST_API void* lantern_Tensor___ior___attensor_attensor(void* self, void* other) { void* ret = _lantern_Tensor___ior___attensor_attensor(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_bitwise_xor_out_attensor_attensor_attensor)(void* out, void* self, void* other);
  HOST_API void* lantern_bitwise_xor_out_attensor_attensor_attensor(void* out, void* self, void* other) { void* ret = _lantern_bitwise_xor_out_attensor_attensor_attensor(out, self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_bitwise_xor_out_attensor_attensor_constatscalar)(void* out, void* self, void* other);
  HOST_API void* lantern_bitwise_xor_out_attensor_attensor_constatscalar(void* out, void* self, void* other) { void* ret = _lantern_bitwise_xor_out_attensor_attensor_constatscalar(out, self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_bitwise_xor_attensor_constatscalar)(void* self, void* other);
  HOST_API void* lantern_bitwise_xor_attensor_constatscalar(void* self, void* other) { void* ret = _lantern_bitwise_xor_attensor_constatscalar(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_bitwise_xor_attensor_constatscalar)(void* self, void* other);
  HOST_API void* lantern_Tensor_bitwise_xor_attensor_constatscalar(void* self, void* other) { void* ret = _lantern_Tensor_bitwise_xor_attensor_constatscalar(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_bitwise_xor_attensor_attensor)(void* self, void* other);
  HOST_API void* lantern_bitwise_xor_attensor_attensor(void* self, void* other) { void* ret = _lantern_bitwise_xor_attensor_attensor(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_bitwise_xor_attensor_attensor)(void* self, void* other);
  HOST_API void* lantern_Tensor_bitwise_xor_attensor_attensor(void* self, void* other) { void* ret = _lantern_Tensor_bitwise_xor_attensor_attensor(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_bitwise_xor__attensor_constatscalar)(void* self, void* other);
  HOST_API void* lantern_Tensor_bitwise_xor__attensor_constatscalar(void* self, void* other) { void* ret = _lantern_Tensor_bitwise_xor__attensor_constatscalar(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_bitwise_xor__attensor_attensor)(void* self, void* other);
  HOST_API void* lantern_Tensor_bitwise_xor__attensor_attensor(void* self, void* other) { void* ret = _lantern_Tensor_bitwise_xor__attensor_attensor(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern___xor___attensor_constatscalar)(void* self, void* other);
  HOST_API void* lantern___xor___attensor_constatscalar(void* self, void* other) { void* ret = _lantern___xor___attensor_constatscalar(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor___xor___attensor_constatscalar)(void* self, void* other);
  HOST_API void* lantern_Tensor___xor___attensor_constatscalar(void* self, void* other) { void* ret = _lantern_Tensor___xor___attensor_constatscalar(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern___xor___attensor_attensor)(void* self, void* other);
  HOST_API void* lantern___xor___attensor_attensor(void* self, void* other) { void* ret = _lantern___xor___attensor_attensor(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor___xor___attensor_attensor)(void* self, void* other);
  HOST_API void* lantern_Tensor___xor___attensor_attensor(void* self, void* other) { void* ret = _lantern_Tensor___xor___attensor_attensor(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor___ixor___attensor_constatscalar)(void* self, void* other);
  HOST_API void* lantern_Tensor___ixor___attensor_constatscalar(void* self, void* other) { void* ret = _lantern_Tensor___ixor___attensor_constatscalar(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor___ixor___attensor_attensor)(void* self, void* other);
  HOST_API void* lantern_Tensor___ixor___attensor_attensor(void* self, void* other) { void* ret = _lantern_Tensor___ixor___attensor_attensor(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern___lshift___attensor_constatscalar)(void* self, void* other);
  HOST_API void* lantern___lshift___attensor_constatscalar(void* self, void* other) { void* ret = _lantern___lshift___attensor_constatscalar(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor___lshift___attensor_constatscalar)(void* self, void* other);
  HOST_API void* lantern_Tensor___lshift___attensor_constatscalar(void* self, void* other) { void* ret = _lantern_Tensor___lshift___attensor_constatscalar(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern___lshift___attensor_attensor)(void* self, void* other);
  HOST_API void* lantern___lshift___attensor_attensor(void* self, void* other) { void* ret = _lantern___lshift___attensor_attensor(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor___lshift___attensor_attensor)(void* self, void* other);
  HOST_API void* lantern_Tensor___lshift___attensor_attensor(void* self, void* other) { void* ret = _lantern_Tensor___lshift___attensor_attensor(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor___ilshift___attensor_constatscalar)(void* self, void* other);
  HOST_API void* lantern_Tensor___ilshift___attensor_constatscalar(void* self, void* other) { void* ret = _lantern_Tensor___ilshift___attensor_constatscalar(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor___ilshift___attensor_attensor)(void* self, void* other);
  HOST_API void* lantern_Tensor___ilshift___attensor_attensor(void* self, void* other) { void* ret = _lantern_Tensor___ilshift___attensor_attensor(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern___rshift___attensor_constatscalar)(void* self, void* other);
  HOST_API void* lantern___rshift___attensor_constatscalar(void* self, void* other) { void* ret = _lantern___rshift___attensor_constatscalar(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor___rshift___attensor_constatscalar)(void* self, void* other);
  HOST_API void* lantern_Tensor___rshift___attensor_constatscalar(void* self, void* other) { void* ret = _lantern_Tensor___rshift___attensor_constatscalar(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern___rshift___attensor_attensor)(void* self, void* other);
  HOST_API void* lantern___rshift___attensor_attensor(void* self, void* other) { void* ret = _lantern___rshift___attensor_attensor(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor___rshift___attensor_attensor)(void* self, void* other);
  HOST_API void* lantern_Tensor___rshift___attensor_attensor(void* self, void* other) { void* ret = _lantern_Tensor___rshift___attensor_attensor(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor___irshift___attensor_constatscalar)(void* self, void* other);
  HOST_API void* lantern_Tensor___irshift___attensor_constatscalar(void* self, void* other) { void* ret = _lantern_Tensor___irshift___attensor_constatscalar(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor___irshift___attensor_attensor)(void* self, void* other);
  HOST_API void* lantern_Tensor___irshift___attensor_attensor(void* self, void* other) { void* ret = _lantern_Tensor___irshift___attensor_attensor(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_tril__attensor_intt)(void* self, void* diagonal);
  HOST_API void* lantern_Tensor_tril__attensor_intt(void* self, void* diagonal) { void* ret = _lantern_Tensor_tril__attensor_intt(self, diagonal); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_triu__attensor_intt)(void* self, void* diagonal);
  HOST_API void* lantern_Tensor_triu__attensor_intt(void* self, void* diagonal) { void* ret = _lantern_Tensor_triu__attensor_intt(self, diagonal); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_digamma__attensor)(void* self);
  HOST_API void* lantern_Tensor_digamma__attensor(void* self) { void* ret = _lantern_Tensor_digamma__attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_renorm__attensor_constatscalar_intt_constatscalar)(void* self, void* p, void* dim, void* maxnorm);
  HOST_API void* lantern_Tensor_renorm__attensor_constatscalar_intt_constatscalar(void* self, void* p, void* dim, void* maxnorm) { void* ret = _lantern_Tensor_renorm__attensor_constatscalar_intt_constatscalar(self, p, dim, maxnorm); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_lerp__attensor_attensor_constatscalar)(void* self, void* end, void* weight);
  HOST_API void* lantern_Tensor_lerp__attensor_attensor_constatscalar(void* self, void* end, void* weight) { void* ret = _lantern_Tensor_lerp__attensor_attensor_constatscalar(self, end, weight); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_lerp__attensor_attensor_attensor)(void* self, void* end, void* weight);
  HOST_API void* lantern_Tensor_lerp__attensor_attensor_attensor(void* self, void* end, void* weight) { void* ret = _lantern_Tensor_lerp__attensor_attensor_attensor(self, end, weight); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_fmod__attensor_constatscalar)(void* self, void* other);
  HOST_API void* lantern_Tensor_fmod__attensor_constatscalar(void* self, void* other) { void* ret = _lantern_Tensor_fmod__attensor_constatscalar(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_fmod__attensor_attensor)(void* self, void* other);
  HOST_API void* lantern_Tensor_fmod__attensor_attensor(void* self, void* other) { void* ret = _lantern_Tensor_fmod__attensor_attensor(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_remainder__attensor_constatscalar)(void* self, void* other);
  HOST_API void* lantern_Tensor_remainder__attensor_constatscalar(void* self, void* other) { void* ret = _lantern_Tensor_remainder__attensor_constatscalar(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_remainder__attensor_attensor)(void* self, void* other);
  HOST_API void* lantern_Tensor_remainder__attensor_attensor(void* self, void* other) { void* ret = _lantern_Tensor_remainder__attensor_attensor(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_addbmm__attensor_attensor_attensor_constatscalar_constatscalar)(void* self, void* batch1, void* batch2, void* beta, void* alpha);
  HOST_API void* lantern_Tensor_addbmm__attensor_attensor_attensor_constatscalar_constatscalar(void* self, void* batch1, void* batch2, void* beta, void* alpha) { void* ret = _lantern_Tensor_addbmm__attensor_attensor_attensor_constatscalar_constatscalar(self, batch1, batch2, beta, alpha); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_addbmm_out_attensor_attensor_attensor_attensor_constatscalar_constatscalar)(void* out, void* self, void* batch1, void* batch2, void* beta, void* alpha);
  HOST_API void* lantern_addbmm_out_attensor_attensor_attensor_attensor_constatscalar_constatscalar(void* out, void* self, void* batch1, void* batch2, void* beta, void* alpha) { void* ret = _lantern_addbmm_out_attensor_attensor_attensor_attensor_constatscalar_constatscalar(out, self, batch1, batch2, beta, alpha); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_addbmm_attensor_attensor_attensor_constatscalar_constatscalar)(void* self, void* batch1, void* batch2, void* beta, void* alpha);
  HOST_API void* lantern_addbmm_attensor_attensor_attensor_constatscalar_constatscalar(void* self, void* batch1, void* batch2, void* beta, void* alpha) { void* ret = _lantern_addbmm_attensor_attensor_attensor_constatscalar_constatscalar(self, batch1, batch2, beta, alpha); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_addbmm_attensor_attensor_attensor_constatscalar_constatscalar)(void* self, void* batch1, void* batch2, void* beta, void* alpha);
  HOST_API void* lantern_Tensor_addbmm_attensor_attensor_attensor_constatscalar_constatscalar(void* self, void* batch1, void* batch2, void* beta, void* alpha) { void* ret = _lantern_Tensor_addbmm_attensor_attensor_attensor_constatscalar_constatscalar(self, batch1, batch2, beta, alpha); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_addcdiv__attensor_attensor_attensor_constatscalar)(void* self, void* tensor1, void* tensor2, void* value);
  HOST_API void* lantern_Tensor_addcdiv__attensor_attensor_attensor_constatscalar(void* self, void* tensor1, void* tensor2, void* value) { void* ret = _lantern_Tensor_addcdiv__attensor_attensor_attensor_constatscalar(self, tensor1, tensor2, value); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_random__attensor_intt_intt_atgenerator)(void* self, void* from, void* to, void* generator);
  HOST_API void* lantern_Tensor_random__attensor_intt_intt_atgenerator(void* self, void* from, void* to, void* generator) { void* ret = _lantern_Tensor_random__attensor_intt_intt_atgenerator(self, from, to, generator); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_random__attensor_intt_atgenerator)(void* self, void* to, void* generator);
  HOST_API void* lantern_Tensor_random__attensor_intt_atgenerator(void* self, void* to, void* generator) { void* ret = _lantern_Tensor_random__attensor_intt_atgenerator(self, to, generator); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_random__attensor_atgenerator)(void* self, void* generator);
  HOST_API void* lantern_Tensor_random__attensor_atgenerator(void* self, void* generator) { void* ret = _lantern_Tensor_random__attensor_atgenerator(self, generator); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_uniform__attensor_double_double_atgenerator)(void* self, void* from, void* to, void* generator);
  HOST_API void* lantern_Tensor_uniform__attensor_double_double_atgenerator(void* self, void* from, void* to, void* generator) { void* ret = _lantern_Tensor_uniform__attensor_double_double_atgenerator(self, from, to, generator); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_cauchy__attensor_double_double_atgenerator)(void* self, void* median, void* sigma, void* generator);
  HOST_API void* lantern_Tensor_cauchy__attensor_double_double_atgenerator(void* self, void* median, void* sigma, void* generator) { void* ret = _lantern_Tensor_cauchy__attensor_double_double_atgenerator(self, median, sigma, generator); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_log_normal__attensor_double_double_atgenerator)(void* self, void* mean, void* std, void* generator);
  HOST_API void* lantern_Tensor_log_normal__attensor_double_double_atgenerator(void* self, void* mean, void* std, void* generator) { void* ret = _lantern_Tensor_log_normal__attensor_double_double_atgenerator(self, mean, std, generator); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_exponential__attensor_double_atgenerator)(void* self, void* lambd, void* generator);
  HOST_API void* lantern_Tensor_exponential__attensor_double_atgenerator(void* self, void* lambd, void* generator) { void* ret = _lantern_Tensor_exponential__attensor_double_atgenerator(self, lambd, generator); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_geometric__attensor_double_atgenerator)(void* self, void* p, void* generator);
  HOST_API void* lantern_Tensor_geometric__attensor_double_atgenerator(void* self, void* p, void* generator) { void* ret = _lantern_Tensor_geometric__attensor_double_atgenerator(self, p, generator); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_diag_out_attensor_attensor_intt)(void* out, void* self, void* diagonal);
  HOST_API void* lantern_diag_out_attensor_attensor_intt(void* out, void* self, void* diagonal) { void* ret = _lantern_diag_out_attensor_attensor_intt(out, self, diagonal); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_diag_attensor_intt)(void* self, void* diagonal);
  HOST_API void* lantern_diag_attensor_intt(void* self, void* diagonal) { void* ret = _lantern_diag_attensor_intt(self, diagonal); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_diag_attensor_intt)(void* self, void* diagonal);
  HOST_API void* lantern_Tensor_diag_attensor_intt(void* self, void* diagonal) { void* ret = _lantern_Tensor_diag_attensor_intt(self, diagonal); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_diag_backward_attensor_atintarrayref_intt)(void* grad, void* input_sizes, void* diagonal);
  HOST_API void* lantern_diag_backward_attensor_atintarrayref_intt(void* grad, void* input_sizes, void* diagonal) { void* ret = _lantern_diag_backward_attensor_atintarrayref_intt(grad, input_sizes, diagonal); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_cross_out_attensor_attensor_attensor_intt)(void* out, void* self, void* other, void* dim);
  HOST_API void* lantern_cross_out_attensor_attensor_attensor_intt(void* out, void* self, void* other, void* dim) { void* ret = _lantern_cross_out_attensor_attensor_attensor_intt(out, self, other, dim); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_cross_attensor_attensor_intt)(void* self, void* other, void* dim);
  HOST_API void* lantern_cross_attensor_attensor_intt(void* self, void* other, void* dim) { void* ret = _lantern_cross_attensor_attensor_intt(self, other, dim); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_cross_attensor_attensor_intt)(void* self, void* other, void* dim);
  HOST_API void* lantern_Tensor_cross_attensor_attensor_intt(void* self, void* other, void* dim) { void* ret = _lantern_Tensor_cross_attensor_attensor_intt(self, other, dim); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_triu_out_attensor_attensor_intt)(void* out, void* self, void* diagonal);
  HOST_API void* lantern_triu_out_attensor_attensor_intt(void* out, void* self, void* diagonal) { void* ret = _lantern_triu_out_attensor_attensor_intt(out, self, diagonal); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_triu_attensor_intt)(void* self, void* diagonal);
  HOST_API void* lantern_triu_attensor_intt(void* self, void* diagonal) { void* ret = _lantern_triu_attensor_intt(self, diagonal); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_triu_attensor_intt)(void* self, void* diagonal);
  HOST_API void* lantern_Tensor_triu_attensor_intt(void* self, void* diagonal) { void* ret = _lantern_Tensor_triu_attensor_intt(self, diagonal); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_tril_out_attensor_attensor_intt)(void* out, void* self, void* diagonal);
  HOST_API void* lantern_tril_out_attensor_attensor_intt(void* out, void* self, void* diagonal) { void* ret = _lantern_tril_out_attensor_attensor_intt(out, self, diagonal); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_tril_attensor_intt)(void* self, void* diagonal);
  HOST_API void* lantern_tril_attensor_intt(void* self, void* diagonal) { void* ret = _lantern_tril_attensor_intt(self, diagonal); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_tril_attensor_intt)(void* self, void* diagonal);
  HOST_API void* lantern_Tensor_tril_attensor_intt(void* self, void* diagonal) { void* ret = _lantern_Tensor_tril_attensor_intt(self, diagonal); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_tril_indices_intt_intt_intt_attensoroptions)(void* row, void* col, void* offset, void* options);
  HOST_API void* lantern_tril_indices_intt_intt_intt_attensoroptions(void* row, void* col, void* offset, void* options) { void* ret = _lantern_tril_indices_intt_intt_intt_attensoroptions(row, col, offset, options); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_triu_indices_intt_intt_intt_attensoroptions)(void* row, void* col, void* offset, void* options);
  HOST_API void* lantern_triu_indices_intt_intt_intt_attensoroptions(void* row, void* col, void* offset, void* options) { void* ret = _lantern_triu_indices_intt_intt_intt_attensoroptions(row, col, offset, options); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_trace_attensor)(void* self);
  HOST_API void* lantern_trace_attensor(void* self) { void* ret = _lantern_trace_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_trace_attensor)(void* self);
  HOST_API void* lantern_Tensor_trace_attensor(void* self) { void* ret = _lantern_Tensor_trace_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_trace_backward_attensor_atintarrayref)(void* grad, void* sizes);
  HOST_API void* lantern_trace_backward_attensor_atintarrayref(void* grad, void* sizes) { void* ret = _lantern_trace_backward_attensor_atintarrayref(grad, sizes); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_ne_out_attensor_attensor_constatscalar)(void* out, void* self, void* other);
  HOST_API void* lantern_ne_out_attensor_attensor_constatscalar(void* out, void* self, void* other) { void* ret = _lantern_ne_out_attensor_attensor_constatscalar(out, self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_ne_attensor_constatscalar)(void* self, void* other);
  HOST_API void* lantern_ne_attensor_constatscalar(void* self, void* other) { void* ret = _lantern_ne_attensor_constatscalar(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_ne_attensor_constatscalar)(void* self, void* other);
  HOST_API void* lantern_Tensor_ne_attensor_constatscalar(void* self, void* other) { void* ret = _lantern_Tensor_ne_attensor_constatscalar(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_ne_out_attensor_attensor_attensor)(void* out, void* self, void* other);
  HOST_API void* lantern_ne_out_attensor_attensor_attensor(void* out, void* self, void* other) { void* ret = _lantern_ne_out_attensor_attensor_attensor(out, self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_ne_attensor_attensor)(void* self, void* other);
  HOST_API void* lantern_ne_attensor_attensor(void* self, void* other) { void* ret = _lantern_ne_attensor_attensor(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_ne_attensor_attensor)(void* self, void* other);
  HOST_API void* lantern_Tensor_ne_attensor_attensor(void* self, void* other) { void* ret = _lantern_Tensor_ne_attensor_attensor(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_ne__attensor_constatscalar)(void* self, void* other);
  HOST_API void* lantern_Tensor_ne__attensor_constatscalar(void* self, void* other) { void* ret = _lantern_Tensor_ne__attensor_constatscalar(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_ne__attensor_attensor)(void* self, void* other);
  HOST_API void* lantern_Tensor_ne__attensor_attensor(void* self, void* other) { void* ret = _lantern_Tensor_ne__attensor_attensor(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_not_equal_out_attensor_attensor_constatscalar)(void* out, void* self, void* other);
  HOST_API void* lantern_not_equal_out_attensor_attensor_constatscalar(void* out, void* self, void* other) { void* ret = _lantern_not_equal_out_attensor_attensor_constatscalar(out, self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_not_equal_attensor_constatscalar)(void* self, void* other);
  HOST_API void* lantern_not_equal_attensor_constatscalar(void* self, void* other) { void* ret = _lantern_not_equal_attensor_constatscalar(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_not_equal_attensor_constatscalar)(void* self, void* other);
  HOST_API void* lantern_Tensor_not_equal_attensor_constatscalar(void* self, void* other) { void* ret = _lantern_Tensor_not_equal_attensor_constatscalar(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_not_equal_out_attensor_attensor_attensor)(void* out, void* self, void* other);
  HOST_API void* lantern_not_equal_out_attensor_attensor_attensor(void* out, void* self, void* other) { void* ret = _lantern_not_equal_out_attensor_attensor_attensor(out, self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_not_equal_attensor_attensor)(void* self, void* other);
  HOST_API void* lantern_not_equal_attensor_attensor(void* self, void* other) { void* ret = _lantern_not_equal_attensor_attensor(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_not_equal_attensor_attensor)(void* self, void* other);
  HOST_API void* lantern_Tensor_not_equal_attensor_attensor(void* self, void* other) { void* ret = _lantern_Tensor_not_equal_attensor_attensor(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_not_equal__attensor_constatscalar)(void* self, void* other);
  HOST_API void* lantern_Tensor_not_equal__attensor_constatscalar(void* self, void* other) { void* ret = _lantern_Tensor_not_equal__attensor_constatscalar(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_not_equal__attensor_attensor)(void* self, void* other);
  HOST_API void* lantern_Tensor_not_equal__attensor_attensor(void* self, void* other) { void* ret = _lantern_Tensor_not_equal__attensor_attensor(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_eq_out_attensor_attensor_constatscalar)(void* out, void* self, void* other);
  HOST_API void* lantern_eq_out_attensor_attensor_constatscalar(void* out, void* self, void* other) { void* ret = _lantern_eq_out_attensor_attensor_constatscalar(out, self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_eq_attensor_constatscalar)(void* self, void* other);
  HOST_API void* lantern_eq_attensor_constatscalar(void* self, void* other) { void* ret = _lantern_eq_attensor_constatscalar(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_eq_attensor_constatscalar)(void* self, void* other);
  HOST_API void* lantern_Tensor_eq_attensor_constatscalar(void* self, void* other) { void* ret = _lantern_Tensor_eq_attensor_constatscalar(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_eq_out_attensor_attensor_attensor)(void* out, void* self, void* other);
  HOST_API void* lantern_eq_out_attensor_attensor_attensor(void* out, void* self, void* other) { void* ret = _lantern_eq_out_attensor_attensor_attensor(out, self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_eq_attensor_attensor)(void* self, void* other);
  HOST_API void* lantern_eq_attensor_attensor(void* self, void* other) { void* ret = _lantern_eq_attensor_attensor(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_eq_attensor_attensor)(void* self, void* other);
  HOST_API void* lantern_Tensor_eq_attensor_attensor(void* self, void* other) { void* ret = _lantern_Tensor_eq_attensor_attensor(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_ge_out_attensor_attensor_constatscalar)(void* out, void* self, void* other);
  HOST_API void* lantern_ge_out_attensor_attensor_constatscalar(void* out, void* self, void* other) { void* ret = _lantern_ge_out_attensor_attensor_constatscalar(out, self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_ge_attensor_constatscalar)(void* self, void* other);
  HOST_API void* lantern_ge_attensor_constatscalar(void* self, void* other) { void* ret = _lantern_ge_attensor_constatscalar(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_ge_attensor_constatscalar)(void* self, void* other);
  HOST_API void* lantern_Tensor_ge_attensor_constatscalar(void* self, void* other) { void* ret = _lantern_Tensor_ge_attensor_constatscalar(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_ge_out_attensor_attensor_attensor)(void* out, void* self, void* other);
  HOST_API void* lantern_ge_out_attensor_attensor_attensor(void* out, void* self, void* other) { void* ret = _lantern_ge_out_attensor_attensor_attensor(out, self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_ge_attensor_attensor)(void* self, void* other);
  HOST_API void* lantern_ge_attensor_attensor(void* self, void* other) { void* ret = _lantern_ge_attensor_attensor(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_ge_attensor_attensor)(void* self, void* other);
  HOST_API void* lantern_Tensor_ge_attensor_attensor(void* self, void* other) { void* ret = _lantern_Tensor_ge_attensor_attensor(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_ge__attensor_constatscalar)(void* self, void* other);
  HOST_API void* lantern_Tensor_ge__attensor_constatscalar(void* self, void* other) { void* ret = _lantern_Tensor_ge__attensor_constatscalar(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_ge__attensor_attensor)(void* self, void* other);
  HOST_API void* lantern_Tensor_ge__attensor_attensor(void* self, void* other) { void* ret = _lantern_Tensor_ge__attensor_attensor(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_greater_equal_out_attensor_attensor_constatscalar)(void* out, void* self, void* other);
  HOST_API void* lantern_greater_equal_out_attensor_attensor_constatscalar(void* out, void* self, void* other) { void* ret = _lantern_greater_equal_out_attensor_attensor_constatscalar(out, self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_greater_equal_attensor_constatscalar)(void* self, void* other);
  HOST_API void* lantern_greater_equal_attensor_constatscalar(void* self, void* other) { void* ret = _lantern_greater_equal_attensor_constatscalar(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_greater_equal_attensor_constatscalar)(void* self, void* other);
  HOST_API void* lantern_Tensor_greater_equal_attensor_constatscalar(void* self, void* other) { void* ret = _lantern_Tensor_greater_equal_attensor_constatscalar(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_greater_equal_out_attensor_attensor_attensor)(void* out, void* self, void* other);
  HOST_API void* lantern_greater_equal_out_attensor_attensor_attensor(void* out, void* self, void* other) { void* ret = _lantern_greater_equal_out_attensor_attensor_attensor(out, self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_greater_equal_attensor_attensor)(void* self, void* other);
  HOST_API void* lantern_greater_equal_attensor_attensor(void* self, void* other) { void* ret = _lantern_greater_equal_attensor_attensor(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_greater_equal_attensor_attensor)(void* self, void* other);
  HOST_API void* lantern_Tensor_greater_equal_attensor_attensor(void* self, void* other) { void* ret = _lantern_Tensor_greater_equal_attensor_attensor(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_greater_equal__attensor_constatscalar)(void* self, void* other);
  HOST_API void* lantern_Tensor_greater_equal__attensor_constatscalar(void* self, void* other) { void* ret = _lantern_Tensor_greater_equal__attensor_constatscalar(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_greater_equal__attensor_attensor)(void* self, void* other);
  HOST_API void* lantern_Tensor_greater_equal__attensor_attensor(void* self, void* other) { void* ret = _lantern_Tensor_greater_equal__attensor_attensor(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_le_out_attensor_attensor_constatscalar)(void* out, void* self, void* other);
  HOST_API void* lantern_le_out_attensor_attensor_constatscalar(void* out, void* self, void* other) { void* ret = _lantern_le_out_attensor_attensor_constatscalar(out, self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_le_attensor_constatscalar)(void* self, void* other);
  HOST_API void* lantern_le_attensor_constatscalar(void* self, void* other) { void* ret = _lantern_le_attensor_constatscalar(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_le_attensor_constatscalar)(void* self, void* other);
  HOST_API void* lantern_Tensor_le_attensor_constatscalar(void* self, void* other) { void* ret = _lantern_Tensor_le_attensor_constatscalar(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_le_out_attensor_attensor_attensor)(void* out, void* self, void* other);
  HOST_API void* lantern_le_out_attensor_attensor_attensor(void* out, void* self, void* other) { void* ret = _lantern_le_out_attensor_attensor_attensor(out, self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_le_attensor_attensor)(void* self, void* other);
  HOST_API void* lantern_le_attensor_attensor(void* self, void* other) { void* ret = _lantern_le_attensor_attensor(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_le_attensor_attensor)(void* self, void* other);
  HOST_API void* lantern_Tensor_le_attensor_attensor(void* self, void* other) { void* ret = _lantern_Tensor_le_attensor_attensor(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_le__attensor_constatscalar)(void* self, void* other);
  HOST_API void* lantern_Tensor_le__attensor_constatscalar(void* self, void* other) { void* ret = _lantern_Tensor_le__attensor_constatscalar(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_le__attensor_attensor)(void* self, void* other);
  HOST_API void* lantern_Tensor_le__attensor_attensor(void* self, void* other) { void* ret = _lantern_Tensor_le__attensor_attensor(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_less_equal_out_attensor_attensor_constatscalar)(void* out, void* self, void* other);
  HOST_API void* lantern_less_equal_out_attensor_attensor_constatscalar(void* out, void* self, void* other) { void* ret = _lantern_less_equal_out_attensor_attensor_constatscalar(out, self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_less_equal_attensor_constatscalar)(void* self, void* other);
  HOST_API void* lantern_less_equal_attensor_constatscalar(void* self, void* other) { void* ret = _lantern_less_equal_attensor_constatscalar(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_less_equal_attensor_constatscalar)(void* self, void* other);
  HOST_API void* lantern_Tensor_less_equal_attensor_constatscalar(void* self, void* other) { void* ret = _lantern_Tensor_less_equal_attensor_constatscalar(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_less_equal_out_attensor_attensor_attensor)(void* out, void* self, void* other);
  HOST_API void* lantern_less_equal_out_attensor_attensor_attensor(void* out, void* self, void* other) { void* ret = _lantern_less_equal_out_attensor_attensor_attensor(out, self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_less_equal_attensor_attensor)(void* self, void* other);
  HOST_API void* lantern_less_equal_attensor_attensor(void* self, void* other) { void* ret = _lantern_less_equal_attensor_attensor(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_less_equal_attensor_attensor)(void* self, void* other);
  HOST_API void* lantern_Tensor_less_equal_attensor_attensor(void* self, void* other) { void* ret = _lantern_Tensor_less_equal_attensor_attensor(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_less_equal__attensor_constatscalar)(void* self, void* other);
  HOST_API void* lantern_Tensor_less_equal__attensor_constatscalar(void* self, void* other) { void* ret = _lantern_Tensor_less_equal__attensor_constatscalar(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_less_equal__attensor_attensor)(void* self, void* other);
  HOST_API void* lantern_Tensor_less_equal__attensor_attensor(void* self, void* other) { void* ret = _lantern_Tensor_less_equal__attensor_attensor(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_gt_out_attensor_attensor_constatscalar)(void* out, void* self, void* other);
  HOST_API void* lantern_gt_out_attensor_attensor_constatscalar(void* out, void* self, void* other) { void* ret = _lantern_gt_out_attensor_attensor_constatscalar(out, self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_gt_attensor_constatscalar)(void* self, void* other);
  HOST_API void* lantern_gt_attensor_constatscalar(void* self, void* other) { void* ret = _lantern_gt_attensor_constatscalar(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_gt_attensor_constatscalar)(void* self, void* other);
  HOST_API void* lantern_Tensor_gt_attensor_constatscalar(void* self, void* other) { void* ret = _lantern_Tensor_gt_attensor_constatscalar(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_gt_out_attensor_attensor_attensor)(void* out, void* self, void* other);
  HOST_API void* lantern_gt_out_attensor_attensor_attensor(void* out, void* self, void* other) { void* ret = _lantern_gt_out_attensor_attensor_attensor(out, self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_gt_attensor_attensor)(void* self, void* other);
  HOST_API void* lantern_gt_attensor_attensor(void* self, void* other) { void* ret = _lantern_gt_attensor_attensor(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_gt_attensor_attensor)(void* self, void* other);
  HOST_API void* lantern_Tensor_gt_attensor_attensor(void* self, void* other) { void* ret = _lantern_Tensor_gt_attensor_attensor(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_gt__attensor_constatscalar)(void* self, void* other);
  HOST_API void* lantern_Tensor_gt__attensor_constatscalar(void* self, void* other) { void* ret = _lantern_Tensor_gt__attensor_constatscalar(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_gt__attensor_attensor)(void* self, void* other);
  HOST_API void* lantern_Tensor_gt__attensor_attensor(void* self, void* other) { void* ret = _lantern_Tensor_gt__attensor_attensor(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_greater_out_attensor_attensor_constatscalar)(void* out, void* self, void* other);
  HOST_API void* lantern_greater_out_attensor_attensor_constatscalar(void* out, void* self, void* other) { void* ret = _lantern_greater_out_attensor_attensor_constatscalar(out, self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_greater_attensor_constatscalar)(void* self, void* other);
  HOST_API void* lantern_greater_attensor_constatscalar(void* self, void* other) { void* ret = _lantern_greater_attensor_constatscalar(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_greater_attensor_constatscalar)(void* self, void* other);
  HOST_API void* lantern_Tensor_greater_attensor_constatscalar(void* self, void* other) { void* ret = _lantern_Tensor_greater_attensor_constatscalar(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_greater_out_attensor_attensor_attensor)(void* out, void* self, void* other);
  HOST_API void* lantern_greater_out_attensor_attensor_attensor(void* out, void* self, void* other) { void* ret = _lantern_greater_out_attensor_attensor_attensor(out, self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_greater_attensor_attensor)(void* self, void* other);
  HOST_API void* lantern_greater_attensor_attensor(void* self, void* other) { void* ret = _lantern_greater_attensor_attensor(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_greater_attensor_attensor)(void* self, void* other);
  HOST_API void* lantern_Tensor_greater_attensor_attensor(void* self, void* other) { void* ret = _lantern_Tensor_greater_attensor_attensor(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_greater__attensor_constatscalar)(void* self, void* other);
  HOST_API void* lantern_Tensor_greater__attensor_constatscalar(void* self, void* other) { void* ret = _lantern_Tensor_greater__attensor_constatscalar(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_greater__attensor_attensor)(void* self, void* other);
  HOST_API void* lantern_Tensor_greater__attensor_attensor(void* self, void* other) { void* ret = _lantern_Tensor_greater__attensor_attensor(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_lt_out_attensor_attensor_constatscalar)(void* out, void* self, void* other);
  HOST_API void* lantern_lt_out_attensor_attensor_constatscalar(void* out, void* self, void* other) { void* ret = _lantern_lt_out_attensor_attensor_constatscalar(out, self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_lt_attensor_constatscalar)(void* self, void* other);
  HOST_API void* lantern_lt_attensor_constatscalar(void* self, void* other) { void* ret = _lantern_lt_attensor_constatscalar(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_lt_attensor_constatscalar)(void* self, void* other);
  HOST_API void* lantern_Tensor_lt_attensor_constatscalar(void* self, void* other) { void* ret = _lantern_Tensor_lt_attensor_constatscalar(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_lt_out_attensor_attensor_attensor)(void* out, void* self, void* other);
  HOST_API void* lantern_lt_out_attensor_attensor_attensor(void* out, void* self, void* other) { void* ret = _lantern_lt_out_attensor_attensor_attensor(out, self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_lt_attensor_attensor)(void* self, void* other);
  HOST_API void* lantern_lt_attensor_attensor(void* self, void* other) { void* ret = _lantern_lt_attensor_attensor(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_lt_attensor_attensor)(void* self, void* other);
  HOST_API void* lantern_Tensor_lt_attensor_attensor(void* self, void* other) { void* ret = _lantern_Tensor_lt_attensor_attensor(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_lt__attensor_constatscalar)(void* self, void* other);
  HOST_API void* lantern_Tensor_lt__attensor_constatscalar(void* self, void* other) { void* ret = _lantern_Tensor_lt__attensor_constatscalar(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_lt__attensor_attensor)(void* self, void* other);
  HOST_API void* lantern_Tensor_lt__attensor_attensor(void* self, void* other) { void* ret = _lantern_Tensor_lt__attensor_attensor(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_less_out_attensor_attensor_constatscalar)(void* out, void* self, void* other);
  HOST_API void* lantern_less_out_attensor_attensor_constatscalar(void* out, void* self, void* other) { void* ret = _lantern_less_out_attensor_attensor_constatscalar(out, self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_less_attensor_constatscalar)(void* self, void* other);
  HOST_API void* lantern_less_attensor_constatscalar(void* self, void* other) { void* ret = _lantern_less_attensor_constatscalar(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_less_attensor_constatscalar)(void* self, void* other);
  HOST_API void* lantern_Tensor_less_attensor_constatscalar(void* self, void* other) { void* ret = _lantern_Tensor_less_attensor_constatscalar(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_less_out_attensor_attensor_attensor)(void* out, void* self, void* other);
  HOST_API void* lantern_less_out_attensor_attensor_attensor(void* out, void* self, void* other) { void* ret = _lantern_less_out_attensor_attensor_attensor(out, self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_less_attensor_attensor)(void* self, void* other);
  HOST_API void* lantern_less_attensor_attensor(void* self, void* other) { void* ret = _lantern_less_attensor_attensor(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_less_attensor_attensor)(void* self, void* other);
  HOST_API void* lantern_Tensor_less_attensor_attensor(void* self, void* other) { void* ret = _lantern_Tensor_less_attensor_attensor(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_less__attensor_constatscalar)(void* self, void* other);
  HOST_API void* lantern_Tensor_less__attensor_constatscalar(void* self, void* other) { void* ret = _lantern_Tensor_less__attensor_constatscalar(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_less__attensor_attensor)(void* self, void* other);
  HOST_API void* lantern_Tensor_less__attensor_attensor(void* self, void* other) { void* ret = _lantern_Tensor_less__attensor_attensor(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_take_out_attensor_attensor_attensor)(void* out, void* self, void* index);
  HOST_API void* lantern_take_out_attensor_attensor_attensor(void* out, void* self, void* index) { void* ret = _lantern_take_out_attensor_attensor_attensor(out, self, index); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_take_attensor_attensor)(void* self, void* index);
  HOST_API void* lantern_take_attensor_attensor(void* self, void* index) { void* ret = _lantern_take_attensor_attensor(self, index); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_take_attensor_attensor)(void* self, void* index);
  HOST_API void* lantern_Tensor_take_attensor_attensor(void* self, void* index) { void* ret = _lantern_Tensor_take_attensor_attensor(self, index); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_take_along_dim_out_attensor_attensor_attensor_intt)(void* out, void* self, void* indices, void* dim);
  HOST_API void* lantern_take_along_dim_out_attensor_attensor_attensor_intt(void* out, void* self, void* indices, void* dim) { void* ret = _lantern_take_along_dim_out_attensor_attensor_attensor_intt(out, self, indices, dim); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_take_along_dim_attensor_attensor_intt)(void* self, void* indices, void* dim);
  HOST_API void* lantern_take_along_dim_attensor_attensor_intt(void* self, void* indices, void* dim) { void* ret = _lantern_take_along_dim_attensor_attensor_intt(self, indices, dim); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_take_along_dim_attensor_attensor_intt)(void* self, void* indices, void* dim);
  HOST_API void* lantern_Tensor_take_along_dim_attensor_attensor_intt(void* self, void* indices, void* dim) { void* ret = _lantern_Tensor_take_along_dim_attensor_attensor_intt(self, indices, dim); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_index_select_out_attensor_attensor_intt_attensor)(void* out, void* self, void* dim, void* index);
  HOST_API void* lantern_index_select_out_attensor_attensor_intt_attensor(void* out, void* self, void* dim, void* index) { void* ret = _lantern_index_select_out_attensor_attensor_intt_attensor(out, self, dim, index); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_index_select_attensor_intt_attensor)(void* self, void* dim, void* index);
  HOST_API void* lantern_index_select_attensor_intt_attensor(void* self, void* dim, void* index) { void* ret = _lantern_index_select_attensor_intt_attensor(self, dim, index); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_index_select_attensor_intt_attensor)(void* self, void* dim, void* index);
  HOST_API void* lantern_Tensor_index_select_attensor_intt_attensor(void* self, void* dim, void* index) { void* ret = _lantern_Tensor_index_select_attensor_intt_attensor(self, dim, index); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_index_select_out_attensor_attensor_atdimname_attensor)(void* out, void* self, void* dim, void* index);
  HOST_API void* lantern_index_select_out_attensor_attensor_atdimname_attensor(void* out, void* self, void* dim, void* index) { void* ret = _lantern_index_select_out_attensor_attensor_atdimname_attensor(out, self, dim, index); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_index_select_attensor_atdimname_attensor)(void* self, void* dim, void* index);
  HOST_API void* lantern_index_select_attensor_atdimname_attensor(void* self, void* dim, void* index) { void* ret = _lantern_index_select_attensor_atdimname_attensor(self, dim, index); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_index_select_attensor_atdimname_attensor)(void* self, void* dim, void* index);
  HOST_API void* lantern_Tensor_index_select_attensor_atdimname_attensor(void* self, void* dim, void* index) { void* ret = _lantern_Tensor_index_select_attensor_atdimname_attensor(self, dim, index); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_index_select_backward_attensor_atintarrayref_intt_attensor)(void* grad, void* self_sizes, void* dim, void* index);
  HOST_API void* lantern_index_select_backward_attensor_atintarrayref_intt_attensor(void* grad, void* self_sizes, void* dim, void* index) { void* ret = _lantern_index_select_backward_attensor_atintarrayref_intt_attensor(grad, self_sizes, dim, index); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_masked_select_out_attensor_attensor_attensor)(void* out, void* self, void* mask);
  HOST_API void* lantern_masked_select_out_attensor_attensor_attensor(void* out, void* self, void* mask) { void* ret = _lantern_masked_select_out_attensor_attensor_attensor(out, self, mask); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_masked_select_attensor_attensor)(void* self, void* mask);
  HOST_API void* lantern_masked_select_attensor_attensor(void* self, void* mask) { void* ret = _lantern_masked_select_attensor_attensor(self, mask); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_masked_select_attensor_attensor)(void* self, void* mask);
  HOST_API void* lantern_Tensor_masked_select_attensor_attensor(void* self, void* mask) { void* ret = _lantern_Tensor_masked_select_attensor_attensor(self, mask); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_masked_select_backward_attensor_attensor_attensor)(void* grad, void* input, void* mask);
  HOST_API void* lantern_masked_select_backward_attensor_attensor_attensor(void* grad, void* input, void* mask) { void* ret = _lantern_masked_select_backward_attensor_attensor_attensor(grad, input, mask); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_nonzero_out_attensor_attensor)(void* out, void* self);
  HOST_API void* lantern_nonzero_out_attensor_attensor(void* out, void* self) { void* ret = _lantern_nonzero_out_attensor_attensor(out, self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_nonzero_attensor)(void* self);
  HOST_API void* lantern_nonzero_attensor(void* self) { void* ret = _lantern_nonzero_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_nonzero_attensor)(void* self);
  HOST_API void* lantern_Tensor_nonzero_attensor(void* self) { void* ret = _lantern_Tensor_nonzero_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_nonzero_numpy_attensor)(void* self);
  HOST_API void* lantern_nonzero_numpy_attensor(void* self) { void* ret = _lantern_nonzero_numpy_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_nonzero_numpy_attensor)(void* self);
  HOST_API void* lantern_Tensor_nonzero_numpy_attensor(void* self) { void* ret = _lantern_Tensor_nonzero_numpy_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_gather_out_attensor_attensor_intt_attensor_bool)(void* out, void* self, void* dim, void* index, void* sparse_grad);
  HOST_API void* lantern_gather_out_attensor_attensor_intt_attensor_bool(void* out, void* self, void* dim, void* index, void* sparse_grad) { void* ret = _lantern_gather_out_attensor_attensor_intt_attensor_bool(out, self, dim, index, sparse_grad); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_gather_attensor_intt_attensor_bool)(void* self, void* dim, void* index, void* sparse_grad);
  HOST_API void* lantern_gather_attensor_intt_attensor_bool(void* self, void* dim, void* index, void* sparse_grad) { void* ret = _lantern_gather_attensor_intt_attensor_bool(self, dim, index, sparse_grad); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_gather_attensor_intt_attensor_bool)(void* self, void* dim, void* index, void* sparse_grad);
  HOST_API void* lantern_Tensor_gather_attensor_intt_attensor_bool(void* self, void* dim, void* index, void* sparse_grad) { void* ret = _lantern_Tensor_gather_attensor_intt_attensor_bool(self, dim, index, sparse_grad); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_gather_backward_attensor_attensor_intt_attensor_bool)(void* grad, void* self, void* dim, void* index, void* sparse_grad);
  HOST_API void* lantern_gather_backward_attensor_attensor_intt_attensor_bool(void* grad, void* self, void* dim, void* index, void* sparse_grad) { void* ret = _lantern_gather_backward_attensor_attensor_intt_attensor_bool(grad, self, dim, index, sparse_grad); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_gather_out_attensor_attensor_atdimname_attensor_bool)(void* out, void* self, void* dim, void* index, void* sparse_grad);
  HOST_API void* lantern_gather_out_attensor_attensor_atdimname_attensor_bool(void* out, void* self, void* dim, void* index, void* sparse_grad) { void* ret = _lantern_gather_out_attensor_attensor_atdimname_attensor_bool(out, self, dim, index, sparse_grad); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_gather_attensor_atdimname_attensor_bool)(void* self, void* dim, void* index, void* sparse_grad);
  HOST_API void* lantern_gather_attensor_atdimname_attensor_bool(void* self, void* dim, void* index, void* sparse_grad) { void* ret = _lantern_gather_attensor_atdimname_attensor_bool(self, dim, index, sparse_grad); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_gather_attensor_atdimname_attensor_bool)(void* self, void* dim, void* index, void* sparse_grad);
  HOST_API void* lantern_Tensor_gather_attensor_atdimname_attensor_bool(void* self, void* dim, void* index, void* sparse_grad) { void* ret = _lantern_Tensor_gather_attensor_atdimname_attensor_bool(self, dim, index, sparse_grad); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__gather_sparse_backward_attensor_intt_attensor_attensor)(void* self, void* dim, void* index, void* grad);
  HOST_API void* lantern__gather_sparse_backward_attensor_intt_attensor_attensor(void* self, void* dim, void* index, void* grad) { void* ret = _lantern__gather_sparse_backward_attensor_intt_attensor_attensor(self, dim, index, grad); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_addcmul_out_attensor_attensor_attensor_attensor_constatscalar)(void* out, void* self, void* tensor1, void* tensor2, void* value);
  HOST_API void* lantern_addcmul_out_attensor_attensor_attensor_attensor_constatscalar(void* out, void* self, void* tensor1, void* tensor2, void* value) { void* ret = _lantern_addcmul_out_attensor_attensor_attensor_attensor_constatscalar(out, self, tensor1, tensor2, value); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_addcmul_attensor_attensor_attensor_constatscalar)(void* self, void* tensor1, void* tensor2, void* value);
  HOST_API void* lantern_addcmul_attensor_attensor_attensor_constatscalar(void* self, void* tensor1, void* tensor2, void* value) { void* ret = _lantern_addcmul_attensor_attensor_attensor_constatscalar(self, tensor1, tensor2, value); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_addcmul_attensor_attensor_attensor_constatscalar)(void* self, void* tensor1, void* tensor2, void* value);
  HOST_API void* lantern_Tensor_addcmul_attensor_attensor_attensor_constatscalar(void* self, void* tensor1, void* tensor2, void* value) { void* ret = _lantern_Tensor_addcmul_attensor_attensor_attensor_constatscalar(self, tensor1, tensor2, value); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_addcmul__attensor_attensor_attensor_constatscalar)(void* self, void* tensor1, void* tensor2, void* value);
  HOST_API void* lantern_Tensor_addcmul__attensor_attensor_attensor_constatscalar(void* self, void* tensor1, void* tensor2, void* value) { void* ret = _lantern_Tensor_addcmul__attensor_attensor_attensor_constatscalar(self, tensor1, tensor2, value); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_addcdiv_out_attensor_attensor_attensor_attensor_constatscalar)(void* out, void* self, void* tensor1, void* tensor2, void* value);
  HOST_API void* lantern_addcdiv_out_attensor_attensor_attensor_attensor_constatscalar(void* out, void* self, void* tensor1, void* tensor2, void* value) { void* ret = _lantern_addcdiv_out_attensor_attensor_attensor_attensor_constatscalar(out, self, tensor1, tensor2, value); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_addcdiv_attensor_attensor_attensor_constatscalar)(void* self, void* tensor1, void* tensor2, void* value);
  HOST_API void* lantern_addcdiv_attensor_attensor_attensor_constatscalar(void* self, void* tensor1, void* tensor2, void* value) { void* ret = _lantern_addcdiv_attensor_attensor_attensor_constatscalar(self, tensor1, tensor2, value); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_addcdiv_attensor_attensor_attensor_constatscalar)(void* self, void* tensor1, void* tensor2, void* value);
  HOST_API void* lantern_Tensor_addcdiv_attensor_attensor_attensor_constatscalar(void* self, void* tensor1, void* tensor2, void* value) { void* ret = _lantern_Tensor_addcdiv_attensor_attensor_attensor_constatscalar(self, tensor1, tensor2, value); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_cross_entropy_loss_attensor_attensor_attensor_intt_intt)(void* self, void* target, void* weight, void* reduction, void* ignore_index);
  HOST_API void* lantern_cross_entropy_loss_attensor_attensor_attensor_intt_intt(void* self, void* target, void* weight, void* reduction, void* ignore_index) { void* ret = _lantern_cross_entropy_loss_attensor_attensor_attensor_intt_intt(self, target, weight, reduction, ignore_index); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_lstsq_out_attensor_attensor_attensor_attensor)(void* X, void* qr, void* self, void* A);
  HOST_API void* lantern_lstsq_out_attensor_attensor_attensor_attensor(void* X, void* qr, void* self, void* A) { void* ret = _lantern_lstsq_out_attensor_attensor_attensor_attensor(X, qr, self, A); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_lstsq_attensor_attensor)(void* self, void* A);
  HOST_API void* lantern_lstsq_attensor_attensor(void* self, void* A) { void* ret = _lantern_lstsq_attensor_attensor(self, A); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_lstsq_attensor_attensor)(void* self, void* A);
  HOST_API void* lantern_Tensor_lstsq_attensor_attensor(void* self, void* A) { void* ret = _lantern_Tensor_lstsq_attensor_attensor(self, A); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_triangular_solve_out_attensor_attensor_attensor_attensor_bool_bool_bool)(void* X, void* M, void* self, void* A, void* upper, void* transpose, void* unitriangular);
  HOST_API void* lantern_triangular_solve_out_attensor_attensor_attensor_attensor_bool_bool_bool(void* X, void* M, void* self, void* A, void* upper, void* transpose, void* unitriangular) { void* ret = _lantern_triangular_solve_out_attensor_attensor_attensor_attensor_bool_bool_bool(X, M, self, A, upper, transpose, unitriangular); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_triangular_solve_attensor_attensor_bool_bool_bool)(void* self, void* A, void* upper, void* transpose, void* unitriangular);
  HOST_API void* lantern_triangular_solve_attensor_attensor_bool_bool_bool(void* self, void* A, void* upper, void* transpose, void* unitriangular) { void* ret = _lantern_triangular_solve_attensor_attensor_bool_bool_bool(self, A, upper, transpose, unitriangular); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_triangular_solve_attensor_attensor_bool_bool_bool)(void* self, void* A, void* upper, void* transpose, void* unitriangular);
  HOST_API void* lantern_Tensor_triangular_solve_attensor_attensor_bool_bool_bool(void* self, void* A, void* upper, void* transpose, void* unitriangular) { void* ret = _lantern_Tensor_triangular_solve_attensor_attensor_bool_bool_bool(self, A, upper, transpose, unitriangular); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_symeig_out_attensor_attensor_attensor_bool_bool)(void* e, void* V, void* self, void* eigenvectors, void* upper);
  HOST_API void* lantern_symeig_out_attensor_attensor_attensor_bool_bool(void* e, void* V, void* self, void* eigenvectors, void* upper) { void* ret = _lantern_symeig_out_attensor_attensor_attensor_bool_bool(e, V, self, eigenvectors, upper); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_symeig_attensor_bool_bool)(void* self, void* eigenvectors, void* upper);
  HOST_API void* lantern_symeig_attensor_bool_bool(void* self, void* eigenvectors, void* upper) { void* ret = _lantern_symeig_attensor_bool_bool(self, eigenvectors, upper); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_symeig_attensor_bool_bool)(void* self, void* eigenvectors, void* upper);
  HOST_API void* lantern_Tensor_symeig_attensor_bool_bool(void* self, void* eigenvectors, void* upper) { void* ret = _lantern_Tensor_symeig_attensor_bool_bool(self, eigenvectors, upper); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__symeig_helper_attensor_bool_bool)(void* self, void* eigenvectors, void* upper);
  HOST_API void* lantern__symeig_helper_attensor_bool_bool(void* self, void* eigenvectors, void* upper) { void* ret = _lantern__symeig_helper_attensor_bool_bool(self, eigenvectors, upper); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_eig_out_attensor_attensor_attensor_bool)(void* e, void* v, void* self, void* eigenvectors);
  HOST_API void* lantern_eig_out_attensor_attensor_attensor_bool(void* e, void* v, void* self, void* eigenvectors) { void* ret = _lantern_eig_out_attensor_attensor_attensor_bool(e, v, self, eigenvectors); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_eig_attensor_bool)(void* self, void* eigenvectors);
  HOST_API void* lantern_eig_attensor_bool(void* self, void* eigenvectors) { void* ret = _lantern_eig_attensor_bool(self, eigenvectors); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_eig_attensor_bool)(void* self, void* eigenvectors);
  HOST_API void* lantern_Tensor_eig_attensor_bool(void* self, void* eigenvectors) { void* ret = _lantern_Tensor_eig_attensor_bool(self, eigenvectors); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_svd_out_attensor_attensor_attensor_attensor_bool_bool)(void* U, void* S, void* V, void* self, void* some, void* compute_uv);
  HOST_API void* lantern_svd_out_attensor_attensor_attensor_attensor_bool_bool(void* U, void* S, void* V, void* self, void* some, void* compute_uv) { void* ret = _lantern_svd_out_attensor_attensor_attensor_attensor_bool_bool(U, S, V, self, some, compute_uv); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_svd_attensor_bool_bool)(void* self, void* some, void* compute_uv);
  HOST_API void* lantern_svd_attensor_bool_bool(void* self, void* some, void* compute_uv) { void* ret = _lantern_svd_attensor_bool_bool(self, some, compute_uv); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_svd_attensor_bool_bool)(void* self, void* some, void* compute_uv);
  HOST_API void* lantern_Tensor_svd_attensor_bool_bool(void* self, void* some, void* compute_uv) { void* ret = _lantern_Tensor_svd_attensor_bool_bool(self, some, compute_uv); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__svd_helper_attensor_bool_bool)(void* self, void* some, void* compute_uv);
  HOST_API void* lantern__svd_helper_attensor_bool_bool(void* self, void* some, void* compute_uv) { void* ret = _lantern__svd_helper_attensor_bool_bool(self, some, compute_uv); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_swapaxes_attensor_intt_intt)(void* self, void* axis0, void* axis1);
  HOST_API void* lantern_swapaxes_attensor_intt_intt(void* self, void* axis0, void* axis1) { void* ret = _lantern_swapaxes_attensor_intt_intt(self, axis0, axis1); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_swapaxes_attensor_intt_intt)(void* self, void* axis0, void* axis1);
  HOST_API void* lantern_Tensor_swapaxes_attensor_intt_intt(void* self, void* axis0, void* axis1) { void* ret = _lantern_Tensor_swapaxes_attensor_intt_intt(self, axis0, axis1); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_swapaxes__attensor_intt_intt)(void* self, void* axis0, void* axis1);
  HOST_API void* lantern_Tensor_swapaxes__attensor_intt_intt(void* self, void* axis0, void* axis1) { void* ret = _lantern_Tensor_swapaxes__attensor_intt_intt(self, axis0, axis1); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_swapdims_attensor_intt_intt)(void* self, void* dim0, void* dim1);
  HOST_API void* lantern_swapdims_attensor_intt_intt(void* self, void* dim0, void* dim1) { void* ret = _lantern_swapdims_attensor_intt_intt(self, dim0, dim1); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_swapdims_attensor_intt_intt)(void* self, void* dim0, void* dim1);
  HOST_API void* lantern_Tensor_swapdims_attensor_intt_intt(void* self, void* dim0, void* dim1) { void* ret = _lantern_Tensor_swapdims_attensor_intt_intt(self, dim0, dim1); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_swapdims__attensor_intt_intt)(void* self, void* dim0, void* dim1);
  HOST_API void* lantern_Tensor_swapdims__attensor_intt_intt(void* self, void* dim0, void* dim1) { void* ret = _lantern_Tensor_swapdims__attensor_intt_intt(self, dim0, dim1); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_cholesky_out_attensor_attensor_bool)(void* out, void* self, void* upper);
  HOST_API void* lantern_cholesky_out_attensor_attensor_bool(void* out, void* self, void* upper) { void* ret = _lantern_cholesky_out_attensor_attensor_bool(out, self, upper); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_cholesky_attensor_bool)(void* self, void* upper);
  HOST_API void* lantern_cholesky_attensor_bool(void* self, void* upper) { void* ret = _lantern_cholesky_attensor_bool(self, upper); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_cholesky_attensor_bool)(void* self, void* upper);
  HOST_API void* lantern_Tensor_cholesky_attensor_bool(void* self, void* upper) { void* ret = _lantern_Tensor_cholesky_attensor_bool(self, upper); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_cholesky_solve_out_attensor_attensor_attensor_bool)(void* out, void* self, void* input2, void* upper);
  HOST_API void* lantern_cholesky_solve_out_attensor_attensor_attensor_bool(void* out, void* self, void* input2, void* upper) { void* ret = _lantern_cholesky_solve_out_attensor_attensor_attensor_bool(out, self, input2, upper); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_cholesky_solve_attensor_attensor_bool)(void* self, void* input2, void* upper);
  HOST_API void* lantern_cholesky_solve_attensor_attensor_bool(void* self, void* input2, void* upper) { void* ret = _lantern_cholesky_solve_attensor_attensor_bool(self, input2, upper); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_cholesky_solve_attensor_attensor_bool)(void* self, void* input2, void* upper);
  HOST_API void* lantern_Tensor_cholesky_solve_attensor_attensor_bool(void* self, void* input2, void* upper) { void* ret = _lantern_Tensor_cholesky_solve_attensor_attensor_bool(self, input2, upper); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__cholesky_solve_helper_attensor_attensor_bool)(void* self, void* A, void* upper);
  HOST_API void* lantern__cholesky_solve_helper_attensor_attensor_bool(void* self, void* A, void* upper) { void* ret = _lantern__cholesky_solve_helper_attensor_attensor_bool(self, A, upper); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_solve_attensor_attensor)(void* self, void* A);
  HOST_API void* lantern_solve_attensor_attensor(void* self, void* A) { void* ret = _lantern_solve_attensor_attensor(self, A); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_solve_attensor_attensor)(void* self, void* A);
  HOST_API void* lantern_Tensor_solve_attensor_attensor(void* self, void* A) { void* ret = _lantern_Tensor_solve_attensor_attensor(self, A); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_solve_out_attensor_attensor_attensor_attensor)(void* solution, void* lu, void* self, void* A);
  HOST_API void* lantern_solve_out_attensor_attensor_attensor_attensor(void* solution, void* lu, void* self, void* A) { void* ret = _lantern_solve_out_attensor_attensor_attensor_attensor(solution, lu, self, A); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__solve_helper_attensor_attensor)(void* self, void* A);
  HOST_API void* lantern__solve_helper_attensor_attensor(void* self, void* A) { void* ret = _lantern__solve_helper_attensor_attensor(self, A); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_cholesky_inverse_attensor_bool)(void* self, void* upper);
  HOST_API void* lantern_cholesky_inverse_attensor_bool(void* self, void* upper) { void* ret = _lantern_cholesky_inverse_attensor_bool(self, upper); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_cholesky_inverse_attensor_bool)(void* self, void* upper);
  HOST_API void* lantern_Tensor_cholesky_inverse_attensor_bool(void* self, void* upper) { void* ret = _lantern_Tensor_cholesky_inverse_attensor_bool(self, upper); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_cholesky_inverse_out_attensor_attensor_bool)(void* out, void* self, void* upper);
  HOST_API void* lantern_cholesky_inverse_out_attensor_attensor_bool(void* out, void* self, void* upper) { void* ret = _lantern_cholesky_inverse_out_attensor_attensor_bool(out, self, upper); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_qr_out_attensor_attensor_attensor_bool)(void* Q, void* R, void* self, void* some);
  HOST_API void* lantern_qr_out_attensor_attensor_attensor_bool(void* Q, void* R, void* self, void* some) { void* ret = _lantern_qr_out_attensor_attensor_attensor_bool(Q, R, self, some); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_qr_attensor_bool)(void* self, void* some);
  HOST_API void* lantern_qr_attensor_bool(void* self, void* some) { void* ret = _lantern_qr_attensor_bool(self, some); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_qr_attensor_bool)(void* self, void* some);
  HOST_API void* lantern_Tensor_qr_attensor_bool(void* self, void* some) { void* ret = _lantern_Tensor_qr_attensor_bool(self, some); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_geqrf_out_attensor_attensor_attensor)(void* a, void* tau, void* self);
  HOST_API void* lantern_geqrf_out_attensor_attensor_attensor(void* a, void* tau, void* self) { void* ret = _lantern_geqrf_out_attensor_attensor_attensor(a, tau, self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_geqrf_attensor)(void* self);
  HOST_API void* lantern_geqrf_attensor(void* self) { void* ret = _lantern_geqrf_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_geqrf_attensor)(void* self);
  HOST_API void* lantern_Tensor_geqrf_attensor(void* self) { void* ret = _lantern_Tensor_geqrf_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_orgqr_attensor_attensor)(void* self, void* input2);
  HOST_API void* lantern_orgqr_attensor_attensor(void* self, void* input2) { void* ret = _lantern_orgqr_attensor_attensor(self, input2); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_orgqr_attensor_attensor)(void* self, void* input2);
  HOST_API void* lantern_Tensor_orgqr_attensor_attensor(void* self, void* input2) { void* ret = _lantern_Tensor_orgqr_attensor_attensor(self, input2); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_orgqr_out_attensor_attensor_attensor)(void* out, void* self, void* input2);
  HOST_API void* lantern_orgqr_out_attensor_attensor_attensor(void* out, void* self, void* input2) { void* ret = _lantern_orgqr_out_attensor_attensor_attensor(out, self, input2); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_ormqr_out_attensor_attensor_attensor_attensor_bool_bool)(void* out, void* self, void* input2, void* input3, void* left, void* transpose);
  HOST_API void* lantern_ormqr_out_attensor_attensor_attensor_attensor_bool_bool(void* out, void* self, void* input2, void* input3, void* left, void* transpose) { void* ret = _lantern_ormqr_out_attensor_attensor_attensor_attensor_bool_bool(out, self, input2, input3, left, transpose); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_ormqr_attensor_attensor_attensor_bool_bool)(void* self, void* input2, void* input3, void* left, void* transpose);
  HOST_API void* lantern_ormqr_attensor_attensor_attensor_bool_bool(void* self, void* input2, void* input3, void* left, void* transpose) { void* ret = _lantern_ormqr_attensor_attensor_attensor_bool_bool(self, input2, input3, left, transpose); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_ormqr_attensor_attensor_attensor_bool_bool)(void* self, void* input2, void* input3, void* left, void* transpose);
  HOST_API void* lantern_Tensor_ormqr_attensor_attensor_attensor_bool_bool(void* self, void* input2, void* input3, void* left, void* transpose) { void* ret = _lantern_Tensor_ormqr_attensor_attensor_attensor_bool_bool(self, input2, input3, left, transpose); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__lu_with_info_attensor_bool_bool)(void* self, void* pivot, void* check_errors);
  HOST_API void* lantern__lu_with_info_attensor_bool_bool(void* self, void* pivot, void* check_errors) { void* ret = _lantern__lu_with_info_attensor_bool_bool(self, pivot, check_errors); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_lu_solve_out_attensor_attensor_attensor_attensor)(void* out, void* self, void* LU_data, void* LU_pivots);
  HOST_API void* lantern_lu_solve_out_attensor_attensor_attensor_attensor(void* out, void* self, void* LU_data, void* LU_pivots) { void* ret = _lantern_lu_solve_out_attensor_attensor_attensor_attensor(out, self, LU_data, LU_pivots); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_lu_solve_attensor_attensor_attensor)(void* self, void* LU_data, void* LU_pivots);
  HOST_API void* lantern_lu_solve_attensor_attensor_attensor(void* self, void* LU_data, void* LU_pivots) { void* ret = _lantern_lu_solve_attensor_attensor_attensor(self, LU_data, LU_pivots); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_lu_solve_attensor_attensor_attensor)(void* self, void* LU_data, void* LU_pivots);
  HOST_API void* lantern_Tensor_lu_solve_attensor_attensor_attensor(void* self, void* LU_data, void* LU_pivots) { void* ret = _lantern_Tensor_lu_solve_attensor_attensor_attensor(self, LU_data, LU_pivots); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_lu_unpack_attensor_attensor_bool_bool)(void* LU_data, void* LU_pivots, void* unpack_data, void* unpack_pivots);
  HOST_API void* lantern_lu_unpack_attensor_attensor_bool_bool(void* LU_data, void* LU_pivots, void* unpack_data, void* unpack_pivots) { void* ret = _lantern_lu_unpack_attensor_attensor_bool_bool(LU_data, LU_pivots, unpack_data, unpack_pivots); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_lu_unpack_out_attensor_attensor_attensor_attensor_attensor_bool_bool)(void* P, void* L, void* U, void* LU_data, void* LU_pivots, void* unpack_data, void* unpack_pivots);
  HOST_API void* lantern_lu_unpack_out_attensor_attensor_attensor_attensor_attensor_bool_bool(void* P, void* L, void* U, void* LU_data, void* LU_pivots, void* unpack_data, void* unpack_pivots) { void* ret = _lantern_lu_unpack_out_attensor_attensor_attensor_attensor_attensor_bool_bool(P, L, U, LU_data, LU_pivots, unpack_data, unpack_pivots); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_multinomial_out_attensor_attensor_intt_bool_atgenerator)(void* out, void* self, void* num_samples, void* replacement, void* generator);
  HOST_API void* lantern_multinomial_out_attensor_attensor_intt_bool_atgenerator(void* out, void* self, void* num_samples, void* replacement, void* generator) { void* ret = _lantern_multinomial_out_attensor_attensor_intt_bool_atgenerator(out, self, num_samples, replacement, generator); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_multinomial_attensor_intt_bool_atgenerator)(void* self, void* num_samples, void* replacement, void* generator);
  HOST_API void* lantern_multinomial_attensor_intt_bool_atgenerator(void* self, void* num_samples, void* replacement, void* generator) { void* ret = _lantern_multinomial_attensor_intt_bool_atgenerator(self, num_samples, replacement, generator); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_multinomial_attensor_intt_bool_atgenerator)(void* self, void* num_samples, void* replacement, void* generator);
  HOST_API void* lantern_Tensor_multinomial_attensor_intt_bool_atgenerator(void* self, void* num_samples, void* replacement, void* generator) { void* ret = _lantern_Tensor_multinomial_attensor_intt_bool_atgenerator(self, num_samples, replacement, generator); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_lgamma_out_attensor_attensor)(void* out, void* self);
  HOST_API void* lantern_lgamma_out_attensor_attensor(void* out, void* self) { void* ret = _lantern_lgamma_out_attensor_attensor(out, self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_lgamma__attensor)(void* self);
  HOST_API void* lantern_Tensor_lgamma__attensor(void* self) { void* ret = _lantern_Tensor_lgamma__attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_lgamma_attensor)(void* self);
  HOST_API void* lantern_lgamma_attensor(void* self) { void* ret = _lantern_lgamma_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_lgamma_attensor)(void* self);
  HOST_API void* lantern_Tensor_lgamma_attensor(void* self) { void* ret = _lantern_Tensor_lgamma_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_digamma_out_attensor_attensor)(void* out, void* self);
  HOST_API void* lantern_digamma_out_attensor_attensor(void* out, void* self) { void* ret = _lantern_digamma_out_attensor_attensor(out, self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_digamma_attensor)(void* self);
  HOST_API void* lantern_digamma_attensor(void* self) { void* ret = _lantern_digamma_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_digamma_attensor)(void* self);
  HOST_API void* lantern_Tensor_digamma_attensor(void* self) { void* ret = _lantern_Tensor_digamma_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_polygamma_out_attensor_intt_attensor)(void* out, void* n, void* self);
  HOST_API void* lantern_polygamma_out_attensor_intt_attensor(void* out, void* n, void* self) { void* ret = _lantern_polygamma_out_attensor_intt_attensor(out, n, self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_polygamma__attensor_intt)(void* self, void* n);
  HOST_API void* lantern_Tensor_polygamma__attensor_intt(void* self, void* n) { void* ret = _lantern_Tensor_polygamma__attensor_intt(self, n); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_erfinv_attensor)(void* self);
  HOST_API void* lantern_erfinv_attensor(void* self) { void* ret = _lantern_erfinv_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_erfinv_attensor)(void* self);
  HOST_API void* lantern_Tensor_erfinv_attensor(void* self) { void* ret = _lantern_Tensor_erfinv_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_erfinv__attensor)(void* self);
  HOST_API void* lantern_Tensor_erfinv__attensor(void* self) { void* ret = _lantern_Tensor_erfinv__attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_erfinv_out_attensor_attensor)(void* out, void* self);
  HOST_API void* lantern_erfinv_out_attensor_attensor(void* out, void* self) { void* ret = _lantern_erfinv_out_attensor_attensor(out, self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_i0_attensor)(void* self);
  HOST_API void* lantern_i0_attensor(void* self) { void* ret = _lantern_i0_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_i0_attensor)(void* self);
  HOST_API void* lantern_Tensor_i0_attensor(void* self) { void* ret = _lantern_Tensor_i0_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_i0__attensor)(void* self);
  HOST_API void* lantern_i0__attensor(void* self) { void* ret = _lantern_i0__attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_i0__attensor)(void* self);
  HOST_API void* lantern_Tensor_i0__attensor(void* self) { void* ret = _lantern_Tensor_i0__attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_i0_out_attensor_attensor)(void* out, void* self);
  HOST_API void* lantern_i0_out_attensor_attensor(void* out, void* self) { void* ret = _lantern_i0_out_attensor_attensor(out, self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_sign_attensor)(void* self);
  HOST_API void* lantern_sign_attensor(void* self) { void* ret = _lantern_sign_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_sign_attensor)(void* self);
  HOST_API void* lantern_Tensor_sign_attensor(void* self) { void* ret = _lantern_Tensor_sign_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_sign__attensor)(void* self);
  HOST_API void* lantern_Tensor_sign__attensor(void* self) { void* ret = _lantern_Tensor_sign__attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_sign_out_attensor_attensor)(void* out, void* self);
  HOST_API void* lantern_sign_out_attensor_attensor(void* out, void* self) { void* ret = _lantern_sign_out_attensor_attensor(out, self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_signbit_attensor)(void* self);
  HOST_API void* lantern_signbit_attensor(void* self) { void* ret = _lantern_signbit_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_signbit_attensor)(void* self);
  HOST_API void* lantern_Tensor_signbit_attensor(void* self) { void* ret = _lantern_Tensor_signbit_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_signbit_out_attensor_attensor)(void* out, void* self);
  HOST_API void* lantern_signbit_out_attensor_attensor(void* out, void* self) { void* ret = _lantern_signbit_out_attensor_attensor(out, self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_dist_attensor_attensor_constatscalar)(void* self, void* other, void* p);
  HOST_API void* lantern_dist_attensor_attensor_constatscalar(void* self, void* other, void* p) { void* ret = _lantern_dist_attensor_attensor_constatscalar(self, other, p); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_dist_attensor_attensor_constatscalar)(void* self, void* other, void* p);
  HOST_API void* lantern_Tensor_dist_attensor_attensor_constatscalar(void* self, void* other, void* p) { void* ret = _lantern_Tensor_dist_attensor_attensor_constatscalar(self, other, p); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_atan2_out_attensor_attensor_attensor)(void* out, void* self, void* other);
  HOST_API void* lantern_atan2_out_attensor_attensor_attensor(void* out, void* self, void* other) { void* ret = _lantern_atan2_out_attensor_attensor_attensor(out, self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_atan2__attensor_attensor)(void* self, void* other);
  HOST_API void* lantern_Tensor_atan2__attensor_attensor(void* self, void* other) { void* ret = _lantern_Tensor_atan2__attensor_attensor(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_atan2_attensor_attensor)(void* self, void* other);
  HOST_API void* lantern_atan2_attensor_attensor(void* self, void* other) { void* ret = _lantern_atan2_attensor_attensor(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_atan2_attensor_attensor)(void* self, void* other);
  HOST_API void* lantern_Tensor_atan2_attensor_attensor(void* self, void* other) { void* ret = _lantern_Tensor_atan2_attensor_attensor(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_lerp_out_attensor_attensor_attensor_constatscalar)(void* out, void* self, void* end, void* weight);
  HOST_API void* lantern_lerp_out_attensor_attensor_attensor_constatscalar(void* out, void* self, void* end, void* weight) { void* ret = _lantern_lerp_out_attensor_attensor_attensor_constatscalar(out, self, end, weight); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_lerp_out_attensor_attensor_attensor_attensor)(void* out, void* self, void* end, void* weight);
  HOST_API void* lantern_lerp_out_attensor_attensor_attensor_attensor(void* out, void* self, void* end, void* weight) { void* ret = _lantern_lerp_out_attensor_attensor_attensor_attensor(out, self, end, weight); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_lerp_attensor_attensor_constatscalar)(void* self, void* end, void* weight);
  HOST_API void* lantern_lerp_attensor_attensor_constatscalar(void* self, void* end, void* weight) { void* ret = _lantern_lerp_attensor_attensor_constatscalar(self, end, weight); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_lerp_attensor_attensor_constatscalar)(void* self, void* end, void* weight);
  HOST_API void* lantern_Tensor_lerp_attensor_attensor_constatscalar(void* self, void* end, void* weight) { void* ret = _lantern_Tensor_lerp_attensor_attensor_constatscalar(self, end, weight); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_lerp_attensor_attensor_attensor)(void* self, void* end, void* weight);
  HOST_API void* lantern_lerp_attensor_attensor_attensor(void* self, void* end, void* weight) { void* ret = _lantern_lerp_attensor_attensor_attensor(self, end, weight); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_lerp_attensor_attensor_attensor)(void* self, void* end, void* weight);
  HOST_API void* lantern_Tensor_lerp_attensor_attensor_attensor(void* self, void* end, void* weight) { void* ret = _lantern_Tensor_lerp_attensor_attensor_attensor(self, end, weight); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_histc_out_attensor_attensor_intt_constatscalar_constatscalar)(void* out, void* self, void* bins, void* min, void* max);
  HOST_API void* lantern_histc_out_attensor_attensor_intt_constatscalar_constatscalar(void* out, void* self, void* bins, void* min, void* max) { void* ret = _lantern_histc_out_attensor_attensor_intt_constatscalar_constatscalar(out, self, bins, min, max); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_histc_attensor_intt_constatscalar_constatscalar)(void* self, void* bins, void* min, void* max);
  HOST_API void* lantern_histc_attensor_intt_constatscalar_constatscalar(void* self, void* bins, void* min, void* max) { void* ret = _lantern_histc_attensor_intt_constatscalar_constatscalar(self, bins, min, max); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_histc_attensor_intt_constatscalar_constatscalar)(void* self, void* bins, void* min, void* max);
  HOST_API void* lantern_Tensor_histc_attensor_intt_constatscalar_constatscalar(void* self, void* bins, void* min, void* max) { void* ret = _lantern_Tensor_histc_attensor_intt_constatscalar_constatscalar(self, bins, min, max); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_fmod_out_attensor_attensor_constatscalar)(void* out, void* self, void* other);
  HOST_API void* lantern_fmod_out_attensor_attensor_constatscalar(void* out, void* self, void* other) { void* ret = _lantern_fmod_out_attensor_attensor_constatscalar(out, self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_fmod_attensor_constatscalar)(void* self, void* other);
  HOST_API void* lantern_fmod_attensor_constatscalar(void* self, void* other) { void* ret = _lantern_fmod_attensor_constatscalar(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_fmod_attensor_constatscalar)(void* self, void* other);
  HOST_API void* lantern_Tensor_fmod_attensor_constatscalar(void* self, void* other) { void* ret = _lantern_Tensor_fmod_attensor_constatscalar(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_fmod_out_attensor_attensor_attensor)(void* out, void* self, void* other);
  HOST_API void* lantern_fmod_out_attensor_attensor_attensor(void* out, void* self, void* other) { void* ret = _lantern_fmod_out_attensor_attensor_attensor(out, self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_fmod_attensor_attensor)(void* self, void* other);
  HOST_API void* lantern_fmod_attensor_attensor(void* self, void* other) { void* ret = _lantern_fmod_attensor_attensor(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_fmod_attensor_attensor)(void* self, void* other);
  HOST_API void* lantern_Tensor_fmod_attensor_attensor(void* self, void* other) { void* ret = _lantern_Tensor_fmod_attensor_attensor(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_hypot_out_attensor_attensor_attensor)(void* out, void* self, void* other);
  HOST_API void* lantern_hypot_out_attensor_attensor_attensor(void* out, void* self, void* other) { void* ret = _lantern_hypot_out_attensor_attensor_attensor(out, self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_hypot_attensor_attensor)(void* self, void* other);
  HOST_API void* lantern_hypot_attensor_attensor(void* self, void* other) { void* ret = _lantern_hypot_attensor_attensor(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_hypot_attensor_attensor)(void* self, void* other);
  HOST_API void* lantern_Tensor_hypot_attensor_attensor(void* self, void* other) { void* ret = _lantern_Tensor_hypot_attensor_attensor(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_hypot__attensor_attensor)(void* self, void* other);
  HOST_API void* lantern_Tensor_hypot__attensor_attensor(void* self, void* other) { void* ret = _lantern_Tensor_hypot__attensor_attensor(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_igamma_out_attensor_attensor_attensor)(void* out, void* self, void* other);
  HOST_API void* lantern_igamma_out_attensor_attensor_attensor(void* out, void* self, void* other) { void* ret = _lantern_igamma_out_attensor_attensor_attensor(out, self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_igamma_attensor_attensor)(void* self, void* other);
  HOST_API void* lantern_igamma_attensor_attensor(void* self, void* other) { void* ret = _lantern_igamma_attensor_attensor(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_igamma_attensor_attensor)(void* self, void* other);
  HOST_API void* lantern_Tensor_igamma_attensor_attensor(void* self, void* other) { void* ret = _lantern_Tensor_igamma_attensor_attensor(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_igamma__attensor_attensor)(void* self, void* other);
  HOST_API void* lantern_Tensor_igamma__attensor_attensor(void* self, void* other) { void* ret = _lantern_Tensor_igamma__attensor_attensor(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_igammac_out_attensor_attensor_attensor)(void* out, void* self, void* other);
  HOST_API void* lantern_igammac_out_attensor_attensor_attensor(void* out, void* self, void* other) { void* ret = _lantern_igammac_out_attensor_attensor_attensor(out, self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_igammac_attensor_attensor)(void* self, void* other);
  HOST_API void* lantern_igammac_attensor_attensor(void* self, void* other) { void* ret = _lantern_igammac_attensor_attensor(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_igammac_attensor_attensor)(void* self, void* other);
  HOST_API void* lantern_Tensor_igammac_attensor_attensor(void* self, void* other) { void* ret = _lantern_Tensor_igammac_attensor_attensor(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_igammac__attensor_attensor)(void* self, void* other);
  HOST_API void* lantern_Tensor_igammac__attensor_attensor(void* self, void* other) { void* ret = _lantern_Tensor_igammac__attensor_attensor(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_nextafter_out_attensor_attensor_attensor)(void* out, void* self, void* other);
  HOST_API void* lantern_nextafter_out_attensor_attensor_attensor(void* out, void* self, void* other) { void* ret = _lantern_nextafter_out_attensor_attensor_attensor(out, self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_nextafter_attensor_attensor)(void* self, void* other);
  HOST_API void* lantern_nextafter_attensor_attensor(void* self, void* other) { void* ret = _lantern_nextafter_attensor_attensor(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_nextafter_attensor_attensor)(void* self, void* other);
  HOST_API void* lantern_Tensor_nextafter_attensor_attensor(void* self, void* other) { void* ret = _lantern_Tensor_nextafter_attensor_attensor(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_nextafter__attensor_attensor)(void* self, void* other);
  HOST_API void* lantern_Tensor_nextafter__attensor_attensor(void* self, void* other) { void* ret = _lantern_Tensor_nextafter__attensor_attensor(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_remainder_out_attensor_attensor_constatscalar)(void* out, void* self, void* other);
  HOST_API void* lantern_remainder_out_attensor_attensor_constatscalar(void* out, void* self, void* other) { void* ret = _lantern_remainder_out_attensor_attensor_constatscalar(out, self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_remainder_attensor_constatscalar)(void* self, void* other);
  HOST_API void* lantern_remainder_attensor_constatscalar(void* self, void* other) { void* ret = _lantern_remainder_attensor_constatscalar(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_remainder_attensor_constatscalar)(void* self, void* other);
  HOST_API void* lantern_Tensor_remainder_attensor_constatscalar(void* self, void* other) { void* ret = _lantern_Tensor_remainder_attensor_constatscalar(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_remainder_out_attensor_attensor_attensor)(void* out, void* self, void* other);
  HOST_API void* lantern_remainder_out_attensor_attensor_attensor(void* out, void* self, void* other) { void* ret = _lantern_remainder_out_attensor_attensor_attensor(out, self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_remainder_attensor_attensor)(void* self, void* other);
  HOST_API void* lantern_remainder_attensor_attensor(void* self, void* other) { void* ret = _lantern_remainder_attensor_attensor(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_remainder_attensor_attensor)(void* self, void* other);
  HOST_API void* lantern_Tensor_remainder_attensor_attensor(void* self, void* other) { void* ret = _lantern_Tensor_remainder_attensor_attensor(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_min_attensor)(void* self);
  HOST_API void* lantern_min_attensor(void* self) { void* ret = _lantern_min_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_min_attensor)(void* self);
  HOST_API void* lantern_Tensor_min_attensor(void* self) { void* ret = _lantern_Tensor_min_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_fmin_attensor_attensor)(void* self, void* other);
  HOST_API void* lantern_fmin_attensor_attensor(void* self, void* other) { void* ret = _lantern_fmin_attensor_attensor(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_fmin_attensor_attensor)(void* self, void* other);
  HOST_API void* lantern_Tensor_fmin_attensor_attensor(void* self, void* other) { void* ret = _lantern_Tensor_fmin_attensor_attensor(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_fmin_out_attensor_attensor_attensor)(void* out, void* self, void* other);
  HOST_API void* lantern_fmin_out_attensor_attensor_attensor(void* out, void* self, void* other) { void* ret = _lantern_fmin_out_attensor_attensor_attensor(out, self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_max_attensor)(void* self);
  HOST_API void* lantern_max_attensor(void* self) { void* ret = _lantern_max_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_max_attensor)(void* self);
  HOST_API void* lantern_Tensor_max_attensor(void* self) { void* ret = _lantern_Tensor_max_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_fmax_attensor_attensor)(void* self, void* other);
  HOST_API void* lantern_fmax_attensor_attensor(void* self, void* other) { void* ret = _lantern_fmax_attensor_attensor(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_fmax_attensor_attensor)(void* self, void* other);
  HOST_API void* lantern_Tensor_fmax_attensor_attensor(void* self, void* other) { void* ret = _lantern_Tensor_fmax_attensor_attensor(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_fmax_out_attensor_attensor_attensor)(void* out, void* self, void* other);
  HOST_API void* lantern_fmax_out_attensor_attensor_attensor(void* out, void* self, void* other) { void* ret = _lantern_fmax_out_attensor_attensor_attensor(out, self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_maximum_attensor_attensor)(void* self, void* other);
  HOST_API void* lantern_maximum_attensor_attensor(void* self, void* other) { void* ret = _lantern_maximum_attensor_attensor(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_maximum_attensor_attensor)(void* self, void* other);
  HOST_API void* lantern_Tensor_maximum_attensor_attensor(void* self, void* other) { void* ret = _lantern_Tensor_maximum_attensor_attensor(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_maximum_out_attensor_attensor_attensor)(void* out, void* self, void* other);
  HOST_API void* lantern_maximum_out_attensor_attensor_attensor(void* out, void* self, void* other) { void* ret = _lantern_maximum_out_attensor_attensor_attensor(out, self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_max_attensor_attensor)(void* self, void* other);
  HOST_API void* lantern_max_attensor_attensor(void* self, void* other) { void* ret = _lantern_max_attensor_attensor(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_max_attensor_attensor)(void* self, void* other);
  HOST_API void* lantern_Tensor_max_attensor_attensor(void* self, void* other) { void* ret = _lantern_Tensor_max_attensor_attensor(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_max_out_attensor_attensor_attensor)(void* out, void* self, void* other);
  HOST_API void* lantern_max_out_attensor_attensor_attensor(void* out, void* self, void* other) { void* ret = _lantern_max_out_attensor_attensor_attensor(out, self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_minimum_attensor_attensor)(void* self, void* other);
  HOST_API void* lantern_minimum_attensor_attensor(void* self, void* other) { void* ret = _lantern_minimum_attensor_attensor(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_minimum_attensor_attensor)(void* self, void* other);
  HOST_API void* lantern_Tensor_minimum_attensor_attensor(void* self, void* other) { void* ret = _lantern_Tensor_minimum_attensor_attensor(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_minimum_out_attensor_attensor_attensor)(void* out, void* self, void* other);
  HOST_API void* lantern_minimum_out_attensor_attensor_attensor(void* out, void* self, void* other) { void* ret = _lantern_minimum_out_attensor_attensor_attensor(out, self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_min_out_attensor_attensor_attensor)(void* out, void* self, void* other);
  HOST_API void* lantern_min_out_attensor_attensor_attensor(void* out, void* self, void* other) { void* ret = _lantern_min_out_attensor_attensor_attensor(out, self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_min_attensor_attensor)(void* self, void* other);
  HOST_API void* lantern_min_attensor_attensor(void* self, void* other) { void* ret = _lantern_min_attensor_attensor(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_min_attensor_attensor)(void* self, void* other);
  HOST_API void* lantern_Tensor_min_attensor_attensor(void* self, void* other) { void* ret = _lantern_Tensor_min_attensor_attensor(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_quantile_out_attensor_attensor_double_intt_bool)(void* out, void* self, void* q, void* dim, void* keepdim);
  HOST_API void* lantern_quantile_out_attensor_attensor_double_intt_bool(void* out, void* self, void* q, void* dim, void* keepdim) { void* ret = _lantern_quantile_out_attensor_attensor_double_intt_bool(out, self, q, dim, keepdim); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_quantile_attensor_double_intt_bool)(void* self, void* q, void* dim, void* keepdim);
  HOST_API void* lantern_quantile_attensor_double_intt_bool(void* self, void* q, void* dim, void* keepdim) { void* ret = _lantern_quantile_attensor_double_intt_bool(self, q, dim, keepdim); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_quantile_attensor_double_intt_bool)(void* self, void* q, void* dim, void* keepdim);
  HOST_API void* lantern_Tensor_quantile_attensor_double_intt_bool(void* self, void* q, void* dim, void* keepdim) { void* ret = _lantern_Tensor_quantile_attensor_double_intt_bool(self, q, dim, keepdim); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_quantile_out_attensor_attensor_attensor_intt_bool)(void* out, void* self, void* q, void* dim, void* keepdim);
  HOST_API void* lantern_quantile_out_attensor_attensor_attensor_intt_bool(void* out, void* self, void* q, void* dim, void* keepdim) { void* ret = _lantern_quantile_out_attensor_attensor_attensor_intt_bool(out, self, q, dim, keepdim); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_quantile_attensor_attensor_intt_bool)(void* self, void* q, void* dim, void* keepdim);
  HOST_API void* lantern_quantile_attensor_attensor_intt_bool(void* self, void* q, void* dim, void* keepdim) { void* ret = _lantern_quantile_attensor_attensor_intt_bool(self, q, dim, keepdim); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_quantile_attensor_attensor_intt_bool)(void* self, void* q, void* dim, void* keepdim);
  HOST_API void* lantern_Tensor_quantile_attensor_attensor_intt_bool(void* self, void* q, void* dim, void* keepdim) { void* ret = _lantern_Tensor_quantile_attensor_attensor_intt_bool(self, q, dim, keepdim); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_nanquantile_out_attensor_attensor_double_intt_bool)(void* out, void* self, void* q, void* dim, void* keepdim);
  HOST_API void* lantern_nanquantile_out_attensor_attensor_double_intt_bool(void* out, void* self, void* q, void* dim, void* keepdim) { void* ret = _lantern_nanquantile_out_attensor_attensor_double_intt_bool(out, self, q, dim, keepdim); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_nanquantile_attensor_double_intt_bool)(void* self, void* q, void* dim, void* keepdim);
  HOST_API void* lantern_nanquantile_attensor_double_intt_bool(void* self, void* q, void* dim, void* keepdim) { void* ret = _lantern_nanquantile_attensor_double_intt_bool(self, q, dim, keepdim); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_nanquantile_attensor_double_intt_bool)(void* self, void* q, void* dim, void* keepdim);
  HOST_API void* lantern_Tensor_nanquantile_attensor_double_intt_bool(void* self, void* q, void* dim, void* keepdim) { void* ret = _lantern_Tensor_nanquantile_attensor_double_intt_bool(self, q, dim, keepdim); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_nanquantile_out_attensor_attensor_attensor_intt_bool)(void* out, void* self, void* q, void* dim, void* keepdim);
  HOST_API void* lantern_nanquantile_out_attensor_attensor_attensor_intt_bool(void* out, void* self, void* q, void* dim, void* keepdim) { void* ret = _lantern_nanquantile_out_attensor_attensor_attensor_intt_bool(out, self, q, dim, keepdim); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_nanquantile_attensor_attensor_intt_bool)(void* self, void* q, void* dim, void* keepdim);
  HOST_API void* lantern_nanquantile_attensor_attensor_intt_bool(void* self, void* q, void* dim, void* keepdim) { void* ret = _lantern_nanquantile_attensor_attensor_intt_bool(self, q, dim, keepdim); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_nanquantile_attensor_attensor_intt_bool)(void* self, void* q, void* dim, void* keepdim);
  HOST_API void* lantern_Tensor_nanquantile_attensor_attensor_intt_bool(void* self, void* q, void* dim, void* keepdim) { void* ret = _lantern_Tensor_nanquantile_attensor_attensor_intt_bool(self, q, dim, keepdim); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_quantile_out_attensor_attensor_double_intt_bool_stdstring)(void* out, void* self, void* q, void* dim, void* keepdim, void* interpolation);
  HOST_API void* lantern_quantile_out_attensor_attensor_double_intt_bool_stdstring(void* out, void* self, void* q, void* dim, void* keepdim, void* interpolation) { void* ret = _lantern_quantile_out_attensor_attensor_double_intt_bool_stdstring(out, self, q, dim, keepdim, interpolation); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_quantile_attensor_double_intt_bool_stdstring)(void* self, void* q, void* dim, void* keepdim, void* interpolation);
  HOST_API void* lantern_quantile_attensor_double_intt_bool_stdstring(void* self, void* q, void* dim, void* keepdim, void* interpolation) { void* ret = _lantern_quantile_attensor_double_intt_bool_stdstring(self, q, dim, keepdim, interpolation); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_quantile_attensor_double_intt_bool_stdstring)(void* self, void* q, void* dim, void* keepdim, void* interpolation);
  HOST_API void* lantern_Tensor_quantile_attensor_double_intt_bool_stdstring(void* self, void* q, void* dim, void* keepdim, void* interpolation) { void* ret = _lantern_Tensor_quantile_attensor_double_intt_bool_stdstring(self, q, dim, keepdim, interpolation); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_quantile_out_attensor_attensor_attensor_intt_bool_stdstring)(void* out, void* self, void* q, void* dim, void* keepdim, void* interpolation);
  HOST_API void* lantern_quantile_out_attensor_attensor_attensor_intt_bool_stdstring(void* out, void* self, void* q, void* dim, void* keepdim, void* interpolation) { void* ret = _lantern_quantile_out_attensor_attensor_attensor_intt_bool_stdstring(out, self, q, dim, keepdim, interpolation); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_quantile_attensor_attensor_intt_bool_stdstring)(void* self, void* q, void* dim, void* keepdim, void* interpolation);
  HOST_API void* lantern_quantile_attensor_attensor_intt_bool_stdstring(void* self, void* q, void* dim, void* keepdim, void* interpolation) { void* ret = _lantern_quantile_attensor_attensor_intt_bool_stdstring(self, q, dim, keepdim, interpolation); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_quantile_attensor_attensor_intt_bool_stdstring)(void* self, void* q, void* dim, void* keepdim, void* interpolation);
  HOST_API void* lantern_Tensor_quantile_attensor_attensor_intt_bool_stdstring(void* self, void* q, void* dim, void* keepdim, void* interpolation) { void* ret = _lantern_Tensor_quantile_attensor_attensor_intt_bool_stdstring(self, q, dim, keepdim, interpolation); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_nanquantile_out_attensor_attensor_double_intt_bool_stdstring)(void* out, void* self, void* q, void* dim, void* keepdim, void* interpolation);
  HOST_API void* lantern_nanquantile_out_attensor_attensor_double_intt_bool_stdstring(void* out, void* self, void* q, void* dim, void* keepdim, void* interpolation) { void* ret = _lantern_nanquantile_out_attensor_attensor_double_intt_bool_stdstring(out, self, q, dim, keepdim, interpolation); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_nanquantile_attensor_double_intt_bool_stdstring)(void* self, void* q, void* dim, void* keepdim, void* interpolation);
  HOST_API void* lantern_nanquantile_attensor_double_intt_bool_stdstring(void* self, void* q, void* dim, void* keepdim, void* interpolation) { void* ret = _lantern_nanquantile_attensor_double_intt_bool_stdstring(self, q, dim, keepdim, interpolation); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_nanquantile_attensor_double_intt_bool_stdstring)(void* self, void* q, void* dim, void* keepdim, void* interpolation);
  HOST_API void* lantern_Tensor_nanquantile_attensor_double_intt_bool_stdstring(void* self, void* q, void* dim, void* keepdim, void* interpolation) { void* ret = _lantern_Tensor_nanquantile_attensor_double_intt_bool_stdstring(self, q, dim, keepdim, interpolation); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_nanquantile_out_attensor_attensor_attensor_intt_bool_stdstring)(void* out, void* self, void* q, void* dim, void* keepdim, void* interpolation);
  HOST_API void* lantern_nanquantile_out_attensor_attensor_attensor_intt_bool_stdstring(void* out, void* self, void* q, void* dim, void* keepdim, void* interpolation) { void* ret = _lantern_nanquantile_out_attensor_attensor_attensor_intt_bool_stdstring(out, self, q, dim, keepdim, interpolation); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_nanquantile_attensor_attensor_intt_bool_stdstring)(void* self, void* q, void* dim, void* keepdim, void* interpolation);
  HOST_API void* lantern_nanquantile_attensor_attensor_intt_bool_stdstring(void* self, void* q, void* dim, void* keepdim, void* interpolation) { void* ret = _lantern_nanquantile_attensor_attensor_intt_bool_stdstring(self, q, dim, keepdim, interpolation); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_nanquantile_attensor_attensor_intt_bool_stdstring)(void* self, void* q, void* dim, void* keepdim, void* interpolation);
  HOST_API void* lantern_Tensor_nanquantile_attensor_attensor_intt_bool_stdstring(void* self, void* q, void* dim, void* keepdim, void* interpolation) { void* ret = _lantern_Tensor_nanquantile_attensor_attensor_intt_bool_stdstring(self, q, dim, keepdim, interpolation); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_sort_out_attensor_attensor_attensor_intt_bool)(void* values, void* indices, void* self, void* dim, void* descending);
  HOST_API void* lantern_sort_out_attensor_attensor_attensor_intt_bool(void* values, void* indices, void* self, void* dim, void* descending) { void* ret = _lantern_sort_out_attensor_attensor_attensor_intt_bool(values, indices, self, dim, descending); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_sort_out_attensor_attensor_attensor_bool_intt_bool)(void* values, void* indices, void* self, void* stable, void* dim, void* descending);
  HOST_API void* lantern_sort_out_attensor_attensor_attensor_bool_intt_bool(void* values, void* indices, void* self, void* stable, void* dim, void* descending) { void* ret = _lantern_sort_out_attensor_attensor_attensor_bool_intt_bool(values, indices, self, stable, dim, descending); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_sort_attensor_intt_bool)(void* self, void* dim, void* descending);
  HOST_API void* lantern_sort_attensor_intt_bool(void* self, void* dim, void* descending) { void* ret = _lantern_sort_attensor_intt_bool(self, dim, descending); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_sort_attensor_intt_bool)(void* self, void* dim, void* descending);
  HOST_API void* lantern_Tensor_sort_attensor_intt_bool(void* self, void* dim, void* descending) { void* ret = _lantern_Tensor_sort_attensor_intt_bool(self, dim, descending); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_sort_attensor_bool_intt_bool)(void* self, void* stable, void* dim, void* descending);
  HOST_API void* lantern_sort_attensor_bool_intt_bool(void* self, void* stable, void* dim, void* descending) { void* ret = _lantern_sort_attensor_bool_intt_bool(self, stable, dim, descending); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_sort_attensor_bool_intt_bool)(void* self, void* stable, void* dim, void* descending);
  HOST_API void* lantern_Tensor_sort_attensor_bool_intt_bool(void* self, void* stable, void* dim, void* descending) { void* ret = _lantern_Tensor_sort_attensor_bool_intt_bool(self, stable, dim, descending); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_sort_out_attensor_attensor_attensor_atdimname_bool)(void* values, void* indices, void* self, void* dim, void* descending);
  HOST_API void* lantern_sort_out_attensor_attensor_attensor_atdimname_bool(void* values, void* indices, void* self, void* dim, void* descending) { void* ret = _lantern_sort_out_attensor_attensor_attensor_atdimname_bool(values, indices, self, dim, descending); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_sort_out_attensor_attensor_attensor_bool_atdimname_bool)(void* values, void* indices, void* self, void* stable, void* dim, void* descending);
  HOST_API void* lantern_sort_out_attensor_attensor_attensor_bool_atdimname_bool(void* values, void* indices, void* self, void* stable, void* dim, void* descending) { void* ret = _lantern_sort_out_attensor_attensor_attensor_bool_atdimname_bool(values, indices, self, stable, dim, descending); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_sort_attensor_atdimname_bool)(void* self, void* dim, void* descending);
  HOST_API void* lantern_sort_attensor_atdimname_bool(void* self, void* dim, void* descending) { void* ret = _lantern_sort_attensor_atdimname_bool(self, dim, descending); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_sort_attensor_atdimname_bool)(void* self, void* dim, void* descending);
  HOST_API void* lantern_Tensor_sort_attensor_atdimname_bool(void* self, void* dim, void* descending) { void* ret = _lantern_Tensor_sort_attensor_atdimname_bool(self, dim, descending); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_sort_attensor_bool_atdimname_bool)(void* self, void* stable, void* dim, void* descending);
  HOST_API void* lantern_sort_attensor_bool_atdimname_bool(void* self, void* stable, void* dim, void* descending) { void* ret = _lantern_sort_attensor_bool_atdimname_bool(self, stable, dim, descending); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_sort_attensor_bool_atdimname_bool)(void* self, void* stable, void* dim, void* descending);
  HOST_API void* lantern_Tensor_sort_attensor_bool_atdimname_bool(void* self, void* stable, void* dim, void* descending) { void* ret = _lantern_Tensor_sort_attensor_bool_atdimname_bool(self, stable, dim, descending); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_msort_out_attensor_attensor)(void* out, void* self);
  HOST_API void* lantern_msort_out_attensor_attensor(void* out, void* self) { void* ret = _lantern_msort_out_attensor_attensor(out, self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_msort_attensor)(void* self);
  HOST_API void* lantern_msort_attensor(void* self) { void* ret = _lantern_msort_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_msort_attensor)(void* self);
  HOST_API void* lantern_Tensor_msort_attensor(void* self) { void* ret = _lantern_Tensor_msort_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_argsort_attensor_intt_bool)(void* self, void* dim, void* descending);
  HOST_API void* lantern_argsort_attensor_intt_bool(void* self, void* dim, void* descending) { void* ret = _lantern_argsort_attensor_intt_bool(self, dim, descending); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_argsort_attensor_intt_bool)(void* self, void* dim, void* descending);
  HOST_API void* lantern_Tensor_argsort_attensor_intt_bool(void* self, void* dim, void* descending) { void* ret = _lantern_Tensor_argsort_attensor_intt_bool(self, dim, descending); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_argsort_attensor_atdimname_bool)(void* self, void* dim, void* descending);
  HOST_API void* lantern_argsort_attensor_atdimname_bool(void* self, void* dim, void* descending) { void* ret = _lantern_argsort_attensor_atdimname_bool(self, dim, descending); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_argsort_attensor_atdimname_bool)(void* self, void* dim, void* descending);
  HOST_API void* lantern_Tensor_argsort_attensor_atdimname_bool(void* self, void* dim, void* descending) { void* ret = _lantern_Tensor_argsort_attensor_atdimname_bool(self, dim, descending); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_topk_out_attensor_attensor_attensor_intt_intt_bool_bool)(void* values, void* indices, void* self, void* k, void* dim, void* largest, void* sorted);
  HOST_API void* lantern_topk_out_attensor_attensor_attensor_intt_intt_bool_bool(void* values, void* indices, void* self, void* k, void* dim, void* largest, void* sorted) { void* ret = _lantern_topk_out_attensor_attensor_attensor_intt_intt_bool_bool(values, indices, self, k, dim, largest, sorted); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_topk_attensor_intt_intt_bool_bool)(void* self, void* k, void* dim, void* largest, void* sorted);
  HOST_API void* lantern_topk_attensor_intt_intt_bool_bool(void* self, void* k, void* dim, void* largest, void* sorted) { void* ret = _lantern_topk_attensor_intt_intt_bool_bool(self, k, dim, largest, sorted); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_topk_attensor_intt_intt_bool_bool)(void* self, void* k, void* dim, void* largest, void* sorted);
  HOST_API void* lantern_Tensor_topk_attensor_intt_intt_bool_bool(void* self, void* k, void* dim, void* largest, void* sorted) { void* ret = _lantern_Tensor_topk_attensor_intt_intt_bool_bool(self, k, dim, largest, sorted); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_all_attensor)(void* self);
  HOST_API void* lantern_all_attensor(void* self) { void* ret = _lantern_all_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_all_attensor)(void* self);
  HOST_API void* lantern_Tensor_all_attensor(void* self) { void* ret = _lantern_Tensor_all_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_any_attensor)(void* self);
  HOST_API void* lantern_any_attensor(void* self) { void* ret = _lantern_any_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_any_attensor)(void* self);
  HOST_API void* lantern_Tensor_any_attensor(void* self) { void* ret = _lantern_Tensor_any_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_renorm_out_attensor_attensor_constatscalar_intt_constatscalar)(void* out, void* self, void* p, void* dim, void* maxnorm);
  HOST_API void* lantern_renorm_out_attensor_attensor_constatscalar_intt_constatscalar(void* out, void* self, void* p, void* dim, void* maxnorm) { void* ret = _lantern_renorm_out_attensor_attensor_constatscalar_intt_constatscalar(out, self, p, dim, maxnorm); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_renorm_attensor_constatscalar_intt_constatscalar)(void* self, void* p, void* dim, void* maxnorm);
  HOST_API void* lantern_renorm_attensor_constatscalar_intt_constatscalar(void* self, void* p, void* dim, void* maxnorm) { void* ret = _lantern_renorm_attensor_constatscalar_intt_constatscalar(self, p, dim, maxnorm); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_renorm_attensor_constatscalar_intt_constatscalar)(void* self, void* p, void* dim, void* maxnorm);
  HOST_API void* lantern_Tensor_renorm_attensor_constatscalar_intt_constatscalar(void* self, void* p, void* dim, void* maxnorm) { void* ret = _lantern_Tensor_renorm_attensor_constatscalar_intt_constatscalar(self, p, dim, maxnorm); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_unfold_attensor_intt_intt_intt)(void* self, void* dimension, void* size, void* step);
  HOST_API void* lantern_Tensor_unfold_attensor_intt_intt_intt(void* self, void* dimension, void* size, void* step) { void* ret = _lantern_Tensor_unfold_attensor_intt_intt_intt(self, dimension, size, step); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_unfold_backward_attensor_atintarrayref_intt_intt_intt)(void* grad_in, void* input_sizes, void* dim, void* size, void* step);
  HOST_API void* lantern_unfold_backward_attensor_atintarrayref_intt_intt_intt(void* grad_in, void* input_sizes, void* dim, void* size, void* step) { void* ret = _lantern_unfold_backward_attensor_atintarrayref_intt_intt_intt(grad_in, input_sizes, dim, size, step); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_equal_attensor_attensor)(void* self, void* other);
  HOST_API void* lantern_equal_attensor_attensor(void* self, void* other) { void* ret = _lantern_equal_attensor_attensor(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_equal_attensor_attensor)(void* self, void* other);
  HOST_API void* lantern_Tensor_equal_attensor_attensor(void* self, void* other) { void* ret = _lantern_Tensor_equal_attensor_attensor(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_pow_out_attensor_attensor_attensor)(void* out, void* self, void* exponent);
  HOST_API void* lantern_pow_out_attensor_attensor_attensor(void* out, void* self, void* exponent) { void* ret = _lantern_pow_out_attensor_attensor_attensor(out, self, exponent); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_pow_attensor_attensor)(void* self, void* exponent);
  HOST_API void* lantern_pow_attensor_attensor(void* self, void* exponent) { void* ret = _lantern_pow_attensor_attensor(self, exponent); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_pow_attensor_attensor)(void* self, void* exponent);
  HOST_API void* lantern_Tensor_pow_attensor_attensor(void* self, void* exponent) { void* ret = _lantern_Tensor_pow_attensor_attensor(self, exponent); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_pow_out_attensor_constatscalar_attensor)(void* out, void* self, void* exponent);
  HOST_API void* lantern_pow_out_attensor_constatscalar_attensor(void* out, void* self, void* exponent) { void* ret = _lantern_pow_out_attensor_constatscalar_attensor(out, self, exponent); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_pow_constatscalar_attensor)(void* self, void* exponent);
  HOST_API void* lantern_pow_constatscalar_attensor(void* self, void* exponent) { void* ret = _lantern_pow_constatscalar_attensor(self, exponent); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_pow_out_attensor_attensor_constatscalar)(void* out, void* self, void* exponent);
  HOST_API void* lantern_pow_out_attensor_attensor_constatscalar(void* out, void* self, void* exponent) { void* ret = _lantern_pow_out_attensor_attensor_constatscalar(out, self, exponent); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_pow_attensor_constatscalar)(void* self, void* exponent);
  HOST_API void* lantern_pow_attensor_constatscalar(void* self, void* exponent) { void* ret = _lantern_pow_attensor_constatscalar(self, exponent); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_pow_attensor_constatscalar)(void* self, void* exponent);
  HOST_API void* lantern_Tensor_pow_attensor_constatscalar(void* self, void* exponent) { void* ret = _lantern_Tensor_pow_attensor_constatscalar(self, exponent); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_pow__attensor_constatscalar)(void* self, void* exponent);
  HOST_API void* lantern_Tensor_pow__attensor_constatscalar(void* self, void* exponent) { void* ret = _lantern_Tensor_pow__attensor_constatscalar(self, exponent); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_pow__attensor_attensor)(void* self, void* exponent);
  HOST_API void* lantern_Tensor_pow__attensor_attensor(void* self, void* exponent) { void* ret = _lantern_Tensor_pow__attensor_attensor(self, exponent); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_float_power_out_attensor_attensor_attensor)(void* out, void* self, void* exponent);
  HOST_API void* lantern_float_power_out_attensor_attensor_attensor(void* out, void* self, void* exponent) { void* ret = _lantern_float_power_out_attensor_attensor_attensor(out, self, exponent); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_float_power_attensor_attensor)(void* self, void* exponent);
  HOST_API void* lantern_float_power_attensor_attensor(void* self, void* exponent) { void* ret = _lantern_float_power_attensor_attensor(self, exponent); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_float_power_attensor_attensor)(void* self, void* exponent);
  HOST_API void* lantern_Tensor_float_power_attensor_attensor(void* self, void* exponent) { void* ret = _lantern_Tensor_float_power_attensor_attensor(self, exponent); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_float_power_out_attensor_constatscalar_attensor)(void* out, void* self, void* exponent);
  HOST_API void* lantern_float_power_out_attensor_constatscalar_attensor(void* out, void* self, void* exponent) { void* ret = _lantern_float_power_out_attensor_constatscalar_attensor(out, self, exponent); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_float_power_constatscalar_attensor)(void* self, void* exponent);
  HOST_API void* lantern_float_power_constatscalar_attensor(void* self, void* exponent) { void* ret = _lantern_float_power_constatscalar_attensor(self, exponent); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_float_power_out_attensor_attensor_constatscalar)(void* out, void* self, void* exponent);
  HOST_API void* lantern_float_power_out_attensor_attensor_constatscalar(void* out, void* self, void* exponent) { void* ret = _lantern_float_power_out_attensor_attensor_constatscalar(out, self, exponent); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_float_power_attensor_constatscalar)(void* self, void* exponent);
  HOST_API void* lantern_float_power_attensor_constatscalar(void* self, void* exponent) { void* ret = _lantern_float_power_attensor_constatscalar(self, exponent); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_float_power_attensor_constatscalar)(void* self, void* exponent);
  HOST_API void* lantern_Tensor_float_power_attensor_constatscalar(void* self, void* exponent) { void* ret = _lantern_Tensor_float_power_attensor_constatscalar(self, exponent); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_float_power__attensor_constatscalar)(void* self, void* exponent);
  HOST_API void* lantern_Tensor_float_power__attensor_constatscalar(void* self, void* exponent) { void* ret = _lantern_Tensor_float_power__attensor_constatscalar(self, exponent); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_float_power__attensor_attensor)(void* self, void* exponent);
  HOST_API void* lantern_Tensor_float_power__attensor_attensor(void* self, void* exponent) { void* ret = _lantern_Tensor_float_power__attensor_attensor(self, exponent); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_normal__attensor_double_double_atgenerator)(void* self, void* mean, void* std, void* generator);
  HOST_API void* lantern_Tensor_normal__attensor_double_double_atgenerator(void* self, void* mean, void* std, void* generator) { void* ret = _lantern_Tensor_normal__attensor_double_double_atgenerator(self, mean, std, generator); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_normal_out_attensor_attensor_double_atgenerator)(void* out, void* mean, void* std, void* generator);
  HOST_API void* lantern_normal_out_attensor_attensor_double_atgenerator(void* out, void* mean, void* std, void* generator) { void* ret = _lantern_normal_out_attensor_attensor_double_atgenerator(out, mean, std, generator); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_normal_out_attensor_double_attensor_atgenerator)(void* out, void* mean, void* std, void* generator);
  HOST_API void* lantern_normal_out_attensor_double_attensor_atgenerator(void* out, void* mean, void* std, void* generator) { void* ret = _lantern_normal_out_attensor_double_attensor_atgenerator(out, mean, std, generator); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_normal_out_attensor_attensor_attensor_atgenerator)(void* out, void* mean, void* std, void* generator);
  HOST_API void* lantern_normal_out_attensor_attensor_attensor_atgenerator(void* out, void* mean, void* std, void* generator) { void* ret = _lantern_normal_out_attensor_attensor_attensor_atgenerator(out, mean, std, generator); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_normal_out_attensor_double_double_atintarrayref_atgenerator)(void* out, void* mean, void* std, void* size, void* generator);
  HOST_API void* lantern_normal_out_attensor_double_double_atintarrayref_atgenerator(void* out, void* mean, void* std, void* size, void* generator) { void* ret = _lantern_normal_out_attensor_double_double_atintarrayref_atgenerator(out, mean, std, size, generator); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_alias_attensor)(void* self);
  HOST_API void* lantern_alias_attensor(void* self) { void* ret = _lantern_alias_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_alias_attensor)(void* self);
  HOST_API void* lantern_Tensor_alias_attensor(void* self) { void* ret = _lantern_Tensor_alias_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__index_copy__attensor_intt_attensor_attensor)(void* self, void* dim, void* index, void* source);
  HOST_API void* lantern__index_copy__attensor_intt_attensor_attensor(void* self, void* dim, void* index, void* source) { void* ret = _lantern__index_copy__attensor_intt_attensor_attensor(self, dim, index, source); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__cumsum_attensor_intt)(void* self, void* dim);
  HOST_API void* lantern__cumsum_attensor_intt(void* self, void* dim) { void* ret = _lantern__cumsum_attensor_intt(self, dim); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__cumsum_out_attensor_attensor_intt)(void* out, void* self, void* dim);
  HOST_API void* lantern__cumsum_out_attensor_attensor_intt(void* out, void* self, void* dim) { void* ret = _lantern__cumsum_out_attensor_attensor_intt(out, self, dim); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__cumprod_attensor_intt)(void* self, void* dim);
  HOST_API void* lantern__cumprod_attensor_intt(void* self, void* dim) { void* ret = _lantern__cumprod_attensor_intt(self, dim); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__cumprod_out_attensor_attensor_intt)(void* out, void* self, void* dim);
  HOST_API void* lantern__cumprod_out_attensor_attensor_intt(void* out, void* self, void* dim) { void* ret = _lantern__cumprod_out_attensor_attensor_intt(out, self, dim); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__amp_foreach_non_finite_check_and_unscale__attensorlist_attensor_attensor)(void* self, void* found_inf, void* inv_scale);
  HOST_API void* lantern__amp_foreach_non_finite_check_and_unscale__attensorlist_attensor_attensor(void* self, void* found_inf, void* inv_scale) { void* ret = _lantern__amp_foreach_non_finite_check_and_unscale__attensorlist_attensor_attensor(self, found_inf, inv_scale); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__amp_update_scale__attensor_attensor_attensor_double_double_intt)(void* self, void* growth_tracker, void* found_inf, void* scale_growth_factor, void* scale_backoff_factor, void* growth_interval);
  HOST_API void* lantern__amp_update_scale__attensor_attensor_attensor_double_double_intt(void* self, void* growth_tracker, void* found_inf, void* scale_growth_factor, void* scale_backoff_factor, void* growth_interval) { void* ret = _lantern__amp_update_scale__attensor_attensor_attensor_double_double_intt(self, growth_tracker, found_inf, scale_growth_factor, scale_backoff_factor, growth_interval); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__cat_attensorlist_intt)(void* tensors, void* dim);
  HOST_API void* lantern__cat_attensorlist_intt(void* tensors, void* dim) { void* ret = _lantern__cat_attensorlist_intt(tensors, dim); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__cat_out_attensor_attensorlist_intt)(void* out, void* tensors, void* dim);
  HOST_API void* lantern__cat_out_attensor_attensorlist_intt(void* out, void* tensors, void* dim) { void* ret = _lantern__cat_out_attensor_attensorlist_intt(out, tensors, dim); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__foreach_add_attensorlist_constatscalar)(void* tensors, void* scalar);
  HOST_API void* lantern__foreach_add_attensorlist_constatscalar(void* tensors, void* scalar) { void* ret = _lantern__foreach_add_attensorlist_constatscalar(tensors, scalar); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__foreach_add__attensorlist_constatscalar)(void* self, void* scalar);
  HOST_API void* lantern__foreach_add__attensorlist_constatscalar(void* self, void* scalar) { void* ret = _lantern__foreach_add__attensorlist_constatscalar(self, scalar); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__foreach_sub_attensorlist_constatscalar)(void* tensors, void* scalar);
  HOST_API void* lantern__foreach_sub_attensorlist_constatscalar(void* tensors, void* scalar) { void* ret = _lantern__foreach_sub_attensorlist_constatscalar(tensors, scalar); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__foreach_sub__attensorlist_constatscalar)(void* self, void* scalar);
  HOST_API void* lantern__foreach_sub__attensorlist_constatscalar(void* self, void* scalar) { void* ret = _lantern__foreach_sub__attensorlist_constatscalar(self, scalar); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__foreach_mul_attensorlist_constatscalar)(void* tensors, void* scalar);
  HOST_API void* lantern__foreach_mul_attensorlist_constatscalar(void* tensors, void* scalar) { void* ret = _lantern__foreach_mul_attensorlist_constatscalar(tensors, scalar); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__foreach_mul__attensorlist_constatscalar)(void* self, void* scalar);
  HOST_API void* lantern__foreach_mul__attensorlist_constatscalar(void* self, void* scalar) { void* ret = _lantern__foreach_mul__attensorlist_constatscalar(self, scalar); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__foreach_div_attensorlist_constatscalar)(void* tensors, void* scalar);
  HOST_API void* lantern__foreach_div_attensorlist_constatscalar(void* tensors, void* scalar) { void* ret = _lantern__foreach_div_attensorlist_constatscalar(tensors, scalar); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__foreach_div__attensorlist_constatscalar)(void* self, void* scalar);
  HOST_API void* lantern__foreach_div__attensorlist_constatscalar(void* self, void* scalar) { void* ret = _lantern__foreach_div__attensorlist_constatscalar(self, scalar); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__foreach_add_attensorlist_attensorlist_constatscalar)(void* tensors1, void* tensors2, void* alpha);
  HOST_API void* lantern__foreach_add_attensorlist_attensorlist_constatscalar(void* tensors1, void* tensors2, void* alpha) { void* ret = _lantern__foreach_add_attensorlist_attensorlist_constatscalar(tensors1, tensors2, alpha); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__foreach_add__attensorlist_attensorlist_constatscalar)(void* self, void* other, void* alpha);
  HOST_API void* lantern__foreach_add__attensorlist_attensorlist_constatscalar(void* self, void* other, void* alpha) { void* ret = _lantern__foreach_add__attensorlist_attensorlist_constatscalar(self, other, alpha); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__foreach_sub_attensorlist_attensorlist_constatscalar)(void* tensors1, void* tensors2, void* alpha);
  HOST_API void* lantern__foreach_sub_attensorlist_attensorlist_constatscalar(void* tensors1, void* tensors2, void* alpha) { void* ret = _lantern__foreach_sub_attensorlist_attensorlist_constatscalar(tensors1, tensors2, alpha); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__foreach_sub__attensorlist_attensorlist_constatscalar)(void* self, void* other, void* alpha);
  HOST_API void* lantern__foreach_sub__attensorlist_attensorlist_constatscalar(void* self, void* other, void* alpha) { void* ret = _lantern__foreach_sub__attensorlist_attensorlist_constatscalar(self, other, alpha); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__foreach_mul_attensorlist_attensorlist)(void* tensors1, void* tensors2);
  HOST_API void* lantern__foreach_mul_attensorlist_attensorlist(void* tensors1, void* tensors2) { void* ret = _lantern__foreach_mul_attensorlist_attensorlist(tensors1, tensors2); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__foreach_mul__attensorlist_attensorlist)(void* self, void* other);
  HOST_API void* lantern__foreach_mul__attensorlist_attensorlist(void* self, void* other) { void* ret = _lantern__foreach_mul__attensorlist_attensorlist(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__foreach_div_attensorlist_attensorlist)(void* tensors1, void* tensors2);
  HOST_API void* lantern__foreach_div_attensorlist_attensorlist(void* tensors1, void* tensors2) { void* ret = _lantern__foreach_div_attensorlist_attensorlist(tensors1, tensors2); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__foreach_div__attensorlist_attensorlist)(void* self, void* other);
  HOST_API void* lantern__foreach_div__attensorlist_attensorlist(void* self, void* other) { void* ret = _lantern__foreach_div__attensorlist_attensorlist(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__foreach_add_attensorlist_atarrayrefatscalar)(void* tensors, void* scalars);
  HOST_API void* lantern__foreach_add_attensorlist_atarrayrefatscalar(void* tensors, void* scalars) { void* ret = _lantern__foreach_add_attensorlist_atarrayrefatscalar(tensors, scalars); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__foreach_add__attensorlist_atarrayrefatscalar)(void* self, void* scalars);
  HOST_API void* lantern__foreach_add__attensorlist_atarrayrefatscalar(void* self, void* scalars) { void* ret = _lantern__foreach_add__attensorlist_atarrayrefatscalar(self, scalars); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__foreach_sub_attensorlist_atarrayrefatscalar)(void* tensors, void* scalars);
  HOST_API void* lantern__foreach_sub_attensorlist_atarrayrefatscalar(void* tensors, void* scalars) { void* ret = _lantern__foreach_sub_attensorlist_atarrayrefatscalar(tensors, scalars); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__foreach_sub__attensorlist_atarrayrefatscalar)(void* self, void* scalars);
  HOST_API void* lantern__foreach_sub__attensorlist_atarrayrefatscalar(void* self, void* scalars) { void* ret = _lantern__foreach_sub__attensorlist_atarrayrefatscalar(self, scalars); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__foreach_div_attensorlist_atarrayrefatscalar)(void* tensors, void* scalars);
  HOST_API void* lantern__foreach_div_attensorlist_atarrayrefatscalar(void* tensors, void* scalars) { void* ret = _lantern__foreach_div_attensorlist_atarrayrefatscalar(tensors, scalars); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__foreach_div__attensorlist_atarrayrefatscalar)(void* self, void* scalars);
  HOST_API void* lantern__foreach_div__attensorlist_atarrayrefatscalar(void* self, void* scalars) { void* ret = _lantern__foreach_div__attensorlist_atarrayrefatscalar(self, scalars); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__foreach_mul_attensorlist_atarrayrefatscalar)(void* tensors, void* scalars);
  HOST_API void* lantern__foreach_mul_attensorlist_atarrayrefatscalar(void* tensors, void* scalars) { void* ret = _lantern__foreach_mul_attensorlist_atarrayrefatscalar(tensors, scalars); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__foreach_mul__attensorlist_atarrayrefatscalar)(void* self, void* scalars);
  HOST_API void* lantern__foreach_mul__attensorlist_atarrayrefatscalar(void* self, void* scalars) { void* ret = _lantern__foreach_mul__attensorlist_atarrayrefatscalar(self, scalars); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__foreach_exp_attensorlist)(void* tensors);
  HOST_API void* lantern__foreach_exp_attensorlist(void* tensors) { void* ret = _lantern__foreach_exp_attensorlist(tensors); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__foreach_zero__attensorlist)(void* self);
  HOST_API void* lantern__foreach_zero__attensorlist(void* self) { void* ret = _lantern__foreach_zero__attensorlist(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__foreach_exp__attensorlist)(void* self);
  HOST_API void* lantern__foreach_exp__attensorlist(void* self) { void* ret = _lantern__foreach_exp__attensorlist(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__foreach_sqrt_attensorlist)(void* tensors);
  HOST_API void* lantern__foreach_sqrt_attensorlist(void* tensors) { void* ret = _lantern__foreach_sqrt_attensorlist(tensors); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__foreach_sqrt__attensorlist)(void* self);
  HOST_API void* lantern__foreach_sqrt__attensorlist(void* self) { void* ret = _lantern__foreach_sqrt__attensorlist(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__foreach_abs_attensorlist)(void* tensors);
  HOST_API void* lantern__foreach_abs_attensorlist(void* tensors) { void* ret = _lantern__foreach_abs_attensorlist(tensors); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__foreach_abs__attensorlist)(void* self);
  HOST_API void* lantern__foreach_abs__attensorlist(void* self) { void* ret = _lantern__foreach_abs__attensorlist(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__foreach_acos_attensorlist)(void* tensors);
  HOST_API void* lantern__foreach_acos_attensorlist(void* tensors) { void* ret = _lantern__foreach_acos_attensorlist(tensors); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__foreach_acos__attensorlist)(void* self);
  HOST_API void* lantern__foreach_acos__attensorlist(void* self) { void* ret = _lantern__foreach_acos__attensorlist(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__foreach_asin_attensorlist)(void* tensors);
  HOST_API void* lantern__foreach_asin_attensorlist(void* tensors) { void* ret = _lantern__foreach_asin_attensorlist(tensors); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__foreach_asin__attensorlist)(void* self);
  HOST_API void* lantern__foreach_asin__attensorlist(void* self) { void* ret = _lantern__foreach_asin__attensorlist(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__foreach_atan_attensorlist)(void* tensors);
  HOST_API void* lantern__foreach_atan_attensorlist(void* tensors) { void* ret = _lantern__foreach_atan_attensorlist(tensors); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__foreach_atan__attensorlist)(void* self);
  HOST_API void* lantern__foreach_atan__attensorlist(void* self) { void* ret = _lantern__foreach_atan__attensorlist(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__foreach_ceil_attensorlist)(void* tensors);
  HOST_API void* lantern__foreach_ceil_attensorlist(void* tensors) { void* ret = _lantern__foreach_ceil_attensorlist(tensors); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__foreach_ceil__attensorlist)(void* self);
  HOST_API void* lantern__foreach_ceil__attensorlist(void* self) { void* ret = _lantern__foreach_ceil__attensorlist(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__foreach_cos_attensorlist)(void* tensors);
  HOST_API void* lantern__foreach_cos_attensorlist(void* tensors) { void* ret = _lantern__foreach_cos_attensorlist(tensors); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__foreach_cos__attensorlist)(void* self);
  HOST_API void* lantern__foreach_cos__attensorlist(void* self) { void* ret = _lantern__foreach_cos__attensorlist(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__foreach_cosh_attensorlist)(void* tensors);
  HOST_API void* lantern__foreach_cosh_attensorlist(void* tensors) { void* ret = _lantern__foreach_cosh_attensorlist(tensors); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__foreach_cosh__attensorlist)(void* self);
  HOST_API void* lantern__foreach_cosh__attensorlist(void* self) { void* ret = _lantern__foreach_cosh__attensorlist(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__foreach_erf_attensorlist)(void* tensors);
  HOST_API void* lantern__foreach_erf_attensorlist(void* tensors) { void* ret = _lantern__foreach_erf_attensorlist(tensors); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__foreach_erf__attensorlist)(void* self);
  HOST_API void* lantern__foreach_erf__attensorlist(void* self) { void* ret = _lantern__foreach_erf__attensorlist(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__foreach_erfc_attensorlist)(void* tensors);
  HOST_API void* lantern__foreach_erfc_attensorlist(void* tensors) { void* ret = _lantern__foreach_erfc_attensorlist(tensors); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__foreach_erfc__attensorlist)(void* self);
  HOST_API void* lantern__foreach_erfc__attensorlist(void* self) { void* ret = _lantern__foreach_erfc__attensorlist(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__foreach_expm1_attensorlist)(void* tensors);
  HOST_API void* lantern__foreach_expm1_attensorlist(void* tensors) { void* ret = _lantern__foreach_expm1_attensorlist(tensors); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__foreach_expm1__attensorlist)(void* self);
  HOST_API void* lantern__foreach_expm1__attensorlist(void* self) { void* ret = _lantern__foreach_expm1__attensorlist(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__foreach_floor_attensorlist)(void* tensors);
  HOST_API void* lantern__foreach_floor_attensorlist(void* tensors) { void* ret = _lantern__foreach_floor_attensorlist(tensors); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__foreach_floor__attensorlist)(void* self);
  HOST_API void* lantern__foreach_floor__attensorlist(void* self) { void* ret = _lantern__foreach_floor__attensorlist(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__foreach_log_attensorlist)(void* tensors);
  HOST_API void* lantern__foreach_log_attensorlist(void* tensors) { void* ret = _lantern__foreach_log_attensorlist(tensors); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__foreach_log__attensorlist)(void* self);
  HOST_API void* lantern__foreach_log__attensorlist(void* self) { void* ret = _lantern__foreach_log__attensorlist(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__foreach_log10_attensorlist)(void* tensors);
  HOST_API void* lantern__foreach_log10_attensorlist(void* tensors) { void* ret = _lantern__foreach_log10_attensorlist(tensors); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__foreach_log10__attensorlist)(void* self);
  HOST_API void* lantern__foreach_log10__attensorlist(void* self) { void* ret = _lantern__foreach_log10__attensorlist(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__foreach_log1p_attensorlist)(void* tensors);
  HOST_API void* lantern__foreach_log1p_attensorlist(void* tensors) { void* ret = _lantern__foreach_log1p_attensorlist(tensors); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__foreach_log1p__attensorlist)(void* self);
  HOST_API void* lantern__foreach_log1p__attensorlist(void* self) { void* ret = _lantern__foreach_log1p__attensorlist(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__foreach_log2_attensorlist)(void* tensors);
  HOST_API void* lantern__foreach_log2_attensorlist(void* tensors) { void* ret = _lantern__foreach_log2_attensorlist(tensors); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__foreach_log2__attensorlist)(void* self);
  HOST_API void* lantern__foreach_log2__attensorlist(void* self) { void* ret = _lantern__foreach_log2__attensorlist(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__foreach_neg_attensorlist)(void* tensors);
  HOST_API void* lantern__foreach_neg_attensorlist(void* tensors) { void* ret = _lantern__foreach_neg_attensorlist(tensors); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__foreach_neg__attensorlist)(void* self);
  HOST_API void* lantern__foreach_neg__attensorlist(void* self) { void* ret = _lantern__foreach_neg__attensorlist(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__foreach_tan_attensorlist)(void* tensors);
  HOST_API void* lantern__foreach_tan_attensorlist(void* tensors) { void* ret = _lantern__foreach_tan_attensorlist(tensors); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__foreach_tan__attensorlist)(void* self);
  HOST_API void* lantern__foreach_tan__attensorlist(void* self) { void* ret = _lantern__foreach_tan__attensorlist(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__foreach_tanh_attensorlist)(void* tensors);
  HOST_API void* lantern__foreach_tanh_attensorlist(void* tensors) { void* ret = _lantern__foreach_tanh_attensorlist(tensors); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__foreach_tanh__attensorlist)(void* self);
  HOST_API void* lantern__foreach_tanh__attensorlist(void* self) { void* ret = _lantern__foreach_tanh__attensorlist(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__foreach_sin_attensorlist)(void* tensors);
  HOST_API void* lantern__foreach_sin_attensorlist(void* tensors) { void* ret = _lantern__foreach_sin_attensorlist(tensors); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__foreach_sin__attensorlist)(void* self);
  HOST_API void* lantern__foreach_sin__attensorlist(void* self) { void* ret = _lantern__foreach_sin__attensorlist(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__foreach_sinh_attensorlist)(void* tensors);
  HOST_API void* lantern__foreach_sinh_attensorlist(void* tensors) { void* ret = _lantern__foreach_sinh_attensorlist(tensors); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__foreach_sinh__attensorlist)(void* self);
  HOST_API void* lantern__foreach_sinh__attensorlist(void* self) { void* ret = _lantern__foreach_sinh__attensorlist(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__foreach_round_attensorlist)(void* tensors);
  HOST_API void* lantern__foreach_round_attensorlist(void* tensors) { void* ret = _lantern__foreach_round_attensorlist(tensors); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__foreach_round__attensorlist)(void* self);
  HOST_API void* lantern__foreach_round__attensorlist(void* self) { void* ret = _lantern__foreach_round__attensorlist(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__foreach_lgamma_attensorlist)(void* tensors);
  HOST_API void* lantern__foreach_lgamma_attensorlist(void* tensors) { void* ret = _lantern__foreach_lgamma_attensorlist(tensors); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__foreach_lgamma__attensorlist)(void* self);
  HOST_API void* lantern__foreach_lgamma__attensorlist(void* self) { void* ret = _lantern__foreach_lgamma__attensorlist(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__foreach_frac_attensorlist)(void* tensors);
  HOST_API void* lantern__foreach_frac_attensorlist(void* tensors) { void* ret = _lantern__foreach_frac_attensorlist(tensors); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__foreach_frac__attensorlist)(void* self);
  HOST_API void* lantern__foreach_frac__attensorlist(void* self) { void* ret = _lantern__foreach_frac__attensorlist(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__foreach_reciprocal_attensorlist)(void* tensors);
  HOST_API void* lantern__foreach_reciprocal_attensorlist(void* tensors) { void* ret = _lantern__foreach_reciprocal_attensorlist(tensors); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__foreach_reciprocal__attensorlist)(void* self);
  HOST_API void* lantern__foreach_reciprocal__attensorlist(void* self) { void* ret = _lantern__foreach_reciprocal__attensorlist(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__foreach_sigmoid_attensorlist)(void* tensors);
  HOST_API void* lantern__foreach_sigmoid_attensorlist(void* tensors) { void* ret = _lantern__foreach_sigmoid_attensorlist(tensors); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__foreach_sigmoid__attensorlist)(void* self);
  HOST_API void* lantern__foreach_sigmoid__attensorlist(void* self) { void* ret = _lantern__foreach_sigmoid__attensorlist(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__foreach_trunc_attensorlist)(void* tensors);
  HOST_API void* lantern__foreach_trunc_attensorlist(void* tensors) { void* ret = _lantern__foreach_trunc_attensorlist(tensors); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__foreach_trunc__attensorlist)(void* self);
  HOST_API void* lantern__foreach_trunc__attensorlist(void* self) { void* ret = _lantern__foreach_trunc__attensorlist(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__foreach_addcdiv__attensorlist_attensorlist_attensorlist_constatscalar)(void* self, void* tensor1, void* tensor2, void* value);
  HOST_API void* lantern__foreach_addcdiv__attensorlist_attensorlist_attensorlist_constatscalar(void* self, void* tensor1, void* tensor2, void* value) { void* ret = _lantern__foreach_addcdiv__attensorlist_attensorlist_attensorlist_constatscalar(self, tensor1, tensor2, value); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__foreach_addcmul__attensorlist_attensorlist_attensorlist_constatscalar)(void* self, void* tensor1, void* tensor2, void* value);
  HOST_API void* lantern__foreach_addcmul__attensorlist_attensorlist_attensorlist_constatscalar(void* self, void* tensor1, void* tensor2, void* value) { void* ret = _lantern__foreach_addcmul__attensorlist_attensorlist_attensorlist_constatscalar(self, tensor1, tensor2, value); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__foreach_addcdiv__attensorlist_attensorlist_attensorlist_atarrayrefatscalar)(void* self, void* tensor1, void* tensor2, void* scalars);
  HOST_API void* lantern__foreach_addcdiv__attensorlist_attensorlist_attensorlist_atarrayrefatscalar(void* self, void* tensor1, void* tensor2, void* scalars) { void* ret = _lantern__foreach_addcdiv__attensorlist_attensorlist_attensorlist_atarrayrefatscalar(self, tensor1, tensor2, scalars); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__foreach_addcmul__attensorlist_attensorlist_attensorlist_atarrayrefatscalar)(void* self, void* tensor1, void* tensor2, void* scalars);
  HOST_API void* lantern__foreach_addcmul__attensorlist_attensorlist_attensorlist_atarrayrefatscalar(void* self, void* tensor1, void* tensor2, void* scalars) { void* ret = _lantern__foreach_addcmul__attensorlist_attensorlist_attensorlist_atarrayrefatscalar(self, tensor1, tensor2, scalars); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__foreach_addcdiv_attensorlist_attensorlist_attensorlist_constatscalar)(void* input, void* tensor1, void* tensor2, void* value);
  HOST_API void* lantern__foreach_addcdiv_attensorlist_attensorlist_attensorlist_constatscalar(void* input, void* tensor1, void* tensor2, void* value) { void* ret = _lantern__foreach_addcdiv_attensorlist_attensorlist_attensorlist_constatscalar(input, tensor1, tensor2, value); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__foreach_addcmul_attensorlist_attensorlist_attensorlist_constatscalar)(void* input, void* tensor1, void* tensor2, void* value);
  HOST_API void* lantern__foreach_addcmul_attensorlist_attensorlist_attensorlist_constatscalar(void* input, void* tensor1, void* tensor2, void* value) { void* ret = _lantern__foreach_addcmul_attensorlist_attensorlist_attensorlist_constatscalar(input, tensor1, tensor2, value); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__foreach_addcdiv_attensorlist_attensorlist_attensorlist_atarrayrefatscalar)(void* input, void* tensor1, void* tensor2, void* scalars);
  HOST_API void* lantern__foreach_addcdiv_attensorlist_attensorlist_attensorlist_atarrayrefatscalar(void* input, void* tensor1, void* tensor2, void* scalars) { void* ret = _lantern__foreach_addcdiv_attensorlist_attensorlist_attensorlist_atarrayrefatscalar(input, tensor1, tensor2, scalars); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__foreach_addcmul_attensorlist_attensorlist_attensorlist_atarrayrefatscalar)(void* input, void* tensor1, void* tensor2, void* scalars);
  HOST_API void* lantern__foreach_addcmul_attensorlist_attensorlist_attensorlist_atarrayrefatscalar(void* input, void* tensor1, void* tensor2, void* scalars) { void* ret = _lantern__foreach_addcmul_attensorlist_attensorlist_attensorlist_atarrayrefatscalar(input, tensor1, tensor2, scalars); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__foreach_maximum_attensorlist_attensorlist)(void* tensors1, void* tensors2);
  HOST_API void* lantern__foreach_maximum_attensorlist_attensorlist(void* tensors1, void* tensors2) { void* ret = _lantern__foreach_maximum_attensorlist_attensorlist(tensors1, tensors2); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__foreach_minimum_attensorlist_attensorlist)(void* tensors1, void* tensors2);
  HOST_API void* lantern__foreach_minimum_attensorlist_attensorlist(void* tensors1, void* tensors2) { void* ret = _lantern__foreach_minimum_attensorlist_attensorlist(tensors1, tensors2); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_bucketize_attensor_attensor_bool_bool)(void* self, void* boundaries, void* out_int32, void* right);
  HOST_API void* lantern_bucketize_attensor_attensor_bool_bool(void* self, void* boundaries, void* out_int32, void* right) { void* ret = _lantern_bucketize_attensor_attensor_bool_bool(self, boundaries, out_int32, right); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_bucketize_out_attensor_attensor_attensor_bool_bool)(void* out, void* self, void* boundaries, void* out_int32, void* right);
  HOST_API void* lantern_bucketize_out_attensor_attensor_attensor_bool_bool(void* out, void* self, void* boundaries, void* out_int32, void* right) { void* ret = _lantern_bucketize_out_attensor_attensor_attensor_bool_bool(out, self, boundaries, out_int32, right); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_bucketize_constatscalar_attensor_bool_bool)(void* self, void* boundaries, void* out_int32, void* right);
  HOST_API void* lantern_bucketize_constatscalar_attensor_bool_bool(void* self, void* boundaries, void* out_int32, void* right) { void* ret = _lantern_bucketize_constatscalar_attensor_bool_bool(self, boundaries, out_int32, right); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_searchsorted_attensor_attensor_bool_bool)(void* sorted_sequence, void* self, void* out_int32, void* right);
  HOST_API void* lantern_searchsorted_attensor_attensor_bool_bool(void* sorted_sequence, void* self, void* out_int32, void* right) { void* ret = _lantern_searchsorted_attensor_attensor_bool_bool(sorted_sequence, self, out_int32, right); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_searchsorted_out_attensor_attensor_attensor_bool_bool)(void* out, void* sorted_sequence, void* self, void* out_int32, void* right);
  HOST_API void* lantern_searchsorted_out_attensor_attensor_attensor_bool_bool(void* out, void* sorted_sequence, void* self, void* out_int32, void* right) { void* ret = _lantern_searchsorted_out_attensor_attensor_attensor_bool_bool(out, sorted_sequence, self, out_int32, right); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_searchsorted_attensor_constatscalar_bool_bool)(void* sorted_sequence, void* self, void* out_int32, void* right);
  HOST_API void* lantern_searchsorted_attensor_constatscalar_bool_bool(void* sorted_sequence, void* self, void* out_int32, void* right) { void* ret = _lantern_searchsorted_attensor_constatscalar_bool_bool(sorted_sequence, self, out_int32, right); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_mse_loss_out_attensor_attensor_attensor_intt)(void* out, void* self, void* target, void* reduction);
  HOST_API void* lantern_mse_loss_out_attensor_attensor_attensor_intt(void* out, void* self, void* target, void* reduction) { void* ret = _lantern_mse_loss_out_attensor_attensor_attensor_intt(out, self, target, reduction); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_mse_loss_attensor_attensor_intt)(void* self, void* target, void* reduction);
  HOST_API void* lantern_mse_loss_attensor_attensor_intt(void* self, void* target, void* reduction) { void* ret = _lantern_mse_loss_attensor_attensor_intt(self, target, reduction); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_mse_loss_backward_out_attensor_attensor_attensor_attensor_intt)(void* grad_input, void* grad_output, void* self, void* target, void* reduction);
  HOST_API void* lantern_mse_loss_backward_out_attensor_attensor_attensor_attensor_intt(void* grad_input, void* grad_output, void* self, void* target, void* reduction) { void* ret = _lantern_mse_loss_backward_out_attensor_attensor_attensor_attensor_intt(grad_input, grad_output, self, target, reduction); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_mse_loss_backward_attensor_attensor_attensor_intt)(void* grad_output, void* self, void* target, void* reduction);
  HOST_API void* lantern_mse_loss_backward_attensor_attensor_attensor_intt(void* grad_output, void* self, void* target, void* reduction) { void* ret = _lantern_mse_loss_backward_attensor_attensor_attensor_intt(grad_output, self, target, reduction); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_l1_loss_out_attensor_attensor_attensor_intt)(void* out, void* self, void* target, void* reduction);
  HOST_API void* lantern_l1_loss_out_attensor_attensor_attensor_intt(void* out, void* self, void* target, void* reduction) { void* ret = _lantern_l1_loss_out_attensor_attensor_attensor_intt(out, self, target, reduction); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_l1_loss_attensor_attensor_intt)(void* self, void* target, void* reduction);
  HOST_API void* lantern_l1_loss_attensor_attensor_intt(void* self, void* target, void* reduction) { void* ret = _lantern_l1_loss_attensor_attensor_intt(self, target, reduction); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_l1_loss_backward_out_attensor_attensor_attensor_attensor_intt)(void* grad_input, void* grad_output, void* self, void* target, void* reduction);
  HOST_API void* lantern_l1_loss_backward_out_attensor_attensor_attensor_attensor_intt(void* grad_input, void* grad_output, void* self, void* target, void* reduction) { void* ret = _lantern_l1_loss_backward_out_attensor_attensor_attensor_attensor_intt(grad_input, grad_output, self, target, reduction); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_l1_loss_backward_attensor_attensor_attensor_intt)(void* grad_output, void* self, void* target, void* reduction);
  HOST_API void* lantern_l1_loss_backward_attensor_attensor_attensor_intt(void* grad_output, void* self, void* target, void* reduction) { void* ret = _lantern_l1_loss_backward_attensor_attensor_attensor_intt(grad_output, self, target, reduction); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_multi_margin_loss_out_attensor_attensor_attensor_constatscalar_constatscalar_attensor_intt)(void* out, void* self, void* target, void* p, void* margin, void* weight, void* reduction);
  HOST_API void* lantern_multi_margin_loss_out_attensor_attensor_attensor_constatscalar_constatscalar_attensor_intt(void* out, void* self, void* target, void* p, void* margin, void* weight, void* reduction) { void* ret = _lantern_multi_margin_loss_out_attensor_attensor_attensor_constatscalar_constatscalar_attensor_intt(out, self, target, p, margin, weight, reduction); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_multi_margin_loss_attensor_attensor_constatscalar_constatscalar_attensor_intt)(void* self, void* target, void* p, void* margin, void* weight, void* reduction);
  HOST_API void* lantern_multi_margin_loss_attensor_attensor_constatscalar_constatscalar_attensor_intt(void* self, void* target, void* p, void* margin, void* weight, void* reduction) { void* ret = _lantern_multi_margin_loss_attensor_attensor_constatscalar_constatscalar_attensor_intt(self, target, p, margin, weight, reduction); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_multi_margin_loss_backward_out_attensor_attensor_attensor_attensor_constatscalar_constatscalar_attensor_intt)(void* grad_input, void* grad_output, void* self, void* target, void* p, void* margin, void* weight, void* reduction);
  HOST_API void* lantern_multi_margin_loss_backward_out_attensor_attensor_attensor_attensor_constatscalar_constatscalar_attensor_intt(void* grad_input, void* grad_output, void* self, void* target, void* p, void* margin, void* weight, void* reduction) { void* ret = _lantern_multi_margin_loss_backward_out_attensor_attensor_attensor_attensor_constatscalar_constatscalar_attensor_intt(grad_input, grad_output, self, target, p, margin, weight, reduction); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_multi_margin_loss_backward_attensor_attensor_attensor_constatscalar_constatscalar_attensor_intt)(void* grad_output, void* self, void* target, void* p, void* margin, void* weight, void* reduction);
  HOST_API void* lantern_multi_margin_loss_backward_attensor_attensor_attensor_constatscalar_constatscalar_attensor_intt(void* grad_output, void* self, void* target, void* p, void* margin, void* weight, void* reduction) { void* ret = _lantern_multi_margin_loss_backward_attensor_attensor_attensor_constatscalar_constatscalar_attensor_intt(grad_output, self, target, p, margin, weight, reduction); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_multilabel_margin_loss_out_attensor_attensor_attensor_intt)(void* out, void* self, void* target, void* reduction);
  HOST_API void* lantern_multilabel_margin_loss_out_attensor_attensor_attensor_intt(void* out, void* self, void* target, void* reduction) { void* ret = _lantern_multilabel_margin_loss_out_attensor_attensor_attensor_intt(out, self, target, reduction); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_multilabel_margin_loss_attensor_attensor_intt)(void* self, void* target, void* reduction);
  HOST_API void* lantern_multilabel_margin_loss_attensor_attensor_intt(void* self, void* target, void* reduction) { void* ret = _lantern_multilabel_margin_loss_attensor_attensor_intt(self, target, reduction); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_multilabel_margin_loss_forward_out_attensor_attensor_attensor_attensor_intt)(void* output, void* is_target, void* self, void* target, void* reduction);
  HOST_API void* lantern_multilabel_margin_loss_forward_out_attensor_attensor_attensor_attensor_intt(void* output, void* is_target, void* self, void* target, void* reduction) { void* ret = _lantern_multilabel_margin_loss_forward_out_attensor_attensor_attensor_attensor_intt(output, is_target, self, target, reduction); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_multilabel_margin_loss_forward_attensor_attensor_intt)(void* self, void* target, void* reduction);
  HOST_API void* lantern_multilabel_margin_loss_forward_attensor_attensor_intt(void* self, void* target, void* reduction) { void* ret = _lantern_multilabel_margin_loss_forward_attensor_attensor_intt(self, target, reduction); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_multilabel_margin_loss_backward_out_attensor_attensor_attensor_attensor_intt_attensor)(void* grad_input, void* grad_output, void* self, void* target, void* reduction, void* is_target);
  HOST_API void* lantern_multilabel_margin_loss_backward_out_attensor_attensor_attensor_attensor_intt_attensor(void* grad_input, void* grad_output, void* self, void* target, void* reduction, void* is_target) { void* ret = _lantern_multilabel_margin_loss_backward_out_attensor_attensor_attensor_attensor_intt_attensor(grad_input, grad_output, self, target, reduction, is_target); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_multilabel_margin_loss_backward_attensor_attensor_attensor_intt_attensor)(void* grad_output, void* self, void* target, void* reduction, void* is_target);
  HOST_API void* lantern_multilabel_margin_loss_backward_attensor_attensor_attensor_intt_attensor(void* grad_output, void* self, void* target, void* reduction, void* is_target) { void* ret = _lantern_multilabel_margin_loss_backward_attensor_attensor_attensor_intt_attensor(grad_output, self, target, reduction, is_target); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_nll_loss_out_attensor_attensor_attensor_attensor_intt_intt)(void* out, void* self, void* target, void* weight, void* reduction, void* ignore_index);
  HOST_API void* lantern_nll_loss_out_attensor_attensor_attensor_attensor_intt_intt(void* out, void* self, void* target, void* weight, void* reduction, void* ignore_index) { void* ret = _lantern_nll_loss_out_attensor_attensor_attensor_attensor_intt_intt(out, self, target, weight, reduction, ignore_index); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_nll_loss_nd_attensor_attensor_attensor_intt_intt)(void* self, void* target, void* weight, void* reduction, void* ignore_index);
  HOST_API void* lantern_nll_loss_nd_attensor_attensor_attensor_intt_intt(void* self, void* target, void* weight, void* reduction, void* ignore_index) { void* ret = _lantern_nll_loss_nd_attensor_attensor_attensor_intt_intt(self, target, weight, reduction, ignore_index); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_nll_loss_attensor_attensor_attensor_intt_intt)(void* self, void* target, void* weight, void* reduction, void* ignore_index);
  HOST_API void* lantern_nll_loss_attensor_attensor_attensor_intt_intt(void* self, void* target, void* weight, void* reduction, void* ignore_index) { void* ret = _lantern_nll_loss_attensor_attensor_attensor_intt_intt(self, target, weight, reduction, ignore_index); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_nll_loss_forward_out_attensor_attensor_attensor_attensor_attensor_intt_intt)(void* output, void* total_weight, void* self, void* target, void* weight, void* reduction, void* ignore_index);
  HOST_API void* lantern_nll_loss_forward_out_attensor_attensor_attensor_attensor_attensor_intt_intt(void* output, void* total_weight, void* self, void* target, void* weight, void* reduction, void* ignore_index) { void* ret = _lantern_nll_loss_forward_out_attensor_attensor_attensor_attensor_attensor_intt_intt(output, total_weight, self, target, weight, reduction, ignore_index); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_nll_loss_forward_attensor_attensor_attensor_intt_intt)(void* self, void* target, void* weight, void* reduction, void* ignore_index);
  HOST_API void* lantern_nll_loss_forward_attensor_attensor_attensor_intt_intt(void* self, void* target, void* weight, void* reduction, void* ignore_index) { void* ret = _lantern_nll_loss_forward_attensor_attensor_attensor_intt_intt(self, target, weight, reduction, ignore_index); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_nll_loss_backward_out_attensor_attensor_attensor_attensor_attensor_intt_intt_attensor)(void* grad_input, void* grad_output, void* self, void* target, void* weight, void* reduction, void* ignore_index, void* total_weight);
  HOST_API void* lantern_nll_loss_backward_out_attensor_attensor_attensor_attensor_attensor_intt_intt_attensor(void* grad_input, void* grad_output, void* self, void* target, void* weight, void* reduction, void* ignore_index, void* total_weight) { void* ret = _lantern_nll_loss_backward_out_attensor_attensor_attensor_attensor_attensor_intt_intt_attensor(grad_input, grad_output, self, target, weight, reduction, ignore_index, total_weight); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_nll_loss_backward_attensor_attensor_attensor_attensor_intt_intt_attensor)(void* grad_output, void* self, void* target, void* weight, void* reduction, void* ignore_index, void* total_weight);
  HOST_API void* lantern_nll_loss_backward_attensor_attensor_attensor_attensor_intt_intt_attensor(void* grad_output, void* self, void* target, void* weight, void* reduction, void* ignore_index, void* total_weight) { void* ret = _lantern_nll_loss_backward_attensor_attensor_attensor_attensor_intt_intt_attensor(grad_output, self, target, weight, reduction, ignore_index, total_weight); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_nll_loss2d_out_attensor_attensor_attensor_attensor_intt_intt)(void* out, void* self, void* target, void* weight, void* reduction, void* ignore_index);
  HOST_API void* lantern_nll_loss2d_out_attensor_attensor_attensor_attensor_intt_intt(void* out, void* self, void* target, void* weight, void* reduction, void* ignore_index) { void* ret = _lantern_nll_loss2d_out_attensor_attensor_attensor_attensor_intt_intt(out, self, target, weight, reduction, ignore_index); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_nll_loss2d_attensor_attensor_attensor_intt_intt)(void* self, void* target, void* weight, void* reduction, void* ignore_index);
  HOST_API void* lantern_nll_loss2d_attensor_attensor_attensor_intt_intt(void* self, void* target, void* weight, void* reduction, void* ignore_index) { void* ret = _lantern_nll_loss2d_attensor_attensor_attensor_intt_intt(self, target, weight, reduction, ignore_index); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_nll_loss2d_forward_out_attensor_attensor_attensor_attensor_attensor_intt_intt)(void* output, void* total_weight, void* self, void* target, void* weight, void* reduction, void* ignore_index);
  HOST_API void* lantern_nll_loss2d_forward_out_attensor_attensor_attensor_attensor_attensor_intt_intt(void* output, void* total_weight, void* self, void* target, void* weight, void* reduction, void* ignore_index) { void* ret = _lantern_nll_loss2d_forward_out_attensor_attensor_attensor_attensor_attensor_intt_intt(output, total_weight, self, target, weight, reduction, ignore_index); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_nll_loss2d_forward_attensor_attensor_attensor_intt_intt)(void* self, void* target, void* weight, void* reduction, void* ignore_index);
  HOST_API void* lantern_nll_loss2d_forward_attensor_attensor_attensor_intt_intt(void* self, void* target, void* weight, void* reduction, void* ignore_index) { void* ret = _lantern_nll_loss2d_forward_attensor_attensor_attensor_intt_intt(self, target, weight, reduction, ignore_index); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_nll_loss2d_backward_out_attensor_attensor_attensor_attensor_attensor_intt_intt_attensor)(void* grad_input, void* grad_output, void* self, void* target, void* weight, void* reduction, void* ignore_index, void* total_weight);
  HOST_API void* lantern_nll_loss2d_backward_out_attensor_attensor_attensor_attensor_attensor_intt_intt_attensor(void* grad_input, void* grad_output, void* self, void* target, void* weight, void* reduction, void* ignore_index, void* total_weight) { void* ret = _lantern_nll_loss2d_backward_out_attensor_attensor_attensor_attensor_attensor_intt_intt_attensor(grad_input, grad_output, self, target, weight, reduction, ignore_index, total_weight); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_nll_loss2d_backward_attensor_attensor_attensor_attensor_intt_intt_attensor)(void* grad_output, void* self, void* target, void* weight, void* reduction, void* ignore_index, void* total_weight);
  HOST_API void* lantern_nll_loss2d_backward_attensor_attensor_attensor_attensor_intt_intt_attensor(void* grad_output, void* self, void* target, void* weight, void* reduction, void* ignore_index, void* total_weight) { void* ret = _lantern_nll_loss2d_backward_attensor_attensor_attensor_attensor_intt_intt_attensor(grad_output, self, target, weight, reduction, ignore_index, total_weight); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_smooth_l1_loss_out_attensor_attensor_attensor_intt_double)(void* out, void* self, void* target, void* reduction, void* beta);
  HOST_API void* lantern_smooth_l1_loss_out_attensor_attensor_attensor_intt_double(void* out, void* self, void* target, void* reduction, void* beta) { void* ret = _lantern_smooth_l1_loss_out_attensor_attensor_attensor_intt_double(out, self, target, reduction, beta); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_smooth_l1_loss_attensor_attensor_intt_double)(void* self, void* target, void* reduction, void* beta);
  HOST_API void* lantern_smooth_l1_loss_attensor_attensor_intt_double(void* self, void* target, void* reduction, void* beta) { void* ret = _lantern_smooth_l1_loss_attensor_attensor_intt_double(self, target, reduction, beta); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_smooth_l1_loss_backward_out_attensor_attensor_attensor_attensor_intt_double)(void* grad_input, void* grad_output, void* self, void* target, void* reduction, void* beta);
  HOST_API void* lantern_smooth_l1_loss_backward_out_attensor_attensor_attensor_attensor_intt_double(void* grad_input, void* grad_output, void* self, void* target, void* reduction, void* beta) { void* ret = _lantern_smooth_l1_loss_backward_out_attensor_attensor_attensor_attensor_intt_double(grad_input, grad_output, self, target, reduction, beta); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_smooth_l1_loss_backward_attensor_attensor_attensor_intt_double)(void* grad_output, void* self, void* target, void* reduction, void* beta);
  HOST_API void* lantern_smooth_l1_loss_backward_attensor_attensor_attensor_intt_double(void* grad_output, void* self, void* target, void* reduction, void* beta) { void* ret = _lantern_smooth_l1_loss_backward_attensor_attensor_attensor_intt_double(grad_output, self, target, reduction, beta); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_huber_loss_out_attensor_attensor_attensor_intt_double)(void* out, void* self, void* target, void* reduction, void* delta);
  HOST_API void* lantern_huber_loss_out_attensor_attensor_attensor_intt_double(void* out, void* self, void* target, void* reduction, void* delta) { void* ret = _lantern_huber_loss_out_attensor_attensor_attensor_intt_double(out, self, target, reduction, delta); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_huber_loss_attensor_attensor_intt_double)(void* self, void* target, void* reduction, void* delta);
  HOST_API void* lantern_huber_loss_attensor_attensor_intt_double(void* self, void* target, void* reduction, void* delta) { void* ret = _lantern_huber_loss_attensor_attensor_intt_double(self, target, reduction, delta); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_huber_loss_backward_out_attensor_attensor_attensor_attensor_intt_double)(void* grad_input, void* grad_output, void* self, void* target, void* reduction, void* delta);
  HOST_API void* lantern_huber_loss_backward_out_attensor_attensor_attensor_attensor_intt_double(void* grad_input, void* grad_output, void* self, void* target, void* reduction, void* delta) { void* ret = _lantern_huber_loss_backward_out_attensor_attensor_attensor_attensor_intt_double(grad_input, grad_output, self, target, reduction, delta); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_huber_loss_backward_attensor_attensor_attensor_intt_double)(void* grad_output, void* self, void* target, void* reduction, void* delta);
  HOST_API void* lantern_huber_loss_backward_attensor_attensor_attensor_intt_double(void* grad_output, void* self, void* target, void* reduction, void* delta) { void* ret = _lantern_huber_loss_backward_attensor_attensor_attensor_intt_double(grad_output, self, target, reduction, delta); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_soft_margin_loss_out_attensor_attensor_attensor_intt)(void* out, void* self, void* target, void* reduction);
  HOST_API void* lantern_soft_margin_loss_out_attensor_attensor_attensor_intt(void* out, void* self, void* target, void* reduction) { void* ret = _lantern_soft_margin_loss_out_attensor_attensor_attensor_intt(out, self, target, reduction); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_soft_margin_loss_attensor_attensor_intt)(void* self, void* target, void* reduction);
  HOST_API void* lantern_soft_margin_loss_attensor_attensor_intt(void* self, void* target, void* reduction) { void* ret = _lantern_soft_margin_loss_attensor_attensor_intt(self, target, reduction); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_soft_margin_loss_backward_out_attensor_attensor_attensor_attensor_intt)(void* grad_input, void* grad_output, void* self, void* target, void* reduction);
  HOST_API void* lantern_soft_margin_loss_backward_out_attensor_attensor_attensor_attensor_intt(void* grad_input, void* grad_output, void* self, void* target, void* reduction) { void* ret = _lantern_soft_margin_loss_backward_out_attensor_attensor_attensor_attensor_intt(grad_input, grad_output, self, target, reduction); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_soft_margin_loss_backward_attensor_attensor_attensor_intt)(void* grad_output, void* self, void* target, void* reduction);
  HOST_API void* lantern_soft_margin_loss_backward_attensor_attensor_attensor_intt(void* grad_output, void* self, void* target, void* reduction) { void* ret = _lantern_soft_margin_loss_backward_attensor_attensor_attensor_intt(grad_output, self, target, reduction); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_elu_out_attensor_attensor_constatscalar_constatscalar_constatscalar)(void* out, void* self, void* alpha, void* scale, void* input_scale);
  HOST_API void* lantern_elu_out_attensor_attensor_constatscalar_constatscalar_constatscalar(void* out, void* self, void* alpha, void* scale, void* input_scale) { void* ret = _lantern_elu_out_attensor_attensor_constatscalar_constatscalar_constatscalar(out, self, alpha, scale, input_scale); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_elu_attensor_constatscalar_constatscalar_constatscalar)(void* self, void* alpha, void* scale, void* input_scale);
  HOST_API void* lantern_elu_attensor_constatscalar_constatscalar_constatscalar(void* self, void* alpha, void* scale, void* input_scale) { void* ret = _lantern_elu_attensor_constatscalar_constatscalar_constatscalar(self, alpha, scale, input_scale); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_elu_backward_attensor_constatscalar_constatscalar_constatscalar_bool_attensor)(void* grad_output, void* alpha, void* scale, void* input_scale, void* is_result, void* self_or_result);
  HOST_API void* lantern_elu_backward_attensor_constatscalar_constatscalar_constatscalar_bool_attensor(void* grad_output, void* alpha, void* scale, void* input_scale, void* is_result, void* self_or_result) { void* ret = _lantern_elu_backward_attensor_constatscalar_constatscalar_constatscalar_bool_attensor(grad_output, alpha, scale, input_scale, is_result, self_or_result); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_elu__attensor_constatscalar_constatscalar_constatscalar)(void* self, void* alpha, void* scale, void* input_scale);
  HOST_API void* lantern_elu__attensor_constatscalar_constatscalar_constatscalar(void* self, void* alpha, void* scale, void* input_scale) { void* ret = _lantern_elu__attensor_constatscalar_constatscalar_constatscalar(self, alpha, scale, input_scale); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_glu_out_attensor_attensor_intt)(void* out, void* self, void* dim);
  HOST_API void* lantern_glu_out_attensor_attensor_intt(void* out, void* self, void* dim) { void* ret = _lantern_glu_out_attensor_attensor_intt(out, self, dim); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_glu_attensor_intt)(void* self, void* dim);
  HOST_API void* lantern_glu_attensor_intt(void* self, void* dim) { void* ret = _lantern_glu_attensor_intt(self, dim); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_glu_backward_out_attensor_attensor_attensor_intt)(void* grad_input, void* grad_output, void* self, void* dim);
  HOST_API void* lantern_glu_backward_out_attensor_attensor_attensor_intt(void* grad_input, void* grad_output, void* self, void* dim) { void* ret = _lantern_glu_backward_out_attensor_attensor_attensor_intt(grad_input, grad_output, self, dim); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_glu_backward_attensor_attensor_intt)(void* grad_output, void* self, void* dim);
  HOST_API void* lantern_glu_backward_attensor_attensor_intt(void* grad_output, void* self, void* dim) { void* ret = _lantern_glu_backward_attensor_attensor_intt(grad_output, self, dim); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_hardsigmoid_out_attensor_attensor)(void* out, void* self);
  HOST_API void* lantern_hardsigmoid_out_attensor_attensor(void* out, void* self) { void* ret = _lantern_hardsigmoid_out_attensor_attensor(out, self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_hardsigmoid_attensor)(void* self);
  HOST_API void* lantern_hardsigmoid_attensor(void* self) { void* ret = _lantern_hardsigmoid_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_hardsigmoid__attensor)(void* self);
  HOST_API void* lantern_hardsigmoid__attensor(void* self) { void* ret = _lantern_hardsigmoid__attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_hardsigmoid_backward_attensor_attensor)(void* grad_output, void* self);
  HOST_API void* lantern_hardsigmoid_backward_attensor_attensor(void* grad_output, void* self) { void* ret = _lantern_hardsigmoid_backward_attensor_attensor(grad_output, self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_hardtanh_out_attensor_attensor_constatscalar_constatscalar)(void* out, void* self, void* min_val, void* max_val);
  HOST_API void* lantern_hardtanh_out_attensor_attensor_constatscalar_constatscalar(void* out, void* self, void* min_val, void* max_val) { void* ret = _lantern_hardtanh_out_attensor_attensor_constatscalar_constatscalar(out, self, min_val, max_val); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_hardtanh_attensor_constatscalar_constatscalar)(void* self, void* min_val, void* max_val);
  HOST_API void* lantern_hardtanh_attensor_constatscalar_constatscalar(void* self, void* min_val, void* max_val) { void* ret = _lantern_hardtanh_attensor_constatscalar_constatscalar(self, min_val, max_val); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_hardtanh_backward_out_attensor_attensor_attensor_constatscalar_constatscalar)(void* grad_input, void* grad_output, void* self, void* min_val, void* max_val);
  HOST_API void* lantern_hardtanh_backward_out_attensor_attensor_attensor_constatscalar_constatscalar(void* grad_input, void* grad_output, void* self, void* min_val, void* max_val) { void* ret = _lantern_hardtanh_backward_out_attensor_attensor_attensor_constatscalar_constatscalar(grad_input, grad_output, self, min_val, max_val); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_hardtanh_backward_attensor_attensor_constatscalar_constatscalar)(void* grad_output, void* self, void* min_val, void* max_val);
  HOST_API void* lantern_hardtanh_backward_attensor_attensor_constatscalar_constatscalar(void* grad_output, void* self, void* min_val, void* max_val) { void* ret = _lantern_hardtanh_backward_attensor_attensor_constatscalar_constatscalar(grad_output, self, min_val, max_val); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_hardtanh__attensor_constatscalar_constatscalar)(void* self, void* min_val, void* max_val);
  HOST_API void* lantern_hardtanh__attensor_constatscalar_constatscalar(void* self, void* min_val, void* max_val) { void* ret = _lantern_hardtanh__attensor_constatscalar_constatscalar(self, min_val, max_val); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_hardswish_out_attensor_attensor)(void* out, void* self);
  HOST_API void* lantern_hardswish_out_attensor_attensor(void* out, void* self) { void* ret = _lantern_hardswish_out_attensor_attensor(out, self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_hardswish_attensor)(void* self);
  HOST_API void* lantern_hardswish_attensor(void* self) { void* ret = _lantern_hardswish_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_hardswish__attensor)(void* self);
  HOST_API void* lantern_hardswish__attensor(void* self) { void* ret = _lantern_hardswish__attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_hardswish_backward_attensor_attensor)(void* grad_output, void* self);
  HOST_API void* lantern_hardswish_backward_attensor_attensor(void* grad_output, void* self) { void* ret = _lantern_hardswish_backward_attensor_attensor(grad_output, self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_leaky_relu_out_attensor_attensor_constatscalar)(void* out, void* self, void* negative_slope);
  HOST_API void* lantern_leaky_relu_out_attensor_attensor_constatscalar(void* out, void* self, void* negative_slope) { void* ret = _lantern_leaky_relu_out_attensor_attensor_constatscalar(out, self, negative_slope); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_leaky_relu_attensor_constatscalar)(void* self, void* negative_slope);
  HOST_API void* lantern_leaky_relu_attensor_constatscalar(void* self, void* negative_slope) { void* ret = _lantern_leaky_relu_attensor_constatscalar(self, negative_slope); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_leaky_relu_backward_attensor_attensor_constatscalar_bool)(void* grad_output, void* self, void* negative_slope, void* self_is_result);
  HOST_API void* lantern_leaky_relu_backward_attensor_attensor_constatscalar_bool(void* grad_output, void* self, void* negative_slope, void* self_is_result) { void* ret = _lantern_leaky_relu_backward_attensor_attensor_constatscalar_bool(grad_output, self, negative_slope, self_is_result); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_leaky_relu__attensor_constatscalar)(void* self, void* negative_slope);
  HOST_API void* lantern_leaky_relu__attensor_constatscalar(void* self, void* negative_slope) { void* ret = _lantern_leaky_relu__attensor_constatscalar(self, negative_slope); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_log_sigmoid_out_attensor_attensor)(void* out, void* self);
  HOST_API void* lantern_log_sigmoid_out_attensor_attensor(void* out, void* self) { void* ret = _lantern_log_sigmoid_out_attensor_attensor(out, self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_log_sigmoid_attensor)(void* self);
  HOST_API void* lantern_log_sigmoid_attensor(void* self) { void* ret = _lantern_log_sigmoid_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_log_sigmoid_forward_out_attensor_attensor_attensor)(void* output, void* buffer, void* self);
  HOST_API void* lantern_log_sigmoid_forward_out_attensor_attensor_attensor(void* output, void* buffer, void* self) { void* ret = _lantern_log_sigmoid_forward_out_attensor_attensor_attensor(output, buffer, self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_log_sigmoid_forward_attensor)(void* self);
  HOST_API void* lantern_log_sigmoid_forward_attensor(void* self) { void* ret = _lantern_log_sigmoid_forward_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_log_sigmoid_backward_out_attensor_attensor_attensor_attensor)(void* grad_input, void* grad_output, void* self, void* buffer);
  HOST_API void* lantern_log_sigmoid_backward_out_attensor_attensor_attensor_attensor(void* grad_input, void* grad_output, void* self, void* buffer) { void* ret = _lantern_log_sigmoid_backward_out_attensor_attensor_attensor_attensor(grad_input, grad_output, self, buffer); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_log_sigmoid_backward_attensor_attensor_attensor)(void* grad_output, void* self, void* buffer);
  HOST_API void* lantern_log_sigmoid_backward_attensor_attensor_attensor(void* grad_output, void* self, void* buffer) { void* ret = _lantern_log_sigmoid_backward_attensor_attensor_attensor(grad_output, self, buffer); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_rrelu_with_noise_out_attensor_attensor_attensor_constatscalar_constatscalar_bool_atgenerator)(void* out, void* self, void* noise, void* lower, void* upper, void* training, void* generator);
  HOST_API void* lantern_rrelu_with_noise_out_attensor_attensor_attensor_constatscalar_constatscalar_bool_atgenerator(void* out, void* self, void* noise, void* lower, void* upper, void* training, void* generator) { void* ret = _lantern_rrelu_with_noise_out_attensor_attensor_attensor_constatscalar_constatscalar_bool_atgenerator(out, self, noise, lower, upper, training, generator); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_rrelu_with_noise_attensor_attensor_constatscalar_constatscalar_bool_atgenerator)(void* self, void* noise, void* lower, void* upper, void* training, void* generator);
  HOST_API void* lantern_rrelu_with_noise_attensor_attensor_constatscalar_constatscalar_bool_atgenerator(void* self, void* noise, void* lower, void* upper, void* training, void* generator) { void* ret = _lantern_rrelu_with_noise_attensor_attensor_constatscalar_constatscalar_bool_atgenerator(self, noise, lower, upper, training, generator); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_rrelu_with_noise_backward_attensor_attensor_attensor_constatscalar_constatscalar_bool_bool)(void* grad_output, void* self, void* noise, void* lower, void* upper, void* training, void* self_is_result);
  HOST_API void* lantern_rrelu_with_noise_backward_attensor_attensor_attensor_constatscalar_constatscalar_bool_bool(void* grad_output, void* self, void* noise, void* lower, void* upper, void* training, void* self_is_result) { void* ret = _lantern_rrelu_with_noise_backward_attensor_attensor_attensor_constatscalar_constatscalar_bool_bool(grad_output, self, noise, lower, upper, training, self_is_result); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_rrelu_with_noise__attensor_attensor_constatscalar_constatscalar_bool_atgenerator)(void* self, void* noise, void* lower, void* upper, void* training, void* generator);
  HOST_API void* lantern_rrelu_with_noise__attensor_attensor_constatscalar_constatscalar_bool_atgenerator(void* self, void* noise, void* lower, void* upper, void* training, void* generator) { void* ret = _lantern_rrelu_with_noise__attensor_attensor_constatscalar_constatscalar_bool_atgenerator(self, noise, lower, upper, training, generator); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_softplus_out_attensor_attensor_constatscalar_constatscalar)(void* out, void* self, void* beta, void* threshold);
  HOST_API void* lantern_softplus_out_attensor_attensor_constatscalar_constatscalar(void* out, void* self, void* beta, void* threshold) { void* ret = _lantern_softplus_out_attensor_attensor_constatscalar_constatscalar(out, self, beta, threshold); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_softplus_attensor_constatscalar_constatscalar)(void* self, void* beta, void* threshold);
  HOST_API void* lantern_softplus_attensor_constatscalar_constatscalar(void* self, void* beta, void* threshold) { void* ret = _lantern_softplus_attensor_constatscalar_constatscalar(self, beta, threshold); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_softplus_backward_out_attensor_attensor_attensor_constatscalar_constatscalar_attensor)(void* grad_input, void* grad_output, void* self, void* beta, void* threshold, void* output);
  HOST_API void* lantern_softplus_backward_out_attensor_attensor_attensor_constatscalar_constatscalar_attensor(void* grad_input, void* grad_output, void* self, void* beta, void* threshold, void* output) { void* ret = _lantern_softplus_backward_out_attensor_attensor_attensor_constatscalar_constatscalar_attensor(grad_input, grad_output, self, beta, threshold, output); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_softplus_backward_attensor_attensor_constatscalar_constatscalar_attensor)(void* grad_output, void* self, void* beta, void* threshold, void* output);
  HOST_API void* lantern_softplus_backward_attensor_attensor_constatscalar_constatscalar_attensor(void* grad_output, void* self, void* beta, void* threshold, void* output) { void* ret = _lantern_softplus_backward_attensor_attensor_constatscalar_constatscalar_attensor(grad_output, self, beta, threshold, output); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_softshrink_out_attensor_attensor_constatscalar)(void* out, void* self, void* lambd);
  HOST_API void* lantern_softshrink_out_attensor_attensor_constatscalar(void* out, void* self, void* lambd) { void* ret = _lantern_softshrink_out_attensor_attensor_constatscalar(out, self, lambd); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_softshrink_attensor_constatscalar)(void* self, void* lambd);
  HOST_API void* lantern_softshrink_attensor_constatscalar(void* self, void* lambd) { void* ret = _lantern_softshrink_attensor_constatscalar(self, lambd); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_softshrink_backward_out_attensor_attensor_attensor_constatscalar)(void* grad_input, void* grad_output, void* self, void* lambd);
  HOST_API void* lantern_softshrink_backward_out_attensor_attensor_attensor_constatscalar(void* grad_input, void* grad_output, void* self, void* lambd) { void* ret = _lantern_softshrink_backward_out_attensor_attensor_attensor_constatscalar(grad_input, grad_output, self, lambd); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_softshrink_backward_attensor_attensor_constatscalar)(void* grad_output, void* self, void* lambd);
  HOST_API void* lantern_softshrink_backward_attensor_attensor_constatscalar(void* grad_output, void* self, void* lambd) { void* ret = _lantern_softshrink_backward_attensor_attensor_constatscalar(grad_output, self, lambd); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_adaptive_avg_pool2d_out_attensor_attensor_atintarrayref)(void* out, void* self, void* output_size);
  HOST_API void* lantern_adaptive_avg_pool2d_out_attensor_attensor_atintarrayref(void* out, void* self, void* output_size) { void* ret = _lantern_adaptive_avg_pool2d_out_attensor_attensor_atintarrayref(out, self, output_size); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_adaptive_avg_pool2d_attensor_atintarrayref)(void* self, void* output_size);
  HOST_API void* lantern_adaptive_avg_pool2d_attensor_atintarrayref(void* self, void* output_size) { void* ret = _lantern_adaptive_avg_pool2d_attensor_atintarrayref(self, output_size); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_mkldnn_adaptive_avg_pool2d_attensor_atintarrayref)(void* self, void* output_size);
  HOST_API void* lantern_mkldnn_adaptive_avg_pool2d_attensor_atintarrayref(void* self, void* output_size) { void* ret = _lantern_mkldnn_adaptive_avg_pool2d_attensor_atintarrayref(self, output_size); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_mkldnn_adaptive_avg_pool2d_backward_attensor_attensor)(void* grad_output, void* self);
  HOST_API void* lantern_mkldnn_adaptive_avg_pool2d_backward_attensor_attensor(void* grad_output, void* self) { void* ret = _lantern_mkldnn_adaptive_avg_pool2d_backward_attensor_attensor(grad_output, self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__adaptive_avg_pool2d_attensor_atintarrayref)(void* self, void* output_size);
  HOST_API void* lantern__adaptive_avg_pool2d_attensor_atintarrayref(void* self, void* output_size) { void* ret = _lantern__adaptive_avg_pool2d_attensor_atintarrayref(self, output_size); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__adaptive_avg_pool2d_backward_attensor_attensor)(void* grad_output, void* self);
  HOST_API void* lantern__adaptive_avg_pool2d_backward_attensor_attensor(void* grad_output, void* self) { void* ret = _lantern__adaptive_avg_pool2d_backward_attensor_attensor(grad_output, self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_adaptive_avg_pool3d_out_attensor_attensor_atintarrayref)(void* out, void* self, void* output_size);
  HOST_API void* lantern_adaptive_avg_pool3d_out_attensor_attensor_atintarrayref(void* out, void* self, void* output_size) { void* ret = _lantern_adaptive_avg_pool3d_out_attensor_attensor_atintarrayref(out, self, output_size); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_adaptive_avg_pool3d_attensor_atintarrayref)(void* self, void* output_size);
  HOST_API void* lantern_adaptive_avg_pool3d_attensor_atintarrayref(void* self, void* output_size) { void* ret = _lantern_adaptive_avg_pool3d_attensor_atintarrayref(self, output_size); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__adaptive_avg_pool3d_attensor_atintarrayref)(void* self, void* output_size);
  HOST_API void* lantern__adaptive_avg_pool3d_attensor_atintarrayref(void* self, void* output_size) { void* ret = _lantern__adaptive_avg_pool3d_attensor_atintarrayref(self, output_size); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_adaptive_avg_pool3d_backward_out_attensor_attensor_attensor)(void* grad_input, void* grad_output, void* self);
  HOST_API void* lantern_adaptive_avg_pool3d_backward_out_attensor_attensor_attensor(void* grad_input, void* grad_output, void* self) { void* ret = _lantern_adaptive_avg_pool3d_backward_out_attensor_attensor_attensor(grad_input, grad_output, self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__adaptive_avg_pool3d_backward_attensor_attensor)(void* grad_output, void* self);
  HOST_API void* lantern__adaptive_avg_pool3d_backward_attensor_attensor(void* grad_output, void* self) { void* ret = _lantern__adaptive_avg_pool3d_backward_attensor_attensor(grad_output, self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_adaptive_max_pool2d_out_attensor_attensor_attensor_atintarrayref)(void* out, void* indices, void* self, void* output_size);
  HOST_API void* lantern_adaptive_max_pool2d_out_attensor_attensor_attensor_atintarrayref(void* out, void* indices, void* self, void* output_size) { void* ret = _lantern_adaptive_max_pool2d_out_attensor_attensor_attensor_atintarrayref(out, indices, self, output_size); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_adaptive_max_pool2d_attensor_atintarrayref)(void* self, void* output_size);
  HOST_API void* lantern_adaptive_max_pool2d_attensor_atintarrayref(void* self, void* output_size) { void* ret = _lantern_adaptive_max_pool2d_attensor_atintarrayref(self, output_size); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_adaptive_max_pool2d_backward_out_attensor_attensor_attensor_attensor)(void* grad_input, void* grad_output, void* self, void* indices);
  HOST_API void* lantern_adaptive_max_pool2d_backward_out_attensor_attensor_attensor_attensor(void* grad_input, void* grad_output, void* self, void* indices) { void* ret = _lantern_adaptive_max_pool2d_backward_out_attensor_attensor_attensor_attensor(grad_input, grad_output, self, indices); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_adaptive_max_pool2d_backward_attensor_attensor_attensor)(void* grad_output, void* self, void* indices);
  HOST_API void* lantern_adaptive_max_pool2d_backward_attensor_attensor_attensor(void* grad_output, void* self, void* indices) { void* ret = _lantern_adaptive_max_pool2d_backward_attensor_attensor_attensor(grad_output, self, indices); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_adaptive_max_pool3d_out_attensor_attensor_attensor_atintarrayref)(void* out, void* indices, void* self, void* output_size);
  HOST_API void* lantern_adaptive_max_pool3d_out_attensor_attensor_attensor_atintarrayref(void* out, void* indices, void* self, void* output_size) { void* ret = _lantern_adaptive_max_pool3d_out_attensor_attensor_attensor_atintarrayref(out, indices, self, output_size); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_adaptive_max_pool3d_attensor_atintarrayref)(void* self, void* output_size);
  HOST_API void* lantern_adaptive_max_pool3d_attensor_atintarrayref(void* self, void* output_size) { void* ret = _lantern_adaptive_max_pool3d_attensor_atintarrayref(self, output_size); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_adaptive_max_pool3d_backward_out_attensor_attensor_attensor_attensor)(void* grad_input, void* grad_output, void* self, void* indices);
  HOST_API void* lantern_adaptive_max_pool3d_backward_out_attensor_attensor_attensor_attensor(void* grad_input, void* grad_output, void* self, void* indices) { void* ret = _lantern_adaptive_max_pool3d_backward_out_attensor_attensor_attensor_attensor(grad_input, grad_output, self, indices); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_adaptive_max_pool3d_backward_attensor_attensor_attensor)(void* grad_output, void* self, void* indices);
  HOST_API void* lantern_adaptive_max_pool3d_backward_attensor_attensor_attensor(void* grad_output, void* self, void* indices) { void* ret = _lantern_adaptive_max_pool3d_backward_attensor_attensor_attensor(grad_output, self, indices); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_avg_pool2d_out_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_bool_bool_intt)(void* out, void* self, void* kernel_size, void* stride, void* padding, void* ceil_mode, void* count_include_pad, void* divisor_override);
  HOST_API void* lantern_avg_pool2d_out_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_bool_bool_intt(void* out, void* self, void* kernel_size, void* stride, void* padding, void* ceil_mode, void* count_include_pad, void* divisor_override) { void* ret = _lantern_avg_pool2d_out_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_bool_bool_intt(out, self, kernel_size, stride, padding, ceil_mode, count_include_pad, divisor_override); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_avg_pool2d_attensor_atintarrayref_atintarrayref_atintarrayref_bool_bool_intt)(void* self, void* kernel_size, void* stride, void* padding, void* ceil_mode, void* count_include_pad, void* divisor_override);
  HOST_API void* lantern_avg_pool2d_attensor_atintarrayref_atintarrayref_atintarrayref_bool_bool_intt(void* self, void* kernel_size, void* stride, void* padding, void* ceil_mode, void* count_include_pad, void* divisor_override) { void* ret = _lantern_avg_pool2d_attensor_atintarrayref_atintarrayref_atintarrayref_bool_bool_intt(self, kernel_size, stride, padding, ceil_mode, count_include_pad, divisor_override); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_avg_pool2d_backward_out_attensor_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_bool_bool_intt)(void* grad_input, void* grad_output, void* self, void* kernel_size, void* stride, void* padding, void* ceil_mode, void* count_include_pad, void* divisor_override);
  HOST_API void* lantern_avg_pool2d_backward_out_attensor_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_bool_bool_intt(void* grad_input, void* grad_output, void* self, void* kernel_size, void* stride, void* padding, void* ceil_mode, void* count_include_pad, void* divisor_override) { void* ret = _lantern_avg_pool2d_backward_out_attensor_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_bool_bool_intt(grad_input, grad_output, self, kernel_size, stride, padding, ceil_mode, count_include_pad, divisor_override); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_avg_pool2d_backward_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_bool_bool_intt)(void* grad_output, void* self, void* kernel_size, void* stride, void* padding, void* ceil_mode, void* count_include_pad, void* divisor_override);
  HOST_API void* lantern_avg_pool2d_backward_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_bool_bool_intt(void* grad_output, void* self, void* kernel_size, void* stride, void* padding, void* ceil_mode, void* count_include_pad, void* divisor_override) { void* ret = _lantern_avg_pool2d_backward_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_bool_bool_intt(grad_output, self, kernel_size, stride, padding, ceil_mode, count_include_pad, divisor_override); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_avg_pool3d_out_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_bool_bool_intt)(void* out, void* self, void* kernel_size, void* stride, void* padding, void* ceil_mode, void* count_include_pad, void* divisor_override);
  HOST_API void* lantern_avg_pool3d_out_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_bool_bool_intt(void* out, void* self, void* kernel_size, void* stride, void* padding, void* ceil_mode, void* count_include_pad, void* divisor_override) { void* ret = _lantern_avg_pool3d_out_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_bool_bool_intt(out, self, kernel_size, stride, padding, ceil_mode, count_include_pad, divisor_override); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_avg_pool3d_attensor_atintarrayref_atintarrayref_atintarrayref_bool_bool_intt)(void* self, void* kernel_size, void* stride, void* padding, void* ceil_mode, void* count_include_pad, void* divisor_override);
  HOST_API void* lantern_avg_pool3d_attensor_atintarrayref_atintarrayref_atintarrayref_bool_bool_intt(void* self, void* kernel_size, void* stride, void* padding, void* ceil_mode, void* count_include_pad, void* divisor_override) { void* ret = _lantern_avg_pool3d_attensor_atintarrayref_atintarrayref_atintarrayref_bool_bool_intt(self, kernel_size, stride, padding, ceil_mode, count_include_pad, divisor_override); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_avg_pool3d_backward_out_attensor_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_bool_bool_intt)(void* grad_input, void* grad_output, void* self, void* kernel_size, void* stride, void* padding, void* ceil_mode, void* count_include_pad, void* divisor_override);
  HOST_API void* lantern_avg_pool3d_backward_out_attensor_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_bool_bool_intt(void* grad_input, void* grad_output, void* self, void* kernel_size, void* stride, void* padding, void* ceil_mode, void* count_include_pad, void* divisor_override) { void* ret = _lantern_avg_pool3d_backward_out_attensor_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_bool_bool_intt(grad_input, grad_output, self, kernel_size, stride, padding, ceil_mode, count_include_pad, divisor_override); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_avg_pool3d_backward_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_bool_bool_intt)(void* grad_output, void* self, void* kernel_size, void* stride, void* padding, void* ceil_mode, void* count_include_pad, void* divisor_override);
  HOST_API void* lantern_avg_pool3d_backward_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_bool_bool_intt(void* grad_output, void* self, void* kernel_size, void* stride, void* padding, void* ceil_mode, void* count_include_pad, void* divisor_override) { void* ret = _lantern_avg_pool3d_backward_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_bool_bool_intt(grad_output, self, kernel_size, stride, padding, ceil_mode, count_include_pad, divisor_override); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_fractional_max_pool2d_out_attensor_attensor_attensor_atintarrayref_atintarrayref_attensor)(void* output, void* indices, void* self, void* kernel_size, void* output_size, void* random_samples);
  HOST_API void* lantern_fractional_max_pool2d_out_attensor_attensor_attensor_atintarrayref_atintarrayref_attensor(void* output, void* indices, void* self, void* kernel_size, void* output_size, void* random_samples) { void* ret = _lantern_fractional_max_pool2d_out_attensor_attensor_attensor_atintarrayref_atintarrayref_attensor(output, indices, self, kernel_size, output_size, random_samples); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_fractional_max_pool2d_attensor_atintarrayref_atintarrayref_attensor)(void* self, void* kernel_size, void* output_size, void* random_samples);
  HOST_API void* lantern_fractional_max_pool2d_attensor_atintarrayref_atintarrayref_attensor(void* self, void* kernel_size, void* output_size, void* random_samples) { void* ret = _lantern_fractional_max_pool2d_attensor_atintarrayref_atintarrayref_attensor(self, kernel_size, output_size, random_samples); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_fractional_max_pool2d_backward_out_attensor_attensor_attensor_atintarrayref_atintarrayref_attensor)(void* grad_input, void* grad_output, void* self, void* kernel_size, void* output_size, void* indices);
  HOST_API void* lantern_fractional_max_pool2d_backward_out_attensor_attensor_attensor_atintarrayref_atintarrayref_attensor(void* grad_input, void* grad_output, void* self, void* kernel_size, void* output_size, void* indices) { void* ret = _lantern_fractional_max_pool2d_backward_out_attensor_attensor_attensor_atintarrayref_atintarrayref_attensor(grad_input, grad_output, self, kernel_size, output_size, indices); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_fractional_max_pool2d_backward_attensor_attensor_atintarrayref_atintarrayref_attensor)(void* grad_output, void* self, void* kernel_size, void* output_size, void* indices);
  HOST_API void* lantern_fractional_max_pool2d_backward_attensor_attensor_atintarrayref_atintarrayref_attensor(void* grad_output, void* self, void* kernel_size, void* output_size, void* indices) { void* ret = _lantern_fractional_max_pool2d_backward_attensor_attensor_atintarrayref_atintarrayref_attensor(grad_output, self, kernel_size, output_size, indices); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_fractional_max_pool3d_out_attensor_attensor_attensor_atintarrayref_atintarrayref_attensor)(void* output, void* indices, void* self, void* kernel_size, void* output_size, void* random_samples);
  HOST_API void* lantern_fractional_max_pool3d_out_attensor_attensor_attensor_atintarrayref_atintarrayref_attensor(void* output, void* indices, void* self, void* kernel_size, void* output_size, void* random_samples) { void* ret = _lantern_fractional_max_pool3d_out_attensor_attensor_attensor_atintarrayref_atintarrayref_attensor(output, indices, self, kernel_size, output_size, random_samples); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_fractional_max_pool3d_attensor_atintarrayref_atintarrayref_attensor)(void* self, void* kernel_size, void* output_size, void* random_samples);
  HOST_API void* lantern_fractional_max_pool3d_attensor_atintarrayref_atintarrayref_attensor(void* self, void* kernel_size, void* output_size, void* random_samples) { void* ret = _lantern_fractional_max_pool3d_attensor_atintarrayref_atintarrayref_attensor(self, kernel_size, output_size, random_samples); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_fractional_max_pool3d_backward_out_attensor_attensor_attensor_atintarrayref_atintarrayref_attensor)(void* grad_input, void* grad_output, void* self, void* kernel_size, void* output_size, void* indices);
  HOST_API void* lantern_fractional_max_pool3d_backward_out_attensor_attensor_attensor_atintarrayref_atintarrayref_attensor(void* grad_input, void* grad_output, void* self, void* kernel_size, void* output_size, void* indices) { void* ret = _lantern_fractional_max_pool3d_backward_out_attensor_attensor_attensor_atintarrayref_atintarrayref_attensor(grad_input, grad_output, self, kernel_size, output_size, indices); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_fractional_max_pool3d_backward_attensor_attensor_atintarrayref_atintarrayref_attensor)(void* grad_output, void* self, void* kernel_size, void* output_size, void* indices);
  HOST_API void* lantern_fractional_max_pool3d_backward_attensor_attensor_atintarrayref_atintarrayref_attensor(void* grad_output, void* self, void* kernel_size, void* output_size, void* indices) { void* ret = _lantern_fractional_max_pool3d_backward_attensor_attensor_atintarrayref_atintarrayref_attensor(grad_output, self, kernel_size, output_size, indices); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_max_pool2d_with_indices_out_attensor_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_atintarrayref_bool)(void* out, void* indices, void* self, void* kernel_size, void* stride, void* padding, void* dilation, void* ceil_mode);
  HOST_API void* lantern_max_pool2d_with_indices_out_attensor_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_atintarrayref_bool(void* out, void* indices, void* self, void* kernel_size, void* stride, void* padding, void* dilation, void* ceil_mode) { void* ret = _lantern_max_pool2d_with_indices_out_attensor_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_atintarrayref_bool(out, indices, self, kernel_size, stride, padding, dilation, ceil_mode); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_max_pool2d_with_indices_attensor_atintarrayref_atintarrayref_atintarrayref_atintarrayref_bool)(void* self, void* kernel_size, void* stride, void* padding, void* dilation, void* ceil_mode);
  HOST_API void* lantern_max_pool2d_with_indices_attensor_atintarrayref_atintarrayref_atintarrayref_atintarrayref_bool(void* self, void* kernel_size, void* stride, void* padding, void* dilation, void* ceil_mode) { void* ret = _lantern_max_pool2d_with_indices_attensor_atintarrayref_atintarrayref_atintarrayref_atintarrayref_bool(self, kernel_size, stride, padding, dilation, ceil_mode); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_max_pool2d_with_indices_backward_out_attensor_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_atintarrayref_bool_attensor)(void* grad_input, void* grad_output, void* self, void* kernel_size, void* stride, void* padding, void* dilation, void* ceil_mode, void* indices);
  HOST_API void* lantern_max_pool2d_with_indices_backward_out_attensor_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_atintarrayref_bool_attensor(void* grad_input, void* grad_output, void* self, void* kernel_size, void* stride, void* padding, void* dilation, void* ceil_mode, void* indices) { void* ret = _lantern_max_pool2d_with_indices_backward_out_attensor_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_atintarrayref_bool_attensor(grad_input, grad_output, self, kernel_size, stride, padding, dilation, ceil_mode, indices); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_max_pool2d_with_indices_backward_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_atintarrayref_bool_attensor)(void* grad_output, void* self, void* kernel_size, void* stride, void* padding, void* dilation, void* ceil_mode, void* indices);
  HOST_API void* lantern_max_pool2d_with_indices_backward_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_atintarrayref_bool_attensor(void* grad_output, void* self, void* kernel_size, void* stride, void* padding, void* dilation, void* ceil_mode, void* indices) { void* ret = _lantern_max_pool2d_with_indices_backward_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_atintarrayref_bool_attensor(grad_output, self, kernel_size, stride, padding, dilation, ceil_mode, indices); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_max_pool3d_with_indices_out_attensor_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_atintarrayref_bool)(void* out, void* indices, void* self, void* kernel_size, void* stride, void* padding, void* dilation, void* ceil_mode);
  HOST_API void* lantern_max_pool3d_with_indices_out_attensor_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_atintarrayref_bool(void* out, void* indices, void* self, void* kernel_size, void* stride, void* padding, void* dilation, void* ceil_mode) { void* ret = _lantern_max_pool3d_with_indices_out_attensor_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_atintarrayref_bool(out, indices, self, kernel_size, stride, padding, dilation, ceil_mode); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_max_pool3d_with_indices_attensor_atintarrayref_atintarrayref_atintarrayref_atintarrayref_bool)(void* self, void* kernel_size, void* stride, void* padding, void* dilation, void* ceil_mode);
  HOST_API void* lantern_max_pool3d_with_indices_attensor_atintarrayref_atintarrayref_atintarrayref_atintarrayref_bool(void* self, void* kernel_size, void* stride, void* padding, void* dilation, void* ceil_mode) { void* ret = _lantern_max_pool3d_with_indices_attensor_atintarrayref_atintarrayref_atintarrayref_atintarrayref_bool(self, kernel_size, stride, padding, dilation, ceil_mode); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_max_pool3d_with_indices_backward_out_attensor_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_atintarrayref_bool_attensor)(void* grad_input, void* grad_output, void* self, void* kernel_size, void* stride, void* padding, void* dilation, void* ceil_mode, void* indices);
  HOST_API void* lantern_max_pool3d_with_indices_backward_out_attensor_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_atintarrayref_bool_attensor(void* grad_input, void* grad_output, void* self, void* kernel_size, void* stride, void* padding, void* dilation, void* ceil_mode, void* indices) { void* ret = _lantern_max_pool3d_with_indices_backward_out_attensor_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_atintarrayref_bool_attensor(grad_input, grad_output, self, kernel_size, stride, padding, dilation, ceil_mode, indices); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_max_pool3d_with_indices_backward_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_atintarrayref_bool_attensor)(void* grad_output, void* self, void* kernel_size, void* stride, void* padding, void* dilation, void* ceil_mode, void* indices);
  HOST_API void* lantern_max_pool3d_with_indices_backward_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_atintarrayref_bool_attensor(void* grad_output, void* self, void* kernel_size, void* stride, void* padding, void* dilation, void* ceil_mode, void* indices) { void* ret = _lantern_max_pool3d_with_indices_backward_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_atintarrayref_bool_attensor(grad_output, self, kernel_size, stride, padding, dilation, ceil_mode, indices); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_max_unpool2d_out_attensor_attensor_attensor_atintarrayref)(void* out, void* self, void* indices, void* output_size);
  HOST_API void* lantern_max_unpool2d_out_attensor_attensor_attensor_atintarrayref(void* out, void* self, void* indices, void* output_size) { void* ret = _lantern_max_unpool2d_out_attensor_attensor_attensor_atintarrayref(out, self, indices, output_size); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_max_unpool2d_attensor_attensor_atintarrayref)(void* self, void* indices, void* output_size);
  HOST_API void* lantern_max_unpool2d_attensor_attensor_atintarrayref(void* self, void* indices, void* output_size) { void* ret = _lantern_max_unpool2d_attensor_attensor_atintarrayref(self, indices, output_size); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_max_unpool2d_backward_out_attensor_attensor_attensor_attensor_atintarrayref)(void* grad_input, void* grad_output, void* self, void* indices, void* output_size);
  HOST_API void* lantern_max_unpool2d_backward_out_attensor_attensor_attensor_attensor_atintarrayref(void* grad_input, void* grad_output, void* self, void* indices, void* output_size) { void* ret = _lantern_max_unpool2d_backward_out_attensor_attensor_attensor_attensor_atintarrayref(grad_input, grad_output, self, indices, output_size); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_max_unpool2d_backward_attensor_attensor_attensor_atintarrayref)(void* grad_output, void* self, void* indices, void* output_size);
  HOST_API void* lantern_max_unpool2d_backward_attensor_attensor_attensor_atintarrayref(void* grad_output, void* self, void* indices, void* output_size) { void* ret = _lantern_max_unpool2d_backward_attensor_attensor_attensor_atintarrayref(grad_output, self, indices, output_size); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_max_unpool3d_out_attensor_attensor_attensor_atintarrayref_atintarrayref_atintarrayref)(void* out, void* self, void* indices, void* output_size, void* stride, void* padding);
  HOST_API void* lantern_max_unpool3d_out_attensor_attensor_attensor_atintarrayref_atintarrayref_atintarrayref(void* out, void* self, void* indices, void* output_size, void* stride, void* padding) { void* ret = _lantern_max_unpool3d_out_attensor_attensor_attensor_atintarrayref_atintarrayref_atintarrayref(out, self, indices, output_size, stride, padding); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_max_unpool3d_attensor_attensor_atintarrayref_atintarrayref_atintarrayref)(void* self, void* indices, void* output_size, void* stride, void* padding);
  HOST_API void* lantern_max_unpool3d_attensor_attensor_atintarrayref_atintarrayref_atintarrayref(void* self, void* indices, void* output_size, void* stride, void* padding) { void* ret = _lantern_max_unpool3d_attensor_attensor_atintarrayref_atintarrayref_atintarrayref(self, indices, output_size, stride, padding); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_max_unpool3d_backward_out_attensor_attensor_attensor_attensor_atintarrayref_atintarrayref_atintarrayref)(void* grad_input, void* grad_output, void* self, void* indices, void* output_size, void* stride, void* padding);
  HOST_API void* lantern_max_unpool3d_backward_out_attensor_attensor_attensor_attensor_atintarrayref_atintarrayref_atintarrayref(void* grad_input, void* grad_output, void* self, void* indices, void* output_size, void* stride, void* padding) { void* ret = _lantern_max_unpool3d_backward_out_attensor_attensor_attensor_attensor_atintarrayref_atintarrayref_atintarrayref(grad_input, grad_output, self, indices, output_size, stride, padding); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_max_unpool3d_backward_attensor_attensor_attensor_atintarrayref_atintarrayref_atintarrayref)(void* grad_output, void* self, void* indices, void* output_size, void* stride, void* padding);
  HOST_API void* lantern_max_unpool3d_backward_attensor_attensor_attensor_atintarrayref_atintarrayref_atintarrayref(void* grad_output, void* self, void* indices, void* output_size, void* stride, void* padding) { void* ret = _lantern_max_unpool3d_backward_attensor_attensor_attensor_atintarrayref_atintarrayref_atintarrayref(grad_output, self, indices, output_size, stride, padding); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_reflection_pad1d_out_attensor_attensor_atintarrayref)(void* out, void* self, void* padding);
  HOST_API void* lantern_reflection_pad1d_out_attensor_attensor_atintarrayref(void* out, void* self, void* padding) { void* ret = _lantern_reflection_pad1d_out_attensor_attensor_atintarrayref(out, self, padding); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_reflection_pad1d_attensor_atintarrayref)(void* self, void* padding);
  HOST_API void* lantern_reflection_pad1d_attensor_atintarrayref(void* self, void* padding) { void* ret = _lantern_reflection_pad1d_attensor_atintarrayref(self, padding); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_reflection_pad1d_backward_out_attensor_attensor_attensor_atintarrayref)(void* grad_input, void* grad_output, void* self, void* padding);
  HOST_API void* lantern_reflection_pad1d_backward_out_attensor_attensor_attensor_atintarrayref(void* grad_input, void* grad_output, void* self, void* padding) { void* ret = _lantern_reflection_pad1d_backward_out_attensor_attensor_attensor_atintarrayref(grad_input, grad_output, self, padding); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_reflection_pad1d_backward_attensor_attensor_atintarrayref)(void* grad_output, void* self, void* padding);
  HOST_API void* lantern_reflection_pad1d_backward_attensor_attensor_atintarrayref(void* grad_output, void* self, void* padding) { void* ret = _lantern_reflection_pad1d_backward_attensor_attensor_atintarrayref(grad_output, self, padding); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_reflection_pad2d_out_attensor_attensor_atintarrayref)(void* out, void* self, void* padding);
  HOST_API void* lantern_reflection_pad2d_out_attensor_attensor_atintarrayref(void* out, void* self, void* padding) { void* ret = _lantern_reflection_pad2d_out_attensor_attensor_atintarrayref(out, self, padding); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_reflection_pad2d_attensor_atintarrayref)(void* self, void* padding);
  HOST_API void* lantern_reflection_pad2d_attensor_atintarrayref(void* self, void* padding) { void* ret = _lantern_reflection_pad2d_attensor_atintarrayref(self, padding); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_reflection_pad2d_backward_out_attensor_attensor_attensor_atintarrayref)(void* grad_input, void* grad_output, void* self, void* padding);
  HOST_API void* lantern_reflection_pad2d_backward_out_attensor_attensor_attensor_atintarrayref(void* grad_input, void* grad_output, void* self, void* padding) { void* ret = _lantern_reflection_pad2d_backward_out_attensor_attensor_attensor_atintarrayref(grad_input, grad_output, self, padding); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_reflection_pad2d_backward_attensor_attensor_atintarrayref)(void* grad_output, void* self, void* padding);
  HOST_API void* lantern_reflection_pad2d_backward_attensor_attensor_atintarrayref(void* grad_output, void* self, void* padding) { void* ret = _lantern_reflection_pad2d_backward_attensor_attensor_atintarrayref(grad_output, self, padding); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_replication_pad1d_out_attensor_attensor_atintarrayref)(void* out, void* self, void* padding);
  HOST_API void* lantern_replication_pad1d_out_attensor_attensor_atintarrayref(void* out, void* self, void* padding) { void* ret = _lantern_replication_pad1d_out_attensor_attensor_atintarrayref(out, self, padding); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_replication_pad1d_attensor_atintarrayref)(void* self, void* padding);
  HOST_API void* lantern_replication_pad1d_attensor_atintarrayref(void* self, void* padding) { void* ret = _lantern_replication_pad1d_attensor_atintarrayref(self, padding); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_replication_pad1d_backward_out_attensor_attensor_attensor_atintarrayref)(void* grad_input, void* grad_output, void* self, void* padding);
  HOST_API void* lantern_replication_pad1d_backward_out_attensor_attensor_attensor_atintarrayref(void* grad_input, void* grad_output, void* self, void* padding) { void* ret = _lantern_replication_pad1d_backward_out_attensor_attensor_attensor_atintarrayref(grad_input, grad_output, self, padding); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_replication_pad1d_backward_attensor_attensor_atintarrayref)(void* grad_output, void* self, void* padding);
  HOST_API void* lantern_replication_pad1d_backward_attensor_attensor_atintarrayref(void* grad_output, void* self, void* padding) { void* ret = _lantern_replication_pad1d_backward_attensor_attensor_atintarrayref(grad_output, self, padding); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_replication_pad2d_out_attensor_attensor_atintarrayref)(void* out, void* self, void* padding);
  HOST_API void* lantern_replication_pad2d_out_attensor_attensor_atintarrayref(void* out, void* self, void* padding) { void* ret = _lantern_replication_pad2d_out_attensor_attensor_atintarrayref(out, self, padding); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_replication_pad2d_attensor_atintarrayref)(void* self, void* padding);
  HOST_API void* lantern_replication_pad2d_attensor_atintarrayref(void* self, void* padding) { void* ret = _lantern_replication_pad2d_attensor_atintarrayref(self, padding); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_replication_pad2d_backward_out_attensor_attensor_attensor_atintarrayref)(void* grad_input, void* grad_output, void* self, void* padding);
  HOST_API void* lantern_replication_pad2d_backward_out_attensor_attensor_attensor_atintarrayref(void* grad_input, void* grad_output, void* self, void* padding) { void* ret = _lantern_replication_pad2d_backward_out_attensor_attensor_attensor_atintarrayref(grad_input, grad_output, self, padding); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_replication_pad2d_backward_attensor_attensor_atintarrayref)(void* grad_output, void* self, void* padding);
  HOST_API void* lantern_replication_pad2d_backward_attensor_attensor_atintarrayref(void* grad_output, void* self, void* padding) { void* ret = _lantern_replication_pad2d_backward_attensor_attensor_atintarrayref(grad_output, self, padding); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_replication_pad3d_out_attensor_attensor_atintarrayref)(void* out, void* self, void* padding);
  HOST_API void* lantern_replication_pad3d_out_attensor_attensor_atintarrayref(void* out, void* self, void* padding) { void* ret = _lantern_replication_pad3d_out_attensor_attensor_atintarrayref(out, self, padding); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_replication_pad3d_attensor_atintarrayref)(void* self, void* padding);
  HOST_API void* lantern_replication_pad3d_attensor_atintarrayref(void* self, void* padding) { void* ret = _lantern_replication_pad3d_attensor_atintarrayref(self, padding); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_replication_pad3d_backward_out_attensor_attensor_attensor_atintarrayref)(void* grad_input, void* grad_output, void* self, void* padding);
  HOST_API void* lantern_replication_pad3d_backward_out_attensor_attensor_attensor_atintarrayref(void* grad_input, void* grad_output, void* self, void* padding) { void* ret = _lantern_replication_pad3d_backward_out_attensor_attensor_attensor_atintarrayref(grad_input, grad_output, self, padding); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_replication_pad3d_backward_attensor_attensor_atintarrayref)(void* grad_output, void* self, void* padding);
  HOST_API void* lantern_replication_pad3d_backward_attensor_attensor_atintarrayref(void* grad_output, void* self, void* padding) { void* ret = _lantern_replication_pad3d_backward_attensor_attensor_atintarrayref(grad_output, self, padding); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_upsample_linear1d_attensor_atintarrayref_bool_atarrayrefdouble)(void* input, void* output_size, void* align_corners, void* scale_factors);
  HOST_API void* lantern_upsample_linear1d_attensor_atintarrayref_bool_atarrayrefdouble(void* input, void* output_size, void* align_corners, void* scale_factors) { void* ret = _lantern_upsample_linear1d_attensor_atintarrayref_bool_atarrayrefdouble(input, output_size, align_corners, scale_factors); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_upsample_linear1d_backward_attensor_atintarrayref_atintarrayref_bool_atarrayrefdouble)(void* grad_output, void* output_size, void* input_size, void* align_corners, void* scale_factors);
  HOST_API void* lantern_upsample_linear1d_backward_attensor_atintarrayref_atintarrayref_bool_atarrayrefdouble(void* grad_output, void* output_size, void* input_size, void* align_corners, void* scale_factors) { void* ret = _lantern_upsample_linear1d_backward_attensor_atintarrayref_atintarrayref_bool_atarrayrefdouble(grad_output, output_size, input_size, align_corners, scale_factors); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_upsample_bilinear2d_attensor_atintarrayref_bool_atarrayrefdouble)(void* input, void* output_size, void* align_corners, void* scale_factors);
  HOST_API void* lantern_upsample_bilinear2d_attensor_atintarrayref_bool_atarrayrefdouble(void* input, void* output_size, void* align_corners, void* scale_factors) { void* ret = _lantern_upsample_bilinear2d_attensor_atintarrayref_bool_atarrayrefdouble(input, output_size, align_corners, scale_factors); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_upsample_bilinear2d_backward_attensor_atintarrayref_atintarrayref_bool_atarrayrefdouble)(void* grad_output, void* output_size, void* input_size, void* align_corners, void* scale_factors);
  HOST_API void* lantern_upsample_bilinear2d_backward_attensor_atintarrayref_atintarrayref_bool_atarrayrefdouble(void* grad_output, void* output_size, void* input_size, void* align_corners, void* scale_factors) { void* ret = _lantern_upsample_bilinear2d_backward_attensor_atintarrayref_atintarrayref_bool_atarrayrefdouble(grad_output, output_size, input_size, align_corners, scale_factors); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_upsample_trilinear3d_attensor_atintarrayref_bool_atarrayrefdouble)(void* input, void* output_size, void* align_corners, void* scale_factors);
  HOST_API void* lantern_upsample_trilinear3d_attensor_atintarrayref_bool_atarrayrefdouble(void* input, void* output_size, void* align_corners, void* scale_factors) { void* ret = _lantern_upsample_trilinear3d_attensor_atintarrayref_bool_atarrayrefdouble(input, output_size, align_corners, scale_factors); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_upsample_trilinear3d_backward_attensor_atintarrayref_atintarrayref_bool_atarrayrefdouble)(void* grad_output, void* output_size, void* input_size, void* align_corners, void* scale_factors);
  HOST_API void* lantern_upsample_trilinear3d_backward_attensor_atintarrayref_atintarrayref_bool_atarrayrefdouble(void* grad_output, void* output_size, void* input_size, void* align_corners, void* scale_factors) { void* ret = _lantern_upsample_trilinear3d_backward_attensor_atintarrayref_atintarrayref_bool_atarrayrefdouble(grad_output, output_size, input_size, align_corners, scale_factors); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_upsample_bicubic2d_attensor_atintarrayref_bool_atarrayrefdouble)(void* input, void* output_size, void* align_corners, void* scale_factors);
  HOST_API void* lantern_upsample_bicubic2d_attensor_atintarrayref_bool_atarrayrefdouble(void* input, void* output_size, void* align_corners, void* scale_factors) { void* ret = _lantern_upsample_bicubic2d_attensor_atintarrayref_bool_atarrayrefdouble(input, output_size, align_corners, scale_factors); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_upsample_bicubic2d_backward_attensor_atintarrayref_atintarrayref_bool_atarrayrefdouble)(void* grad_output, void* output_size, void* input_size, void* align_corners, void* scale_factors);
  HOST_API void* lantern_upsample_bicubic2d_backward_attensor_atintarrayref_atintarrayref_bool_atarrayrefdouble(void* grad_output, void* output_size, void* input_size, void* align_corners, void* scale_factors) { void* ret = _lantern_upsample_bicubic2d_backward_attensor_atintarrayref_atintarrayref_bool_atarrayrefdouble(grad_output, output_size, input_size, align_corners, scale_factors); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_upsample_nearest1d_attensor_atintarrayref_atarrayrefdouble)(void* input, void* output_size, void* scale_factors);
  HOST_API void* lantern_upsample_nearest1d_attensor_atintarrayref_atarrayrefdouble(void* input, void* output_size, void* scale_factors) { void* ret = _lantern_upsample_nearest1d_attensor_atintarrayref_atarrayrefdouble(input, output_size, scale_factors); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_upsample_nearest1d_backward_attensor_atintarrayref_atintarrayref_atarrayrefdouble)(void* grad_output, void* output_size, void* input_size, void* scale_factors);
  HOST_API void* lantern_upsample_nearest1d_backward_attensor_atintarrayref_atintarrayref_atarrayrefdouble(void* grad_output, void* output_size, void* input_size, void* scale_factors) { void* ret = _lantern_upsample_nearest1d_backward_attensor_atintarrayref_atintarrayref_atarrayrefdouble(grad_output, output_size, input_size, scale_factors); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_upsample_nearest2d_attensor_atintarrayref_atarrayrefdouble)(void* input, void* output_size, void* scale_factors);
  HOST_API void* lantern_upsample_nearest2d_attensor_atintarrayref_atarrayrefdouble(void* input, void* output_size, void* scale_factors) { void* ret = _lantern_upsample_nearest2d_attensor_atintarrayref_atarrayrefdouble(input, output_size, scale_factors); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_upsample_nearest2d_backward_attensor_atintarrayref_atintarrayref_atarrayrefdouble)(void* grad_output, void* output_size, void* input_size, void* scale_factors);
  HOST_API void* lantern_upsample_nearest2d_backward_attensor_atintarrayref_atintarrayref_atarrayrefdouble(void* grad_output, void* output_size, void* input_size, void* scale_factors) { void* ret = _lantern_upsample_nearest2d_backward_attensor_atintarrayref_atintarrayref_atarrayrefdouble(grad_output, output_size, input_size, scale_factors); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_upsample_nearest3d_attensor_atintarrayref_atarrayrefdouble)(void* input, void* output_size, void* scale_factors);
  HOST_API void* lantern_upsample_nearest3d_attensor_atintarrayref_atarrayrefdouble(void* input, void* output_size, void* scale_factors) { void* ret = _lantern_upsample_nearest3d_attensor_atintarrayref_atarrayrefdouble(input, output_size, scale_factors); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_upsample_nearest3d_backward_attensor_atintarrayref_atintarrayref_atarrayrefdouble)(void* grad_output, void* output_size, void* input_size, void* scale_factors);
  HOST_API void* lantern_upsample_nearest3d_backward_attensor_atintarrayref_atintarrayref_atarrayrefdouble(void* grad_output, void* output_size, void* input_size, void* scale_factors) { void* ret = _lantern_upsample_nearest3d_backward_attensor_atintarrayref_atintarrayref_atarrayrefdouble(grad_output, output_size, input_size, scale_factors); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_upsample_linear1d_out_attensor_attensor_atintarrayref_bool_double)(void* out, void* self, void* output_size, void* align_corners, void* scales);
  HOST_API void* lantern_upsample_linear1d_out_attensor_attensor_atintarrayref_bool_double(void* out, void* self, void* output_size, void* align_corners, void* scales) { void* ret = _lantern_upsample_linear1d_out_attensor_attensor_atintarrayref_bool_double(out, self, output_size, align_corners, scales); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_upsample_linear1d_attensor_atintarrayref_bool_double)(void* self, void* output_size, void* align_corners, void* scales);
  HOST_API void* lantern_upsample_linear1d_attensor_atintarrayref_bool_double(void* self, void* output_size, void* align_corners, void* scales) { void* ret = _lantern_upsample_linear1d_attensor_atintarrayref_bool_double(self, output_size, align_corners, scales); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_upsample_linear1d_backward_out_attensor_attensor_atintarrayref_atintarrayref_bool_double)(void* grad_input, void* grad_output, void* output_size, void* input_size, void* align_corners, void* scales);
  HOST_API void* lantern_upsample_linear1d_backward_out_attensor_attensor_atintarrayref_atintarrayref_bool_double(void* grad_input, void* grad_output, void* output_size, void* input_size, void* align_corners, void* scales) { void* ret = _lantern_upsample_linear1d_backward_out_attensor_attensor_atintarrayref_atintarrayref_bool_double(grad_input, grad_output, output_size, input_size, align_corners, scales); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_upsample_linear1d_backward_attensor_atintarrayref_atintarrayref_bool_double)(void* grad_output, void* output_size, void* input_size, void* align_corners, void* scales);
  HOST_API void* lantern_upsample_linear1d_backward_attensor_atintarrayref_atintarrayref_bool_double(void* grad_output, void* output_size, void* input_size, void* align_corners, void* scales) { void* ret = _lantern_upsample_linear1d_backward_attensor_atintarrayref_atintarrayref_bool_double(grad_output, output_size, input_size, align_corners, scales); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_upsample_bilinear2d_out_attensor_attensor_atintarrayref_bool_double_double)(void* out, void* self, void* output_size, void* align_corners, void* scales_h, void* scales_w);
  HOST_API void* lantern_upsample_bilinear2d_out_attensor_attensor_atintarrayref_bool_double_double(void* out, void* self, void* output_size, void* align_corners, void* scales_h, void* scales_w) { void* ret = _lantern_upsample_bilinear2d_out_attensor_attensor_atintarrayref_bool_double_double(out, self, output_size, align_corners, scales_h, scales_w); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_upsample_bilinear2d_attensor_atintarrayref_bool_double_double)(void* self, void* output_size, void* align_corners, void* scales_h, void* scales_w);
  HOST_API void* lantern_upsample_bilinear2d_attensor_atintarrayref_bool_double_double(void* self, void* output_size, void* align_corners, void* scales_h, void* scales_w) { void* ret = _lantern_upsample_bilinear2d_attensor_atintarrayref_bool_double_double(self, output_size, align_corners, scales_h, scales_w); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_upsample_bilinear2d_backward_out_attensor_attensor_atintarrayref_atintarrayref_bool_double_double)(void* grad_input, void* grad_output, void* output_size, void* input_size, void* align_corners, void* scales_h, void* scales_w);
  HOST_API void* lantern_upsample_bilinear2d_backward_out_attensor_attensor_atintarrayref_atintarrayref_bool_double_double(void* grad_input, void* grad_output, void* output_size, void* input_size, void* align_corners, void* scales_h, void* scales_w) { void* ret = _lantern_upsample_bilinear2d_backward_out_attensor_attensor_atintarrayref_atintarrayref_bool_double_double(grad_input, grad_output, output_size, input_size, align_corners, scales_h, scales_w); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_upsample_bilinear2d_backward_attensor_atintarrayref_atintarrayref_bool_double_double)(void* grad_output, void* output_size, void* input_size, void* align_corners, void* scales_h, void* scales_w);
  HOST_API void* lantern_upsample_bilinear2d_backward_attensor_atintarrayref_atintarrayref_bool_double_double(void* grad_output, void* output_size, void* input_size, void* align_corners, void* scales_h, void* scales_w) { void* ret = _lantern_upsample_bilinear2d_backward_attensor_atintarrayref_atintarrayref_bool_double_double(grad_output, output_size, input_size, align_corners, scales_h, scales_w); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_upsample_bicubic2d_out_attensor_attensor_atintarrayref_bool_double_double)(void* out, void* self, void* output_size, void* align_corners, void* scales_h, void* scales_w);
  HOST_API void* lantern_upsample_bicubic2d_out_attensor_attensor_atintarrayref_bool_double_double(void* out, void* self, void* output_size, void* align_corners, void* scales_h, void* scales_w) { void* ret = _lantern_upsample_bicubic2d_out_attensor_attensor_atintarrayref_bool_double_double(out, self, output_size, align_corners, scales_h, scales_w); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_upsample_bicubic2d_attensor_atintarrayref_bool_double_double)(void* self, void* output_size, void* align_corners, void* scales_h, void* scales_w);
  HOST_API void* lantern_upsample_bicubic2d_attensor_atintarrayref_bool_double_double(void* self, void* output_size, void* align_corners, void* scales_h, void* scales_w) { void* ret = _lantern_upsample_bicubic2d_attensor_atintarrayref_bool_double_double(self, output_size, align_corners, scales_h, scales_w); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_upsample_bicubic2d_backward_out_attensor_attensor_atintarrayref_atintarrayref_bool_double_double)(void* grad_input, void* grad_output, void* output_size, void* input_size, void* align_corners, void* scales_h, void* scales_w);
  HOST_API void* lantern_upsample_bicubic2d_backward_out_attensor_attensor_atintarrayref_atintarrayref_bool_double_double(void* grad_input, void* grad_output, void* output_size, void* input_size, void* align_corners, void* scales_h, void* scales_w) { void* ret = _lantern_upsample_bicubic2d_backward_out_attensor_attensor_atintarrayref_atintarrayref_bool_double_double(grad_input, grad_output, output_size, input_size, align_corners, scales_h, scales_w); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_upsample_bicubic2d_backward_attensor_atintarrayref_atintarrayref_bool_double_double)(void* grad_output, void* output_size, void* input_size, void* align_corners, void* scales_h, void* scales_w);
  HOST_API void* lantern_upsample_bicubic2d_backward_attensor_atintarrayref_atintarrayref_bool_double_double(void* grad_output, void* output_size, void* input_size, void* align_corners, void* scales_h, void* scales_w) { void* ret = _lantern_upsample_bicubic2d_backward_attensor_atintarrayref_atintarrayref_bool_double_double(grad_output, output_size, input_size, align_corners, scales_h, scales_w); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_upsample_trilinear3d_out_attensor_attensor_atintarrayref_bool_double_double_double)(void* out, void* self, void* output_size, void* align_corners, void* scales_d, void* scales_h, void* scales_w);
  HOST_API void* lantern_upsample_trilinear3d_out_attensor_attensor_atintarrayref_bool_double_double_double(void* out, void* self, void* output_size, void* align_corners, void* scales_d, void* scales_h, void* scales_w) { void* ret = _lantern_upsample_trilinear3d_out_attensor_attensor_atintarrayref_bool_double_double_double(out, self, output_size, align_corners, scales_d, scales_h, scales_w); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_upsample_trilinear3d_attensor_atintarrayref_bool_double_double_double)(void* self, void* output_size, void* align_corners, void* scales_d, void* scales_h, void* scales_w);
  HOST_API void* lantern_upsample_trilinear3d_attensor_atintarrayref_bool_double_double_double(void* self, void* output_size, void* align_corners, void* scales_d, void* scales_h, void* scales_w) { void* ret = _lantern_upsample_trilinear3d_attensor_atintarrayref_bool_double_double_double(self, output_size, align_corners, scales_d, scales_h, scales_w); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_upsample_trilinear3d_backward_out_attensor_attensor_atintarrayref_atintarrayref_bool_double_double_double)(void* grad_input, void* grad_output, void* output_size, void* input_size, void* align_corners, void* scales_d, void* scales_h, void* scales_w);
  HOST_API void* lantern_upsample_trilinear3d_backward_out_attensor_attensor_atintarrayref_atintarrayref_bool_double_double_double(void* grad_input, void* grad_output, void* output_size, void* input_size, void* align_corners, void* scales_d, void* scales_h, void* scales_w) { void* ret = _lantern_upsample_trilinear3d_backward_out_attensor_attensor_atintarrayref_atintarrayref_bool_double_double_double(grad_input, grad_output, output_size, input_size, align_corners, scales_d, scales_h, scales_w); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_upsample_trilinear3d_backward_attensor_atintarrayref_atintarrayref_bool_double_double_double)(void* grad_output, void* output_size, void* input_size, void* align_corners, void* scales_d, void* scales_h, void* scales_w);
  HOST_API void* lantern_upsample_trilinear3d_backward_attensor_atintarrayref_atintarrayref_bool_double_double_double(void* grad_output, void* output_size, void* input_size, void* align_corners, void* scales_d, void* scales_h, void* scales_w) { void* ret = _lantern_upsample_trilinear3d_backward_attensor_atintarrayref_atintarrayref_bool_double_double_double(grad_output, output_size, input_size, align_corners, scales_d, scales_h, scales_w); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_upsample_nearest1d_out_attensor_attensor_atintarrayref_double)(void* out, void* self, void* output_size, void* scales);
  HOST_API void* lantern_upsample_nearest1d_out_attensor_attensor_atintarrayref_double(void* out, void* self, void* output_size, void* scales) { void* ret = _lantern_upsample_nearest1d_out_attensor_attensor_atintarrayref_double(out, self, output_size, scales); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_upsample_nearest1d_attensor_atintarrayref_double)(void* self, void* output_size, void* scales);
  HOST_API void* lantern_upsample_nearest1d_attensor_atintarrayref_double(void* self, void* output_size, void* scales) { void* ret = _lantern_upsample_nearest1d_attensor_atintarrayref_double(self, output_size, scales); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_upsample_nearest1d_backward_out_attensor_attensor_atintarrayref_atintarrayref_double)(void* grad_input, void* grad_output, void* output_size, void* input_size, void* scales);
  HOST_API void* lantern_upsample_nearest1d_backward_out_attensor_attensor_atintarrayref_atintarrayref_double(void* grad_input, void* grad_output, void* output_size, void* input_size, void* scales) { void* ret = _lantern_upsample_nearest1d_backward_out_attensor_attensor_atintarrayref_atintarrayref_double(grad_input, grad_output, output_size, input_size, scales); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_upsample_nearest1d_backward_attensor_atintarrayref_atintarrayref_double)(void* grad_output, void* output_size, void* input_size, void* scales);
  HOST_API void* lantern_upsample_nearest1d_backward_attensor_atintarrayref_atintarrayref_double(void* grad_output, void* output_size, void* input_size, void* scales) { void* ret = _lantern_upsample_nearest1d_backward_attensor_atintarrayref_atintarrayref_double(grad_output, output_size, input_size, scales); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_upsample_nearest2d_out_attensor_attensor_atintarrayref_double_double)(void* out, void* self, void* output_size, void* scales_h, void* scales_w);
  HOST_API void* lantern_upsample_nearest2d_out_attensor_attensor_atintarrayref_double_double(void* out, void* self, void* output_size, void* scales_h, void* scales_w) { void* ret = _lantern_upsample_nearest2d_out_attensor_attensor_atintarrayref_double_double(out, self, output_size, scales_h, scales_w); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_upsample_nearest2d_attensor_atintarrayref_double_double)(void* self, void* output_size, void* scales_h, void* scales_w);
  HOST_API void* lantern_upsample_nearest2d_attensor_atintarrayref_double_double(void* self, void* output_size, void* scales_h, void* scales_w) { void* ret = _lantern_upsample_nearest2d_attensor_atintarrayref_double_double(self, output_size, scales_h, scales_w); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_upsample_nearest2d_backward_out_attensor_attensor_atintarrayref_atintarrayref_double_double)(void* grad_input, void* grad_output, void* output_size, void* input_size, void* scales_h, void* scales_w);
  HOST_API void* lantern_upsample_nearest2d_backward_out_attensor_attensor_atintarrayref_atintarrayref_double_double(void* grad_input, void* grad_output, void* output_size, void* input_size, void* scales_h, void* scales_w) { void* ret = _lantern_upsample_nearest2d_backward_out_attensor_attensor_atintarrayref_atintarrayref_double_double(grad_input, grad_output, output_size, input_size, scales_h, scales_w); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_upsample_nearest2d_backward_attensor_atintarrayref_atintarrayref_double_double)(void* grad_output, void* output_size, void* input_size, void* scales_h, void* scales_w);
  HOST_API void* lantern_upsample_nearest2d_backward_attensor_atintarrayref_atintarrayref_double_double(void* grad_output, void* output_size, void* input_size, void* scales_h, void* scales_w) { void* ret = _lantern_upsample_nearest2d_backward_attensor_atintarrayref_atintarrayref_double_double(grad_output, output_size, input_size, scales_h, scales_w); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_upsample_nearest3d_out_attensor_attensor_atintarrayref_double_double_double)(void* out, void* self, void* output_size, void* scales_d, void* scales_h, void* scales_w);
  HOST_API void* lantern_upsample_nearest3d_out_attensor_attensor_atintarrayref_double_double_double(void* out, void* self, void* output_size, void* scales_d, void* scales_h, void* scales_w) { void* ret = _lantern_upsample_nearest3d_out_attensor_attensor_atintarrayref_double_double_double(out, self, output_size, scales_d, scales_h, scales_w); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_upsample_nearest3d_attensor_atintarrayref_double_double_double)(void* self, void* output_size, void* scales_d, void* scales_h, void* scales_w);
  HOST_API void* lantern_upsample_nearest3d_attensor_atintarrayref_double_double_double(void* self, void* output_size, void* scales_d, void* scales_h, void* scales_w) { void* ret = _lantern_upsample_nearest3d_attensor_atintarrayref_double_double_double(self, output_size, scales_d, scales_h, scales_w); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_upsample_nearest3d_backward_out_attensor_attensor_atintarrayref_atintarrayref_double_double_double)(void* grad_input, void* grad_output, void* output_size, void* input_size, void* scales_d, void* scales_h, void* scales_w);
  HOST_API void* lantern_upsample_nearest3d_backward_out_attensor_attensor_atintarrayref_atintarrayref_double_double_double(void* grad_input, void* grad_output, void* output_size, void* input_size, void* scales_d, void* scales_h, void* scales_w) { void* ret = _lantern_upsample_nearest3d_backward_out_attensor_attensor_atintarrayref_atintarrayref_double_double_double(grad_input, grad_output, output_size, input_size, scales_d, scales_h, scales_w); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_upsample_nearest3d_backward_attensor_atintarrayref_atintarrayref_double_double_double)(void* grad_output, void* output_size, void* input_size, void* scales_d, void* scales_h, void* scales_w);
  HOST_API void* lantern_upsample_nearest3d_backward_attensor_atintarrayref_atintarrayref_double_double_double(void* grad_output, void* output_size, void* input_size, void* scales_d, void* scales_h, void* scales_w) { void* ret = _lantern_upsample_nearest3d_backward_attensor_atintarrayref_atintarrayref_double_double_double(grad_output, output_size, input_size, scales_d, scales_h, scales_w); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_sigmoid_backward_out_attensor_attensor_attensor)(void* grad_input, void* grad_output, void* output);
  HOST_API void* lantern_sigmoid_backward_out_attensor_attensor_attensor(void* grad_input, void* grad_output, void* output) { void* ret = _lantern_sigmoid_backward_out_attensor_attensor_attensor(grad_input, grad_output, output); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_sigmoid_backward_attensor_attensor)(void* grad_output, void* output);
  HOST_API void* lantern_sigmoid_backward_attensor_attensor(void* grad_output, void* output) { void* ret = _lantern_sigmoid_backward_attensor_attensor(grad_output, output); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_logit_backward_out_attensor_attensor_attensor_double)(void* grad_input, void* grad_output, void* self, void* eps);
  HOST_API void* lantern_logit_backward_out_attensor_attensor_attensor_double(void* grad_input, void* grad_output, void* self, void* eps) { void* ret = _lantern_logit_backward_out_attensor_attensor_attensor_double(grad_input, grad_output, self, eps); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_logit_backward_attensor_attensor_double)(void* grad_output, void* self, void* eps);
  HOST_API void* lantern_logit_backward_attensor_attensor_double(void* grad_output, void* self, void* eps) { void* ret = _lantern_logit_backward_attensor_attensor_double(grad_output, self, eps); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_tanh_backward_out_attensor_attensor_attensor)(void* grad_input, void* grad_output, void* output);
  HOST_API void* lantern_tanh_backward_out_attensor_attensor_attensor(void* grad_input, void* grad_output, void* output) { void* ret = _lantern_tanh_backward_out_attensor_attensor_attensor(grad_input, grad_output, output); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_tanh_backward_attensor_attensor)(void* grad_output, void* output);
  HOST_API void* lantern_tanh_backward_attensor_attensor(void* grad_output, void* output) { void* ret = _lantern_tanh_backward_attensor_attensor(grad_output, output); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_slow_conv_transpose2d_out_attensor_attensor_attensor_atintarrayref_attensor_atintarrayref_atintarrayref_atintarrayref_atintarrayref)(void* out, void* self, void* weight, void* kernel_size, void* bias, void* stride, void* padding, void* output_padding, void* dilation);
  HOST_API void* lantern_slow_conv_transpose2d_out_attensor_attensor_attensor_atintarrayref_attensor_atintarrayref_atintarrayref_atintarrayref_atintarrayref(void* out, void* self, void* weight, void* kernel_size, void* bias, void* stride, void* padding, void* output_padding, void* dilation) { void* ret = _lantern_slow_conv_transpose2d_out_attensor_attensor_attensor_atintarrayref_attensor_atintarrayref_atintarrayref_atintarrayref_atintarrayref(out, self, weight, kernel_size, bias, stride, padding, output_padding, dilation); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_slow_conv_transpose2d_attensor_attensor_atintarrayref_attensor_atintarrayref_atintarrayref_atintarrayref_atintarrayref)(void* self, void* weight, void* kernel_size, void* bias, void* stride, void* padding, void* output_padding, void* dilation);
  HOST_API void* lantern_slow_conv_transpose2d_attensor_attensor_atintarrayref_attensor_atintarrayref_atintarrayref_atintarrayref_atintarrayref(void* self, void* weight, void* kernel_size, void* bias, void* stride, void* padding, void* output_padding, void* dilation) { void* ret = _lantern_slow_conv_transpose2d_attensor_attensor_atintarrayref_attensor_atintarrayref_atintarrayref_atintarrayref_atintarrayref(self, weight, kernel_size, bias, stride, padding, output_padding, dilation); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_slow_conv_transpose2d_backward_out_attensor_attensor_attensor_attensor_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_atintarrayref_atintarrayref_attensor_attensor)(void* grad_input, void* grad_weight, void* grad_bias, void* grad_output, void* self, void* weight, void* kernel_size, void* stride, void* padding, void* output_padding, void* dilation, void* columns, void* ones);
  HOST_API void* lantern_slow_conv_transpose2d_backward_out_attensor_attensor_attensor_attensor_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_atintarrayref_atintarrayref_attensor_attensor(void* grad_input, void* grad_weight, void* grad_bias, void* grad_output, void* self, void* weight, void* kernel_size, void* stride, void* padding, void* output_padding, void* dilation, void* columns, void* ones) { void* ret = _lantern_slow_conv_transpose2d_backward_out_attensor_attensor_attensor_attensor_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_atintarrayref_atintarrayref_attensor_attensor(grad_input, grad_weight, grad_bias, grad_output, self, weight, kernel_size, stride, padding, output_padding, dilation, columns, ones); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_slow_conv_transpose2d_backward_attensor_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_atintarrayref_atintarrayref_attensor_attensor_stdarraybool)(void* grad_output, void* self, void* weight, void* kernel_size, void* stride, void* padding, void* output_padding, void* dilation, void* columns, void* ones, void* output_mask);
  HOST_API void* lantern_slow_conv_transpose2d_backward_attensor_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_atintarrayref_atintarrayref_attensor_attensor_stdarraybool(void* grad_output, void* self, void* weight, void* kernel_size, void* stride, void* padding, void* output_padding, void* dilation, void* columns, void* ones, void* output_mask) { void* ret = _lantern_slow_conv_transpose2d_backward_attensor_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_atintarrayref_atintarrayref_attensor_attensor_stdarraybool(grad_output, self, weight, kernel_size, stride, padding, output_padding, dilation, columns, ones, output_mask); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_slow_conv_transpose3d_out_attensor_attensor_attensor_atintarrayref_attensor_atintarrayref_atintarrayref_atintarrayref_atintarrayref)(void* out, void* self, void* weight, void* kernel_size, void* bias, void* stride, void* padding, void* output_padding, void* dilation);
  HOST_API void* lantern_slow_conv_transpose3d_out_attensor_attensor_attensor_atintarrayref_attensor_atintarrayref_atintarrayref_atintarrayref_atintarrayref(void* out, void* self, void* weight, void* kernel_size, void* bias, void* stride, void* padding, void* output_padding, void* dilation) { void* ret = _lantern_slow_conv_transpose3d_out_attensor_attensor_attensor_atintarrayref_attensor_atintarrayref_atintarrayref_atintarrayref_atintarrayref(out, self, weight, kernel_size, bias, stride, padding, output_padding, dilation); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_slow_conv_transpose3d_attensor_attensor_atintarrayref_attensor_atintarrayref_atintarrayref_atintarrayref_atintarrayref)(void* self, void* weight, void* kernel_size, void* bias, void* stride, void* padding, void* output_padding, void* dilation);
  HOST_API void* lantern_slow_conv_transpose3d_attensor_attensor_atintarrayref_attensor_atintarrayref_atintarrayref_atintarrayref_atintarrayref(void* self, void* weight, void* kernel_size, void* bias, void* stride, void* padding, void* output_padding, void* dilation) { void* ret = _lantern_slow_conv_transpose3d_attensor_attensor_atintarrayref_attensor_atintarrayref_atintarrayref_atintarrayref_atintarrayref(self, weight, kernel_size, bias, stride, padding, output_padding, dilation); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_slow_conv_transpose3d_backward_out_attensor_attensor_attensor_attensor_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_atintarrayref_atintarrayref_attensor_attensor)(void* grad_input, void* grad_weight, void* grad_bias, void* grad_output, void* self, void* weight, void* kernel_size, void* stride, void* padding, void* output_padding, void* dilation, void* finput, void* fgrad_input);
  HOST_API void* lantern_slow_conv_transpose3d_backward_out_attensor_attensor_attensor_attensor_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_atintarrayref_atintarrayref_attensor_attensor(void* grad_input, void* grad_weight, void* grad_bias, void* grad_output, void* self, void* weight, void* kernel_size, void* stride, void* padding, void* output_padding, void* dilation, void* finput, void* fgrad_input) { void* ret = _lantern_slow_conv_transpose3d_backward_out_attensor_attensor_attensor_attensor_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_atintarrayref_atintarrayref_attensor_attensor(grad_input, grad_weight, grad_bias, grad_output, self, weight, kernel_size, stride, padding, output_padding, dilation, finput, fgrad_input); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_slow_conv_transpose3d_backward_attensor_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_atintarrayref_atintarrayref_attensor_attensor_stdarraybool)(void* grad_output, void* self, void* weight, void* kernel_size, void* stride, void* padding, void* output_padding, void* dilation, void* finput, void* fgrad_input, void* output_mask);
  HOST_API void* lantern_slow_conv_transpose3d_backward_attensor_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_atintarrayref_atintarrayref_attensor_attensor_stdarraybool(void* grad_output, void* self, void* weight, void* kernel_size, void* stride, void* padding, void* output_padding, void* dilation, void* finput, void* fgrad_input, void* output_mask) { void* ret = _lantern_slow_conv_transpose3d_backward_attensor_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_atintarrayref_atintarrayref_attensor_attensor_stdarraybool(grad_output, self, weight, kernel_size, stride, padding, output_padding, dilation, finput, fgrad_input, output_mask); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_thnn_conv2d_out_attensor_attensor_attensor_atintarrayref_attensor_atintarrayref_atintarrayref)(void* out, void* self, void* weight, void* kernel_size, void* bias, void* stride, void* padding);
  HOST_API void* lantern_thnn_conv2d_out_attensor_attensor_attensor_atintarrayref_attensor_atintarrayref_atintarrayref(void* out, void* self, void* weight, void* kernel_size, void* bias, void* stride, void* padding) { void* ret = _lantern_thnn_conv2d_out_attensor_attensor_attensor_atintarrayref_attensor_atintarrayref_atintarrayref(out, self, weight, kernel_size, bias, stride, padding); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_thnn_conv2d_attensor_attensor_atintarrayref_attensor_atintarrayref_atintarrayref)(void* self, void* weight, void* kernel_size, void* bias, void* stride, void* padding);
  HOST_API void* lantern_thnn_conv2d_attensor_attensor_atintarrayref_attensor_atintarrayref_atintarrayref(void* self, void* weight, void* kernel_size, void* bias, void* stride, void* padding) { void* ret = _lantern_thnn_conv2d_attensor_attensor_atintarrayref_attensor_atintarrayref_atintarrayref(self, weight, kernel_size, bias, stride, padding); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_thnn_conv2d_forward_out_attensor_attensor_attensor_attensor_attensor_atintarrayref_attensor_atintarrayref_atintarrayref)(void* output, void* finput, void* fgrad_input, void* self, void* weight, void* kernel_size, void* bias, void* stride, void* padding);
  HOST_API void* lantern_thnn_conv2d_forward_out_attensor_attensor_attensor_attensor_attensor_atintarrayref_attensor_atintarrayref_atintarrayref(void* output, void* finput, void* fgrad_input, void* self, void* weight, void* kernel_size, void* bias, void* stride, void* padding) { void* ret = _lantern_thnn_conv2d_forward_out_attensor_attensor_attensor_attensor_attensor_atintarrayref_attensor_atintarrayref_atintarrayref(output, finput, fgrad_input, self, weight, kernel_size, bias, stride, padding); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_thnn_conv2d_forward_attensor_attensor_atintarrayref_attensor_atintarrayref_atintarrayref)(void* self, void* weight, void* kernel_size, void* bias, void* stride, void* padding);
  HOST_API void* lantern_thnn_conv2d_forward_attensor_attensor_atintarrayref_attensor_atintarrayref_atintarrayref(void* self, void* weight, void* kernel_size, void* bias, void* stride, void* padding) { void* ret = _lantern_thnn_conv2d_forward_attensor_attensor_atintarrayref_attensor_atintarrayref_atintarrayref(self, weight, kernel_size, bias, stride, padding); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_thnn_conv2d_backward_out_attensor_attensor_attensor_attensor_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_attensor_attensor)(void* grad_input, void* grad_weight, void* grad_bias, void* grad_output, void* self, void* weight, void* kernel_size, void* stride, void* padding, void* finput, void* fgrad_input);
  HOST_API void* lantern_thnn_conv2d_backward_out_attensor_attensor_attensor_attensor_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_attensor_attensor(void* grad_input, void* grad_weight, void* grad_bias, void* grad_output, void* self, void* weight, void* kernel_size, void* stride, void* padding, void* finput, void* fgrad_input) { void* ret = _lantern_thnn_conv2d_backward_out_attensor_attensor_attensor_attensor_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_attensor_attensor(grad_input, grad_weight, grad_bias, grad_output, self, weight, kernel_size, stride, padding, finput, fgrad_input); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_thnn_conv2d_backward_attensor_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_attensor_attensor_stdarraybool)(void* grad_output, void* self, void* weight, void* kernel_size, void* stride, void* padding, void* finput, void* fgrad_input, void* output_mask);
  HOST_API void* lantern_thnn_conv2d_backward_attensor_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_attensor_attensor_stdarraybool(void* grad_output, void* self, void* weight, void* kernel_size, void* stride, void* padding, void* finput, void* fgrad_input, void* output_mask) { void* ret = _lantern_thnn_conv2d_backward_attensor_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_attensor_attensor_stdarraybool(grad_output, self, weight, kernel_size, stride, padding, finput, fgrad_input, output_mask); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_thnn_conv_depthwise2d_out_attensor_attensor_attensor_atintarrayref_attensor_atintarrayref_atintarrayref_atintarrayref)(void* out, void* self, void* weight, void* kernel_size, void* bias, void* stride, void* padding, void* dilation);
  HOST_API void* lantern_thnn_conv_depthwise2d_out_attensor_attensor_attensor_atintarrayref_attensor_atintarrayref_atintarrayref_atintarrayref(void* out, void* self, void* weight, void* kernel_size, void* bias, void* stride, void* padding, void* dilation) { void* ret = _lantern_thnn_conv_depthwise2d_out_attensor_attensor_attensor_atintarrayref_attensor_atintarrayref_atintarrayref_atintarrayref(out, self, weight, kernel_size, bias, stride, padding, dilation); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_thnn_conv_depthwise2d_attensor_attensor_atintarrayref_attensor_atintarrayref_atintarrayref_atintarrayref)(void* self, void* weight, void* kernel_size, void* bias, void* stride, void* padding, void* dilation);
  HOST_API void* lantern_thnn_conv_depthwise2d_attensor_attensor_atintarrayref_attensor_atintarrayref_atintarrayref_atintarrayref(void* self, void* weight, void* kernel_size, void* bias, void* stride, void* padding, void* dilation) { void* ret = _lantern_thnn_conv_depthwise2d_attensor_attensor_atintarrayref_attensor_atintarrayref_atintarrayref_atintarrayref(self, weight, kernel_size, bias, stride, padding, dilation); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_thnn_conv_depthwise2d_forward_out_attensor_attensor_attensor_atintarrayref_attensor_atintarrayref_atintarrayref_atintarrayref)(void* out, void* self, void* weight, void* kernel_size, void* bias, void* stride, void* padding, void* dilation);
  HOST_API void* lantern_thnn_conv_depthwise2d_forward_out_attensor_attensor_attensor_atintarrayref_attensor_atintarrayref_atintarrayref_atintarrayref(void* out, void* self, void* weight, void* kernel_size, void* bias, void* stride, void* padding, void* dilation) { void* ret = _lantern_thnn_conv_depthwise2d_forward_out_attensor_attensor_attensor_atintarrayref_attensor_atintarrayref_atintarrayref_atintarrayref(out, self, weight, kernel_size, bias, stride, padding, dilation); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_thnn_conv_depthwise2d_forward_attensor_attensor_atintarrayref_attensor_atintarrayref_atintarrayref_atintarrayref)(void* self, void* weight, void* kernel_size, void* bias, void* stride, void* padding, void* dilation);
  HOST_API void* lantern_thnn_conv_depthwise2d_forward_attensor_attensor_atintarrayref_attensor_atintarrayref_atintarrayref_atintarrayref(void* self, void* weight, void* kernel_size, void* bias, void* stride, void* padding, void* dilation) { void* ret = _lantern_thnn_conv_depthwise2d_forward_attensor_attensor_atintarrayref_attensor_atintarrayref_atintarrayref_atintarrayref(self, weight, kernel_size, bias, stride, padding, dilation); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_thnn_conv_depthwise2d_backward_out_attensor_attensor_attensor_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_atintarrayref)(void* grad_input, void* grad_weight, void* grad_output, void* self, void* weight, void* kernel_size, void* stride, void* padding, void* dilation);
  HOST_API void* lantern_thnn_conv_depthwise2d_backward_out_attensor_attensor_attensor_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_atintarrayref(void* grad_input, void* grad_weight, void* grad_output, void* self, void* weight, void* kernel_size, void* stride, void* padding, void* dilation) { void* ret = _lantern_thnn_conv_depthwise2d_backward_out_attensor_attensor_attensor_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_atintarrayref(grad_input, grad_weight, grad_output, self, weight, kernel_size, stride, padding, dilation); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_thnn_conv_depthwise2d_backward_attensor_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_atintarrayref_stdarraybool)(void* grad_output, void* self, void* weight, void* kernel_size, void* stride, void* padding, void* dilation, void* output_mask);
  HOST_API void* lantern_thnn_conv_depthwise2d_backward_attensor_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_atintarrayref_stdarraybool(void* grad_output, void* self, void* weight, void* kernel_size, void* stride, void* padding, void* dilation, void* output_mask) { void* ret = _lantern_thnn_conv_depthwise2d_backward_attensor_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_atintarrayref_stdarraybool(grad_output, self, weight, kernel_size, stride, padding, dilation, output_mask); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_conv_depthwise3d_attensor_attensor_atintarrayref_attensor_atintarrayref_atintarrayref_atintarrayref)(void* self, void* weight, void* kernel_size, void* bias, void* stride, void* padding, void* dilation);
  HOST_API void* lantern_conv_depthwise3d_attensor_attensor_atintarrayref_attensor_atintarrayref_atintarrayref_atintarrayref(void* self, void* weight, void* kernel_size, void* bias, void* stride, void* padding, void* dilation) { void* ret = _lantern_conv_depthwise3d_attensor_attensor_atintarrayref_attensor_atintarrayref_atintarrayref_atintarrayref(self, weight, kernel_size, bias, stride, padding, dilation); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_conv_depthwise3d_backward_out_attensor_attensor_attensor_attensor_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_atintarrayref)(void* grad_input, void* grad_weight, void* grad_bias, void* grad_output, void* self, void* weight, void* kernel_size, void* stride, void* padding, void* dilation);
  HOST_API void* lantern_conv_depthwise3d_backward_out_attensor_attensor_attensor_attensor_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_atintarrayref(void* grad_input, void* grad_weight, void* grad_bias, void* grad_output, void* self, void* weight, void* kernel_size, void* stride, void* padding, void* dilation) { void* ret = _lantern_conv_depthwise3d_backward_out_attensor_attensor_attensor_attensor_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_atintarrayref(grad_input, grad_weight, grad_bias, grad_output, self, weight, kernel_size, stride, padding, dilation); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_conv_depthwise3d_backward_attensor_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_atintarrayref_stdarraybool)(void* grad_output, void* self, void* weight, void* kernel_size, void* stride, void* padding, void* dilation, void* output_mask);
  HOST_API void* lantern_conv_depthwise3d_backward_attensor_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_atintarrayref_stdarraybool(void* grad_output, void* self, void* weight, void* kernel_size, void* stride, void* padding, void* dilation, void* output_mask) { void* ret = _lantern_conv_depthwise3d_backward_attensor_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_atintarrayref_stdarraybool(grad_output, self, weight, kernel_size, stride, padding, dilation, output_mask); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_slow_conv3d_out_attensor_attensor_attensor_atintarrayref_attensor_atintarrayref_atintarrayref)(void* out, void* self, void* weight, void* kernel_size, void* bias, void* stride, void* padding);
  HOST_API void* lantern_slow_conv3d_out_attensor_attensor_attensor_atintarrayref_attensor_atintarrayref_atintarrayref(void* out, void* self, void* weight, void* kernel_size, void* bias, void* stride, void* padding) { void* ret = _lantern_slow_conv3d_out_attensor_attensor_attensor_atintarrayref_attensor_atintarrayref_atintarrayref(out, self, weight, kernel_size, bias, stride, padding); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_slow_conv3d_attensor_attensor_atintarrayref_attensor_atintarrayref_atintarrayref)(void* self, void* weight, void* kernel_size, void* bias, void* stride, void* padding);
  HOST_API void* lantern_slow_conv3d_attensor_attensor_atintarrayref_attensor_atintarrayref_atintarrayref(void* self, void* weight, void* kernel_size, void* bias, void* stride, void* padding) { void* ret = _lantern_slow_conv3d_attensor_attensor_atintarrayref_attensor_atintarrayref_atintarrayref(self, weight, kernel_size, bias, stride, padding); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_slow_conv3d_forward_out_attensor_attensor_attensor_attensor_attensor_atintarrayref_attensor_atintarrayref_atintarrayref)(void* output, void* finput, void* fgrad_input, void* self, void* weight, void* kernel_size, void* bias, void* stride, void* padding);
  HOST_API void* lantern_slow_conv3d_forward_out_attensor_attensor_attensor_attensor_attensor_atintarrayref_attensor_atintarrayref_atintarrayref(void* output, void* finput, void* fgrad_input, void* self, void* weight, void* kernel_size, void* bias, void* stride, void* padding) { void* ret = _lantern_slow_conv3d_forward_out_attensor_attensor_attensor_attensor_attensor_atintarrayref_attensor_atintarrayref_atintarrayref(output, finput, fgrad_input, self, weight, kernel_size, bias, stride, padding); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_slow_conv3d_forward_attensor_attensor_atintarrayref_attensor_atintarrayref_atintarrayref)(void* self, void* weight, void* kernel_size, void* bias, void* stride, void* padding);
  HOST_API void* lantern_slow_conv3d_forward_attensor_attensor_atintarrayref_attensor_atintarrayref_atintarrayref(void* self, void* weight, void* kernel_size, void* bias, void* stride, void* padding) { void* ret = _lantern_slow_conv3d_forward_attensor_attensor_atintarrayref_attensor_atintarrayref_atintarrayref(self, weight, kernel_size, bias, stride, padding); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_slow_conv3d_backward_out_attensor_attensor_attensor_attensor_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_attensor_attensor)(void* grad_input, void* grad_weight, void* grad_bias, void* grad_output, void* self, void* weight, void* kernel_size, void* stride, void* padding, void* finput, void* fgrad_input);
  HOST_API void* lantern_slow_conv3d_backward_out_attensor_attensor_attensor_attensor_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_attensor_attensor(void* grad_input, void* grad_weight, void* grad_bias, void* grad_output, void* self, void* weight, void* kernel_size, void* stride, void* padding, void* finput, void* fgrad_input) { void* ret = _lantern_slow_conv3d_backward_out_attensor_attensor_attensor_attensor_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_attensor_attensor(grad_input, grad_weight, grad_bias, grad_output, self, weight, kernel_size, stride, padding, finput, fgrad_input); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_slow_conv3d_backward_attensor_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_attensor_attensor_stdarraybool)(void* grad_output, void* self, void* weight, void* kernel_size, void* stride, void* padding, void* finput, void* fgrad_input, void* output_mask);
  HOST_API void* lantern_slow_conv3d_backward_attensor_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_attensor_attensor_stdarraybool(void* grad_output, void* self, void* weight, void* kernel_size, void* stride, void* padding, void* finput, void* fgrad_input, void* output_mask) { void* ret = _lantern_slow_conv3d_backward_attensor_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_attensor_attensor_stdarraybool(grad_output, self, weight, kernel_size, stride, padding, finput, fgrad_input, output_mask); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_slow_conv_dilated2d_attensor_attensor_atintarrayref_attensor_atintarrayref_atintarrayref_atintarrayref)(void* self, void* weight, void* kernel_size, void* bias, void* stride, void* padding, void* dilation);
  HOST_API void* lantern_slow_conv_dilated2d_attensor_attensor_atintarrayref_attensor_atintarrayref_atintarrayref_atintarrayref(void* self, void* weight, void* kernel_size, void* bias, void* stride, void* padding, void* dilation) { void* ret = _lantern_slow_conv_dilated2d_attensor_attensor_atintarrayref_attensor_atintarrayref_atintarrayref_atintarrayref(self, weight, kernel_size, bias, stride, padding, dilation); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_slow_conv_dilated2d_backward_attensor_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_atintarrayref_stdarraybool)(void* grad_output, void* self, void* weight, void* kernel_size, void* stride, void* padding, void* dilation, void* output_mask);
  HOST_API void* lantern_slow_conv_dilated2d_backward_attensor_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_atintarrayref_stdarraybool(void* grad_output, void* self, void* weight, void* kernel_size, void* stride, void* padding, void* dilation, void* output_mask) { void* ret = _lantern_slow_conv_dilated2d_backward_attensor_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_atintarrayref_stdarraybool(grad_output, self, weight, kernel_size, stride, padding, dilation, output_mask); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_slow_conv_dilated3d_attensor_attensor_atintarrayref_attensor_atintarrayref_atintarrayref_atintarrayref)(void* self, void* weight, void* kernel_size, void* bias, void* stride, void* padding, void* dilation);
  HOST_API void* lantern_slow_conv_dilated3d_attensor_attensor_atintarrayref_attensor_atintarrayref_atintarrayref_atintarrayref(void* self, void* weight, void* kernel_size, void* bias, void* stride, void* padding, void* dilation) { void* ret = _lantern_slow_conv_dilated3d_attensor_attensor_atintarrayref_attensor_atintarrayref_atintarrayref_atintarrayref(self, weight, kernel_size, bias, stride, padding, dilation); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_slow_conv_dilated3d_backward_attensor_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_atintarrayref_stdarraybool)(void* grad_output, void* self, void* weight, void* kernel_size, void* stride, void* padding, void* dilation, void* output_mask);
  HOST_API void* lantern_slow_conv_dilated3d_backward_attensor_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_atintarrayref_stdarraybool(void* grad_output, void* self, void* weight, void* kernel_size, void* stride, void* padding, void* dilation, void* output_mask) { void* ret = _lantern_slow_conv_dilated3d_backward_attensor_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_atintarrayref_stdarraybool(grad_output, self, weight, kernel_size, stride, padding, dilation, output_mask); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_col2im_out_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_atintarrayref_atintarrayref)(void* out, void* self, void* output_size, void* kernel_size, void* dilation, void* padding, void* stride);
  HOST_API void* lantern_col2im_out_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_atintarrayref_atintarrayref(void* out, void* self, void* output_size, void* kernel_size, void* dilation, void* padding, void* stride) { void* ret = _lantern_col2im_out_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_atintarrayref_atintarrayref(out, self, output_size, kernel_size, dilation, padding, stride); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_col2im_attensor_atintarrayref_atintarrayref_atintarrayref_atintarrayref_atintarrayref)(void* self, void* output_size, void* kernel_size, void* dilation, void* padding, void* stride);
  HOST_API void* lantern_col2im_attensor_atintarrayref_atintarrayref_atintarrayref_atintarrayref_atintarrayref(void* self, void* output_size, void* kernel_size, void* dilation, void* padding, void* stride) { void* ret = _lantern_col2im_attensor_atintarrayref_atintarrayref_atintarrayref_atintarrayref_atintarrayref(self, output_size, kernel_size, dilation, padding, stride); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_col2im_backward_out_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_atintarrayref)(void* grad_input, void* grad_output, void* kernel_size, void* dilation, void* padding, void* stride);
  HOST_API void* lantern_col2im_backward_out_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_atintarrayref(void* grad_input, void* grad_output, void* kernel_size, void* dilation, void* padding, void* stride) { void* ret = _lantern_col2im_backward_out_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_atintarrayref(grad_input, grad_output, kernel_size, dilation, padding, stride); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_col2im_backward_attensor_atintarrayref_atintarrayref_atintarrayref_atintarrayref)(void* grad_output, void* kernel_size, void* dilation, void* padding, void* stride);
  HOST_API void* lantern_col2im_backward_attensor_atintarrayref_atintarrayref_atintarrayref_atintarrayref(void* grad_output, void* kernel_size, void* dilation, void* padding, void* stride) { void* ret = _lantern_col2im_backward_attensor_atintarrayref_atintarrayref_atintarrayref_atintarrayref(grad_output, kernel_size, dilation, padding, stride); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_column_stack_attensorlist)(void* tensors);
  HOST_API void* lantern_column_stack_attensorlist(void* tensors) { void* ret = _lantern_column_stack_attensorlist(tensors); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_column_stack_out_attensor_attensorlist)(void* out, void* tensors);
  HOST_API void* lantern_column_stack_out_attensor_attensorlist(void* out, void* tensors) { void* ret = _lantern_column_stack_out_attensor_attensorlist(out, tensors); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_im2col_out_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_atintarrayref)(void* out, void* self, void* kernel_size, void* dilation, void* padding, void* stride);
  HOST_API void* lantern_im2col_out_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_atintarrayref(void* out, void* self, void* kernel_size, void* dilation, void* padding, void* stride) { void* ret = _lantern_im2col_out_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_atintarrayref(out, self, kernel_size, dilation, padding, stride); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_im2col_attensor_atintarrayref_atintarrayref_atintarrayref_atintarrayref)(void* self, void* kernel_size, void* dilation, void* padding, void* stride);
  HOST_API void* lantern_im2col_attensor_atintarrayref_atintarrayref_atintarrayref_atintarrayref(void* self, void* kernel_size, void* dilation, void* padding, void* stride) { void* ret = _lantern_im2col_attensor_atintarrayref_atintarrayref_atintarrayref_atintarrayref(self, kernel_size, dilation, padding, stride); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_im2col_backward_out_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_atintarrayref_atintarrayref)(void* grad_input, void* grad_output, void* input_size, void* kernel_size, void* dilation, void* padding, void* stride);
  HOST_API void* lantern_im2col_backward_out_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_atintarrayref_atintarrayref(void* grad_input, void* grad_output, void* input_size, void* kernel_size, void* dilation, void* padding, void* stride) { void* ret = _lantern_im2col_backward_out_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_atintarrayref_atintarrayref(grad_input, grad_output, input_size, kernel_size, dilation, padding, stride); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_im2col_backward_attensor_atintarrayref_atintarrayref_atintarrayref_atintarrayref_atintarrayref)(void* grad_output, void* input_size, void* kernel_size, void* dilation, void* padding, void* stride);
  HOST_API void* lantern_im2col_backward_attensor_atintarrayref_atintarrayref_atintarrayref_atintarrayref_atintarrayref(void* grad_output, void* input_size, void* kernel_size, void* dilation, void* padding, void* stride) { void* ret = _lantern_im2col_backward_attensor_atintarrayref_atintarrayref_atintarrayref_atintarrayref_atintarrayref(grad_output, input_size, kernel_size, dilation, padding, stride); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_isfinite_attensor)(void* self);
  HOST_API void* lantern_isfinite_attensor(void* self) { void* ret = _lantern_isfinite_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_isfinite_attensor)(void* self);
  HOST_API void* lantern_Tensor_isfinite_attensor(void* self) { void* ret = _lantern_Tensor_isfinite_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_isinf_attensor)(void* self);
  HOST_API void* lantern_isinf_attensor(void* self) { void* ret = _lantern_isinf_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_isinf_attensor)(void* self);
  HOST_API void* lantern_Tensor_isinf_attensor(void* self) { void* ret = _lantern_Tensor_isinf_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_record_stream_attensor_atstream)(void* self, void* s);
  HOST_API void* lantern_Tensor_record_stream_attensor_atstream(void* self, void* s) { void* ret = _lantern_Tensor_record_stream_attensor_atstream(self, s); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_isposinf_attensor)(void* self);
  HOST_API void* lantern_isposinf_attensor(void* self) { void* ret = _lantern_isposinf_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_isposinf_attensor)(void* self);
  HOST_API void* lantern_Tensor_isposinf_attensor(void* self) { void* ret = _lantern_Tensor_isposinf_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_isposinf_out_attensor_attensor)(void* out, void* self);
  HOST_API void* lantern_isposinf_out_attensor_attensor(void* out, void* self) { void* ret = _lantern_isposinf_out_attensor_attensor(out, self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_isneginf_attensor)(void* self);
  HOST_API void* lantern_isneginf_attensor(void* self) { void* ret = _lantern_isneginf_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_isneginf_attensor)(void* self);
  HOST_API void* lantern_Tensor_isneginf_attensor(void* self) { void* ret = _lantern_Tensor_isneginf_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_isneginf_out_attensor_attensor)(void* out, void* self);
  HOST_API void* lantern_isneginf_out_attensor_attensor(void* out, void* self) { void* ret = _lantern_isneginf_out_attensor_attensor(out, self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__add_batch_dim_attensor_intt_intt)(void* self, void* batch_dim, void* level);
  HOST_API void* lantern__add_batch_dim_attensor_intt_intt(void* self, void* batch_dim, void* level) { void* ret = _lantern__add_batch_dim_attensor_intt_intt(self, batch_dim, level); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__remove_batch_dim_attensor_intt_intt_intt)(void* self, void* level, void* batch_size, void* out_dim);
  HOST_API void* lantern__remove_batch_dim_attensor_intt_intt_intt(void* self, void* level, void* batch_size, void* out_dim) { void* ret = _lantern__remove_batch_dim_attensor_intt_intt_intt(self, level, batch_size, out_dim); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_special_entr_attensor)(void* self);
  HOST_API void* lantern_special_entr_attensor(void* self) { void* ret = _lantern_special_entr_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_special_entr_out_attensor_attensor)(void* out, void* self);
  HOST_API void* lantern_special_entr_out_attensor_attensor(void* out, void* self) { void* ret = _lantern_special_entr_out_attensor_attensor(out, self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_special_expm1_attensor)(void* self);
  HOST_API void* lantern_special_expm1_attensor(void* self) { void* ret = _lantern_special_expm1_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_special_expm1_out_attensor_attensor)(void* out, void* self);
  HOST_API void* lantern_special_expm1_out_attensor_attensor(void* out, void* self) { void* ret = _lantern_special_expm1_out_attensor_attensor(out, self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_special_exp2_attensor)(void* self);
  HOST_API void* lantern_special_exp2_attensor(void* self) { void* ret = _lantern_special_exp2_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_special_exp2_out_attensor_attensor)(void* out, void* self);
  HOST_API void* lantern_special_exp2_out_attensor_attensor(void* out, void* self) { void* ret = _lantern_special_exp2_out_attensor_attensor(out, self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_special_gammaln_attensor)(void* self);
  HOST_API void* lantern_special_gammaln_attensor(void* self) { void* ret = _lantern_special_gammaln_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_special_gammaln_out_attensor_attensor)(void* out, void* self);
  HOST_API void* lantern_special_gammaln_out_attensor_attensor(void* out, void* self) { void* ret = _lantern_special_gammaln_out_attensor_attensor(out, self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_special_erf_attensor)(void* self);
  HOST_API void* lantern_special_erf_attensor(void* self) { void* ret = _lantern_special_erf_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_special_erf_out_attensor_attensor)(void* out, void* self);
  HOST_API void* lantern_special_erf_out_attensor_attensor(void* out, void* self) { void* ret = _lantern_special_erf_out_attensor_attensor(out, self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_special_erfc_attensor)(void* self);
  HOST_API void* lantern_special_erfc_attensor(void* self) { void* ret = _lantern_special_erfc_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_special_erfc_out_attensor_attensor)(void* out, void* self);
  HOST_API void* lantern_special_erfc_out_attensor_attensor(void* out, void* self) { void* ret = _lantern_special_erfc_out_attensor_attensor(out, self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_special_erfinv_attensor)(void* self);
  HOST_API void* lantern_special_erfinv_attensor(void* self) { void* ret = _lantern_special_erfinv_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_special_erfinv_out_attensor_attensor)(void* out, void* self);
  HOST_API void* lantern_special_erfinv_out_attensor_attensor(void* out, void* self) { void* ret = _lantern_special_erfinv_out_attensor_attensor(out, self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_special_xlog1py_attensor_attensor)(void* self, void* other);
  HOST_API void* lantern_special_xlog1py_attensor_attensor(void* self, void* other) { void* ret = _lantern_special_xlog1py_attensor_attensor(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_special_xlog1py_constatscalar_attensor)(void* self, void* other);
  HOST_API void* lantern_special_xlog1py_constatscalar_attensor(void* self, void* other) { void* ret = _lantern_special_xlog1py_constatscalar_attensor(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_special_xlog1py_attensor_constatscalar)(void* self, void* other);
  HOST_API void* lantern_special_xlog1py_attensor_constatscalar(void* self, void* other) { void* ret = _lantern_special_xlog1py_attensor_constatscalar(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_special_xlog1py_out_attensor_attensor_attensor)(void* out, void* self, void* other);
  HOST_API void* lantern_special_xlog1py_out_attensor_attensor_attensor(void* out, void* self, void* other) { void* ret = _lantern_special_xlog1py_out_attensor_attensor_attensor(out, self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_special_xlog1py_out_attensor_constatscalar_attensor)(void* out, void* self, void* other);
  HOST_API void* lantern_special_xlog1py_out_attensor_constatscalar_attensor(void* out, void* self, void* other) { void* ret = _lantern_special_xlog1py_out_attensor_constatscalar_attensor(out, self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_special_xlog1py_out_attensor_attensor_constatscalar)(void* out, void* self, void* other);
  HOST_API void* lantern_special_xlog1py_out_attensor_attensor_constatscalar(void* out, void* self, void* other) { void* ret = _lantern_special_xlog1py_out_attensor_attensor_constatscalar(out, self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_special_i0e_attensor)(void* self);
  HOST_API void* lantern_special_i0e_attensor(void* self) { void* ret = _lantern_special_i0e_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_special_i0e_out_attensor_attensor)(void* out, void* self);
  HOST_API void* lantern_special_i0e_out_attensor_attensor(void* out, void* self) { void* ret = _lantern_special_i0e_out_attensor_attensor(out, self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_special_logit_attensor_double)(void* self, void* eps);
  HOST_API void* lantern_special_logit_attensor_double(void* self, void* eps) { void* ret = _lantern_special_logit_attensor_double(self, eps); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_special_logit_out_attensor_attensor_double)(void* out, void* self, void* eps);
  HOST_API void* lantern_special_logit_out_attensor_attensor_double(void* out, void* self, void* eps) { void* ret = _lantern_special_logit_out_attensor_attensor_double(out, self, eps); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_special_expit_attensor)(void* self);
  HOST_API void* lantern_special_expit_attensor(void* self) { void* ret = _lantern_special_expit_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_special_expit_out_attensor_attensor)(void* out, void* self);
  HOST_API void* lantern_special_expit_out_attensor_attensor(void* out, void* self) { void* ret = _lantern_special_expit_out_attensor_attensor(out, self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_fft_fft_attensor_intt_intt_stdstring)(void* self, void* n, void* dim, void* norm);
  HOST_API void* lantern_fft_fft_attensor_intt_intt_stdstring(void* self, void* n, void* dim, void* norm) { void* ret = _lantern_fft_fft_attensor_intt_intt_stdstring(self, n, dim, norm); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_fft_fft_out_attensor_attensor_intt_intt_stdstring)(void* out, void* self, void* n, void* dim, void* norm);
  HOST_API void* lantern_fft_fft_out_attensor_attensor_intt_intt_stdstring(void* out, void* self, void* n, void* dim, void* norm) { void* ret = _lantern_fft_fft_out_attensor_attensor_intt_intt_stdstring(out, self, n, dim, norm); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_fft_ifft_attensor_intt_intt_stdstring)(void* self, void* n, void* dim, void* norm);
  HOST_API void* lantern_fft_ifft_attensor_intt_intt_stdstring(void* self, void* n, void* dim, void* norm) { void* ret = _lantern_fft_ifft_attensor_intt_intt_stdstring(self, n, dim, norm); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_fft_ifft_out_attensor_attensor_intt_intt_stdstring)(void* out, void* self, void* n, void* dim, void* norm);
  HOST_API void* lantern_fft_ifft_out_attensor_attensor_intt_intt_stdstring(void* out, void* self, void* n, void* dim, void* norm) { void* ret = _lantern_fft_ifft_out_attensor_attensor_intt_intt_stdstring(out, self, n, dim, norm); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_fft_rfft_attensor_intt_intt_stdstring)(void* self, void* n, void* dim, void* norm);
  HOST_API void* lantern_fft_rfft_attensor_intt_intt_stdstring(void* self, void* n, void* dim, void* norm) { void* ret = _lantern_fft_rfft_attensor_intt_intt_stdstring(self, n, dim, norm); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_fft_rfft_out_attensor_attensor_intt_intt_stdstring)(void* out, void* self, void* n, void* dim, void* norm);
  HOST_API void* lantern_fft_rfft_out_attensor_attensor_intt_intt_stdstring(void* out, void* self, void* n, void* dim, void* norm) { void* ret = _lantern_fft_rfft_out_attensor_attensor_intt_intt_stdstring(out, self, n, dim, norm); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_fft_irfft_attensor_intt_intt_stdstring)(void* self, void* n, void* dim, void* norm);
  HOST_API void* lantern_fft_irfft_attensor_intt_intt_stdstring(void* self, void* n, void* dim, void* norm) { void* ret = _lantern_fft_irfft_attensor_intt_intt_stdstring(self, n, dim, norm); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_fft_irfft_out_attensor_attensor_intt_intt_stdstring)(void* out, void* self, void* n, void* dim, void* norm);
  HOST_API void* lantern_fft_irfft_out_attensor_attensor_intt_intt_stdstring(void* out, void* self, void* n, void* dim, void* norm) { void* ret = _lantern_fft_irfft_out_attensor_attensor_intt_intt_stdstring(out, self, n, dim, norm); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_fft_hfft_attensor_intt_intt_stdstring)(void* self, void* n, void* dim, void* norm);
  HOST_API void* lantern_fft_hfft_attensor_intt_intt_stdstring(void* self, void* n, void* dim, void* norm) { void* ret = _lantern_fft_hfft_attensor_intt_intt_stdstring(self, n, dim, norm); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_fft_hfft_out_attensor_attensor_intt_intt_stdstring)(void* out, void* self, void* n, void* dim, void* norm);
  HOST_API void* lantern_fft_hfft_out_attensor_attensor_intt_intt_stdstring(void* out, void* self, void* n, void* dim, void* norm) { void* ret = _lantern_fft_hfft_out_attensor_attensor_intt_intt_stdstring(out, self, n, dim, norm); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_fft_ihfft_attensor_intt_intt_stdstring)(void* self, void* n, void* dim, void* norm);
  HOST_API void* lantern_fft_ihfft_attensor_intt_intt_stdstring(void* self, void* n, void* dim, void* norm) { void* ret = _lantern_fft_ihfft_attensor_intt_intt_stdstring(self, n, dim, norm); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_fft_ihfft_out_attensor_attensor_intt_intt_stdstring)(void* out, void* self, void* n, void* dim, void* norm);
  HOST_API void* lantern_fft_ihfft_out_attensor_attensor_intt_intt_stdstring(void* out, void* self, void* n, void* dim, void* norm) { void* ret = _lantern_fft_ihfft_out_attensor_attensor_intt_intt_stdstring(out, self, n, dim, norm); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_fft_fft2_attensor_atintarrayref_atintarrayref_stdstring)(void* self, void* s, void* dim, void* norm);
  HOST_API void* lantern_fft_fft2_attensor_atintarrayref_atintarrayref_stdstring(void* self, void* s, void* dim, void* norm) { void* ret = _lantern_fft_fft2_attensor_atintarrayref_atintarrayref_stdstring(self, s, dim, norm); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_fft_fft2_out_attensor_attensor_atintarrayref_atintarrayref_stdstring)(void* out, void* self, void* s, void* dim, void* norm);
  HOST_API void* lantern_fft_fft2_out_attensor_attensor_atintarrayref_atintarrayref_stdstring(void* out, void* self, void* s, void* dim, void* norm) { void* ret = _lantern_fft_fft2_out_attensor_attensor_atintarrayref_atintarrayref_stdstring(out, self, s, dim, norm); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_fft_ifft2_attensor_atintarrayref_atintarrayref_stdstring)(void* self, void* s, void* dim, void* norm);
  HOST_API void* lantern_fft_ifft2_attensor_atintarrayref_atintarrayref_stdstring(void* self, void* s, void* dim, void* norm) { void* ret = _lantern_fft_ifft2_attensor_atintarrayref_atintarrayref_stdstring(self, s, dim, norm); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_fft_ifft2_out_attensor_attensor_atintarrayref_atintarrayref_stdstring)(void* out, void* self, void* s, void* dim, void* norm);
  HOST_API void* lantern_fft_ifft2_out_attensor_attensor_atintarrayref_atintarrayref_stdstring(void* out, void* self, void* s, void* dim, void* norm) { void* ret = _lantern_fft_ifft2_out_attensor_attensor_atintarrayref_atintarrayref_stdstring(out, self, s, dim, norm); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_fft_rfft2_attensor_atintarrayref_atintarrayref_stdstring)(void* self, void* s, void* dim, void* norm);
  HOST_API void* lantern_fft_rfft2_attensor_atintarrayref_atintarrayref_stdstring(void* self, void* s, void* dim, void* norm) { void* ret = _lantern_fft_rfft2_attensor_atintarrayref_atintarrayref_stdstring(self, s, dim, norm); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_fft_rfft2_out_attensor_attensor_atintarrayref_atintarrayref_stdstring)(void* out, void* self, void* s, void* dim, void* norm);
  HOST_API void* lantern_fft_rfft2_out_attensor_attensor_atintarrayref_atintarrayref_stdstring(void* out, void* self, void* s, void* dim, void* norm) { void* ret = _lantern_fft_rfft2_out_attensor_attensor_atintarrayref_atintarrayref_stdstring(out, self, s, dim, norm); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_fft_irfft2_attensor_atintarrayref_atintarrayref_stdstring)(void* self, void* s, void* dim, void* norm);
  HOST_API void* lantern_fft_irfft2_attensor_atintarrayref_atintarrayref_stdstring(void* self, void* s, void* dim, void* norm) { void* ret = _lantern_fft_irfft2_attensor_atintarrayref_atintarrayref_stdstring(self, s, dim, norm); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_fft_irfft2_out_attensor_attensor_atintarrayref_atintarrayref_stdstring)(void* out, void* self, void* s, void* dim, void* norm);
  HOST_API void* lantern_fft_irfft2_out_attensor_attensor_atintarrayref_atintarrayref_stdstring(void* out, void* self, void* s, void* dim, void* norm) { void* ret = _lantern_fft_irfft2_out_attensor_attensor_atintarrayref_atintarrayref_stdstring(out, self, s, dim, norm); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_fft_fftn_attensor_atintarrayref_atintarrayref_stdstring)(void* self, void* s, void* dim, void* norm);
  HOST_API void* lantern_fft_fftn_attensor_atintarrayref_atintarrayref_stdstring(void* self, void* s, void* dim, void* norm) { void* ret = _lantern_fft_fftn_attensor_atintarrayref_atintarrayref_stdstring(self, s, dim, norm); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_fft_fftn_out_attensor_attensor_atintarrayref_atintarrayref_stdstring)(void* out, void* self, void* s, void* dim, void* norm);
  HOST_API void* lantern_fft_fftn_out_attensor_attensor_atintarrayref_atintarrayref_stdstring(void* out, void* self, void* s, void* dim, void* norm) { void* ret = _lantern_fft_fftn_out_attensor_attensor_atintarrayref_atintarrayref_stdstring(out, self, s, dim, norm); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_fft_ifftn_attensor_atintarrayref_atintarrayref_stdstring)(void* self, void* s, void* dim, void* norm);
  HOST_API void* lantern_fft_ifftn_attensor_atintarrayref_atintarrayref_stdstring(void* self, void* s, void* dim, void* norm) { void* ret = _lantern_fft_ifftn_attensor_atintarrayref_atintarrayref_stdstring(self, s, dim, norm); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_fft_ifftn_out_attensor_attensor_atintarrayref_atintarrayref_stdstring)(void* out, void* self, void* s, void* dim, void* norm);
  HOST_API void* lantern_fft_ifftn_out_attensor_attensor_atintarrayref_atintarrayref_stdstring(void* out, void* self, void* s, void* dim, void* norm) { void* ret = _lantern_fft_ifftn_out_attensor_attensor_atintarrayref_atintarrayref_stdstring(out, self, s, dim, norm); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_fft_rfftn_attensor_atintarrayref_atintarrayref_stdstring)(void* self, void* s, void* dim, void* norm);
  HOST_API void* lantern_fft_rfftn_attensor_atintarrayref_atintarrayref_stdstring(void* self, void* s, void* dim, void* norm) { void* ret = _lantern_fft_rfftn_attensor_atintarrayref_atintarrayref_stdstring(self, s, dim, norm); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_fft_rfftn_out_attensor_attensor_atintarrayref_atintarrayref_stdstring)(void* out, void* self, void* s, void* dim, void* norm);
  HOST_API void* lantern_fft_rfftn_out_attensor_attensor_atintarrayref_atintarrayref_stdstring(void* out, void* self, void* s, void* dim, void* norm) { void* ret = _lantern_fft_rfftn_out_attensor_attensor_atintarrayref_atintarrayref_stdstring(out, self, s, dim, norm); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_fft_irfftn_attensor_atintarrayref_atintarrayref_stdstring)(void* self, void* s, void* dim, void* norm);
  HOST_API void* lantern_fft_irfftn_attensor_atintarrayref_atintarrayref_stdstring(void* self, void* s, void* dim, void* norm) { void* ret = _lantern_fft_irfftn_attensor_atintarrayref_atintarrayref_stdstring(self, s, dim, norm); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_fft_irfftn_out_attensor_attensor_atintarrayref_atintarrayref_stdstring)(void* out, void* self, void* s, void* dim, void* norm);
  HOST_API void* lantern_fft_irfftn_out_attensor_attensor_atintarrayref_atintarrayref_stdstring(void* out, void* self, void* s, void* dim, void* norm) { void* ret = _lantern_fft_irfftn_out_attensor_attensor_atintarrayref_atintarrayref_stdstring(out, self, s, dim, norm); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_fft_fftfreq_intt_double_attensoroptions)(void* n, void* d, void* options);
  HOST_API void* lantern_fft_fftfreq_intt_double_attensoroptions(void* n, void* d, void* options) { void* ret = _lantern_fft_fftfreq_intt_double_attensoroptions(n, d, options); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_fft_fftfreq_out_attensor_intt_double)(void* out, void* n, void* d);
  HOST_API void* lantern_fft_fftfreq_out_attensor_intt_double(void* out, void* n, void* d) { void* ret = _lantern_fft_fftfreq_out_attensor_intt_double(out, n, d); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_fft_rfftfreq_intt_double_attensoroptions)(void* n, void* d, void* options);
  HOST_API void* lantern_fft_rfftfreq_intt_double_attensoroptions(void* n, void* d, void* options) { void* ret = _lantern_fft_rfftfreq_intt_double_attensoroptions(n, d, options); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_fft_rfftfreq_out_attensor_intt_double)(void* out, void* n, void* d);
  HOST_API void* lantern_fft_rfftfreq_out_attensor_intt_double(void* out, void* n, void* d) { void* ret = _lantern_fft_rfftfreq_out_attensor_intt_double(out, n, d); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_fft_fftshift_attensor_atintarrayref)(void* self, void* dim);
  HOST_API void* lantern_fft_fftshift_attensor_atintarrayref(void* self, void* dim) { void* ret = _lantern_fft_fftshift_attensor_atintarrayref(self, dim); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_fft_ifftshift_attensor_atintarrayref)(void* self, void* dim);
  HOST_API void* lantern_fft_ifftshift_attensor_atintarrayref(void* self, void* dim) { void* ret = _lantern_fft_ifftshift_attensor_atintarrayref(self, dim); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_linalg_cholesky_ex_attensor_bool)(void* self, void* check_errors);
  HOST_API void* lantern_linalg_cholesky_ex_attensor_bool(void* self, void* check_errors) { void* ret = _lantern_linalg_cholesky_ex_attensor_bool(self, check_errors); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_linalg_cholesky_ex_out_attensor_attensor_attensor_bool)(void* L, void* info, void* self, void* check_errors);
  HOST_API void* lantern_linalg_cholesky_ex_out_attensor_attensor_attensor_bool(void* L, void* info, void* self, void* check_errors) { void* ret = _lantern_linalg_cholesky_ex_out_attensor_attensor_attensor_bool(L, info, self, check_errors); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_linalg_cholesky_attensor)(void* self);
  HOST_API void* lantern_linalg_cholesky_attensor(void* self) { void* ret = _lantern_linalg_cholesky_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_linalg_cholesky_out_attensor_attensor)(void* out, void* self);
  HOST_API void* lantern_linalg_cholesky_out_attensor_attensor(void* out, void* self) { void* ret = _lantern_linalg_cholesky_out_attensor_attensor(out, self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_linalg_det_attensor)(void* self);
  HOST_API void* lantern_linalg_det_attensor(void* self) { void* ret = _lantern_linalg_det_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_linalg_det_out_attensor_attensor)(void* out, void* self);
  HOST_API void* lantern_linalg_det_out_attensor_attensor(void* out, void* self) { void* ret = _lantern_linalg_det_out_attensor_attensor(out, self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_det_attensor)(void* self);
  HOST_API void* lantern_det_attensor(void* self) { void* ret = _lantern_det_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_det_attensor)(void* self);
  HOST_API void* lantern_Tensor_det_attensor(void* self) { void* ret = _lantern_Tensor_det_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_linalg_lstsq_attensor_attensor_double_stdstring)(void* self, void* b, void* rcond, void* driver);
  HOST_API void* lantern_linalg_lstsq_attensor_attensor_double_stdstring(void* self, void* b, void* rcond, void* driver) { void* ret = _lantern_linalg_lstsq_attensor_attensor_double_stdstring(self, b, rcond, driver); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_linalg_lstsq_out_attensor_attensor_attensor_attensor_attensor_attensor_double_stdstring)(void* solution, void* residuals, void* rank, void* singular_values, void* self, void* b, void* rcond, void* driver);
  HOST_API void* lantern_linalg_lstsq_out_attensor_attensor_attensor_attensor_attensor_attensor_double_stdstring(void* solution, void* residuals, void* rank, void* singular_values, void* self, void* b, void* rcond, void* driver) { void* ret = _lantern_linalg_lstsq_out_attensor_attensor_attensor_attensor_attensor_attensor_double_stdstring(solution, residuals, rank, singular_values, self, b, rcond, driver); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_linalg_slogdet_attensor)(void* self);
  HOST_API void* lantern_linalg_slogdet_attensor(void* self) { void* ret = _lantern_linalg_slogdet_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_linalg_slogdet_out_attensor_attensor_attensor)(void* sign, void* logabsdet, void* self);
  HOST_API void* lantern_linalg_slogdet_out_attensor_attensor_attensor(void* sign, void* logabsdet, void* self) { void* ret = _lantern_linalg_slogdet_out_attensor_attensor_attensor(sign, logabsdet, self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_linalg_eig_attensor)(void* self);
  HOST_API void* lantern_linalg_eig_attensor(void* self) { void* ret = _lantern_linalg_eig_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_linalg_eig_out_attensor_attensor_attensor)(void* eigenvalues, void* eigenvectors, void* self);
  HOST_API void* lantern_linalg_eig_out_attensor_attensor_attensor(void* eigenvalues, void* eigenvectors, void* self) { void* ret = _lantern_linalg_eig_out_attensor_attensor_attensor(eigenvalues, eigenvectors, self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_linalg_eigvals_attensor)(void* self);
  HOST_API void* lantern_linalg_eigvals_attensor(void* self) { void* ret = _lantern_linalg_eigvals_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_linalg_eigvals_out_attensor_attensor)(void* out, void* self);
  HOST_API void* lantern_linalg_eigvals_out_attensor_attensor(void* out, void* self) { void* ret = _lantern_linalg_eigvals_out_attensor_attensor(out, self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_linalg_eigh_attensor_stdstring)(void* self, void* UPLO);
  HOST_API void* lantern_linalg_eigh_attensor_stdstring(void* self, void* UPLO) { void* ret = _lantern_linalg_eigh_attensor_stdstring(self, UPLO); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_linalg_eigh_out_attensor_attensor_attensor_stdstring)(void* eigvals, void* eigvecs, void* self, void* UPLO);
  HOST_API void* lantern_linalg_eigh_out_attensor_attensor_attensor_stdstring(void* eigvals, void* eigvecs, void* self, void* UPLO) { void* ret = _lantern_linalg_eigh_out_attensor_attensor_attensor_stdstring(eigvals, eigvecs, self, UPLO); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_linalg_eigvalsh_attensor_stdstring)(void* self, void* UPLO);
  HOST_API void* lantern_linalg_eigvalsh_attensor_stdstring(void* self, void* UPLO) { void* ret = _lantern_linalg_eigvalsh_attensor_stdstring(self, UPLO); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_linalg_eigvalsh_out_attensor_attensor_stdstring)(void* out, void* self, void* UPLO);
  HOST_API void* lantern_linalg_eigvalsh_out_attensor_attensor_stdstring(void* out, void* self, void* UPLO) { void* ret = _lantern_linalg_eigvalsh_out_attensor_attensor_stdstring(out, self, UPLO); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_linalg_householder_product_attensor_attensor)(void* input, void* tau);
  HOST_API void* lantern_linalg_householder_product_attensor_attensor(void* input, void* tau) { void* ret = _lantern_linalg_householder_product_attensor_attensor(input, tau); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_linalg_householder_product_out_attensor_attensor_attensor)(void* out, void* input, void* tau);
  HOST_API void* lantern_linalg_householder_product_out_attensor_attensor_attensor(void* out, void* input, void* tau) { void* ret = _lantern_linalg_householder_product_out_attensor_attensor_attensor(out, input, tau); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__linalg_inv_out_helper__attensor_attensor_attensor)(void* self, void* infos_lu, void* infos_getri);
  HOST_API void* lantern__linalg_inv_out_helper__attensor_attensor_attensor(void* self, void* infos_lu, void* infos_getri) { void* ret = _lantern__linalg_inv_out_helper__attensor_attensor_attensor(self, infos_lu, infos_getri); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_linalg_inv_ex_attensor_bool)(void* self, void* check_errors);
  HOST_API void* lantern_linalg_inv_ex_attensor_bool(void* self, void* check_errors) { void* ret = _lantern_linalg_inv_ex_attensor_bool(self, check_errors); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_linalg_inv_ex_out_attensor_attensor_attensor_bool)(void* inverse, void* info, void* self, void* check_errors);
  HOST_API void* lantern_linalg_inv_ex_out_attensor_attensor_attensor_bool(void* inverse, void* info, void* self, void* check_errors) { void* ret = _lantern_linalg_inv_ex_out_attensor_attensor_attensor_bool(inverse, info, self, check_errors); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_linalg_inv_attensor)(void* self);
  HOST_API void* lantern_linalg_inv_attensor(void* self) { void* ret = _lantern_linalg_inv_attensor(self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_linalg_inv_out_attensor_attensor)(void* out, void* self);
  HOST_API void* lantern_linalg_inv_out_attensor_attensor(void* out, void* self) { void* ret = _lantern_linalg_inv_out_attensor_attensor(out, self); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_inner_attensor_attensor)(void* self, void* other);
  HOST_API void* lantern_inner_attensor_attensor(void* self, void* other) { void* ret = _lantern_inner_attensor_attensor(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_inner_attensor_attensor)(void* self, void* other);
  HOST_API void* lantern_Tensor_inner_attensor_attensor(void* self, void* other) { void* ret = _lantern_Tensor_inner_attensor_attensor(self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_inner_out_attensor_attensor_attensor)(void* out, void* self, void* other);
  HOST_API void* lantern_inner_out_attensor_attensor_attensor(void* out, void* self, void* other) { void* ret = _lantern_inner_out_attensor_attensor_attensor(out, self, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_outer_attensor_attensor)(void* self, void* vec2);
  HOST_API void* lantern_outer_attensor_attensor(void* self, void* vec2) { void* ret = _lantern_outer_attensor_attensor(self, vec2); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_outer_attensor_attensor)(void* self, void* vec2);
  HOST_API void* lantern_Tensor_outer_attensor_attensor(void* self, void* vec2) { void* ret = _lantern_Tensor_outer_attensor_attensor(self, vec2); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_outer_out_attensor_attensor_attensor)(void* out, void* self, void* vec2);
  HOST_API void* lantern_outer_out_attensor_attensor_attensor(void* out, void* self, void* vec2) { void* ret = _lantern_outer_out_attensor_attensor_attensor(out, self, vec2); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_ger_attensor_attensor)(void* self, void* vec2);
  HOST_API void* lantern_ger_attensor_attensor(void* self, void* vec2) { void* ret = _lantern_ger_attensor_attensor(self, vec2); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_Tensor_ger_attensor_attensor)(void* self, void* vec2);
  HOST_API void* lantern_Tensor_ger_attensor_attensor(void* self, void* vec2) { void* ret = _lantern_Tensor_ger_attensor_attensor(self, vec2); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_ger_out_attensor_attensor_attensor)(void* out, void* self, void* vec2);
  HOST_API void* lantern_ger_out_attensor_attensor_attensor(void* out, void* self, void* vec2) { void* ret = _lantern_ger_out_attensor_attensor_attensor(out, self, vec2); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_linalg_norm_attensor_constatscalar_atintarrayref_bool_atscalartype)(void* self, void* ord, void* dim, void* keepdim, void* dtype);
  HOST_API void* lantern_linalg_norm_attensor_constatscalar_atintarrayref_bool_atscalartype(void* self, void* ord, void* dim, void* keepdim, void* dtype) { void* ret = _lantern_linalg_norm_attensor_constatscalar_atintarrayref_bool_atscalartype(self, ord, dim, keepdim, dtype); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_linalg_norm_attensor_stdstring_atintarrayref_bool_atscalartype)(void* self, void* ord, void* dim, void* keepdim, void* dtype);
  HOST_API void* lantern_linalg_norm_attensor_stdstring_atintarrayref_bool_atscalartype(void* self, void* ord, void* dim, void* keepdim, void* dtype) { void* ret = _lantern_linalg_norm_attensor_stdstring_atintarrayref_bool_atscalartype(self, ord, dim, keepdim, dtype); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_linalg_norm_out_attensor_attensor_constatscalar_atintarrayref_bool_atscalartype)(void* out, void* self, void* ord, void* dim, void* keepdim, void* dtype);
  HOST_API void* lantern_linalg_norm_out_attensor_attensor_constatscalar_atintarrayref_bool_atscalartype(void* out, void* self, void* ord, void* dim, void* keepdim, void* dtype) { void* ret = _lantern_linalg_norm_out_attensor_attensor_constatscalar_atintarrayref_bool_atscalartype(out, self, ord, dim, keepdim, dtype); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_linalg_norm_out_attensor_attensor_stdstring_atintarrayref_bool_atscalartype)(void* out, void* self, void* ord, void* dim, void* keepdim, void* dtype);
  HOST_API void* lantern_linalg_norm_out_attensor_attensor_stdstring_atintarrayref_bool_atscalartype(void* out, void* self, void* ord, void* dim, void* keepdim, void* dtype) { void* ret = _lantern_linalg_norm_out_attensor_attensor_stdstring_atintarrayref_bool_atscalartype(out, self, ord, dim, keepdim, dtype); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_linalg_vector_norm_attensor_constatscalar_atintarrayref_bool_atscalartype)(void* self, void* ord, void* dim, void* keepdim, void* dtype);
  HOST_API void* lantern_linalg_vector_norm_attensor_constatscalar_atintarrayref_bool_atscalartype(void* self, void* ord, void* dim, void* keepdim, void* dtype) { void* ret = _lantern_linalg_vector_norm_attensor_constatscalar_atintarrayref_bool_atscalartype(self, ord, dim, keepdim, dtype); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_linalg_vector_norm_out_attensor_attensor_constatscalar_atintarrayref_bool_atscalartype)(void* out, void* self, void* ord, void* dim, void* keepdim, void* dtype);
  HOST_API void* lantern_linalg_vector_norm_out_attensor_attensor_constatscalar_atintarrayref_bool_atscalartype(void* out, void* self, void* ord, void* dim, void* keepdim, void* dtype) { void* ret = _lantern_linalg_vector_norm_out_attensor_attensor_constatscalar_atintarrayref_bool_atscalartype(out, self, ord, dim, keepdim, dtype); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_linalg_matrix_norm_attensor_constatscalar_atintarrayref_bool_atscalartype)(void* self, void* ord, void* dim, void* keepdim, void* dtype);
  HOST_API void* lantern_linalg_matrix_norm_attensor_constatscalar_atintarrayref_bool_atscalartype(void* self, void* ord, void* dim, void* keepdim, void* dtype) { void* ret = _lantern_linalg_matrix_norm_attensor_constatscalar_atintarrayref_bool_atscalartype(self, ord, dim, keepdim, dtype); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_linalg_matrix_norm_out_attensor_attensor_constatscalar_atintarrayref_bool_atscalartype)(void* out, void* self, void* ord, void* dim, void* keepdim, void* dtype);
  HOST_API void* lantern_linalg_matrix_norm_out_attensor_attensor_constatscalar_atintarrayref_bool_atscalartype(void* out, void* self, void* ord, void* dim, void* keepdim, void* dtype) { void* ret = _lantern_linalg_matrix_norm_out_attensor_attensor_constatscalar_atintarrayref_bool_atscalartype(out, self, ord, dim, keepdim, dtype); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_linalg_matrix_norm_attensor_stdstring_atintarrayref_bool_atscalartype)(void* self, void* ord, void* dim, void* keepdim, void* dtype);
  HOST_API void* lantern_linalg_matrix_norm_attensor_stdstring_atintarrayref_bool_atscalartype(void* self, void* ord, void* dim, void* keepdim, void* dtype) { void* ret = _lantern_linalg_matrix_norm_attensor_stdstring_atintarrayref_bool_atscalartype(self, ord, dim, keepdim, dtype); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_linalg_matrix_norm_out_attensor_attensor_stdstring_atintarrayref_bool_atscalartype)(void* out, void* self, void* ord, void* dim, void* keepdim, void* dtype);
  HOST_API void* lantern_linalg_matrix_norm_out_attensor_attensor_stdstring_atintarrayref_bool_atscalartype(void* out, void* self, void* ord, void* dim, void* keepdim, void* dtype) { void* ret = _lantern_linalg_matrix_norm_out_attensor_attensor_stdstring_atintarrayref_bool_atscalartype(out, self, ord, dim, keepdim, dtype); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_linalg_svd_out_attensor_attensor_attensor_attensor_bool)(void* U, void* S, void* Vh, void* self, void* full_matrices);
  HOST_API void* lantern_linalg_svd_out_attensor_attensor_attensor_attensor_bool(void* U, void* S, void* Vh, void* self, void* full_matrices) { void* ret = _lantern_linalg_svd_out_attensor_attensor_attensor_attensor_bool(U, S, Vh, self, full_matrices); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_linalg_svd_attensor_bool)(void* self, void* full_matrices);
  HOST_API void* lantern_linalg_svd_attensor_bool(void* self, void* full_matrices) { void* ret = _lantern_linalg_svd_attensor_bool(self, full_matrices); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_linalg_svdvals_attensor)(void* input);
  HOST_API void* lantern_linalg_svdvals_attensor(void* input) { void* ret = _lantern_linalg_svdvals_attensor(input); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_linalg_svdvals_out_attensor_attensor)(void* out, void* input);
  HOST_API void* lantern_linalg_svdvals_out_attensor_attensor(void* out, void* input) { void* ret = _lantern_linalg_svdvals_out_attensor_attensor(out, input); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_linalg_cond_attensor_constatscalar)(void* self, void* p);
  HOST_API void* lantern_linalg_cond_attensor_constatscalar(void* self, void* p) { void* ret = _lantern_linalg_cond_attensor_constatscalar(self, p); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_linalg_cond_out_attensor_attensor_constatscalar)(void* out, void* self, void* p);
  HOST_API void* lantern_linalg_cond_out_attensor_attensor_constatscalar(void* out, void* self, void* p) { void* ret = _lantern_linalg_cond_out_attensor_attensor_constatscalar(out, self, p); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_linalg_cond_attensor_stdstring)(void* self, void* p);
  HOST_API void* lantern_linalg_cond_attensor_stdstring(void* self, void* p) { void* ret = _lantern_linalg_cond_attensor_stdstring(self, p); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_linalg_cond_out_attensor_attensor_stdstring)(void* out, void* self, void* p);
  HOST_API void* lantern_linalg_cond_out_attensor_attensor_stdstring(void* out, void* self, void* p) { void* ret = _lantern_linalg_cond_out_attensor_attensor_stdstring(out, self, p); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_linalg_pinv_attensor_double_bool)(void* self, void* rcond, void* hermitian);
  HOST_API void* lantern_linalg_pinv_attensor_double_bool(void* self, void* rcond, void* hermitian) { void* ret = _lantern_linalg_pinv_attensor_double_bool(self, rcond, hermitian); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_linalg_pinv_attensor_attensor_bool)(void* self, void* rcond, void* hermitian);
  HOST_API void* lantern_linalg_pinv_attensor_attensor_bool(void* self, void* rcond, void* hermitian) { void* ret = _lantern_linalg_pinv_attensor_attensor_bool(self, rcond, hermitian); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_linalg_pinv_out_attensor_attensor_double_bool)(void* out, void* self, void* rcond, void* hermitian);
  HOST_API void* lantern_linalg_pinv_out_attensor_attensor_double_bool(void* out, void* self, void* rcond, void* hermitian) { void* ret = _lantern_linalg_pinv_out_attensor_attensor_double_bool(out, self, rcond, hermitian); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_linalg_pinv_out_attensor_attensor_attensor_bool)(void* out, void* self, void* rcond, void* hermitian);
  HOST_API void* lantern_linalg_pinv_out_attensor_attensor_attensor_bool(void* out, void* self, void* rcond, void* hermitian) { void* ret = _lantern_linalg_pinv_out_attensor_attensor_attensor_bool(out, self, rcond, hermitian); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__linalg_solve_out_helper__attensor_attensor_attensor)(void* self, void* other, void* infos);
  HOST_API void* lantern__linalg_solve_out_helper__attensor_attensor_attensor(void* self, void* other, void* infos) { void* ret = _lantern__linalg_solve_out_helper__attensor_attensor_attensor(self, other, infos); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_linalg_solve_attensor_attensor)(void* input, void* other);
  HOST_API void* lantern_linalg_solve_attensor_attensor(void* input, void* other) { void* ret = _lantern_linalg_solve_attensor_attensor(input, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_linalg_solve_out_attensor_attensor_attensor)(void* out, void* input, void* other);
  HOST_API void* lantern_linalg_solve_out_attensor_attensor_attensor(void* out, void* input, void* other) { void* ret = _lantern_linalg_solve_out_attensor_attensor_attensor(out, input, other); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_linalg_tensorinv_attensor_intt)(void* self, void* ind);
  HOST_API void* lantern_linalg_tensorinv_attensor_intt(void* self, void* ind) { void* ret = _lantern_linalg_tensorinv_attensor_intt(self, ind); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_linalg_tensorinv_out_attensor_attensor_intt)(void* out, void* self, void* ind);
  HOST_API void* lantern_linalg_tensorinv_out_attensor_attensor_intt(void* out, void* self, void* ind) { void* ret = _lantern_linalg_tensorinv_out_attensor_attensor_intt(out, self, ind); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_linalg_tensorsolve_attensor_attensor_atintarrayref)(void* self, void* other, void* dims);
  HOST_API void* lantern_linalg_tensorsolve_attensor_attensor_atintarrayref(void* self, void* other, void* dims) { void* ret = _lantern_linalg_tensorsolve_attensor_attensor_atintarrayref(self, other, dims); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_linalg_tensorsolve_out_attensor_attensor_attensor_atintarrayref)(void* out, void* self, void* other, void* dims);
  HOST_API void* lantern_linalg_tensorsolve_out_attensor_attensor_attensor_atintarrayref(void* out, void* self, void* other, void* dims) { void* ret = _lantern_linalg_tensorsolve_out_attensor_attensor_attensor_atintarrayref(out, self, other, dims); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_linalg_qr_attensor_stdstring)(void* self, void* mode);
  HOST_API void* lantern_linalg_qr_attensor_stdstring(void* self, void* mode) { void* ret = _lantern_linalg_qr_attensor_stdstring(self, mode); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_linalg_qr_out_attensor_attensor_attensor_stdstring)(void* Q, void* R, void* self, void* mode);
  HOST_API void* lantern_linalg_qr_out_attensor_attensor_attensor_stdstring(void* Q, void* R, void* self, void* mode) { void* ret = _lantern_linalg_qr_out_attensor_attensor_attensor_stdstring(Q, R, self, mode); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__linalg_qr_helper_attensor_stdstring)(void* self, void* mode);
  HOST_API void* lantern__linalg_qr_helper_attensor_stdstring(void* self, void* mode) { void* ret = _lantern__linalg_qr_helper_attensor_stdstring(self, mode); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_linalg_matrix_power_attensor_intt)(void* self, void* n);
  HOST_API void* lantern_linalg_matrix_power_attensor_intt(void* self, void* n) { void* ret = _lantern_linalg_matrix_power_attensor_intt(self, n); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_linalg_matrix_power_out_attensor_attensor_intt)(void* out, void* self, void* n);
  HOST_API void* lantern_linalg_matrix_power_out_attensor_attensor_intt(void* out, void* self, void* n) { void* ret = _lantern_linalg_matrix_power_out_attensor_attensor_intt(out, self, n); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_linalg_matrix_rank_attensor_double_bool)(void* self, void* tol, void* hermitian);
  HOST_API void* lantern_linalg_matrix_rank_attensor_double_bool(void* self, void* tol, void* hermitian) { void* ret = _lantern_linalg_matrix_rank_attensor_double_bool(self, tol, hermitian); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_linalg_matrix_rank_out_attensor_attensor_double_bool)(void* out, void* self, void* tol, void* hermitian);
  HOST_API void* lantern_linalg_matrix_rank_out_attensor_attensor_double_bool(void* out, void* self, void* tol, void* hermitian) { void* ret = _lantern_linalg_matrix_rank_out_attensor_attensor_double_bool(out, self, tol, hermitian); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_linalg_matrix_rank_attensor_attensor_bool)(void* input, void* tol, void* hermitian);
  HOST_API void* lantern_linalg_matrix_rank_attensor_attensor_bool(void* input, void* tol, void* hermitian) { void* ret = _lantern_linalg_matrix_rank_attensor_attensor_bool(input, tol, hermitian); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_linalg_matrix_rank_out_attensor_attensor_attensor_bool)(void* out, void* input, void* tol, void* hermitian);
  HOST_API void* lantern_linalg_matrix_rank_out_attensor_attensor_attensor_bool(void* out, void* input, void* tol, void* hermitian) { void* ret = _lantern_linalg_matrix_rank_out_attensor_attensor_attensor_bool(out, input, tol, hermitian); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_linalg_multi_dot_attensorlist)(void* tensors);
  HOST_API void* lantern_linalg_multi_dot_attensorlist(void* tensors) { void* ret = _lantern_linalg_multi_dot_attensorlist(tensors); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_linalg_multi_dot_out_attensor_attensorlist)(void* out, void* tensors);
  HOST_API void* lantern_linalg_multi_dot_out_attensor_attensorlist(void* out, void* tensors) { void* ret = _lantern_linalg_multi_dot_out_attensor_attensorlist(out, tensors); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__test_serialization_subcmul_attensor_attensor_constatscalar)(void* self, void* other, void* alpha);
  HOST_API void* lantern__test_serialization_subcmul_attensor_attensor_constatscalar(void* self, void* other, void* alpha) { void* ret = _lantern__test_serialization_subcmul_attensor_attensor_constatscalar(self, other, alpha); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__test_optional_intlist_attensor_atintarrayref)(void* values, void* addends);
  HOST_API void* lantern__test_optional_intlist_attensor_atintarrayref(void* values, void* addends) { void* ret = _lantern__test_optional_intlist_attensor_atintarrayref(values, addends); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__test_optional_filled_intlist_attensor_atintarrayref)(void* values, void* addends);
  HOST_API void* lantern__test_optional_filled_intlist_attensor_atintarrayref(void* values, void* addends) { void* ret = _lantern__test_optional_filled_intlist_attensor_atintarrayref(values, addends); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__test_optional_floatlist_attensor_atarrayrefdouble)(void* values, void* addends);
  HOST_API void* lantern__test_optional_floatlist_attensor_atarrayrefdouble(void* values, void* addends) { void* ret = _lantern__test_optional_floatlist_attensor_atarrayrefdouble(values, addends); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__test_string_default_attensor_stdstring_stdstring)(void* dummy, void* a, void* b);
  HOST_API void* lantern__test_string_default_attensor_stdstring_stdstring(void* dummy, void* a, void* b) { void* ret = _lantern__test_string_default_attensor_stdstring_stdstring(dummy, a, b); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__test_ambiguous_defaults_attensor_intt_intt)(void* dummy, void* a, void* b);
  HOST_API void* lantern__test_ambiguous_defaults_attensor_intt_intt(void* dummy, void* a, void* b) { void* ret = _lantern__test_ambiguous_defaults_attensor_intt_intt(dummy, a, b); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern__test_ambiguous_defaults_attensor_intt_stdstring)(void* dummy, void* a, void* b);
  HOST_API void* lantern__test_ambiguous_defaults_attensor_intt_stdstring(void* dummy, void* a, void* b) { void* ret = _lantern__test_ambiguous_defaults_attensor_intt_stdstring(dummy, a, b); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_segment_reduce_attensor_stdstring_attensor_attensor_intt_bool_constatscalar)(void* data, void* reduce, void* lengths, void* indices, void* axis, void* unsafe, void* initial);
  HOST_API void* lantern_segment_reduce_attensor_stdstring_attensor_attensor_intt_bool_constatscalar(void* data, void* reduce, void* lengths, void* indices, void* axis, void* unsafe, void* initial) { void* ret = _lantern_segment_reduce_attensor_stdstring_attensor_attensor_intt_bool_constatscalar(data, reduce, lengths, indices, axis, unsafe, initial); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_segment_reduce_backward_attensor_attensor_attensor_attensor)(void* grad, void* output, void* data, void* lengths);
  HOST_API void* lantern_segment_reduce_backward_attensor_attensor_attensor_attensor(void* grad, void* output, void* data, void* lengths) { void* ret = _lantern_segment_reduce_backward_attensor_attensor_attensor_attensor(grad, output, data, lengths); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_pad_sequence_attensorlist_bool_double)(void* sequences, void* batch_first, void* padding_value);
  HOST_API void* lantern_pad_sequence_attensorlist_bool_double(void* sequences, void* batch_first, void* padding_value) { void* ret = _lantern_pad_sequence_attensorlist_bool_double(sequences, batch_first, padding_value); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_flatten_dense_tensors_attensorlist)(void* tensors);
  HOST_API void* lantern_flatten_dense_tensors_attensorlist(void* tensors) { void* ret = _lantern_flatten_dense_tensors_attensorlist(tensors); LANTERN_HOST_HANDLER return ret; }
  LANTERN_API void* (LANTERN_PTR _lantern_unflatten_dense_tensors_attensor_attensorlist)(void* flat, void* tensors);
  HOST_API void* lantern_unflatten_dense_tensors_attensor_attensorlist(void* flat, void* tensors) { void* ret = _lantern_unflatten_dense_tensors_attensor_attensorlist(flat, tensors); LANTERN_HOST_HANDLER return ret; }
  /* Autogen Headers -- End */

#ifdef __cplusplus
}
#endif

#ifndef LANTERN_HEADERS_ONLY

#include <string>

inline const char *pathSeparator()
{
#ifdef _WIN32
  return "\\";
#else
  return "/";
#endif
}

inline const char *libraryName()
{
#ifdef __APPLE__
  return "liblantern.dylib";
#else
#ifdef _WIN32
  return "lantern.dll";
#else
  return "liblantern.so";
#endif
#endif
}

void *pLibrary = NULL;

#define LOAD_SYMBOL(name)                                         \
  if (!laternLoadSymbol(pLibrary, #name, (void **)&name, pError))  \
    return false;

void lanternLoadError(std::string *pError)
{
#ifdef _WIN32
  LPVOID lpMsgBuf;
  DWORD dw = ::GetLastError();

  DWORD length = ::FormatMessage(
      FORMAT_MESSAGE_ALLOCATE_BUFFER |
          FORMAT_MESSAGE_FROM_SYSTEM |
          FORMAT_MESSAGE_IGNORE_INSERTS,
      NULL,
      dw,
      MAKELANGID(LANG_NEUTRAL, SUBLANG_DEFAULT),
      (LPTSTR)&lpMsgBuf,
      0, NULL);

  if (length != 0)
  {
    std::string msg((LPTSTR)lpMsgBuf);
    LocalFree(lpMsgBuf);
    pError->assign(msg);
  }
  else
  {
    pError->assign("Unknown error");
  }
#else
  const char *msg = ::dlerror();
  if (msg != NULL)
    pError->assign(msg);
  else
    pError->assign("Unknown error");
#endif
}

bool lanternLoadLibrary(const std::string &libPath, std::string *pError)
{
  pLibrary = NULL;

  char lastLibChar = libPath.at(libPath.size() - 1);
  std::string separator = (lastLibChar == '/' || lastLibChar == '\\') ? "" : pathSeparator();
  std::string libFile = libPath + separator + libraryName();

#ifdef _WIN32

  typedef DLL_DIRECTORY_COOKIE(WINAPI * PAddDllDirectory)(PCWSTR);
  HMODULE hKernel = ::GetModuleHandle("kernel32.dll");

  if (hKernel == NULL)
  {
    lanternLoadError(pError);
    *pError = "Get Kernel - " + *pError;
    return false;
  }

  PAddDllDirectory add_dll_directory = (PAddDllDirectory)::GetProcAddress(hKernel, "AddDllDirectory");

  if (add_dll_directory != NULL)
  {
    std::wstring libPathWStr = std::wstring(libPath.begin(), libPath.end());
    DLL_DIRECTORY_COOKIE cookie = add_dll_directory(libPathWStr.c_str());

    if (cookie == NULL)
    {
      lanternLoadError(pError);
      *pError = "Add Dll Directory - " + *pError;
      return false;
    }
  }

  pLibrary = (void *)::LoadLibraryEx(libFile.c_str(), NULL, LOAD_LIBRARY_SEARCH_DEFAULT_DIRS);
#else
  pLibrary = ::dlopen(libFile.c_str(), RTLD_NOW | RTLD_GLOBAL);
#endif
  if (pLibrary == NULL)
  {
    lanternLoadError(pError);
    *pError = libFile + " - " + *pError;
    return false;
  }
  else
  {
    return true;
  }
}

bool laternLoadSymbol(void *pLib, const std::string &name, void **ppSymbol, std::string *pError)
{
  *ppSymbol = NULL;
#ifdef _WIN32
  *ppSymbol = (void *)::GetProcAddress((HINSTANCE)pLib, name.c_str());
#else
  *ppSymbol = ::dlsym(pLib, name.c_str());
#endif
  if (*ppSymbol == NULL)
  {
    lanternLoadError(pError);
    *pError = name + " - " + *pError;
    return false;
  }
  else
  {
    return true;
  }
}

bool laternCloseLibrary(void *pLib, std::string *pError)
{
#ifdef _WIN32
  if (!::FreeLibrary((HMODULE)pLib))
#else
  if (::dlclose(pLib) != 0)
#endif
  {
    lanternLoadError(pError);
    return false;
  }
  else
  {
    return true;
  }
}

bool lanternInit(const std::string &libPath, std::string *pError)
{
  if (!lanternLoadLibrary(libPath, pError))
    return false;

  LOAD_SYMBOL(lanternConfigure);
  LOAD_SYMBOL(lanternVersion);
  LOAD_SYMBOL(lanternSetLastError);
  LOAD_SYMBOL(lanternLastErrorClear);
  LOAD_SYMBOL(lanternLastError);
  LOAD_SYMBOL(lanternTest);
  LOAD_SYMBOL(_lantern_Device);
  LOAD_SYMBOL(_lantern_Device_type);
  LOAD_SYMBOL(_lantern_Device_index);
  LOAD_SYMBOL(_lantern_from_blob);
  LOAD_SYMBOL(_lantern_Tensor_StreamInsertion);
  LOAD_SYMBOL(_lantern_TensorOptions);
  LOAD_SYMBOL(_lantern_TensorOptions_dtype);
  LOAD_SYMBOL(_lantern_TensorOptions_device);
  LOAD_SYMBOL(_lantern_TensorOptions_layout);
  LOAD_SYMBOL(_lantern_TensorOptions_requires_grad);
  LOAD_SYMBOL(_lantern_TensorOptions_pinned_memory);
  LOAD_SYMBOL(_lantern_Dtype_float32);
  LOAD_SYMBOL(_lantern_Dtype_float64);
  LOAD_SYMBOL(_lantern_Dtype_float16);
  LOAD_SYMBOL(_lantern_Dtype_uint8);
  LOAD_SYMBOL(_lantern_Dtype_int8);
  LOAD_SYMBOL(_lantern_Dtype_int16);
  LOAD_SYMBOL(_lantern_Dtype_int32);
  LOAD_SYMBOL(_lantern_Dtype_int64);
  LOAD_SYMBOL(_lantern_Dtype_bool);
  LOAD_SYMBOL(_lantern_Dtype_type);
  LOAD_SYMBOL(_lantern_vector_int64_t);
  LOAD_SYMBOL(_lantern_optional_vector_int64_t_delete);
  LOAD_SYMBOL(_lantern_vector_double);
  LOAD_SYMBOL(_lantern_IntArrayRef);
  LOAD_SYMBOL(_lantern_MemoryFormat_Contiguous);
  LOAD_SYMBOL(_lantern_MemoryFormat_Preserve);
  LOAD_SYMBOL(_lantern_MemoryFormat_ChannelsLast);
  LOAD_SYMBOL(_lantern_MemoryFormat_type);
  LOAD_SYMBOL(_lantern_Tensor_clone);
  LOAD_SYMBOL(_lantern_Tensor_permute);
  LOAD_SYMBOL(_lantern_Tensor_contiguous);
  LOAD_SYMBOL(_lantern_Tensor_to);
  LOAD_SYMBOL(_lantern_Tensor_set_requires_grad);
  LOAD_SYMBOL(_lantern_Tensor_data_ptr_double);
  LOAD_SYMBOL(_lantern_Tensor_data_ptr_uint8_t);
  LOAD_SYMBOL(_lantern_Tensor_data_ptr_int32_t);
  LOAD_SYMBOL(_lantern_Tensor_data_ptr_int16_t);
  LOAD_SYMBOL(_lantern_Tensor_data_ptr_bool);
  LOAD_SYMBOL(_lantern_Tensor_numel);
  LOAD_SYMBOL(_lantern_Tensor_element_size);
  LOAD_SYMBOL(_lantern_Tensor_ndimension);
  LOAD_SYMBOL(_lantern_Tensor_size);
  LOAD_SYMBOL(_lantern_Tensor_dtype);
  LOAD_SYMBOL(_lantern_Generator);
  LOAD_SYMBOL(_lantern_Generator_current_seed);
  LOAD_SYMBOL(_lantern_Generator_set_current_seed);
  LOAD_SYMBOL(_lantern_QScheme_per_channel_affine);
  LOAD_SYMBOL(_lantern_QScheme_per_tensor_affine);
  LOAD_SYMBOL(_lantern_QScheme_per_channel_symmetric);
  LOAD_SYMBOL(_lantern_QScheme_per_tensor_symmetric);
  LOAD_SYMBOL(_lantern_QScheme_type);
  LOAD_SYMBOL(_lantern_TensorList);
  LOAD_SYMBOL(_lantern_TensorList_push_back);
  LOAD_SYMBOL(_lantern_TensorList_at);
  LOAD_SYMBOL(_lantern_TensorList_size);
  LOAD_SYMBOL(_lantern_Scalar);
  LOAD_SYMBOL(_lantern_vector_get);
  LOAD_SYMBOL(_lantern_int);
  LOAD_SYMBOL(_lantern_int64_t);
  LOAD_SYMBOL(_lantern_bool);
  LOAD_SYMBOL(_lantern_Dimname);
  LOAD_SYMBOL(_lantern_DimnameList);
  LOAD_SYMBOL(_lantern_DimnameList_push_back);
  LOAD_SYMBOL(_lantern_Dimname_to_string);
  LOAD_SYMBOL(_lantern_DimnameList_size);
  LOAD_SYMBOL(_lantern_DimnameList_at);
  LOAD_SYMBOL(_lantern_Scalar_nullopt);
  LOAD_SYMBOL(_lantern_Tensor_delete);
  LOAD_SYMBOL(_lantern_bool_delete);
  LOAD_SYMBOL(_lantern_int64_t_delete);
  LOAD_SYMBOL(_lantern_TensorList_delete);
  LOAD_SYMBOL(_lantern_double_delete);
  LOAD_SYMBOL(_lantern_QScheme_delete);
  LOAD_SYMBOL(_lantern_Scalar_delete);
  LOAD_SYMBOL(_lantern_ScalarType_delete);
  LOAD_SYMBOL(_lantern_Dtype_delete);
  LOAD_SYMBOL(_lantern_TensorOptions_delete);
  LOAD_SYMBOL(_lantern_Device_delete);
  LOAD_SYMBOL(_lantern_Layout_delete);
  LOAD_SYMBOL(_lantern_TensorOptions_print);
  LOAD_SYMBOL(_lantern_TensorOptions_address);
  LOAD_SYMBOL(_lantern_Generator_delete);
  LOAD_SYMBOL(_lantern_Dimname_delete);
  LOAD_SYMBOL(_lantern_DimnameList_delete);
  LOAD_SYMBOL(_lantern_MemoryFormat_delete);
  LOAD_SYMBOL(_lantern_Reduction_Sum);
  LOAD_SYMBOL(_lantern_Reduction_None);
  LOAD_SYMBOL(_lantern_Reduction_Mean);
  LOAD_SYMBOL(_lantern_double);
  LOAD_SYMBOL(_lantern_Dtype_quint8);
  LOAD_SYMBOL(_lantern_Dtype_qint8);
  LOAD_SYMBOL(_lantern_Dtype_qint32);
  LOAD_SYMBOL(_lantern_Tensor_is_quantized);
  LOAD_SYMBOL(_lantern_autograd_set_grad_mode);
  LOAD_SYMBOL(_lantern_Tensor_undefined);
  LOAD_SYMBOL(_lantern_Tensor_grad);
  LOAD_SYMBOL(_lantern_Tensor_requires_grad);
  LOAD_SYMBOL(_lantern_Tensor_register_hook);
  LOAD_SYMBOL(_lantern_new_hook);
  LOAD_SYMBOL(_lantern_Tensor_remove_hook);
  LOAD_SYMBOL(_lantern_variable_list_new);
  LOAD_SYMBOL(_lantern_variable_list_push_back);
  LOAD_SYMBOL(_lantern_variable_list_get);
  LOAD_SYMBOL(_lantern_variable_list_delete);
  LOAD_SYMBOL(_lantern_variable_list_size);
  LOAD_SYMBOL(_lantern_Function_lambda);
  LOAD_SYMBOL(_lantern_Function_apply);
  LOAD_SYMBOL(_lantern_AutogradContext_save_for_backward);
  LOAD_SYMBOL(_lantern_AutogradContext_get_saved_variables);
  LOAD_SYMBOL(_lantern_vector_string_new);
  LOAD_SYMBOL(_lantern_vector_string_push_back);
  LOAD_SYMBOL(_lantern_vector_string_size);
  LOAD_SYMBOL(_lantern_vector_string_at);
  LOAD_SYMBOL(_lantern_vector_bool_new);
  LOAD_SYMBOL(_lantern_vector_bool_push_back);
  LOAD_SYMBOL(_lantern_vector_bool_size);
  LOAD_SYMBOL(_lantern_vector_bool_at);
  LOAD_SYMBOL(_lantern_AutogradContext_set_arguments);
  LOAD_SYMBOL(_lantern_AutogradContext_get_argument_names);
  LOAD_SYMBOL(_lantern_AutogradContext_get_argument_needs_grad);
  LOAD_SYMBOL(_lantern_AutogradContext_set_saved_variables_names);
  LOAD_SYMBOL(_lantern_AutogradContext_get_saved_variables_names);
  LOAD_SYMBOL(_lantern_AutogradContext_mark_dirty);
  LOAD_SYMBOL(_lantern_AutogradContext_mark_non_differentiable);
  LOAD_SYMBOL(_lantern_optional_double);
  LOAD_SYMBOL(_test_grad_fn);
  LOAD_SYMBOL(_lantern_Tensor_grad_fn);
  LOAD_SYMBOL(_lantern_Node_name);
  LOAD_SYMBOL(_lantern_Node_next_edges);
  LOAD_SYMBOL(_lantern_edge_list_size);
  LOAD_SYMBOL(_lantern_edge_list_at);
  LOAD_SYMBOL(_lantern_Edge_function);
  LOAD_SYMBOL(_lantern_vector_int64_t_delete);
  LOAD_SYMBOL(_lantern_autograd_backward);
  LOAD_SYMBOL(_lantern_autograd_grad);
  LOAD_SYMBOL(_lantern_Layout_strided);
  LOAD_SYMBOL(_lantern_Layout_sparse);
  LOAD_SYMBOL(_lantern_Layout_string);
  LOAD_SYMBOL(_lantern_TensorIndex_new);
  LOAD_SYMBOL(_lantern_TensorIndex_append_tensor);
  LOAD_SYMBOL(_lantern_TensorIndex_append_ellipsis);
  LOAD_SYMBOL(_lantern_TensorIndex_append_slice);
  LOAD_SYMBOL(_lantern_TensorIndex_append_none);
  LOAD_SYMBOL(_lantern_TensorIndex_append_bool);
  LOAD_SYMBOL(_lantern_TensorIndex_append_int64);
  LOAD_SYMBOL(_lantern_Tensor_index);
  LOAD_SYMBOL(_lantern_TensorIndex_delete);
  LOAD_SYMBOL(_lantern_Slice);
  LOAD_SYMBOL(_lantern_optional_int64_t);
  LOAD_SYMBOL(_lantern_Slice_delete);
  LOAD_SYMBOL(_lantern_optional_int64_t_delete);
  LOAD_SYMBOL(_lantern_Tensor_device);
  LOAD_SYMBOL(_lantern_cuda_is_available);
  LOAD_SYMBOL(_lantern_cuda_device_count);
  LOAD_SYMBOL(_lantern_cuda_current_device);
  LOAD_SYMBOL(_lantern_cuda_show_config);
  LOAD_SYMBOL(_lantern_nn_utils_rnn_pack_padded_sequence);
  LOAD_SYMBOL(_lantern_PackedSequence_delete);
  LOAD_SYMBOL(_lantern_nn_utils_PackedSequence_data);
  LOAD_SYMBOL(_lantern_nn_utils_PackedSequence_batch_sizes);
  LOAD_SYMBOL(_lantern_nn_utils_PackedSequence_sorted_indices);
  LOAD_SYMBOL(_lantern_nn_utils_PackedSequence_unsorted_indices);
  LOAD_SYMBOL(_lantern_nn_utils_rnn_pack_sequence);
  LOAD_SYMBOL(_lantern_nn_utils_rnn_pad_packed_sequence);
  LOAD_SYMBOL(_lantern_nn_utils_rnn_pad_sequence);
  LOAD_SYMBOL(_lantern_nn_utils_rnn_PackedSequence_new);
  LOAD_SYMBOL(_lantern_Scalar_dtype);
  LOAD_SYMBOL(_lantern_Scalar_to_float);
  LOAD_SYMBOL(_lantern_Scalar_to_int);
  LOAD_SYMBOL(_lantern_Scalar_to_double);
  LOAD_SYMBOL(_lantern_Scalar_to_bool);
  LOAD_SYMBOL(_lantern_Tensor_is_undefined);
  LOAD_SYMBOL(_lantern_set_default_dtype);
  LOAD_SYMBOL(_lantern_get_default_dtype);
  LOAD_SYMBOL(_lantern_Tensor_set_grad_);
  LOAD_SYMBOL(_lantern_Tensor_storage);
  LOAD_SYMBOL(_lantern_Tensor_has_storage);
  LOAD_SYMBOL(_lantern_Storage_data_ptr);
  LOAD_SYMBOL(_lantern_Storage_delete);
  LOAD_SYMBOL(_lantern_Tensor_is_contiguous);
  LOAD_SYMBOL(_lantern_tensor_save);
  LOAD_SYMBOL(_lantern_tensor_load);
  LOAD_SYMBOL(_lantern_test_tensor);
  LOAD_SYMBOL(_lantern_test_print);
  LOAD_SYMBOL(_lantern_tensor_serialized_size);
  LOAD_SYMBOL(_lantern_const_char_delete);
  LOAD_SYMBOL(_lantern_Tensor_index_put_tensor_);
  LOAD_SYMBOL(_lantern_Tensor_index_put_scalar_);
  LOAD_SYMBOL(_lantern_manual_seed);
  LOAD_SYMBOL(_lantern_load_state_dict);
  LOAD_SYMBOL(_lantern_get_state_dict_keys);
  LOAD_SYMBOL(_lantern_get_state_dict_values);
  LOAD_SYMBOL(_lantern_IValue_delete);
  LOAD_SYMBOL(_lantern_vector_string_delete);
  LOAD_SYMBOL(_lantern_Tensor_data_ptr_int64_t);
  LOAD_SYMBOL(_lantern_Tensor_has_names);
  LOAD_SYMBOL(_lantern_Tensor_names);
  LOAD_SYMBOL(_lantern_string_new);
  LOAD_SYMBOL(_lantern_string_delete);
  LOAD_SYMBOL(_lantern_contrib_torch_sparsemax);
  LOAD_SYMBOL(_lantern_set_num_threads);
  LOAD_SYMBOL(_lantern_set_num_interop_threads);
  LOAD_SYMBOL(_lantern_get_num_threads);
  LOAD_SYMBOL(_lantern_get_num_interop_threads);
  LOAD_SYMBOL(_lantern_optional_vector_int64_t);
  LOAD_SYMBOL(_lantern_optional_vector_double);
  LOAD_SYMBOL(_trace_r_nn_module);
  LOAD_SYMBOL(_lantern_Stack_delete);
  LOAD_SYMBOL(_lantern_Stack_new);
  LOAD_SYMBOL(_lantern_Stack_size);
  LOAD_SYMBOL(_lantern_create_traceable_fun);
  LOAD_SYMBOL(_lantern_trace_fn);
  LOAD_SYMBOL(_lantern_CompilationUnit_new);
  LOAD_SYMBOL(_lantern_CompilationUnit_delete);
  LOAD_SYMBOL(_lantern_call_traced_fn);
  LOAD_SYMBOL(_lantern_traced_fn_save);
  LOAD_SYMBOL(_lantern_traced_fn_graph_print);
  LOAD_SYMBOL(_lantern_Tensor_has_any_zeros);
  LOAD_SYMBOL(_lantern_jit_load);
  LOAD_SYMBOL(_lantern_call_jit_script);
  LOAD_SYMBOL(_lantern_JITModule_delete);
  LOAD_SYMBOL(_lantern_TraceableFunction_delete);
  LOAD_SYMBOL(_set_lantern_allocator);
  LOAD_SYMBOL(_lantern_vector_bool_delete);
  LOAD_SYMBOL(_lantern_normal_double_double_intarrayref_generator_tensoroptions);
  LOAD_SYMBOL(_lantern_normal_tensor_tensor_generator);
  LOAD_SYMBOL(_lantern_normal_double_tensor_generator);
  LOAD_SYMBOL(_lantern_normal_tensor_double_generator);
  LOAD_SYMBOL(_lantern_vector_void_delete);
  LOAD_SYMBOL(_lantern_autograd_is_enabled);
  LOAD_SYMBOL(_lantern_print_stuff);
  LOAD_SYMBOL(_lantern_nn_functional_pad_circular);
  LOAD_SYMBOL(_lantern_backend_has_lapack);
  LOAD_SYMBOL(_lantern_backend_has_mkl);
  LOAD_SYMBOL(_lantern_backend_has_mkldnn);
  LOAD_SYMBOL(_lantern_backend_has_openmp);
  LOAD_SYMBOL(_lantern_OptionalTensorList);
  LOAD_SYMBOL(_lantern_OptionalTensorList_push_back);
  LOAD_SYMBOL(_lantern_Stream);
  LOAD_SYMBOL(_lantern_optional_tensor_delete);
  LOAD_SYMBOL(_lantern_optional_tensor);
  LOAD_SYMBOL(_lantern_optional_tensor_has_value);
  LOAD_SYMBOL(_lantern_OptionalDevice_from_device);
  LOAD_SYMBOL(_lantern_optional_device_delete);
  LOAD_SYMBOL(_lantern_tensor_set_pyobj);
  LOAD_SYMBOL(_lantern_tensor_get_pyobj);
  LOAD_SYMBOL(_lantern_jit_named_parameter_list_size);
  LOAD_SYMBOL(_lantern_jit_named_parameter_list_tensors);
  LOAD_SYMBOL(_lantern_jit_named_parameter_list_names);
  LOAD_SYMBOL(_lantern_jit_named_parameter_list_delete);
  LOAD_SYMBOL(_lantern_ScriptModule_parameters);
  LOAD_SYMBOL(_lantern_ScriptModule_forward);
  LOAD_SYMBOL(_lantern_ScriptModule_train);
  LOAD_SYMBOL(_lantern_ScriptModule_to);
  LOAD_SYMBOL(_lantern_ScriptModule_set_optimized);
  LOAD_SYMBOL(_lantern_ScriptModule_is_training);
  LOAD_SYMBOL(_lantern_ScriptModule_is_optimized);
  LOAD_SYMBOL(_lantern_ScriptModule_modules);
  LOAD_SYMBOL(_lantern_jit_named_module_list_size);
  LOAD_SYMBOL(_lantern_jit_named_module_list_module_at);
  LOAD_SYMBOL(_lantern_jit_named_module_list_names);
  LOAD_SYMBOL(_lantern_jit_named_module_list_delete);
  LOAD_SYMBOL(_lantern_ScriptModule_register_parameter);
  LOAD_SYMBOL(_lantern_ScriptModule_register_buffer);
  LOAD_SYMBOL(_lantern_ScriptModule_register_module);
  LOAD_SYMBOL(_lantern_ScriptModule_register_attribute);
  LOAD_SYMBOL(_lantern_jit_named_buffer_list_names);
  LOAD_SYMBOL(_lantern_jit_named_buffer_list_tensors);
  LOAD_SYMBOL(_lantern_jit_named_buffer_list_size);
  LOAD_SYMBOL(_lantern_ScriptModule_buffers);
  LOAD_SYMBOL(_lantern_jit_named_buffer_list_delete);
  LOAD_SYMBOL(_lantern_ScriptModule_children);
  LOAD_SYMBOL(_lantern_jit_ScriptMethod_delete);
  LOAD_SYMBOL(_lantern_ScriptModule_find_method);
  LOAD_SYMBOL(_lantern_ScriptMethod_call);
  LOAD_SYMBOL(_lantern_IValue_type);
LOAD_SYMBOL(_lantern_IValue_Bool);
LOAD_SYMBOL(_lantern_IValue_BoolList);
LOAD_SYMBOL(_lantern_IValue_Device);
LOAD_SYMBOL(_lantern_IValue_Double);
LOAD_SYMBOL(_lantern_IValue_DoubleList);
LOAD_SYMBOL(_lantern_IValue_Generator);
LOAD_SYMBOL(_lantern_IValue_GenericDict);
LOAD_SYMBOL(_lantern_IValue_Int);
LOAD_SYMBOL(_lantern_IValue_IntList);
LOAD_SYMBOL(_lantern_IValue_List);
LOAD_SYMBOL(_lantern_IValue_Module);
LOAD_SYMBOL(_lantern_IValue_Scalar);
LOAD_SYMBOL(_lantern_IValue_String);
LOAD_SYMBOL(_lantern_IValue_Tensor);
LOAD_SYMBOL(_lantern_IValue_TensorList);
LOAD_SYMBOL(_lantern_IValue_Tuple);
LOAD_SYMBOL(_lantern_GenericDict_delete);
LOAD_SYMBOL(_lantern_GenericList_delete);
LOAD_SYMBOL(_lantern_Stack_at);
LOAD_SYMBOL(_lantern_IValue_from_Bool);
LOAD_SYMBOL(_lantern_IValue_from_BoolList);
LOAD_SYMBOL(_lantern_IValue_from_Device);
LOAD_SYMBOL(_lantern_IValue_from_Double);
LOAD_SYMBOL(_lantern_IValue_from_DoubleList);
LOAD_SYMBOL(_lantern_IValue_from_Generator);
LOAD_SYMBOL(_lantern_IValue_from_GenericDict);
LOAD_SYMBOL(_lantern_IValue_from_Int);
LOAD_SYMBOL(_lantern_IValue_from_IntList);
LOAD_SYMBOL(_lantern_IValue_from_List);
LOAD_SYMBOL(_lantern_IValue_from_Module);
LOAD_SYMBOL(_lantern_IValue_from_Scalar);
LOAD_SYMBOL(_lantern_IValue_from_String);
LOAD_SYMBOL(_lantern_IValue_from_Tensor);
LOAD_SYMBOL(_lantern_IValue_from_TensorList);
LOAD_SYMBOL(_lantern_vector_int64_t_size);
LOAD_SYMBOL(_lantern_vector_int64_t_at);
LOAD_SYMBOL(_lantern_vector_double_size);
LOAD_SYMBOL(_lantern_vector_double_at);
LOAD_SYMBOL(_lantern_vector_double_delete);
LOAD_SYMBOL(_lantern_vector_int64_t2_delete);
LOAD_SYMBOL(_lantern_vector_double_new);
LOAD_SYMBOL(_lantern_vector_int64_t_new);
LOAD_SYMBOL(_lantern_vector_double_push_back);
LOAD_SYMBOL(_lantern_vector_int64_t_push_back);
LOAD_SYMBOL(_lantern_string_get);
LOAD_SYMBOL(_lantern_jit_Tuple_delete);
LOAD_SYMBOL(_lantern_IValue_from_Tuple);
LOAD_SYMBOL(_lantern_jit_Tuple_new);
LOAD_SYMBOL(_lantern_jit_Tuple_push_back);
LOAD_SYMBOL(_lantern_jit_Tuple_size);
LOAD_SYMBOL(_lantern_jit_Tuple_at);
LOAD_SYMBOL(_lantern_jit_TensorDict_delete);
LOAD_SYMBOL(_lantern_jit_GenericDict_delete);
LOAD_SYMBOL(_lantern_jit_GenericList_delete);
LOAD_SYMBOL(_lantern_jit_TensorDict_new);
LOAD_SYMBOL(_lantern_jit_TensorDict_push_back);
LOAD_SYMBOL(_lantern_jit_GenericDict_keys);
LOAD_SYMBOL(_lantern_jit_GenericDict_at);
LOAD_SYMBOL(_lantern_jit_GenericList_size);
LOAD_SYMBOL(_lantern_jit_GenericList_at);
LOAD_SYMBOL(_lantern_IValue_from_TensorDict);
LOAD_SYMBOL(_lantern_jit_vector_IValue_delete);
LOAD_SYMBOL(_lantern_jit_vector_IValue_size);
LOAD_SYMBOL(_lantern_jit_vector_IValue_at);
LOAD_SYMBOL(_lantern_jit_NamedTuple_new);
LOAD_SYMBOL(_lantern_jit_NamedTuple_push_back);
LOAD_SYMBOL(_lantern_jit_NamedTupleHelper_keys);
LOAD_SYMBOL(_lantern_jit_NamedTupleHelper_elements);
LOAD_SYMBOL(_lantern_IValue_from_NamedTuple);
LOAD_SYMBOL(_lantern_NamedTupleHelper_delete);
LOAD_SYMBOL(_lantern_Stack_push_back_IValue);
LOAD_SYMBOL(_lantern_FunctionPtr_delete);
LOAD_SYMBOL(_lantern_IValue_from_None);
LOAD_SYMBOL(_lantern_jit_compile_get_method);
LOAD_SYMBOL(_lantern_jit_compile_list_methods);
LOAD_SYMBOL(_lantern_jit_compile);
LOAD_SYMBOL(_lantern_ScriptModule_new);
LOAD_SYMBOL(_lantern_ScriptModule_add_constant);
LOAD_SYMBOL(_lantern_ScriptModule_find_constant);
LOAD_SYMBOL(_lantern_ScriptModule_add_method);
LOAD_SYMBOL(_lantern_ScriptModule_save);
  /* Autogen Symbols -- Start */
  LOAD_SYMBOL(_lantern__cast_byte_attensor_bool)
  LOAD_SYMBOL(_lantern__cast_char_attensor_bool)
  LOAD_SYMBOL(_lantern__cast_double_attensor_bool)
  LOAD_SYMBOL(_lantern__cast_float_attensor_bool)
  LOAD_SYMBOL(_lantern__cast_int_attensor_bool)
  LOAD_SYMBOL(_lantern__cast_long_attensor_bool)
  LOAD_SYMBOL(_lantern__cast_short_attensor_bool)
  LOAD_SYMBOL(_lantern__cast_half_attensor_bool)
  LOAD_SYMBOL(_lantern_Tensor__backward_attensor_attensorlist_attensor_bool_bool)
  LOAD_SYMBOL(_lantern_Tensor_set_data_attensor_attensor)
  LOAD_SYMBOL(_lantern_Tensor_data_attensor)
  LOAD_SYMBOL(_lantern_Tensor_is_leaf_attensor)
  LOAD_SYMBOL(_lantern_Tensor_output_nr_attensor)
  LOAD_SYMBOL(_lantern_Tensor__version_attensor)
  LOAD_SYMBOL(_lantern_Tensor_requires_grad__attensor_bool)
  LOAD_SYMBOL(_lantern_Tensor_retain_grad_attensor)
  LOAD_SYMBOL(_lantern_Tensor__fw_primal_attensor_intt)
  LOAD_SYMBOL(_lantern__make_dual_attensor_attensor_intt)
  LOAD_SYMBOL(_lantern__unpack_dual_attensor_intt)
  LOAD_SYMBOL(_lantern_Tensor_rename__attensor_atdimnamelist)
  LOAD_SYMBOL(_lantern_Tensor_rename_attensor_atdimnamelist)
  LOAD_SYMBOL(_lantern_Tensor_align_to_attensor_atdimnamelist)
  LOAD_SYMBOL(_lantern_Tensor_align_to_attensor_atdimnamelist_intt)
  LOAD_SYMBOL(_lantern_Tensor_align_as_attensor_attensor)
  LOAD_SYMBOL(_lantern_align_tensors_attensorlist)
  LOAD_SYMBOL(_lantern__assert_async_attensor)
  LOAD_SYMBOL(_lantern_Tensor_refine_names_attensor_atdimnamelist)
  LOAD_SYMBOL(_lantern__use_cudnn_ctc_loss_attensor_attensor_atintarrayref_atintarrayref_intt)
  LOAD_SYMBOL(_lantern__cudnn_ctc_loss_attensor_attensor_atintarrayref_atintarrayref_intt_bool_bool)
  LOAD_SYMBOL(_lantern__use_cudnn_rnn_flatten_weight)
  LOAD_SYMBOL(_lantern__cudnn_rnn_flatten_weight_attensorlist_intt_intt_intt_intt_intt_intt_bool_bool)
  LOAD_SYMBOL(_lantern__cudnn_rnn_attensor_attensorlist_intt_attensor_attensor_attensor_intt_intt_intt_intt_bool_double_bool_bool_atintarrayref_attensor)
  LOAD_SYMBOL(_lantern__cudnn_rnn_backward_attensor_attensorlist_intt_attensor_attensor_attensor_attensor_attensor_attensor_attensor_intt_intt_intt_intt_bool_double_bool_bool_atintarrayref_attensor_attensor_stdarraybool)
  LOAD_SYMBOL(_lantern__cudnn_init_dropout_state_double_bool_intt_attensoroptions)
  LOAD_SYMBOL(_lantern__debug_has_internal_overlap_attensor)
  LOAD_SYMBOL(_lantern__fused_dropout_attensor_double_atgenerator)
  LOAD_SYMBOL(_lantern__masked_scale_attensor_attensor_double)
  LOAD_SYMBOL(_lantern__sobol_engine_draw_attensor_intt_attensor_intt_intt_atscalartype)
  LOAD_SYMBOL(_lantern__sobol_engine_ff__attensor_intt_attensor_intt_intt)
  LOAD_SYMBOL(_lantern__sobol_engine_scramble__attensor_attensor_intt)
  LOAD_SYMBOL(_lantern__sobol_engine_initialize_state__attensor_intt)
  LOAD_SYMBOL(_lantern__reshape_from_tensor_attensor_attensor)
  LOAD_SYMBOL(_lantern__shape_as_tensor_attensor)
  LOAD_SYMBOL(_lantern_dropout_attensor_double_bool)
  LOAD_SYMBOL(_lantern_dropout__attensor_double_bool)
  LOAD_SYMBOL(_lantern_feature_dropout_attensor_double_bool)
  LOAD_SYMBOL(_lantern_feature_dropout__attensor_double_bool)
  LOAD_SYMBOL(_lantern_alpha_dropout_attensor_double_bool)
  LOAD_SYMBOL(_lantern_alpha_dropout__attensor_double_bool)
  LOAD_SYMBOL(_lantern_feature_alpha_dropout_attensor_double_bool)
  LOAD_SYMBOL(_lantern_feature_alpha_dropout__attensor_double_bool)
  LOAD_SYMBOL(_lantern_abs_attensor)
  LOAD_SYMBOL(_lantern_Tensor_abs_attensor)
  LOAD_SYMBOL(_lantern_abs__attensor)
  LOAD_SYMBOL(_lantern_Tensor_abs__attensor)
  LOAD_SYMBOL(_lantern_abs_out_attensor_attensor)
  LOAD_SYMBOL(_lantern_absolute_attensor)
  LOAD_SYMBOL(_lantern_Tensor_absolute_attensor)
  LOAD_SYMBOL(_lantern_Tensor_absolute__attensor)
  LOAD_SYMBOL(_lantern_absolute_out_attensor_attensor)
  LOAD_SYMBOL(_lantern_angle_attensor)
  LOAD_SYMBOL(_lantern_Tensor_angle_attensor)
  LOAD_SYMBOL(_lantern_angle_out_attensor_attensor)
  LOAD_SYMBOL(_lantern_view_as_real_attensor)
  LOAD_SYMBOL(_lantern_view_as_complex_attensor)
  LOAD_SYMBOL(_lantern_sgn_attensor)
  LOAD_SYMBOL(_lantern_Tensor_sgn_attensor)
  LOAD_SYMBOL(_lantern_Tensor_sgn__attensor)
  LOAD_SYMBOL(_lantern_sgn_out_attensor_attensor)
  LOAD_SYMBOL(_lantern_real_attensor)
  LOAD_SYMBOL(_lantern_imag_attensor)
  LOAD_SYMBOL(_lantern_conj_attensor)
  LOAD_SYMBOL(_lantern_Tensor_conj_attensor)
  LOAD_SYMBOL(_lantern_conj_out_attensor_attensor)
  LOAD_SYMBOL(_lantern__conj_attensor)
  LOAD_SYMBOL(_lantern_acos_attensor)
  LOAD_SYMBOL(_lantern_Tensor_acos_attensor)
  LOAD_SYMBOL(_lantern_acos__attensor)
  LOAD_SYMBOL(_lantern_Tensor_acos__attensor)
  LOAD_SYMBOL(_lantern_acos_out_attensor_attensor)
  LOAD_SYMBOL(_lantern_arccos_attensor)
  LOAD_SYMBOL(_lantern_Tensor_arccos_attensor)
  LOAD_SYMBOL(_lantern_arccos__attensor)
  LOAD_SYMBOL(_lantern_Tensor_arccos__attensor)
  LOAD_SYMBOL(_lantern_arccos_out_attensor_attensor)
  LOAD_SYMBOL(_lantern_avg_pool1d_attensor_atintarrayref_atintarrayref_atintarrayref_bool_bool)
  LOAD_SYMBOL(_lantern_adaptive_avg_pool1d_attensor_atintarrayref)
  LOAD_SYMBOL(_lantern_adaptive_max_pool1d_attensor_atintarrayref)
  LOAD_SYMBOL(_lantern_add_attensor_attensor_constatscalar)
  LOAD_SYMBOL(_lantern_Tensor_add_attensor_attensor_constatscalar)
  LOAD_SYMBOL(_lantern_Tensor_add__attensor_attensor_constatscalar)
  LOAD_SYMBOL(_lantern_add_out_attensor_attensor_attensor_constatscalar)
  LOAD_SYMBOL(_lantern__add_relu_attensor_attensor_constatscalar)
  LOAD_SYMBOL(_lantern__add_relu__attensor_attensor_constatscalar)
  LOAD_SYMBOL(_lantern__add_relu_out_attensor_attensor_attensor_constatscalar)
  LOAD_SYMBOL(_lantern_add_attensor_constatscalar_constatscalar)
  LOAD_SYMBOL(_lantern_Tensor_add_attensor_constatscalar_constatscalar)
  LOAD_SYMBOL(_lantern_Tensor_add__attensor_constatscalar_constatscalar)
  LOAD_SYMBOL(_lantern_addmv_attensor_attensor_attensor_constatscalar_constatscalar)
  LOAD_SYMBOL(_lantern_Tensor_addmv_attensor_attensor_attensor_constatscalar_constatscalar)
  LOAD_SYMBOL(_lantern_addmv__attensor_attensor_attensor_constatscalar_constatscalar)
  LOAD_SYMBOL(_lantern_Tensor_addmv__attensor_attensor_attensor_constatscalar_constatscalar)
  LOAD_SYMBOL(_lantern_addmv_out_attensor_attensor_attensor_attensor_constatscalar_constatscalar)
  LOAD_SYMBOL(_lantern_addr_attensor_attensor_attensor_constatscalar_constatscalar)
  LOAD_SYMBOL(_lantern_Tensor_addr_attensor_attensor_attensor_constatscalar_constatscalar)
  LOAD_SYMBOL(_lantern_Tensor_addr__attensor_attensor_attensor_constatscalar_constatscalar)
  LOAD_SYMBOL(_lantern_addr_out_attensor_attensor_attensor_attensor_constatscalar_constatscalar)
  LOAD_SYMBOL(_lantern_affine_grid_generator_attensor_atintarrayref_bool)
  LOAD_SYMBOL(_lantern_affine_grid_generator_backward_attensor_atintarrayref_bool)
  LOAD_SYMBOL(_lantern_all_attensor_intt_bool)
  LOAD_SYMBOL(_lantern_Tensor_all_attensor_intt_bool)
  LOAD_SYMBOL(_lantern_all_out_attensor_attensor_intt_bool)
  LOAD_SYMBOL(_lantern_all_attensor_atdimname_bool)
  LOAD_SYMBOL(_lantern_Tensor_all_attensor_atdimname_bool)
  LOAD_SYMBOL(_lantern_all_out_attensor_attensor_atdimname_bool)
  LOAD_SYMBOL(_lantern_allclose_attensor_attensor_double_double_bool)
  LOAD_SYMBOL(_lantern_Tensor_allclose_attensor_attensor_double_double_bool)
  LOAD_SYMBOL(_lantern_any_attensor_intt_bool)
  LOAD_SYMBOL(_lantern_Tensor_any_attensor_intt_bool)
  LOAD_SYMBOL(_lantern_any_out_attensor_attensor_intt_bool)
  LOAD_SYMBOL(_lantern_any_attensor_atdimname_bool)
  LOAD_SYMBOL(_lantern_Tensor_any_attensor_atdimname_bool)
  LOAD_SYMBOL(_lantern_any_out_attensor_attensor_atdimname_bool)
  LOAD_SYMBOL(_lantern_arange_constatscalar_attensoroptions)
  LOAD_SYMBOL(_lantern_arange_constatscalar_constatscalar_attensoroptions)
  LOAD_SYMBOL(_lantern_arange_constatscalar_constatscalar_constatscalar_attensoroptions)
  LOAD_SYMBOL(_lantern_arange_out_attensor_constatscalar)
  LOAD_SYMBOL(_lantern_arange_out_attensor_constatscalar_constatscalar_constatscalar)
  LOAD_SYMBOL(_lantern__dim_arange_attensor_intt)
  LOAD_SYMBOL(_lantern_argmax_attensor_intt_bool)
  LOAD_SYMBOL(_lantern_Tensor_argmax_attensor_intt_bool)
  LOAD_SYMBOL(_lantern_argmax_out_attensor_attensor_intt_bool)
  LOAD_SYMBOL(_lantern_argmin_attensor_intt_bool)
  LOAD_SYMBOL(_lantern_Tensor_argmin_attensor_intt_bool)
  LOAD_SYMBOL(_lantern_argmin_out_attensor_attensor_intt_bool)
  LOAD_SYMBOL(_lantern_acosh_attensor)
  LOAD_SYMBOL(_lantern_Tensor_acosh_attensor)
  LOAD_SYMBOL(_lantern_acosh__attensor)
  LOAD_SYMBOL(_lantern_Tensor_acosh__attensor)
  LOAD_SYMBOL(_lantern_acosh_out_attensor_attensor)
  LOAD_SYMBOL(_lantern_arccosh_attensor)
  LOAD_SYMBOL(_lantern_Tensor_arccosh_attensor)
  LOAD_SYMBOL(_lantern_arccosh__attensor)
  LOAD_SYMBOL(_lantern_Tensor_arccosh__attensor)
  LOAD_SYMBOL(_lantern_arccosh_out_attensor_attensor)
  LOAD_SYMBOL(_lantern_asinh_attensor)
  LOAD_SYMBOL(_lantern_Tensor_asinh_attensor)
  LOAD_SYMBOL(_lantern_asinh__attensor)
  LOAD_SYMBOL(_lantern_Tensor_asinh__attensor)
  LOAD_SYMBOL(_lantern_asinh_out_attensor_attensor)
  LOAD_SYMBOL(_lantern_arcsinh_attensor)
  LOAD_SYMBOL(_lantern_Tensor_arcsinh_attensor)
  LOAD_SYMBOL(_lantern_arcsinh__attensor)
  LOAD_SYMBOL(_lantern_Tensor_arcsinh__attensor)
  LOAD_SYMBOL(_lantern_arcsinh_out_attensor_attensor)
  LOAD_SYMBOL(_lantern_atanh_attensor)
  LOAD_SYMBOL(_lantern_Tensor_atanh_attensor)
  LOAD_SYMBOL(_lantern_atanh__attensor)
  LOAD_SYMBOL(_lantern_Tensor_atanh__attensor)
  LOAD_SYMBOL(_lantern_atanh_out_attensor_attensor)
  LOAD_SYMBOL(_lantern_arctanh_attensor)
  LOAD_SYMBOL(_lantern_Tensor_arctanh_attensor)
  LOAD_SYMBOL(_lantern_arctanh__attensor)
  LOAD_SYMBOL(_lantern_Tensor_arctanh__attensor)
  LOAD_SYMBOL(_lantern_arctanh_out_attensor_attensor)
  LOAD_SYMBOL(_lantern_as_strided_attensor_atintarrayref_atintarrayref_intt)
  LOAD_SYMBOL(_lantern_Tensor_as_strided_attensor_atintarrayref_atintarrayref_intt)
  LOAD_SYMBOL(_lantern_as_strided__attensor_atintarrayref_atintarrayref_intt)
  LOAD_SYMBOL(_lantern_Tensor_as_strided__attensor_atintarrayref_atintarrayref_intt)
  LOAD_SYMBOL(_lantern_asin_attensor)
  LOAD_SYMBOL(_lantern_Tensor_asin_attensor)
  LOAD_SYMBOL(_lantern_asin__attensor)
  LOAD_SYMBOL(_lantern_Tensor_asin__attensor)
  LOAD_SYMBOL(_lantern_asin_out_attensor_attensor)
  LOAD_SYMBOL(_lantern_arcsin_attensor)
  LOAD_SYMBOL(_lantern_Tensor_arcsin_attensor)
  LOAD_SYMBOL(_lantern_arcsin__attensor)
  LOAD_SYMBOL(_lantern_Tensor_arcsin__attensor)
  LOAD_SYMBOL(_lantern_arcsin_out_attensor_attensor)
  LOAD_SYMBOL(_lantern_atan_attensor)
  LOAD_SYMBOL(_lantern_Tensor_atan_attensor)
  LOAD_SYMBOL(_lantern_atan__attensor)
  LOAD_SYMBOL(_lantern_Tensor_atan__attensor)
  LOAD_SYMBOL(_lantern_atan_out_attensor_attensor)
  LOAD_SYMBOL(_lantern_arctan_attensor)
  LOAD_SYMBOL(_lantern_Tensor_arctan_attensor)
  LOAD_SYMBOL(_lantern_arctan__attensor)
  LOAD_SYMBOL(_lantern_Tensor_arctan__attensor)
  LOAD_SYMBOL(_lantern_arctan_out_attensor_attensor)
  LOAD_SYMBOL(_lantern_atleast_1d_attensor)
  LOAD_SYMBOL(_lantern_atleast_1d_attensorlist)
  LOAD_SYMBOL(_lantern_atleast_2d_attensor)
  LOAD_SYMBOL(_lantern_atleast_2d_attensorlist)
  LOAD_SYMBOL(_lantern_atleast_3d_attensor)
  LOAD_SYMBOL(_lantern_atleast_3d_attensorlist)
  LOAD_SYMBOL(_lantern_baddbmm_attensor_attensor_attensor_constatscalar_constatscalar)
  LOAD_SYMBOL(_lantern_Tensor_baddbmm_attensor_attensor_attensor_constatscalar_constatscalar)
  LOAD_SYMBOL(_lantern_Tensor_baddbmm__attensor_attensor_attensor_constatscalar_constatscalar)
  LOAD_SYMBOL(_lantern__baddbmm_mkl__attensor_attensor_attensor_constatscalar_constatscalar)
  LOAD_SYMBOL(_lantern_baddbmm_out_attensor_attensor_attensor_attensor_constatscalar_constatscalar)
  LOAD_SYMBOL(_lantern_bartlett_window_intt_attensoroptions)
  LOAD_SYMBOL(_lantern_bartlett_window_intt_bool_attensoroptions)
  LOAD_SYMBOL(_lantern_batch_norm_attensor_attensor_attensor_attensor_attensor_bool_double_double_bool)
  LOAD_SYMBOL(_lantern_quantized_batch_norm_attensor_attensor_attensor_attensor_attensor_double_double_intt)
  LOAD_SYMBOL(_lantern__batch_norm_impl_index_attensor_attensor_attensor_attensor_attensor_bool_double_double_bool)
  LOAD_SYMBOL(_lantern__batch_norm_impl_index_backward_intt_attensor_attensor_attensor_attensor_attensor_attensor_attensor_bool_double_stdarraybool_attensor)
  LOAD_SYMBOL(_lantern_bernoulli_attensor_atgenerator)
  LOAD_SYMBOL(_lantern_Tensor_bernoulli_attensor_atgenerator)
  LOAD_SYMBOL(_lantern_bernoulli_out_attensor_attensor_atgenerator)
  LOAD_SYMBOL(_lantern_Tensor_bernoulli__attensor_attensor_atgenerator)
  LOAD_SYMBOL(_lantern_Tensor_bernoulli__attensor_double_atgenerator)
  LOAD_SYMBOL(_lantern_bernoulli_attensor_double_atgenerator)
  LOAD_SYMBOL(_lantern_Tensor_bernoulli_attensor_double_atgenerator)
  LOAD_SYMBOL(_lantern_bilinear_attensor_attensor_attensor_attensor)
  LOAD_SYMBOL(_lantern_binary_cross_entropy_attensor_attensor_attensor_intt)
  LOAD_SYMBOL(_lantern_binary_cross_entropy_out_attensor_attensor_attensor_attensor_intt)
  LOAD_SYMBOL(_lantern_binary_cross_entropy_backward_attensor_attensor_attensor_attensor_intt)
  LOAD_SYMBOL(_lantern_binary_cross_entropy_backward_out_attensor_attensor_attensor_attensor_attensor_intt)
  LOAD_SYMBOL(_lantern_binary_cross_entropy_with_logits_attensor_attensor_attensor_attensor_intt)
  LOAD_SYMBOL(_lantern_binary_cross_entropy_with_logits_backward_attensor_attensor_attensor_attensor_attensor_intt)
  LOAD_SYMBOL(_lantern_bincount_attensor_attensor_intt)
  LOAD_SYMBOL(_lantern_Tensor_bincount_attensor_attensor_intt)
  LOAD_SYMBOL(_lantern_bitwise_not_attensor)
  LOAD_SYMBOL(_lantern_Tensor_bitwise_not_attensor)
  LOAD_SYMBOL(_lantern_Tensor_bitwise_not__attensor)
  LOAD_SYMBOL(_lantern_bitwise_not_out_attensor_attensor)
  LOAD_SYMBOL(_lantern_copysign_out_attensor_attensor_attensor)
  LOAD_SYMBOL(_lantern_copysign_attensor_attensor)
  LOAD_SYMBOL(_lantern_Tensor_copysign_attensor_attensor)
  LOAD_SYMBOL(_lantern_Tensor_copysign__attensor_attensor)
  LOAD_SYMBOL(_lantern_copysign_attensor_constatscalar)
  LOAD_SYMBOL(_lantern_Tensor_copysign_attensor_constatscalar)
  LOAD_SYMBOL(_lantern_Tensor_copysign__attensor_constatscalar)
  LOAD_SYMBOL(_lantern_copysign_out_attensor_attensor_constatscalar)
  LOAD_SYMBOL(_lantern_logical_not_attensor)
  LOAD_SYMBOL(_lantern_Tensor_logical_not_attensor)
  LOAD_SYMBOL(_lantern_Tensor_logical_not__attensor)
  LOAD_SYMBOL(_lantern_logical_not_out_attensor_attensor)
  LOAD_SYMBOL(_lantern_logical_xor_attensor_attensor)
  LOAD_SYMBOL(_lantern_Tensor_logical_xor_attensor_attensor)
  LOAD_SYMBOL(_lantern_Tensor_logical_xor__attensor_attensor)
  LOAD_SYMBOL(_lantern_logical_xor_out_attensor_attensor_attensor)
  LOAD_SYMBOL(_lantern_logical_and_attensor_attensor)
  LOAD_SYMBOL(_lantern_Tensor_logical_and_attensor_attensor)
  LOAD_SYMBOL(_lantern_Tensor_logical_and__attensor_attensor)
  LOAD_SYMBOL(_lantern_logical_and_out_attensor_attensor_attensor)
  LOAD_SYMBOL(_lantern_logical_or_attensor_attensor)
  LOAD_SYMBOL(_lantern_Tensor_logical_or_attensor_attensor)
  LOAD_SYMBOL(_lantern_Tensor_logical_or__attensor_attensor)
  LOAD_SYMBOL(_lantern_logical_or_out_attensor_attensor_attensor)
  LOAD_SYMBOL(_lantern_blackman_window_intt_attensoroptions)
  LOAD_SYMBOL(_lantern_blackman_window_intt_bool_attensoroptions)
  LOAD_SYMBOL(_lantern_bmm_attensor_attensor)
  LOAD_SYMBOL(_lantern_Tensor_bmm_attensor_attensor)
  LOAD_SYMBOL(_lantern__bmm_attensor_attensor_bool)
  LOAD_SYMBOL(_lantern_bmm_out_attensor_attensor_attensor)
  LOAD_SYMBOL(_lantern__bmm_out_attensor_attensor_attensor_bool)
  LOAD_SYMBOL(_lantern_broadcast_tensors_attensorlist)
  LOAD_SYMBOL(_lantern_broadcast_to_attensor_atintarrayref)
  LOAD_SYMBOL(_lantern_Tensor_broadcast_to_attensor_atintarrayref)
  LOAD_SYMBOL(_lantern_cat_attensorlist_intt)
  LOAD_SYMBOL(_lantern_cat_out_attensor_attensorlist_intt)
  LOAD_SYMBOL(_lantern_cat_attensorlist_atdimname)
  LOAD_SYMBOL(_lantern_cat_out_attensor_attensorlist_atdimname)
  LOAD_SYMBOL(_lantern_block_diag_attensorlist)
  LOAD_SYMBOL(_lantern_ceil_attensor)
  LOAD_SYMBOL(_lantern_Tensor_ceil_attensor)
  LOAD_SYMBOL(_lantern_ceil__attensor)
  LOAD_SYMBOL(_lantern_Tensor_ceil__attensor)
  LOAD_SYMBOL(_lantern_ceil_out_attensor_attensor)
  LOAD_SYMBOL(_lantern_chain_matmul_attensorlist)
  LOAD_SYMBOL(_lantern_chain_matmul_out_attensor_attensorlist)
  LOAD_SYMBOL(_lantern_unsafe_chunk_attensor_intt_intt)
  LOAD_SYMBOL(_lantern_Tensor_unsafe_chunk_attensor_intt_intt)
  LOAD_SYMBOL(_lantern_chunk_attensor_intt_intt)
  LOAD_SYMBOL(_lantern_Tensor_chunk_attensor_intt_intt)
  LOAD_SYMBOL(_lantern_tensor_split_attensor_intt_intt)
  LOAD_SYMBOL(_lantern_Tensor_tensor_split_attensor_intt_intt)
  LOAD_SYMBOL(_lantern_tensor_split_attensor_atintarrayref_intt)
  LOAD_SYMBOL(_lantern_Tensor_tensor_split_attensor_atintarrayref_intt)
  LOAD_SYMBOL(_lantern_tensor_split_attensor_attensor_intt)
  LOAD_SYMBOL(_lantern_Tensor_tensor_split_attensor_attensor_intt)
  LOAD_SYMBOL(_lantern_clamp_attensor_constatscalar_constatscalar)
  LOAD_SYMBOL(_lantern_Tensor_clamp_attensor_constatscalar_constatscalar)
  LOAD_SYMBOL(_lantern_clamp_attensor_attensor_attensor)
  LOAD_SYMBOL(_lantern_Tensor_clamp_attensor_attensor_attensor)
  LOAD_SYMBOL(_lantern_clamp__attensor_constatscalar_constatscalar)
  LOAD_SYMBOL(_lantern_Tensor_clamp__attensor_constatscalar_constatscalar)
  LOAD_SYMBOL(_lantern_clamp__attensor_attensor_attensor)
  LOAD_SYMBOL(_lantern_Tensor_clamp__attensor_attensor_attensor)
  LOAD_SYMBOL(_lantern_clamp_out_attensor_attensor_constatscalar_constatscalar)
  LOAD_SYMBOL(_lantern_clamp_out_attensor_attensor_attensor_attensor)
  LOAD_SYMBOL(_lantern_clamp_max_attensor_constatscalar)
  LOAD_SYMBOL(_lantern_Tensor_clamp_max_attensor_constatscalar)
  LOAD_SYMBOL(_lantern_clamp_max_attensor_attensor)
  LOAD_SYMBOL(_lantern_Tensor_clamp_max_attensor_attensor)
  LOAD_SYMBOL(_lantern_clamp_max__attensor_constatscalar)
  LOAD_SYMBOL(_lantern_Tensor_clamp_max__attensor_constatscalar)
  LOAD_SYMBOL(_lantern_clamp_max__attensor_attensor)
  LOAD_SYMBOL(_lantern_Tensor_clamp_max__attensor_attensor)
  LOAD_SYMBOL(_lantern_clamp_max_out_attensor_attensor_constatscalar)
  LOAD_SYMBOL(_lantern_clamp_max_out_attensor_attensor_attensor)
  LOAD_SYMBOL(_lantern_clamp_min_attensor_constatscalar)
  LOAD_SYMBOL(_lantern_Tensor_clamp_min_attensor_constatscalar)
  LOAD_SYMBOL(_lantern_clamp_min_attensor_attensor)
  LOAD_SYMBOL(_lantern_Tensor_clamp_min_attensor_attensor)
  LOAD_SYMBOL(_lantern_clamp_min__attensor_constatscalar)
  LOAD_SYMBOL(_lantern_Tensor_clamp_min__attensor_constatscalar)
  LOAD_SYMBOL(_lantern_clamp_min__attensor_attensor)
  LOAD_SYMBOL(_lantern_Tensor_clamp_min__attensor_attensor)
  LOAD_SYMBOL(_lantern_clamp_min_out_attensor_attensor_constatscalar)
  LOAD_SYMBOL(_lantern_clamp_min_out_attensor_attensor_attensor)
  LOAD_SYMBOL(_lantern_clip_attensor_constatscalar_constatscalar)
  LOAD_SYMBOL(_lantern_Tensor_clip_attensor_constatscalar_constatscalar)
  LOAD_SYMBOL(_lantern_clip_attensor_attensor_attensor)
  LOAD_SYMBOL(_lantern_Tensor_clip_attensor_attensor_attensor)
  LOAD_SYMBOL(_lantern_clip__attensor_constatscalar_constatscalar)
  LOAD_SYMBOL(_lantern_Tensor_clip__attensor_constatscalar_constatscalar)
  LOAD_SYMBOL(_lantern_clip__attensor_attensor_attensor)
  LOAD_SYMBOL(_lantern_Tensor_clip__attensor_attensor_attensor)
  LOAD_SYMBOL(_lantern_clip_out_attensor_attensor_constatscalar_constatscalar)
  LOAD_SYMBOL(_lantern_clip_out_attensor_attensor_attensor_attensor)
  LOAD_SYMBOL(_lantern_cudnn_is_acceptable_attensor)
  LOAD_SYMBOL(_lantern_complex_attensor_attensor)
  LOAD_SYMBOL(_lantern_complex_out_attensor_attensor_attensor)
  LOAD_SYMBOL(_lantern_polar_attensor_attensor)
  LOAD_SYMBOL(_lantern_polar_out_attensor_attensor_attensor)
  LOAD_SYMBOL(_lantern_constant_pad_nd_attensor_atintarrayref_constatscalar)
  LOAD_SYMBOL(_lantern_Tensor_contiguous_attensor_atmemoryformat)
  LOAD_SYMBOL(_lantern_convolution_attensor_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_bool_atintarrayref_intt)
  LOAD_SYMBOL(_lantern_convolution_overrideable_attensor_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_bool_atintarrayref_intt)
  LOAD_SYMBOL(_lantern_convolution_backward_overrideable_attensor_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_bool_atintarrayref_intt_stdarraybool)
  LOAD_SYMBOL(_lantern__convolution_attensor_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_bool_atintarrayref_intt_bool_bool_bool_bool)
  LOAD_SYMBOL(_lantern__convolution_attensor_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_bool_atintarrayref_intt_bool_bool_bool)
  LOAD_SYMBOL(_lantern__convolution_mode_attensor_attensor_attensor_atintarrayref_stdstring_atintarrayref_intt)
  LOAD_SYMBOL(_lantern__convolution_nogroup_attensor_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_bool_atintarrayref)
  LOAD_SYMBOL(_lantern__convolution_double_backward_attensor_attensor_attensor_attensor_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_bool_atintarrayref_intt_bool_bool_bool_bool_stdarraybool)
  LOAD_SYMBOL(_lantern_conv1d_attensor_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_intt)
  LOAD_SYMBOL(_lantern_conv2d_attensor_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_intt)
  LOAD_SYMBOL(_lantern_conv3d_attensor_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_intt)
  LOAD_SYMBOL(_lantern_conv1d_attensor_attensor_attensor_atintarrayref_stdstring_atintarrayref_intt)
  LOAD_SYMBOL(_lantern_conv2d_attensor_attensor_attensor_atintarrayref_stdstring_atintarrayref_intt)
  LOAD_SYMBOL(_lantern_conv3d_attensor_attensor_attensor_atintarrayref_stdstring_atintarrayref_intt)
  LOAD_SYMBOL(_lantern_conv_tbc_attensor_attensor_attensor_intt)
  LOAD_SYMBOL(_lantern_conv_tbc_backward_attensor_attensor_attensor_attensor_intt)
  LOAD_SYMBOL(_lantern_conv_transpose1d_attensor_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_intt_atintarrayref)
  LOAD_SYMBOL(_lantern_conv_transpose2d_attensor_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_intt_atintarrayref)
  LOAD_SYMBOL(_lantern_conv_transpose3d_attensor_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_intt_atintarrayref)
  LOAD_SYMBOL(_lantern_Tensor_copy__attensor_attensor_bool)
  LOAD_SYMBOL(_lantern__copy_from_attensor_attensor_bool)
  LOAD_SYMBOL(_lantern_cos_attensor)
  LOAD_SYMBOL(_lantern_Tensor_cos_attensor)
  LOAD_SYMBOL(_lantern_cos__attensor)
  LOAD_SYMBOL(_lantern_Tensor_cos__attensor)
  LOAD_SYMBOL(_lantern_cos_out_attensor_attensor)
  LOAD_SYMBOL(_lantern_cosh_attensor)
  LOAD_SYMBOL(_lantern_Tensor_cosh_attensor)
  LOAD_SYMBOL(_lantern_cosh__attensor)
  LOAD_SYMBOL(_lantern_Tensor_cosh__attensor)
  LOAD_SYMBOL(_lantern_cosh_out_attensor_attensor)
  LOAD_SYMBOL(_lantern_cosine_embedding_loss_attensor_attensor_attensor_double_intt)
  LOAD_SYMBOL(_lantern_count_nonzero_attensor_atintarrayref)
  LOAD_SYMBOL(_lantern_Tensor_count_nonzero_attensor_atintarrayref)
  LOAD_SYMBOL(_lantern_count_nonzero_attensor_intt)
  LOAD_SYMBOL(_lantern_Tensor_count_nonzero_attensor_intt)
  LOAD_SYMBOL(_lantern_cudnn_affine_grid_generator_attensor_intt_intt_intt_intt)
  LOAD_SYMBOL(_lantern_cudnn_affine_grid_generator_backward_attensor_intt_intt_intt_intt)
  LOAD_SYMBOL(_lantern_cudnn_batch_norm_attensor_attensor_attensor_attensor_attensor_bool_double_double)
  LOAD_SYMBOL(_lantern_cudnn_batch_norm_backward_attensor_attensor_attensor_attensor_attensor_attensor_attensor_double_attensor)
  LOAD_SYMBOL(_lantern_cudnn_convolution_attensor_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_intt_bool_bool)
  LOAD_SYMBOL(_lantern_cudnn_convolution_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_intt_bool_bool)
  LOAD_SYMBOL(_lantern_cudnn_convolution_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_intt_bool_bool_bool)
  LOAD_SYMBOL(_lantern_cudnn_convolution_backward_input_atintarrayref_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_intt_bool_bool_bool)
  LOAD_SYMBOL(_lantern_cudnn_convolution_backward_attensor_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_intt_bool_bool_bool_stdarraybool)
  LOAD_SYMBOL(_lantern_cudnn_convolution_backward_weight_atintarrayref_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_intt_bool_bool_bool)
  LOAD_SYMBOL(_lantern_cudnn_convolution_transpose_attensor_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_atintarrayref_intt_bool_bool)
  LOAD_SYMBOL(_lantern_cudnn_convolution_transpose_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_atintarrayref_intt_bool_bool)
  LOAD_SYMBOL(_lantern_cudnn_convolution_transpose_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_atintarrayref_intt_bool_bool_bool)
  LOAD_SYMBOL(_lantern_cudnn_convolution_transpose_backward_attensor_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_atintarrayref_intt_bool_bool_bool_stdarraybool)
  LOAD_SYMBOL(_lantern_cudnn_convolution_transpose_backward_input_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_intt_bool_bool_bool)
  LOAD_SYMBOL(_lantern_cudnn_convolution_transpose_backward_weight_atintarrayref_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_intt_bool_bool_bool)
  LOAD_SYMBOL(_lantern_cudnn_convolution_relu_attensor_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_intt)
  LOAD_SYMBOL(_lantern_cudnn_convolution_add_relu_attensor_attensor_attensor_constatscalar_attensor_atintarrayref_atintarrayref_atintarrayref_intt)
  LOAD_SYMBOL(_lantern_cudnn_grid_sampler_attensor_attensor)
  LOAD_SYMBOL(_lantern_cudnn_grid_sampler_backward_attensor_attensor_attensor)
  LOAD_SYMBOL(_lantern_cummax_attensor_intt)
  LOAD_SYMBOL(_lantern_Tensor_cummax_attensor_intt)
  LOAD_SYMBOL(_lantern_cummax_out_attensor_attensor_attensor_intt)
  LOAD_SYMBOL(_lantern_cummax_attensor_atdimname)
  LOAD_SYMBOL(_lantern_Tensor_cummax_attensor_atdimname)
  LOAD_SYMBOL(_lantern_cummax_out_attensor_attensor_attensor_atdimname)
  LOAD_SYMBOL(_lantern__cummax_helper_attensor_attensor_attensor_intt)
  LOAD_SYMBOL(_lantern_cummin_attensor_intt)
  LOAD_SYMBOL(_lantern_Tensor_cummin_attensor_intt)
  LOAD_SYMBOL(_lantern_cummin_out_attensor_attensor_attensor_intt)
  LOAD_SYMBOL(_lantern_cummin_attensor_atdimname)
  LOAD_SYMBOL(_lantern_Tensor_cummin_attensor_atdimname)
  LOAD_SYMBOL(_lantern_cummin_out_attensor_attensor_attensor_atdimname)
  LOAD_SYMBOL(_lantern__cummin_helper_attensor_attensor_attensor_intt)
  LOAD_SYMBOL(_lantern_cummaxmin_backward_attensor_attensor_attensor_intt)
  LOAD_SYMBOL(_lantern_cumprod_attensor_intt_atscalartype)
  LOAD_SYMBOL(_lantern_Tensor_cumprod_attensor_intt_atscalartype)
  LOAD_SYMBOL(_lantern_Tensor_cumprod__attensor_intt_atscalartype)
  LOAD_SYMBOL(_lantern_cumprod_out_attensor_attensor_intt_atscalartype)
  LOAD_SYMBOL(_lantern_cumprod_attensor_atdimname_atscalartype)
  LOAD_SYMBOL(_lantern_Tensor_cumprod_attensor_atdimname_atscalartype)
  LOAD_SYMBOL(_lantern_Tensor_cumprod__attensor_atdimname_atscalartype)
  LOAD_SYMBOL(_lantern_cumprod_out_attensor_attensor_atdimname_atscalartype)
  LOAD_SYMBOL(_lantern_cumprod_backward_attensor_attensor_intt_attensor)
  LOAD_SYMBOL(_lantern_cumsum_attensor_intt_atscalartype)
  LOAD_SYMBOL(_lantern_Tensor_cumsum_attensor_intt_atscalartype)
  LOAD_SYMBOL(_lantern_Tensor_cumsum__attensor_intt_atscalartype)
  LOAD_SYMBOL(_lantern_cumsum_out_attensor_attensor_intt_atscalartype)
  LOAD_SYMBOL(_lantern_cumsum_attensor_atdimname_atscalartype)
  LOAD_SYMBOL(_lantern_Tensor_cumsum_attensor_atdimname_atscalartype)
  LOAD_SYMBOL(_lantern_Tensor_cumsum__attensor_atdimname_atscalartype)
  LOAD_SYMBOL(_lantern_cumsum_out_attensor_attensor_atdimname_atscalartype)
  LOAD_SYMBOL(_lantern_ctc_loss_attensor_attensor_atintarrayref_atintarrayref_intt_intt_bool)
  LOAD_SYMBOL(_lantern_ctc_loss_attensor_attensor_attensor_attensor_intt_intt_bool)
  LOAD_SYMBOL(_lantern__ctc_loss_attensor_attensor_atintarrayref_atintarrayref_intt_bool)
  LOAD_SYMBOL(_lantern__ctc_loss_backward_attensor_attensor_attensor_atintarrayref_atintarrayref_attensor_attensor_intt_bool)
  LOAD_SYMBOL(_lantern_diag_embed_attensor_intt_intt_intt)
  LOAD_SYMBOL(_lantern_Tensor_diag_embed_attensor_intt_intt_intt)
  LOAD_SYMBOL(_lantern_diagflat_attensor_intt)
  LOAD_SYMBOL(_lantern_Tensor_diagflat_attensor_intt)
  LOAD_SYMBOL(_lantern_diagonal_attensor_intt_intt_intt)
  LOAD_SYMBOL(_lantern_Tensor_diagonal_attensor_intt_intt_intt)
  LOAD_SYMBOL(_lantern_diagonal_attensor_atdimname_atdimname_atdimname_intt)
  LOAD_SYMBOL(_lantern_Tensor_diagonal_attensor_atdimname_atdimname_atdimname_intt)
  LOAD_SYMBOL(_lantern_diagonal_backward_attensor_atintarrayref_intt_intt_intt)
  LOAD_SYMBOL(_lantern_Tensor_fill_diagonal__attensor_constatscalar_bool)
  LOAD_SYMBOL(_lantern_diff_attensor_intt_intt_attensor_attensor)
  LOAD_SYMBOL(_lantern_Tensor_diff_attensor_intt_intt_attensor_attensor)
  LOAD_SYMBOL(_lantern_diff_out_attensor_attensor_intt_intt_attensor_attensor)
  LOAD_SYMBOL(_lantern_gradient_attensor_constatscalar_intt_intt)
  LOAD_SYMBOL(_lantern_gradient_attensor_constatscalar_atintarrayref_intt)
  LOAD_SYMBOL(_lantern_gradient_attensor_atintarrayref_intt)
  LOAD_SYMBOL(_lantern_gradient_attensor_atarrayrefatscalar_intt_intt)
  LOAD_SYMBOL(_lantern_gradient_attensor_atarrayrefatscalar_atintarrayref_intt)
  LOAD_SYMBOL(_lantern_gradient_attensor_attensorlist_intt_intt)
  LOAD_SYMBOL(_lantern_gradient_attensor_attensorlist_atintarrayref_intt)
  LOAD_SYMBOL(_lantern_div_attensor_attensor)
  LOAD_SYMBOL(_lantern_Tensor_div_attensor_attensor)
  LOAD_SYMBOL(_lantern_Tensor_div__attensor_attensor)
  LOAD_SYMBOL(_lantern_div_out_attensor_attensor_attensor)
  LOAD_SYMBOL(_lantern_div_attensor_attensor_stdstring)
  LOAD_SYMBOL(_lantern_Tensor_div_attensor_attensor_stdstring)
  LOAD_SYMBOL(_lantern_Tensor_div__attensor_attensor_stdstring)
  LOAD_SYMBOL(_lantern_div_out_attensor_attensor_attensor_stdstring)
  LOAD_SYMBOL(_lantern_div_attensor_constatscalar)
  LOAD_SYMBOL(_lantern_Tensor_div_attensor_constatscalar)
  LOAD_SYMBOL(_lantern_Tensor_div__attensor_constatscalar)
  LOAD_SYMBOL(_lantern_div_attensor_constatscalar_stdstring)
  LOAD_SYMBOL(_lantern_Tensor_div_attensor_constatscalar_stdstring)
  LOAD_SYMBOL(_lantern_Tensor_div__attensor_constatscalar_stdstring)
  LOAD_SYMBOL(_lantern_divide_attensor_attensor)
  LOAD_SYMBOL(_lantern_Tensor_divide_attensor_attensor)
  LOAD_SYMBOL(_lantern_Tensor_divide__attensor_attensor)
  LOAD_SYMBOL(_lantern_divide_out_attensor_attensor_attensor)
  LOAD_SYMBOL(_lantern_divide_attensor_constatscalar)
  LOAD_SYMBOL(_lantern_Tensor_divide_attensor_constatscalar)
  LOAD_SYMBOL(_lantern_Tensor_divide__attensor_constatscalar)
  LOAD_SYMBOL(_lantern_divide_attensor_attensor_stdstring)
  LOAD_SYMBOL(_lantern_Tensor_divide_attensor_attensor_stdstring)
  LOAD_SYMBOL(_lantern_Tensor_divide__attensor_attensor_stdstring)
  LOAD_SYMBOL(_lantern_divide_out_attensor_attensor_attensor_stdstring)
  LOAD_SYMBOL(_lantern_divide_attensor_constatscalar_stdstring)
  LOAD_SYMBOL(_lantern_Tensor_divide_attensor_constatscalar_stdstring)
  LOAD_SYMBOL(_lantern_Tensor_divide__attensor_constatscalar_stdstring)
  LOAD_SYMBOL(_lantern_true_divide_attensor_attensor)
  LOAD_SYMBOL(_lantern_Tensor_true_divide_attensor_attensor)
  LOAD_SYMBOL(_lantern_Tensor_true_divide__attensor_attensor)
  LOAD_SYMBOL(_lantern_true_divide_out_attensor_attensor_attensor)
  LOAD_SYMBOL(_lantern_true_divide_attensor_constatscalar)
  LOAD_SYMBOL(_lantern_Tensor_true_divide_attensor_constatscalar)
  LOAD_SYMBOL(_lantern_Tensor_true_divide__attensor_constatscalar)
  LOAD_SYMBOL(_lantern_dot_attensor_attensor)
  LOAD_SYMBOL(_lantern_Tensor_dot_attensor_attensor)
  LOAD_SYMBOL(_lantern_dot_out_attensor_attensor_attensor)
  LOAD_SYMBOL(_lantern_vdot_attensor_attensor)
  LOAD_SYMBOL(_lantern_Tensor_vdot_attensor_attensor)
  LOAD_SYMBOL(_lantern_vdot_out_attensor_attensor_attensor)
  LOAD_SYMBOL(_lantern_einsum_stdstring_attensorlist)
  LOAD_SYMBOL(_lantern_embedding_attensor_attensor_intt_bool_bool)
  LOAD_SYMBOL(_lantern_embedding_backward_attensor_attensor_intt_intt_bool_bool)
  LOAD_SYMBOL(_lantern_embedding_dense_backward_attensor_attensor_intt_intt_bool)
  LOAD_SYMBOL(_lantern_embedding_renorm__attensor_attensor_double_double)
  LOAD_SYMBOL(_lantern_embedding_sparse_backward_attensor_attensor_intt_intt_bool)
  LOAD_SYMBOL(_lantern__embedding_bag_forward_only_attensor_attensor_attensor_bool_intt_bool_attensor_bool_intt)
  LOAD_SYMBOL(_lantern__rowwise_prune_attensor_attensor_atscalartype)
  LOAD_SYMBOL(_lantern_row_stack_attensorlist)
  LOAD_SYMBOL(_lantern_row_stack_out_attensor_attensorlist)
  LOAD_SYMBOL(_lantern_embedding_bag_attensor_attensor_attensor_bool_intt_bool_attensor_bool)
  LOAD_SYMBOL(_lantern_embedding_bag_attensor_attensor_attensor_bool_intt_bool_attensor_bool_intt)
  LOAD_SYMBOL(_lantern__embedding_bag_attensor_attensor_attensor_bool_intt_bool_attensor_bool_intt)
  LOAD_SYMBOL(_lantern__embedding_bag_backward_attensor_attensor_attensor_attensor_attensor_attensor_intt_bool_intt_bool_attensor_intt)
  LOAD_SYMBOL(_lantern__embedding_bag_sparse_backward_attensor_attensor_attensor_attensor_attensor_intt_bool_intt_attensor_intt)
  LOAD_SYMBOL(_lantern__embedding_bag_dense_backward_attensor_attensor_attensor_attensor_attensor_intt_bool_intt_attensor_intt)
  LOAD_SYMBOL(_lantern__embedding_bag_per_sample_weights_backward_attensor_attensor_attensor_attensor_attensor_intt_intt)
  LOAD_SYMBOL(_lantern_empty_atintarrayref_atdimnamelist_attensoroptions_atmemoryformat)
  LOAD_SYMBOL(_lantern_empty_atintarrayref_attensoroptions_atmemoryformat)
  LOAD_SYMBOL(_lantern_Tensor_new_empty_attensor_atintarrayref_attensoroptions)
  LOAD_SYMBOL(_lantern_Tensor_new_empty_strided_attensor_atintarrayref_atintarrayref_attensoroptions)
  LOAD_SYMBOL(_lantern_Tensor_new_full_attensor_atintarrayref_constatscalar_attensoroptions)
  LOAD_SYMBOL(_lantern_Tensor_new_zeros_attensor_atintarrayref_attensoroptions)
  LOAD_SYMBOL(_lantern__empty_affine_quantized_atintarrayref_attensoroptions_double_intt_atmemoryformat)
  LOAD_SYMBOL(_lantern__empty_per_channel_affine_quantized_atintarrayref_attensor_attensor_intt_attensoroptions_atmemoryformat)
  LOAD_SYMBOL(_lantern_Tensor_resize__attensor_atintarrayref_atmemoryformat)
  LOAD_SYMBOL(_lantern_empty_quantized_atintarrayref_attensor)
  LOAD_SYMBOL(_lantern_empty_out_attensor_atintarrayref_atmemoryformat)
  LOAD_SYMBOL(_lantern_empty_like_attensor_attensoroptions_atmemoryformat)
  LOAD_SYMBOL(_lantern_empty_strided_atintarrayref_atintarrayref_attensoroptions)
  LOAD_SYMBOL(_lantern_erf_attensor)
  LOAD_SYMBOL(_lantern_Tensor_erf_attensor)
  LOAD_SYMBOL(_lantern_erf__attensor)
  LOAD_SYMBOL(_lantern_Tensor_erf__attensor)
  LOAD_SYMBOL(_lantern_erf_out_attensor_attensor)
  LOAD_SYMBOL(_lantern_erfc_attensor)
  LOAD_SYMBOL(_lantern_Tensor_erfc_attensor)
  LOAD_SYMBOL(_lantern_erfc__attensor)
  LOAD_SYMBOL(_lantern_Tensor_erfc__attensor)
  LOAD_SYMBOL(_lantern_erfc_out_attensor_attensor)
  LOAD_SYMBOL(_lantern_exp_attensor)
  LOAD_SYMBOL(_lantern_Tensor_exp_attensor)
  LOAD_SYMBOL(_lantern_exp__attensor)
  LOAD_SYMBOL(_lantern_Tensor_exp__attensor)
  LOAD_SYMBOL(_lantern_exp_out_attensor_attensor)
  LOAD_SYMBOL(_lantern_exp2_attensor)
  LOAD_SYMBOL(_lantern_Tensor_exp2_attensor)
  LOAD_SYMBOL(_lantern_exp2__attensor)
  LOAD_SYMBOL(_lantern_Tensor_exp2__attensor)
  LOAD_SYMBOL(_lantern_exp2_out_attensor_attensor)
  LOAD_SYMBOL(_lantern_expm1_attensor)
  LOAD_SYMBOL(_lantern_Tensor_expm1_attensor)
  LOAD_SYMBOL(_lantern_expm1__attensor)
  LOAD_SYMBOL(_lantern_Tensor_expm1__attensor)
  LOAD_SYMBOL(_lantern_expm1_out_attensor_attensor)
  LOAD_SYMBOL(_lantern_Tensor_expand_attensor_atintarrayref_bool)
  LOAD_SYMBOL(_lantern_Tensor_expand_as_attensor_attensor)
  LOAD_SYMBOL(_lantern_eye_intt_attensoroptions)
  LOAD_SYMBOL(_lantern_eye_intt_intt_attensoroptions)
  LOAD_SYMBOL(_lantern_eye_out_attensor_intt)
  LOAD_SYMBOL(_lantern_eye_out_attensor_intt_intt)
  LOAD_SYMBOL(_lantern_flatten_attensor_intt_intt)
  LOAD_SYMBOL(_lantern_Tensor_flatten_attensor_intt_intt)
  LOAD_SYMBOL(_lantern_flatten_attensor_intt_intt_atdimname)
  LOAD_SYMBOL(_lantern_Tensor_flatten_attensor_intt_intt_atdimname)
  LOAD_SYMBOL(_lantern_flatten_attensor_atdimname_atdimname_atdimname)
  LOAD_SYMBOL(_lantern_Tensor_flatten_attensor_atdimname_atdimname_atdimname)
  LOAD_SYMBOL(_lantern_flatten_attensor_atdimnamelist_atdimname)
  LOAD_SYMBOL(_lantern_Tensor_flatten_attensor_atdimnamelist_atdimname)
  LOAD_SYMBOL(_lantern_Tensor_unflatten_attensor_intt_atintarrayref_atdimnamelist)
  LOAD_SYMBOL(_lantern_Tensor_unflatten_attensor_atdimname_atintarrayref_atdimnamelist)
  LOAD_SYMBOL(_lantern_fill__attensor_constatscalar)
  LOAD_SYMBOL(_lantern_Tensor_fill__attensor_constatscalar)
  LOAD_SYMBOL(_lantern_fill__attensor_attensor)
  LOAD_SYMBOL(_lantern_Tensor_fill__attensor_attensor)
  LOAD_SYMBOL(_lantern_floor_attensor)
  LOAD_SYMBOL(_lantern_Tensor_floor_attensor)
  LOAD_SYMBOL(_lantern_floor__attensor)
  LOAD_SYMBOL(_lantern_Tensor_floor__attensor)
  LOAD_SYMBOL(_lantern_floor_out_attensor_attensor)
  LOAD_SYMBOL(_lantern_floor_divide_attensor_attensor)
  LOAD_SYMBOL(_lantern_Tensor_floor_divide_attensor_attensor)
  LOAD_SYMBOL(_lantern_Tensor_floor_divide__attensor_attensor)
  LOAD_SYMBOL(_lantern_floor_divide_out_attensor_attensor_attensor)
  LOAD_SYMBOL(_lantern_floor_divide_attensor_constatscalar)
  LOAD_SYMBOL(_lantern_Tensor_floor_divide_attensor_constatscalar)
  LOAD_SYMBOL(_lantern_Tensor_floor_divide__attensor_constatscalar)
  LOAD_SYMBOL(_lantern_frac_attensor)
  LOAD_SYMBOL(_lantern_Tensor_frac_attensor)
  LOAD_SYMBOL(_lantern_frac__attensor)
  LOAD_SYMBOL(_lantern_Tensor_frac__attensor)
  LOAD_SYMBOL(_lantern_frac_out_attensor_attensor)
  LOAD_SYMBOL(_lantern_full_atintarrayref_constatscalar_atdimnamelist_attensoroptions)
  LOAD_SYMBOL(_lantern_full_atintarrayref_constatscalar_attensoroptions)
  LOAD_SYMBOL(_lantern_full_out_attensor_atintarrayref_constatscalar)
  LOAD_SYMBOL(_lantern_full_like_attensor_constatscalar_attensoroptions_atmemoryformat)
  LOAD_SYMBOL(_lantern_from_file_stdstring_bool_intt_attensoroptions)
  LOAD_SYMBOL(_lantern_gcd_out_attensor_attensor_attensor)
  LOAD_SYMBOL(_lantern_gcd_attensor_attensor)
  LOAD_SYMBOL(_lantern_Tensor_gcd_attensor_attensor)
  LOAD_SYMBOL(_lantern_gcd__attensor_attensor)
  LOAD_SYMBOL(_lantern_Tensor_gcd__attensor_attensor)
  LOAD_SYMBOL(_lantern_lcm_out_attensor_attensor_attensor)
  LOAD_SYMBOL(_lantern_lcm_attensor_attensor)
  LOAD_SYMBOL(_lantern_Tensor_lcm_attensor_attensor)
  LOAD_SYMBOL(_lantern_lcm__attensor_attensor)
  LOAD_SYMBOL(_lantern_Tensor_lcm__attensor_attensor)
  LOAD_SYMBOL(_lantern_grid_sampler_attensor_attensor_intt_intt_bool)
  LOAD_SYMBOL(_lantern_grid_sampler_2d_attensor_attensor_intt_intt_bool)
  LOAD_SYMBOL(_lantern_grid_sampler_2d_backward_attensor_attensor_attensor_intt_intt_bool)
  LOAD_SYMBOL(_lantern__grid_sampler_2d_cpu_fallback_attensor_attensor_intt_intt_bool)
  LOAD_SYMBOL(_lantern__grid_sampler_2d_cpu_fallback_backward_attensor_attensor_attensor_intt_intt_bool)
  LOAD_SYMBOL(_lantern_grid_sampler_3d_attensor_attensor_intt_intt_bool)
  LOAD_SYMBOL(_lantern_grid_sampler_3d_backward_attensor_attensor_attensor_intt_intt_bool)
  LOAD_SYMBOL(_lantern_hann_window_intt_attensoroptions)
  LOAD_SYMBOL(_lantern_hann_window_intt_bool_attensoroptions)
  LOAD_SYMBOL(_lantern_hamming_window_intt_attensoroptions)
  LOAD_SYMBOL(_lantern_hamming_window_intt_bool_attensoroptions)
  LOAD_SYMBOL(_lantern_hamming_window_intt_bool_double_attensoroptions)
  LOAD_SYMBOL(_lantern_hamming_window_intt_bool_double_double_attensoroptions)
  LOAD_SYMBOL(_lantern_kaiser_window_intt_attensoroptions)
  LOAD_SYMBOL(_lantern_kaiser_window_intt_bool_attensoroptions)
  LOAD_SYMBOL(_lantern_kaiser_window_intt_bool_double_attensoroptions)
  LOAD_SYMBOL(_lantern_hinge_embedding_loss_attensor_attensor_double_intt)
  LOAD_SYMBOL(_lantern_group_norm_attensor_intt_attensor_attensor_double_bool)
  LOAD_SYMBOL(_lantern_native_group_norm_attensor_attensor_attensor_intt_intt_intt_intt_double)
  LOAD_SYMBOL(_lantern_native_group_norm_backward_attensor_attensor_attensor_attensor_attensor_intt_intt_intt_intt_stdarraybool)
  LOAD_SYMBOL(_lantern__fft_r2c_attensor_atintarrayref_intt_bool)
  LOAD_SYMBOL(_lantern__fft_r2c_out_attensor_attensor_atintarrayref_intt_bool)
  LOAD_SYMBOL(_lantern__fft_c2r_attensor_atintarrayref_intt_intt)
  LOAD_SYMBOL(_lantern__fft_c2r_out_attensor_attensor_atintarrayref_intt_intt)
  LOAD_SYMBOL(_lantern__fft_c2c_attensor_atintarrayref_intt_bool)
  LOAD_SYMBOL(_lantern__fft_c2c_out_attensor_attensor_atintarrayref_intt_bool)
  LOAD_SYMBOL(_lantern__cufft_get_plan_cache_size_intt)
  LOAD_SYMBOL(_lantern__cufft_get_plan_cache_max_size_intt)
  LOAD_SYMBOL(_lantern__cufft_set_plan_cache_max_size_intt_intt)
  LOAD_SYMBOL(_lantern__cufft_clear_plan_cache_intt)
  LOAD_SYMBOL(_lantern_index_attensor_constclistcoptionalattensor)
  LOAD_SYMBOL(_lantern_Tensor_index_attensor_constclistcoptionalattensor)
  LOAD_SYMBOL(_lantern_Tensor_index_copy__attensor_intt_attensor_attensor)
  LOAD_SYMBOL(_lantern_index_copy_attensor_intt_attensor_attensor)
  LOAD_SYMBOL(_lantern_Tensor_index_copy_attensor_intt_attensor_attensor)
  LOAD_SYMBOL(_lantern_Tensor_index_copy__attensor_atdimname_attensor_attensor)
  LOAD_SYMBOL(_lantern_index_copy_attensor_atdimname_attensor_attensor)
  LOAD_SYMBOL(_lantern_Tensor_index_copy_attensor_atdimname_attensor_attensor)
  LOAD_SYMBOL(_lantern_index_put__attensor_constclistcoptionalattensor_attensor_bool)
  LOAD_SYMBOL(_lantern_Tensor_index_put__attensor_constclistcoptionalattensor_attensor_bool)
  LOAD_SYMBOL(_lantern_index_put_attensor_constclistcoptionalattensor_attensor_bool)
  LOAD_SYMBOL(_lantern_Tensor_index_put_attensor_constclistcoptionalattensor_attensor_bool)
  LOAD_SYMBOL(_lantern__index_put_impl__attensor_constclistcoptionalattensor_attensor_bool_bool)
  LOAD_SYMBOL(_lantern_instance_norm_attensor_attensor_attensor_attensor_attensor_bool_double_double_bool)
  LOAD_SYMBOL(_lantern_inverse_attensor)
  LOAD_SYMBOL(_lantern_Tensor_inverse_attensor)
  LOAD_SYMBOL(_lantern_inverse_out_attensor_attensor)
  LOAD_SYMBOL(_lantern__inverse_helper_attensor)
  LOAD_SYMBOL(_lantern_isclose_attensor_attensor_double_double_bool)
  LOAD_SYMBOL(_lantern_Tensor_isclose_attensor_attensor_double_double_bool)
  LOAD_SYMBOL(_lantern_isnan_attensor)
  LOAD_SYMBOL(_lantern_Tensor_isnan_attensor)
  LOAD_SYMBOL(_lantern_is_distributed_attensor)
  LOAD_SYMBOL(_lantern_Tensor_is_distributed_attensor)
  LOAD_SYMBOL(_lantern_is_floating_point_attensor)
  LOAD_SYMBOL(_lantern_Tensor_is_floating_point_attensor)
  LOAD_SYMBOL(_lantern_is_complex_attensor)
  LOAD_SYMBOL(_lantern_Tensor_is_complex_attensor)
  LOAD_SYMBOL(_lantern_isreal_attensor)
  LOAD_SYMBOL(_lantern_Tensor_isreal_attensor)
  LOAD_SYMBOL(_lantern_is_nonzero_attensor)
  LOAD_SYMBOL(_lantern_Tensor_is_nonzero_attensor)
  LOAD_SYMBOL(_lantern_is_same_size_attensor_attensor)
  LOAD_SYMBOL(_lantern_Tensor_is_same_size_attensor_attensor)
  LOAD_SYMBOL(_lantern_is_signed_attensor)
  LOAD_SYMBOL(_lantern_Tensor_is_signed_attensor)
  LOAD_SYMBOL(_lantern_kl_div_attensor_attensor_intt_bool)
  LOAD_SYMBOL(_lantern_kl_div_backward_attensor_attensor_attensor_intt_bool)
  LOAD_SYMBOL(_lantern_kron_attensor_attensor)
  LOAD_SYMBOL(_lantern_Tensor_kron_attensor_attensor)
  LOAD_SYMBOL(_lantern_kron_out_attensor_attensor_attensor)
  LOAD_SYMBOL(_lantern_kthvalue_attensor_intt_intt_bool)
  LOAD_SYMBOL(_lantern_Tensor_kthvalue_attensor_intt_intt_bool)
  LOAD_SYMBOL(_lantern_kthvalue_out_attensor_attensor_attensor_intt_intt_bool)
  LOAD_SYMBOL(_lantern_kthvalue_attensor_intt_atdimname_bool)
  LOAD_SYMBOL(_lantern_Tensor_kthvalue_attensor_intt_atdimname_bool)
  LOAD_SYMBOL(_lantern_kthvalue_out_attensor_attensor_attensor_intt_atdimname_bool)
  LOAD_SYMBOL(_lantern_layer_norm_attensor_atintarrayref_attensor_attensor_double_bool)
  LOAD_SYMBOL(_lantern_native_layer_norm_attensor_atintarrayref_attensor_attensor_double)
  LOAD_SYMBOL(_lantern_native_layer_norm_backward_attensor_attensor_atintarrayref_attensor_attensor_attensor_attensor_stdarraybool)
  LOAD_SYMBOL(_lantern_nan_to_num_attensor_double_double_double)
  LOAD_SYMBOL(_lantern_Tensor_nan_to_num_attensor_double_double_double)
  LOAD_SYMBOL(_lantern_nan_to_num__attensor_double_double_double)
  LOAD_SYMBOL(_lantern_Tensor_nan_to_num__attensor_double_double_double)
  LOAD_SYMBOL(_lantern_nan_to_num_out_attensor_attensor_double_double_double)
  LOAD_SYMBOL(_lantern_linear_attensor_attensor_attensor)
  LOAD_SYMBOL(_lantern_mkldnn_linear_attensor_attensor_attensor)
  LOAD_SYMBOL(_lantern_mkldnn_linear_backward_input_atintarrayref_attensor_attensor)
  LOAD_SYMBOL(_lantern_mkldnn_linear_backward_weights_attensor_attensor_attensor_bool)
  LOAD_SYMBOL(_lantern_mkldnn_linear_backward_attensor_attensor_attensor_stdarraybool)
  LOAD_SYMBOL(_lantern_fbgemm_linear_int8_weight_fp32_activation_attensor_attensor_attensor_attensor_constatscalar_constatscalar_attensor)
  LOAD_SYMBOL(_lantern_fbgemm_linear_int8_weight_attensor_attensor_attensor_attensor_constatscalar_constatscalar_attensor)
  LOAD_SYMBOL(_lantern_fbgemm_linear_quantize_weight_attensor)
  LOAD_SYMBOL(_lantern_fbgemm_pack_gemm_matrix_fp16_attensor)
  LOAD_SYMBOL(_lantern_fbgemm_linear_fp16_weight_fp32_activation_attensor_attensor_attensor)
  LOAD_SYMBOL(_lantern_fbgemm_linear_fp16_weight_attensor_attensor_attensor)
  LOAD_SYMBOL(_lantern_fbgemm_pack_quantized_matrix_attensor)
  LOAD_SYMBOL(_lantern_fbgemm_pack_quantized_matrix_attensor_intt_intt)
  LOAD_SYMBOL(_lantern_ldexp_attensor_attensor)
  LOAD_SYMBOL(_lantern_Tensor_ldexp_attensor_attensor)
  LOAD_SYMBOL(_lantern_ldexp__attensor_attensor)
  LOAD_SYMBOL(_lantern_Tensor_ldexp__attensor_attensor)
  LOAD_SYMBOL(_lantern_ldexp_out_attensor_attensor_attensor)
  LOAD_SYMBOL(_lantern_linspace_constatscalar_constatscalar_intt_attensoroptions)
  LOAD_SYMBOL(_lantern_linspace_out_attensor_constatscalar_constatscalar_intt)
  LOAD_SYMBOL(_lantern_log_attensor)
  LOAD_SYMBOL(_lantern_Tensor_log_attensor)
  LOAD_SYMBOL(_lantern_log__attensor)
  LOAD_SYMBOL(_lantern_Tensor_log__attensor)
  LOAD_SYMBOL(_lantern_log_out_attensor_attensor)
  LOAD_SYMBOL(_lantern_log10_attensor)
  LOAD_SYMBOL(_lantern_Tensor_log10_attensor)
  LOAD_SYMBOL(_lantern_log10__attensor)
  LOAD_SYMBOL(_lantern_Tensor_log10__attensor)
  LOAD_SYMBOL(_lantern_log10_out_attensor_attensor)
  LOAD_SYMBOL(_lantern_log1p_attensor)
  LOAD_SYMBOL(_lantern_Tensor_log1p_attensor)
  LOAD_SYMBOL(_lantern_log1p__attensor)
  LOAD_SYMBOL(_lantern_Tensor_log1p__attensor)
  LOAD_SYMBOL(_lantern_log1p_out_attensor_attensor)
  LOAD_SYMBOL(_lantern_log2_attensor)
  LOAD_SYMBOL(_lantern_Tensor_log2_attensor)
  LOAD_SYMBOL(_lantern_log2__attensor)
  LOAD_SYMBOL(_lantern_Tensor_log2__attensor)
  LOAD_SYMBOL(_lantern_log2_out_attensor_attensor)
  LOAD_SYMBOL(_lantern_logaddexp_out_attensor_attensor_attensor)
  LOAD_SYMBOL(_lantern_logaddexp_attensor_attensor)
  LOAD_SYMBOL(_lantern_Tensor_logaddexp_attensor_attensor)
  LOAD_SYMBOL(_lantern_logaddexp2_out_attensor_attensor_attensor)
  LOAD_SYMBOL(_lantern_logaddexp2_attensor_attensor)
  LOAD_SYMBOL(_lantern_Tensor_logaddexp2_attensor_attensor)
  LOAD_SYMBOL(_lantern_xlogy_attensor_attensor)
  LOAD_SYMBOL(_lantern_Tensor_xlogy_attensor_attensor)
  LOAD_SYMBOL(_lantern_xlogy_constatscalar_attensor)
  LOAD_SYMBOL(_lantern_xlogy_attensor_constatscalar)
  LOAD_SYMBOL(_lantern_Tensor_xlogy_attensor_constatscalar)
  LOAD_SYMBOL(_lantern_xlogy__attensor_attensor)
  LOAD_SYMBOL(_lantern_Tensor_xlogy__attensor_attensor)
  LOAD_SYMBOL(_lantern_xlogy__attensor_constatscalar)
  LOAD_SYMBOL(_lantern_Tensor_xlogy__attensor_constatscalar)
  LOAD_SYMBOL(_lantern_xlogy_out_attensor_attensor_attensor)
  LOAD_SYMBOL(_lantern_xlogy_out_attensor_constatscalar_attensor)
  LOAD_SYMBOL(_lantern_xlogy_out_attensor_attensor_constatscalar)
  LOAD_SYMBOL(_lantern_logdet_attensor)
  LOAD_SYMBOL(_lantern_Tensor_logdet_attensor)
  LOAD_SYMBOL(_lantern_logspace_constatscalar_constatscalar_intt_double_attensoroptions)
  LOAD_SYMBOL(_lantern_logspace_out_attensor_constatscalar_constatscalar_intt_double)
  LOAD_SYMBOL(_lantern_log_softmax_attensor_intt_atscalartype)
  LOAD_SYMBOL(_lantern_Tensor_log_softmax_attensor_intt_atscalartype)
  LOAD_SYMBOL(_lantern_log_softmax_attensor_atdimname_atscalartype)
  LOAD_SYMBOL(_lantern_Tensor_log_softmax_attensor_atdimname_atscalartype)
  LOAD_SYMBOL(_lantern__log_softmax_attensor_intt_bool)
  LOAD_SYMBOL(_lantern__log_softmax_backward_data_attensor_attensor_intt_attensor)
  LOAD_SYMBOL(_lantern__logcumsumexp_attensor_intt)
  LOAD_SYMBOL(_lantern__logcumsumexp_out_attensor_attensor_intt)
  LOAD_SYMBOL(_lantern_logcumsumexp_attensor_intt)
  LOAD_SYMBOL(_lantern_Tensor_logcumsumexp_attensor_intt)
  LOAD_SYMBOL(_lantern_logcumsumexp_out_attensor_attensor_intt)
  LOAD_SYMBOL(_lantern_logcumsumexp_attensor_atdimname)
  LOAD_SYMBOL(_lantern_Tensor_logcumsumexp_attensor_atdimname)
  LOAD_SYMBOL(_lantern_logcumsumexp_out_attensor_attensor_atdimname)
  LOAD_SYMBOL(_lantern_logsumexp_attensor_atintarrayref_bool)
  LOAD_SYMBOL(_lantern_Tensor_logsumexp_attensor_atintarrayref_bool)
  LOAD_SYMBOL(_lantern_logsumexp_out_attensor_attensor_atintarrayref_bool)
  LOAD_SYMBOL(_lantern_logsumexp_attensor_atdimnamelist_bool)
  LOAD_SYMBOL(_lantern_Tensor_logsumexp_attensor_atdimnamelist_bool)
  LOAD_SYMBOL(_lantern_logsumexp_out_attensor_attensor_atdimnamelist_bool)
  LOAD_SYMBOL(_lantern_margin_ranking_loss_attensor_attensor_attensor_double_intt)
  LOAD_SYMBOL(_lantern_matmul_attensor_attensor)
  LOAD_SYMBOL(_lantern_Tensor_matmul_attensor_attensor)
  LOAD_SYMBOL(_lantern_matmul_out_attensor_attensor_attensor)
  LOAD_SYMBOL(_lantern_matrix_rank_attensor_double_bool)
  LOAD_SYMBOL(_lantern_matrix_rank_attensor_bool)
  LOAD_SYMBOL(_lantern_matrix_power_attensor_intt)
  LOAD_SYMBOL(_lantern_Tensor_matrix_power_attensor_intt)
  LOAD_SYMBOL(_lantern_matrix_power_out_attensor_attensor_intt)
  LOAD_SYMBOL(_lantern_matrix_exp_attensor)
  LOAD_SYMBOL(_lantern_Tensor_matrix_exp_attensor)
  LOAD_SYMBOL(_lantern_matrix_exp_backward_attensor_attensor)
  LOAD_SYMBOL(_lantern__aminmax_attensor)
  LOAD_SYMBOL(_lantern__aminmax_attensor_intt_bool)
  LOAD_SYMBOL(_lantern__compute_linear_combination_attensor_attensor)
  LOAD_SYMBOL(_lantern__compute_linear_combination_out_attensor_attensor_attensor)
  LOAD_SYMBOL(_lantern_max_attensor_intt_bool)
  LOAD_SYMBOL(_lantern_Tensor_max_attensor_intt_bool)
  LOAD_SYMBOL(_lantern_max_out_attensor_attensor_attensor_intt_bool)
  LOAD_SYMBOL(_lantern_max_attensor_atdimname_bool)
  LOAD_SYMBOL(_lantern_Tensor_max_attensor_atdimname_bool)
  LOAD_SYMBOL(_lantern_max_out_attensor_attensor_attensor_atdimname_bool)
  LOAD_SYMBOL(_lantern_value_selecting_reduction_backward_attensor_intt_attensor_atintarrayref_bool)
  LOAD_SYMBOL(_lantern_amax_attensor_atintarrayref_bool)
  LOAD_SYMBOL(_lantern_Tensor_amax_attensor_atintarrayref_bool)
  LOAD_SYMBOL(_lantern_amax_out_attensor_attensor_atintarrayref_bool)
  LOAD_SYMBOL(_lantern_max_pool1d_with_indices_attensor_atintarrayref_atintarrayref_atintarrayref_atintarrayref_bool)
  LOAD_SYMBOL(_lantern_max_pool1d_attensor_atintarrayref_atintarrayref_atintarrayref_atintarrayref_bool)
  LOAD_SYMBOL(_lantern_max_pool2d_attensor_atintarrayref_atintarrayref_atintarrayref_atintarrayref_bool)
  LOAD_SYMBOL(_lantern_mkldnn_max_pool2d_attensor_atintarrayref_atintarrayref_atintarrayref_atintarrayref_bool)
  LOAD_SYMBOL(_lantern_mkldnn_max_pool2d_backward_attensor_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_atintarrayref_bool)
  LOAD_SYMBOL(_lantern_mkldnn_max_pool3d_attensor_atintarrayref_atintarrayref_atintarrayref_atintarrayref_bool)
  LOAD_SYMBOL(_lantern_mkldnn_max_pool3d_backward_attensor_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_atintarrayref_bool)
  LOAD_SYMBOL(_lantern_quantized_max_pool1d_attensor_atintarrayref_atintarrayref_atintarrayref_atintarrayref_bool)
  LOAD_SYMBOL(_lantern_quantized_max_pool2d_attensor_atintarrayref_atintarrayref_atintarrayref_atintarrayref_bool)
  LOAD_SYMBOL(_lantern_max_pool3d_attensor_atintarrayref_atintarrayref_atintarrayref_atintarrayref_bool)
  LOAD_SYMBOL(_lantern_mean_attensor_atscalartype)
  LOAD_SYMBOL(_lantern_Tensor_mean_attensor_atscalartype)
  LOAD_SYMBOL(_lantern_mean_attensor_atintarrayref_bool_atscalartype)
  LOAD_SYMBOL(_lantern_Tensor_mean_attensor_atintarrayref_bool_atscalartype)
  LOAD_SYMBOL(_lantern_mean_out_attensor_attensor_atintarrayref_bool_atscalartype)
  LOAD_SYMBOL(_lantern_mean_attensor_atdimnamelist_bool_atscalartype)
  LOAD_SYMBOL(_lantern_Tensor_mean_attensor_atdimnamelist_bool_atscalartype)
  LOAD_SYMBOL(_lantern_mean_out_attensor_attensor_atdimnamelist_bool_atscalartype)
  LOAD_SYMBOL(_lantern_median_attensor)
  LOAD_SYMBOL(_lantern_Tensor_median_attensor)
  LOAD_SYMBOL(_lantern_median_attensor_intt_bool)
  LOAD_SYMBOL(_lantern_Tensor_median_attensor_intt_bool)
  LOAD_SYMBOL(_lantern_median_out_attensor_attensor_attensor_intt_bool)
  LOAD_SYMBOL(_lantern_median_attensor_atdimname_bool)
  LOAD_SYMBOL(_lantern_Tensor_median_attensor_atdimname_bool)
  LOAD_SYMBOL(_lantern_median_out_attensor_attensor_attensor_atdimname_bool)
  LOAD_SYMBOL(_lantern_nanmedian_attensor)
  LOAD_SYMBOL(_lantern_Tensor_nanmedian_attensor)
  LOAD_SYMBOL(_lantern_nanmedian_attensor_intt_bool)
  LOAD_SYMBOL(_lantern_Tensor_nanmedian_attensor_intt_bool)
  LOAD_SYMBOL(_lantern_nanmedian_out_attensor_attensor_attensor_intt_bool)
  LOAD_SYMBOL(_lantern_nanmedian_attensor_atdimname_bool)
  LOAD_SYMBOL(_lantern_Tensor_nanmedian_attensor_atdimname_bool)
  LOAD_SYMBOL(_lantern_nanmedian_out_attensor_attensor_attensor_atdimname_bool)
  LOAD_SYMBOL(_lantern_min_attensor_intt_bool)
  LOAD_SYMBOL(_lantern_Tensor_min_attensor_intt_bool)
  LOAD_SYMBOL(_lantern_min_out_attensor_attensor_attensor_intt_bool)
  LOAD_SYMBOL(_lantern_min_attensor_atdimname_bool)
  LOAD_SYMBOL(_lantern_Tensor_min_attensor_atdimname_bool)
  LOAD_SYMBOL(_lantern_min_out_attensor_attensor_attensor_atdimname_bool)
  LOAD_SYMBOL(_lantern_amin_attensor_atintarrayref_bool)
  LOAD_SYMBOL(_lantern_Tensor_amin_attensor_atintarrayref_bool)
  LOAD_SYMBOL(_lantern_amin_out_attensor_attensor_atintarrayref_bool)
  LOAD_SYMBOL(_lantern_mkldnn_convolution_attensor_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_intt)
  LOAD_SYMBOL(_lantern_mkldnn_convolution_backward_input_atintarrayref_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_intt_bool)
  LOAD_SYMBOL(_lantern_mkldnn_convolution_backward_weights_atintarrayref_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_intt_bool)
  LOAD_SYMBOL(_lantern_mkldnn_convolution_backward_attensor_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_intt_stdarraybool)
  LOAD_SYMBOL(_lantern_miopen_batch_norm_attensor_attensor_attensor_attensor_attensor_bool_double_double)
  LOAD_SYMBOL(_lantern_miopen_batch_norm_backward_attensor_attensor_attensor_attensor_attensor_attensor_attensor_double)
  LOAD_SYMBOL(_lantern_miopen_convolution_attensor_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_intt_bool_bool)
  LOAD_SYMBOL(_lantern_miopen_convolution_backward_input_atintarrayref_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_intt_bool_bool)
  LOAD_SYMBOL(_lantern_miopen_convolution_backward_attensor_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_intt_bool_bool_stdarraybool)
  LOAD_SYMBOL(_lantern_miopen_convolution_backward_bias_attensor)
  LOAD_SYMBOL(_lantern_miopen_convolution_backward_weight_atintarrayref_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_intt_bool_bool)
  LOAD_SYMBOL(_lantern_miopen_convolution_transpose_attensor_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_atintarrayref_intt_bool_bool)
  LOAD_SYMBOL(_lantern_miopen_convolution_transpose_backward_attensor_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_atintarrayref_intt_bool_bool_stdarraybool)
  LOAD_SYMBOL(_lantern_miopen_convolution_transpose_backward_input_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_intt_bool_bool)
  LOAD_SYMBOL(_lantern_miopen_convolution_transpose_backward_weight_atintarrayref_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_intt_bool_bool)
  LOAD_SYMBOL(_lantern_miopen_depthwise_convolution_attensor_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_intt_bool_bool)
  LOAD_SYMBOL(_lantern_miopen_depthwise_convolution_backward_input_atintarrayref_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_intt_bool_bool)
  LOAD_SYMBOL(_lantern_miopen_depthwise_convolution_backward_attensor_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_intt_bool_bool_stdarraybool)
  LOAD_SYMBOL(_lantern_miopen_depthwise_convolution_backward_weight_atintarrayref_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_intt_bool_bool)
  LOAD_SYMBOL(_lantern_miopen_rnn_attensor_attensorlist_intt_attensor_attensor_intt_intt_intt_bool_double_bool_bool_atintarrayref_attensor)
  LOAD_SYMBOL(_lantern_miopen_rnn_backward_attensor_attensorlist_intt_attensor_attensor_attensor_attensor_attensor_attensor_attensor_intt_intt_intt_bool_double_bool_bool_atintarrayref_attensor_attensor_stdarraybool)
  LOAD_SYMBOL(_lantern_mm_attensor_attensor)
  LOAD_SYMBOL(_lantern_Tensor_mm_attensor_attensor)
  LOAD_SYMBOL(_lantern_mm_out_attensor_attensor_attensor)
  LOAD_SYMBOL(_lantern__sparse_mm_attensor_attensor)
  LOAD_SYMBOL(_lantern__sparse_sparse_matmul_attensor_attensor)
  LOAD_SYMBOL(_lantern__sparse_mask_helper_attensor_attensor)
  LOAD_SYMBOL(_lantern_mode_attensor_intt_bool)
  LOAD_SYMBOL(_lantern_Tensor_mode_attensor_intt_bool)
  LOAD_SYMBOL(_lantern_mode_out_attensor_attensor_attensor_intt_bool)
  LOAD_SYMBOL(_lantern_mode_attensor_atdimname_bool)
  LOAD_SYMBOL(_lantern_Tensor_mode_attensor_atdimname_bool)
  LOAD_SYMBOL(_lantern_mode_out_attensor_attensor_attensor_atdimname_bool)
  LOAD_SYMBOL(_lantern_mul_attensor_attensor)
  LOAD_SYMBOL(_lantern_Tensor_mul_attensor_attensor)
  LOAD_SYMBOL(_lantern_Tensor_mul__attensor_attensor)
  LOAD_SYMBOL(_lantern_mul_out_attensor_attensor_attensor)
  LOAD_SYMBOL(_lantern_mul_attensor_constatscalar)
  LOAD_SYMBOL(_lantern_Tensor_mul_attensor_constatscalar)
  LOAD_SYMBOL(_lantern_Tensor_mul__attensor_constatscalar)
  LOAD_SYMBOL(_lantern_multiply_attensor_attensor)
  LOAD_SYMBOL(_lantern_Tensor_multiply_attensor_attensor)
  LOAD_SYMBOL(_lantern_Tensor_multiply__attensor_attensor)
  LOAD_SYMBOL(_lantern_multiply_out_attensor_attensor_attensor)
  LOAD_SYMBOL(_lantern_multiply_attensor_constatscalar)
  LOAD_SYMBOL(_lantern_Tensor_multiply_attensor_constatscalar)
  LOAD_SYMBOL(_lantern_Tensor_multiply__attensor_constatscalar)
  LOAD_SYMBOL(_lantern_mv_attensor_attensor)
  LOAD_SYMBOL(_lantern_Tensor_mv_attensor_attensor)
  LOAD_SYMBOL(_lantern_mv_out_attensor_attensor_attensor)
  LOAD_SYMBOL(_lantern_mvlgamma_attensor_intt)
  LOAD_SYMBOL(_lantern_Tensor_mvlgamma_attensor_intt)
  LOAD_SYMBOL(_lantern_Tensor_mvlgamma__attensor_intt)
  LOAD_SYMBOL(_lantern_narrow_copy_attensor_intt_intt_intt)
  LOAD_SYMBOL(_lantern_Tensor_narrow_copy_attensor_intt_intt_intt)
  LOAD_SYMBOL(_lantern_narrow_copy_out_attensor_attensor_intt_intt_intt)
  LOAD_SYMBOL(_lantern_narrow_attensor_intt_intt_intt)
  LOAD_SYMBOL(_lantern_Tensor_narrow_attensor_intt_intt_intt)
  LOAD_SYMBOL(_lantern_narrow_attensor_intt_attensor_intt)
  LOAD_SYMBOL(_lantern_Tensor_narrow_attensor_intt_attensor_intt)
  LOAD_SYMBOL(_lantern_native_batch_norm_attensor_attensor_attensor_attensor_attensor_bool_double_double)
  LOAD_SYMBOL(_lantern_native_batch_norm_out_attensor_attensor_attensor_attensor_attensor_attensor_attensor_attensor_bool_double_double)
  LOAD_SYMBOL(_lantern_batch_norm_stats_attensor_double)
  LOAD_SYMBOL(_lantern_batch_norm_elemt_attensor_attensor_attensor_attensor_attensor_double)
  LOAD_SYMBOL(_lantern_batch_norm_elemt_out_attensor_attensor_attensor_attensor_attensor_attensor_double)
  LOAD_SYMBOL(_lantern_batch_norm_gather_stats_attensor_attensor_attensor_attensor_attensor_double_double_intt)
  LOAD_SYMBOL(_lantern_batch_norm_gather_stats_with_counts_attensor_attensor_attensor_attensor_attensor_double_double_attensor)
  LOAD_SYMBOL(_lantern_native_batch_norm_backward_attensor_attensor_attensor_attensor_attensor_attensor_attensor_bool_double_stdarraybool)
  LOAD_SYMBOL(_lantern_batch_norm_backward_reduce_attensor_attensor_attensor_attensor_attensor_bool_bool_bool)
  LOAD_SYMBOL(_lantern_batch_norm_backward_elemt_attensor_attensor_attensor_attensor_attensor_attensor_attensor_attensor)
  LOAD_SYMBOL(_lantern_batch_norm_update_stats_attensor_attensor_attensor_double)
  LOAD_SYMBOL(_lantern_is_vulkan_available)
  LOAD_SYMBOL(_lantern__nnpack_available)
  LOAD_SYMBOL(_lantern__nnpack_spatial_convolution_attensor_attensor_attensor_atintarrayref_atintarrayref)
  LOAD_SYMBOL(_lantern__nnpack_spatial_convolution_backward_attensor_attensor_attensor_atintarrayref_stdarraybool)
  LOAD_SYMBOL(_lantern__nnpack_spatial_convolution_backward_input_attensor_attensor_attensor_atintarrayref)
  LOAD_SYMBOL(_lantern__nnpack_spatial_convolution_backward_weight_attensor_atintarrayref_attensor_atintarrayref)
  LOAD_SYMBOL(_lantern_ones_atintarrayref_atdimnamelist_attensoroptions)
  LOAD_SYMBOL(_lantern_ones_atintarrayref_attensoroptions)
  LOAD_SYMBOL(_lantern_ones_out_attensor_atintarrayref)
  LOAD_SYMBOL(_lantern_ones_like_attensor_attensoroptions_atmemoryformat)
  LOAD_SYMBOL(_lantern_pairwise_distance_attensor_attensor_double_double_bool)
  LOAD_SYMBOL(_lantern_cdist_attensor_attensor_double_intt)
  LOAD_SYMBOL(_lantern__euclidean_dist_attensor_attensor)
  LOAD_SYMBOL(_lantern__cdist_forward_attensor_attensor_double_intt)
  LOAD_SYMBOL(_lantern__cdist_backward_attensor_attensor_attensor_double_attensor)
  LOAD_SYMBOL(_lantern_pdist_attensor_double)
  LOAD_SYMBOL(_lantern__pdist_forward_attensor_double)
  LOAD_SYMBOL(_lantern__pdist_backward_attensor_attensor_double_attensor)
  LOAD_SYMBOL(_lantern_cosine_similarity_attensor_attensor_intt_double)
  LOAD_SYMBOL(_lantern_permute_attensor_atintarrayref)
  LOAD_SYMBOL(_lantern_Tensor_permute_attensor_atintarrayref)
  LOAD_SYMBOL(_lantern_movedim_attensor_atintarrayref_atintarrayref)
  LOAD_SYMBOL(_lantern_Tensor_movedim_attensor_atintarrayref_atintarrayref)
  LOAD_SYMBOL(_lantern_movedim_attensor_intt_intt)
  LOAD_SYMBOL(_lantern_Tensor_movedim_attensor_intt_intt)
  LOAD_SYMBOL(_lantern_moveaxis_attensor_atintarrayref_atintarrayref)
  LOAD_SYMBOL(_lantern_Tensor_moveaxis_attensor_atintarrayref_atintarrayref)
  LOAD_SYMBOL(_lantern_moveaxis_attensor_intt_intt)
  LOAD_SYMBOL(_lantern_Tensor_moveaxis_attensor_intt_intt)
  LOAD_SYMBOL(_lantern_Tensor_numpy_t_attensor)
  LOAD_SYMBOL(_lantern_pixel_shuffle_attensor_intt)
  LOAD_SYMBOL(_lantern_pixel_unshuffle_attensor_intt)
  LOAD_SYMBOL(_lantern_channel_shuffle_attensor_intt)
  LOAD_SYMBOL(_lantern_Tensor_is_pinned_attensor)
  LOAD_SYMBOL(_lantern_Tensor_pin_memory_attensor)
  LOAD_SYMBOL(_lantern_pinverse_attensor_double)
  LOAD_SYMBOL(_lantern_Tensor_pinverse_attensor_double)
  LOAD_SYMBOL(_lantern_poisson_nll_loss_attensor_attensor_bool_bool_double_intt)
  LOAD_SYMBOL(_lantern_rad2deg_attensor)
  LOAD_SYMBOL(_lantern_Tensor_rad2deg_attensor)
  LOAD_SYMBOL(_lantern_rad2deg__attensor)
  LOAD_SYMBOL(_lantern_Tensor_rad2deg__attensor)
  LOAD_SYMBOL(_lantern_rad2deg_out_attensor_attensor)
  LOAD_SYMBOL(_lantern_deg2rad_attensor)
  LOAD_SYMBOL(_lantern_Tensor_deg2rad_attensor)
  LOAD_SYMBOL(_lantern_deg2rad__attensor)
  LOAD_SYMBOL(_lantern_Tensor_deg2rad__attensor)
  LOAD_SYMBOL(_lantern_deg2rad_out_attensor_attensor)
  LOAD_SYMBOL(_lantern_scalar_tensor_constatscalar_attensoroptions)
  LOAD_SYMBOL(_lantern_rand_atintarrayref_atdimnamelist_attensoroptions)
  LOAD_SYMBOL(_lantern_rand_atintarrayref_atgenerator_atdimnamelist_attensoroptions)
  LOAD_SYMBOL(_lantern_rand_atintarrayref_attensoroptions)
  LOAD_SYMBOL(_lantern_rand_atintarrayref_atgenerator_attensoroptions)
  LOAD_SYMBOL(_lantern_rand_out_attensor_atintarrayref)
  LOAD_SYMBOL(_lantern_rand_out_attensor_atintarrayref_atgenerator)
  LOAD_SYMBOL(_lantern_rand_like_attensor_attensoroptions_atmemoryformat)
  LOAD_SYMBOL(_lantern_randint_intt_atintarrayref_attensoroptions)
  LOAD_SYMBOL(_lantern_randint_intt_atintarrayref_atgenerator_attensoroptions)
  LOAD_SYMBOL(_lantern_randint_intt_intt_atintarrayref_attensoroptions)
  LOAD_SYMBOL(_lantern_randint_intt_intt_atintarrayref_atgenerator_attensoroptions)
  LOAD_SYMBOL(_lantern_randint_out_attensor_intt_atintarrayref)
  LOAD_SYMBOL(_lantern_randint_out_attensor_intt_atintarrayref_atgenerator)
  LOAD_SYMBOL(_lantern_randint_out_attensor_intt_intt_atintarrayref)
  LOAD_SYMBOL(_lantern_randint_out_attensor_intt_intt_atintarrayref_atgenerator)
  LOAD_SYMBOL(_lantern_randint_like_attensor_intt_attensoroptions_atmemoryformat)
  LOAD_SYMBOL(_lantern_randint_like_attensor_intt_intt_attensoroptions_atmemoryformat)
  LOAD_SYMBOL(_lantern_randn_atintarrayref_attensoroptions)
  LOAD_SYMBOL(_lantern_randn_atintarrayref_atgenerator_attensoroptions)
  LOAD_SYMBOL(_lantern_randn_atintarrayref_atdimnamelist_attensoroptions)
  LOAD_SYMBOL(_lantern_randn_atintarrayref_atgenerator_atdimnamelist_attensoroptions)
  LOAD_SYMBOL(_lantern_randn_out_attensor_atintarrayref)
  LOAD_SYMBOL(_lantern_randn_out_attensor_atintarrayref_atgenerator)
  LOAD_SYMBOL(_lantern_randn_like_attensor_attensoroptions_atmemoryformat)
  LOAD_SYMBOL(_lantern_randperm_intt_attensoroptions)
  LOAD_SYMBOL(_lantern_randperm_intt_atgenerator_attensoroptions)
  LOAD_SYMBOL(_lantern_randperm_out_attensor_intt)
  LOAD_SYMBOL(_lantern_randperm_out_attensor_intt_atgenerator)
  LOAD_SYMBOL(_lantern_range_constatscalar_constatscalar_constatscalar_attensoroptions)
  LOAD_SYMBOL(_lantern_range_constatscalar_constatscalar_attensoroptions)
  LOAD_SYMBOL(_lantern_range_out_attensor_constatscalar_constatscalar_constatscalar)
  LOAD_SYMBOL(_lantern_ravel_attensor)
  LOAD_SYMBOL(_lantern_Tensor_ravel_attensor)
  LOAD_SYMBOL(_lantern_reciprocal_attensor)
  LOAD_SYMBOL(_lantern_Tensor_reciprocal_attensor)
  LOAD_SYMBOL(_lantern_reciprocal__attensor)
  LOAD_SYMBOL(_lantern_Tensor_reciprocal__attensor)
  LOAD_SYMBOL(_lantern_reciprocal_out_attensor_attensor)
  LOAD_SYMBOL(_lantern_neg_attensor)
  LOAD_SYMBOL(_lantern_Tensor_neg_attensor)
  LOAD_SYMBOL(_lantern_neg__attensor)
  LOAD_SYMBOL(_lantern_Tensor_neg__attensor)
  LOAD_SYMBOL(_lantern_neg_out_attensor_attensor)
  LOAD_SYMBOL(_lantern_negative_attensor)
  LOAD_SYMBOL(_lantern_Tensor_negative_attensor)
  LOAD_SYMBOL(_lantern_negative__attensor)
  LOAD_SYMBOL(_lantern_Tensor_negative__attensor)
  LOAD_SYMBOL(_lantern_negative_out_attensor_attensor)
  LOAD_SYMBOL(_lantern_Tensor_repeat_attensor_atintarrayref)
  LOAD_SYMBOL(_lantern_repeat_interleave_attensor)
  LOAD_SYMBOL(_lantern_repeat_interleave_attensor_attensor_intt)
  LOAD_SYMBOL(_lantern_Tensor_repeat_interleave_attensor_attensor_intt)
  LOAD_SYMBOL(_lantern_repeat_interleave_attensor_intt_intt)
  LOAD_SYMBOL(_lantern_Tensor_repeat_interleave_attensor_intt_intt)
  LOAD_SYMBOL(_lantern_reshape_attensor_atintarrayref)
  LOAD_SYMBOL(_lantern_Tensor_reshape_attensor_atintarrayref)
  LOAD_SYMBOL(_lantern__mkldnn_reshape_attensor_atintarrayref)
  LOAD_SYMBOL(_lantern_Tensor_reshape_as_attensor_attensor)
  LOAD_SYMBOL(_lantern_round_attensor)
  LOAD_SYMBOL(_lantern_Tensor_round_attensor)
  LOAD_SYMBOL(_lantern_round__attensor)
  LOAD_SYMBOL(_lantern_Tensor_round__attensor)
  LOAD_SYMBOL(_lantern_round_out_attensor_attensor)
  LOAD_SYMBOL(_lantern_rrelu_attensor_constatscalar_constatscalar_bool_atgenerator)
  LOAD_SYMBOL(_lantern_rrelu__attensor_constatscalar_constatscalar_bool_atgenerator)
  LOAD_SYMBOL(_lantern_relu_attensor)
  LOAD_SYMBOL(_lantern_Tensor_relu_attensor)
  LOAD_SYMBOL(_lantern_relu__attensor)
  LOAD_SYMBOL(_lantern_Tensor_relu__attensor)
  LOAD_SYMBOL(_lantern_relu6_attensor)
  LOAD_SYMBOL(_lantern_relu6__attensor)
  LOAD_SYMBOL(_lantern_prelu_attensor_attensor)
  LOAD_SYMBOL(_lantern_Tensor_prelu_attensor_attensor)
  LOAD_SYMBOL(_lantern_prelu_backward_attensor_attensor_attensor)
  LOAD_SYMBOL(_lantern_Tensor_prelu_backward_attensor_attensor_attensor)
  LOAD_SYMBOL(_lantern_gelu_attensor)
  LOAD_SYMBOL(_lantern_gelu_backward_attensor_attensor)
  LOAD_SYMBOL(_lantern_infinitely_differentiable_gelu_backward_attensor_attensor)
  LOAD_SYMBOL(_lantern_hardshrink_attensor_constatscalar)
  LOAD_SYMBOL(_lantern_Tensor_hardshrink_attensor_constatscalar)
  LOAD_SYMBOL(_lantern_hardshrink_backward_attensor_attensor_constatscalar)
  LOAD_SYMBOL(_lantern_Tensor_hardshrink_backward_attensor_attensor_constatscalar)
  LOAD_SYMBOL(_lantern_rsqrt_attensor)
  LOAD_SYMBOL(_lantern_Tensor_rsqrt_attensor)
  LOAD_SYMBOL(_lantern_rsqrt__attensor)
  LOAD_SYMBOL(_lantern_Tensor_rsqrt__attensor)
  LOAD_SYMBOL(_lantern_rsqrt_out_attensor_attensor)
  LOAD_SYMBOL(_lantern_select_attensor_atdimname_intt)
  LOAD_SYMBOL(_lantern_Tensor_select_attensor_atdimname_intt)
  LOAD_SYMBOL(_lantern_select_attensor_intt_intt)
  LOAD_SYMBOL(_lantern_Tensor_select_attensor_intt_intt)
  LOAD_SYMBOL(_lantern_select_backward_attensor_atintarrayref_intt_intt)
  LOAD_SYMBOL(_lantern_selu_attensor)
  LOAD_SYMBOL(_lantern_selu__attensor)
  LOAD_SYMBOL(_lantern_celu_attensor_constatscalar)
  LOAD_SYMBOL(_lantern_celu__attensor_constatscalar)
  LOAD_SYMBOL(_lantern_silu_attensor)
  LOAD_SYMBOL(_lantern_silu__attensor)
  LOAD_SYMBOL(_lantern_silu_out_attensor_attensor)
  LOAD_SYMBOL(_lantern_silu_backward_attensor_attensor)
  LOAD_SYMBOL(_lantern_mish_attensor)
  LOAD_SYMBOL(_lantern_mish__attensor)
  LOAD_SYMBOL(_lantern_mish_out_attensor_attensor)
  LOAD_SYMBOL(_lantern_mish_backward_attensor_attensor)
  LOAD_SYMBOL(_lantern_sigmoid_attensor)
  LOAD_SYMBOL(_lantern_Tensor_sigmoid_attensor)
  LOAD_SYMBOL(_lantern_sigmoid__attensor)
  LOAD_SYMBOL(_lantern_Tensor_sigmoid__attensor)
  LOAD_SYMBOL(_lantern_sigmoid_out_attensor_attensor)
  LOAD_SYMBOL(_lantern_logit_attensor_double)
  LOAD_SYMBOL(_lantern_Tensor_logit_attensor_double)
  LOAD_SYMBOL(_lantern_logit__attensor_double)
  LOAD_SYMBOL(_lantern_Tensor_logit__attensor_double)
  LOAD_SYMBOL(_lantern_logit_out_attensor_attensor_double)
  LOAD_SYMBOL(_lantern_sin_attensor)
  LOAD_SYMBOL(_lantern_Tensor_sin_attensor)
  LOAD_SYMBOL(_lantern_sin__attensor)
  LOAD_SYMBOL(_lantern_Tensor_sin__attensor)
  LOAD_SYMBOL(_lantern_sin_out_attensor_attensor)
  LOAD_SYMBOL(_lantern_sinc_attensor)
  LOAD_SYMBOL(_lantern_Tensor_sinc_attensor)
  LOAD_SYMBOL(_lantern_sinc__attensor)
  LOAD_SYMBOL(_lantern_Tensor_sinc__attensor)
  LOAD_SYMBOL(_lantern_sinc_out_attensor_attensor)
  LOAD_SYMBOL(_lantern_sinh_attensor)
  LOAD_SYMBOL(_lantern_Tensor_sinh_attensor)
  LOAD_SYMBOL(_lantern_sinh__attensor)
  LOAD_SYMBOL(_lantern_Tensor_sinh__attensor)
  LOAD_SYMBOL(_lantern_sinh_out_attensor_attensor)
  LOAD_SYMBOL(_lantern_detach_attensor)
  LOAD_SYMBOL(_lantern_Tensor_detach_attensor)
  LOAD_SYMBOL(_lantern_detach__attensor)
  LOAD_SYMBOL(_lantern_Tensor_detach__attensor)
  LOAD_SYMBOL(_lantern_size_attensor_intt)
  LOAD_SYMBOL(_lantern_size_attensor_atdimname)
  LOAD_SYMBOL(_lantern_Tensor_size_attensor_atdimname)
  LOAD_SYMBOL(_lantern_slice_attensor_intt_intt_intt_intt)
  LOAD_SYMBOL(_lantern_Tensor_slice_attensor_intt_intt_intt_intt)
  LOAD_SYMBOL(_lantern_slice_backward_attensor_atintarrayref_intt_intt_intt_intt)
  LOAD_SYMBOL(_lantern_slogdet_attensor)
  LOAD_SYMBOL(_lantern_Tensor_slogdet_attensor)
  LOAD_SYMBOL(_lantern_smm_attensor_attensor)
  LOAD_SYMBOL(_lantern_Tensor_smm_attensor_attensor)
  LOAD_SYMBOL(_lantern_softmax_attensor_intt_atscalartype)
  LOAD_SYMBOL(_lantern_Tensor_softmax_attensor_intt_atscalartype)
  LOAD_SYMBOL(_lantern_softmax_attensor_atdimname_atscalartype)
  LOAD_SYMBOL(_lantern_Tensor_softmax_attensor_atdimname_atscalartype)
  LOAD_SYMBOL(_lantern__softmax_attensor_intt_bool)
  LOAD_SYMBOL(_lantern__softmax_backward_data_attensor_attensor_intt_attensor)
  LOAD_SYMBOL(_lantern_unsafe_split_attensor_intt_intt)
  LOAD_SYMBOL(_lantern_Tensor_unsafe_split_attensor_intt_intt)
  LOAD_SYMBOL(_lantern_split_attensor_intt_intt)
  LOAD_SYMBOL(_lantern_Tensor_split_attensor_intt_intt)
  LOAD_SYMBOL(_lantern_unsafe_split_with_sizes_attensor_atintarrayref_intt)
  LOAD_SYMBOL(_lantern_Tensor_unsafe_split_with_sizes_attensor_atintarrayref_intt)
  LOAD_SYMBOL(_lantern_split_with_sizes_attensor_atintarrayref_intt)
  LOAD_SYMBOL(_lantern_Tensor_split_with_sizes_attensor_atintarrayref_intt)
  LOAD_SYMBOL(_lantern_hsplit_attensor_intt)
  LOAD_SYMBOL(_lantern_Tensor_hsplit_attensor_intt)
  LOAD_SYMBOL(_lantern_hsplit_attensor_atintarrayref)
  LOAD_SYMBOL(_lantern_Tensor_hsplit_attensor_atintarrayref)
  LOAD_SYMBOL(_lantern_vsplit_attensor_intt)
  LOAD_SYMBOL(_lantern_Tensor_vsplit_attensor_intt)
  LOAD_SYMBOL(_lantern_vsplit_attensor_atintarrayref)
  LOAD_SYMBOL(_lantern_Tensor_vsplit_attensor_atintarrayref)
  LOAD_SYMBOL(_lantern_dsplit_attensor_intt)
  LOAD_SYMBOL(_lantern_Tensor_dsplit_attensor_intt)
  LOAD_SYMBOL(_lantern_dsplit_attensor_atintarrayref)
  LOAD_SYMBOL(_lantern_Tensor_dsplit_attensor_atintarrayref)
  LOAD_SYMBOL(_lantern_squeeze_attensor)
  LOAD_SYMBOL(_lantern_Tensor_squeeze_attensor)
  LOAD_SYMBOL(_lantern_squeeze_attensor_intt)
  LOAD_SYMBOL(_lantern_Tensor_squeeze_attensor_intt)
  LOAD_SYMBOL(_lantern_squeeze_attensor_atdimname)
  LOAD_SYMBOL(_lantern_Tensor_squeeze_attensor_atdimname)
  LOAD_SYMBOL(_lantern_Tensor_squeeze__attensor)
  LOAD_SYMBOL(_lantern_Tensor_squeeze__attensor_intt)
  LOAD_SYMBOL(_lantern_Tensor_squeeze__attensor_atdimname)
  LOAD_SYMBOL(_lantern_sspaddmm_attensor_attensor_attensor_constatscalar_constatscalar)
  LOAD_SYMBOL(_lantern_Tensor_sspaddmm_attensor_attensor_attensor_constatscalar_constatscalar)
  LOAD_SYMBOL(_lantern_sspaddmm_out_attensor_attensor_attensor_attensor_constatscalar_constatscalar)
  LOAD_SYMBOL(_lantern_stack_attensorlist_intt)
  LOAD_SYMBOL(_lantern_stack_out_attensor_attensorlist_intt)
  LOAD_SYMBOL(_lantern__stack_attensorlist_intt)
  LOAD_SYMBOL(_lantern__stack_out_attensor_attensorlist_intt)
  LOAD_SYMBOL(_lantern_hstack_attensorlist)
  LOAD_SYMBOL(_lantern_hstack_out_attensor_attensorlist)
  LOAD_SYMBOL(_lantern_vstack_attensorlist)
  LOAD_SYMBOL(_lantern_vstack_out_attensor_attensorlist)
  LOAD_SYMBOL(_lantern_dstack_attensorlist)
  LOAD_SYMBOL(_lantern_dstack_out_attensor_attensorlist)
  LOAD_SYMBOL(_lantern_stft_attensor_intt_intt_intt_attensor_bool_bool_bool)
  LOAD_SYMBOL(_lantern_Tensor_stft_attensor_intt_intt_intt_attensor_bool_bool_bool)
  LOAD_SYMBOL(_lantern_istft_attensor_intt_intt_intt_attensor_bool_bool_bool_intt_bool)
  LOAD_SYMBOL(_lantern_Tensor_istft_attensor_intt_intt_intt_attensor_bool_bool_bool_intt_bool)
  LOAD_SYMBOL(_lantern_stride_attensor_intt)
  LOAD_SYMBOL(_lantern_Tensor_stride_attensor_intt)
  LOAD_SYMBOL(_lantern_stride_attensor_atdimname)
  LOAD_SYMBOL(_lantern_Tensor_stride_attensor_atdimname)
  LOAD_SYMBOL(_lantern_sum_attensor_atscalartype)
  LOAD_SYMBOL(_lantern_Tensor_sum_attensor_atscalartype)
  LOAD_SYMBOL(_lantern_sum_attensor_atintarrayref_bool_atscalartype)
  LOAD_SYMBOL(_lantern_Tensor_sum_attensor_atintarrayref_bool_atscalartype)
  LOAD_SYMBOL(_lantern_sum_attensor_atdimnamelist_bool_atscalartype)
  LOAD_SYMBOL(_lantern_Tensor_sum_attensor_atdimnamelist_bool_atscalartype)
  LOAD_SYMBOL(_lantern_sum_out_attensor_attensor_atintarrayref_bool_atscalartype)
  LOAD_SYMBOL(_lantern_sum_out_attensor_attensor_atdimnamelist_bool_atscalartype)
  LOAD_SYMBOL(_lantern_nansum_attensor_atscalartype)
  LOAD_SYMBOL(_lantern_Tensor_nansum_attensor_atscalartype)
  LOAD_SYMBOL(_lantern_nansum_attensor_atintarrayref_bool_atscalartype)
  LOAD_SYMBOL(_lantern_Tensor_nansum_attensor_atintarrayref_bool_atscalartype)
  LOAD_SYMBOL(_lantern_nansum_out_attensor_attensor_atintarrayref_bool_atscalartype)
  LOAD_SYMBOL(_lantern_Tensor_sum_to_size_attensor_atintarrayref)
  LOAD_SYMBOL(_lantern_sqrt_attensor)
  LOAD_SYMBOL(_lantern_Tensor_sqrt_attensor)
  LOAD_SYMBOL(_lantern_sqrt__attensor)
  LOAD_SYMBOL(_lantern_Tensor_sqrt__attensor)
  LOAD_SYMBOL(_lantern_sqrt_out_attensor_attensor)
  LOAD_SYMBOL(_lantern_square_attensor)
  LOAD_SYMBOL(_lantern_Tensor_square_attensor)
  LOAD_SYMBOL(_lantern_square__attensor)
  LOAD_SYMBOL(_lantern_Tensor_square__attensor)
  LOAD_SYMBOL(_lantern_square_out_attensor_attensor)
  LOAD_SYMBOL(_lantern_std_attensor_bool)
  LOAD_SYMBOL(_lantern_Tensor_std_attensor_bool)
  LOAD_SYMBOL(_lantern_std_attensor_atintarrayref_bool_bool)
  LOAD_SYMBOL(_lantern_Tensor_std_attensor_atintarrayref_bool_bool)
  LOAD_SYMBOL(_lantern_std_attensor_atintarrayref_intt_bool)
  LOAD_SYMBOL(_lantern_Tensor_std_attensor_atintarrayref_intt_bool)
  LOAD_SYMBOL(_lantern_std_mean_attensor_bool)
  LOAD_SYMBOL(_lantern_std_mean_attensor_atintarrayref_bool_bool)
  LOAD_SYMBOL(_lantern_std_mean_attensor_atintarrayref_intt_bool)
  LOAD_SYMBOL(_lantern_std_mean_attensor_atdimnamelist_bool_bool)
  LOAD_SYMBOL(_lantern_std_mean_attensor_atdimnamelist_intt_bool)
  LOAD_SYMBOL(_lantern_std_out_attensor_attensor_atintarrayref_bool_bool)
  LOAD_SYMBOL(_lantern_std_out_attensor_attensor_atintarrayref_intt_bool)
  LOAD_SYMBOL(_lantern_std_attensor_atdimnamelist_bool_bool)
  LOAD_SYMBOL(_lantern_Tensor_std_attensor_atdimnamelist_bool_bool)
  LOAD_SYMBOL(_lantern_std_out_attensor_attensor_atdimnamelist_bool_bool)
  LOAD_SYMBOL(_lantern_std_attensor_atdimnamelist_intt_bool)
  LOAD_SYMBOL(_lantern_Tensor_std_attensor_atdimnamelist_intt_bool)
  LOAD_SYMBOL(_lantern_std_out_attensor_attensor_atdimnamelist_intt_bool)
  LOAD_SYMBOL(_lantern_prod_attensor_atscalartype)
  LOAD_SYMBOL(_lantern_Tensor_prod_attensor_atscalartype)
  LOAD_SYMBOL(_lantern_prod_attensor_intt_bool_atscalartype)
  LOAD_SYMBOL(_lantern_Tensor_prod_attensor_intt_bool_atscalartype)
  LOAD_SYMBOL(_lantern_prod_out_attensor_attensor_intt_bool_atscalartype)
  LOAD_SYMBOL(_lantern_prod_attensor_atdimname_bool_atscalartype)
  LOAD_SYMBOL(_lantern_Tensor_prod_attensor_atdimname_bool_atscalartype)
  LOAD_SYMBOL(_lantern_prod_out_attensor_attensor_atdimname_bool_atscalartype)
  LOAD_SYMBOL(_lantern_t_attensor)
  LOAD_SYMBOL(_lantern_Tensor_t_attensor)
  LOAD_SYMBOL(_lantern_Tensor_t__attensor)
  LOAD_SYMBOL(_lantern_tan_attensor)
  LOAD_SYMBOL(_lantern_Tensor_tan_attensor)
  LOAD_SYMBOL(_lantern_tan__attensor)
  LOAD_SYMBOL(_lantern_Tensor_tan__attensor)
  LOAD_SYMBOL(_lantern_tan_out_attensor_attensor)
  LOAD_SYMBOL(_lantern_tanh_attensor)
  LOAD_SYMBOL(_lantern_Tensor_tanh_attensor)
  LOAD_SYMBOL(_lantern_tanh__attensor)
  LOAD_SYMBOL(_lantern_Tensor_tanh__attensor)
  LOAD_SYMBOL(_lantern_tanh_out_attensor_attensor)
  LOAD_SYMBOL(_lantern_tensordot_attensor_attensor_atintarrayref_atintarrayref)
  LOAD_SYMBOL(_lantern_tensordot_out_attensor_attensor_attensor_atintarrayref_atintarrayref)
  LOAD_SYMBOL(_lantern_threshold_attensor_constatscalar_constatscalar)
  LOAD_SYMBOL(_lantern_threshold__attensor_constatscalar_constatscalar)
  LOAD_SYMBOL(_lantern_threshold_out_attensor_attensor_constatscalar_constatscalar)
  LOAD_SYMBOL(_lantern_threshold_backward_out_attensor_attensor_attensor_constatscalar)
  LOAD_SYMBOL(_lantern_threshold_backward_attensor_attensor_constatscalar)
  LOAD_SYMBOL(_lantern_tile_attensor_atintarrayref)
  LOAD_SYMBOL(_lantern_Tensor_tile_attensor_atintarrayref)
  LOAD_SYMBOL(_lantern_transpose_attensor_intt_intt)
  LOAD_SYMBOL(_lantern_Tensor_transpose_attensor_intt_intt)
  LOAD_SYMBOL(_lantern_transpose_attensor_atdimname_atdimname)
  LOAD_SYMBOL(_lantern_Tensor_transpose_attensor_atdimname_atdimname)
  LOAD_SYMBOL(_lantern__mkldnn_transpose_attensor_intt_intt)
  LOAD_SYMBOL(_lantern_Tensor_transpose__attensor_intt_intt)
  LOAD_SYMBOL(_lantern__mkldnn_transpose__attensor_intt_intt)
  LOAD_SYMBOL(_lantern_one_hot_attensor_intt)
  LOAD_SYMBOL(_lantern_flip_attensor_atintarrayref)
  LOAD_SYMBOL(_lantern_Tensor_flip_attensor_atintarrayref)
  LOAD_SYMBOL(_lantern_fliplr_attensor)
  LOAD_SYMBOL(_lantern_Tensor_fliplr_attensor)
  LOAD_SYMBOL(_lantern_flipud_attensor)
  LOAD_SYMBOL(_lantern_Tensor_flipud_attensor)
  LOAD_SYMBOL(_lantern_roll_attensor_atintarrayref_atintarrayref)
  LOAD_SYMBOL(_lantern_Tensor_roll_attensor_atintarrayref_atintarrayref)
  LOAD_SYMBOL(_lantern_rot90_attensor_intt_atintarrayref)
  LOAD_SYMBOL(_lantern_Tensor_rot90_attensor_intt_atintarrayref)
  LOAD_SYMBOL(_lantern_trapz_attensor_attensor_intt)
  LOAD_SYMBOL(_lantern_trapz_attensor_double_intt)
  LOAD_SYMBOL(_lantern__trilinear_attensor_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_atintarrayref_intt)
  LOAD_SYMBOL(_lantern_triplet_margin_loss_attensor_attensor_attensor_double_double_double_bool_intt)
  LOAD_SYMBOL(_lantern_trunc_attensor)
  LOAD_SYMBOL(_lantern_Tensor_trunc_attensor)
  LOAD_SYMBOL(_lantern_trunc__attensor)
  LOAD_SYMBOL(_lantern_Tensor_trunc__attensor)
  LOAD_SYMBOL(_lantern_trunc_out_attensor_attensor)
  LOAD_SYMBOL(_lantern_fix_attensor)
  LOAD_SYMBOL(_lantern_Tensor_fix_attensor)
  LOAD_SYMBOL(_lantern_fix__attensor)
  LOAD_SYMBOL(_lantern_Tensor_fix__attensor)
  LOAD_SYMBOL(_lantern_fix_out_attensor_attensor)
  LOAD_SYMBOL(_lantern_Tensor_type_as_attensor_attensor)
  LOAD_SYMBOL(_lantern__has_compatible_shallow_copy_type_attensor_attensor)
  LOAD_SYMBOL(_lantern__unique_attensor_bool_bool)
  LOAD_SYMBOL(_lantern_unique_dim_attensor_intt_bool_bool_bool)
  LOAD_SYMBOL(_lantern_unique_consecutive_attensor_bool_bool_intt)
  LOAD_SYMBOL(_lantern_unique_dim_consecutive_attensor_intt_bool_bool)
  LOAD_SYMBOL(_lantern__unique2_attensor_bool_bool_bool)
  LOAD_SYMBOL(_lantern__unsafe_view_attensor_atintarrayref)
  LOAD_SYMBOL(_lantern_unsqueeze_attensor_intt)
  LOAD_SYMBOL(_lantern_Tensor_unsqueeze_attensor_intt)
  LOAD_SYMBOL(_lantern_Tensor_unsqueeze__attensor_intt)
  LOAD_SYMBOL(_lantern_vander_attensor_intt_bool)
  LOAD_SYMBOL(_lantern_var_attensor_bool)
  LOAD_SYMBOL(_lantern_Tensor_var_attensor_bool)
  LOAD_SYMBOL(_lantern_var_attensor_atintarrayref_bool_bool)
  LOAD_SYMBOL(_lantern_Tensor_var_attensor_atintarrayref_bool_bool)
  LOAD_SYMBOL(_lantern_var_attensor_atintarrayref_intt_bool)
  LOAD_SYMBOL(_lantern_Tensor_var_attensor_atintarrayref_intt_bool)
  LOAD_SYMBOL(_lantern_var_out_attensor_attensor_atintarrayref_bool_bool)
  LOAD_SYMBOL(_lantern_var_out_attensor_attensor_atintarrayref_intt_bool)
  LOAD_SYMBOL(_lantern_var_attensor_atdimnamelist_bool_bool)
  LOAD_SYMBOL(_lantern_Tensor_var_attensor_atdimnamelist_bool_bool)
  LOAD_SYMBOL(_lantern_var_out_attensor_attensor_atdimnamelist_bool_bool)
  LOAD_SYMBOL(_lantern_var_attensor_atdimnamelist_intt_bool)
  LOAD_SYMBOL(_lantern_Tensor_var_attensor_atdimnamelist_intt_bool)
  LOAD_SYMBOL(_lantern_var_out_attensor_attensor_atdimnamelist_intt_bool)
  LOAD_SYMBOL(_lantern_var_mean_attensor_bool)
  LOAD_SYMBOL(_lantern_var_mean_attensor_atintarrayref_bool_bool)
  LOAD_SYMBOL(_lantern_var_mean_attensor_atintarrayref_intt_bool)
  LOAD_SYMBOL(_lantern_var_mean_attensor_atdimnamelist_bool_bool)
  LOAD_SYMBOL(_lantern_var_mean_attensor_atdimnamelist_intt_bool)
  LOAD_SYMBOL(_lantern_Tensor_view_as_attensor_attensor)
  LOAD_SYMBOL(_lantern_where_attensor_attensor_attensor)
  LOAD_SYMBOL(_lantern_Tensor_where_attensor_attensor_attensor)
  LOAD_SYMBOL(_lantern_where_attensor_constatscalar_attensor)
  LOAD_SYMBOL(_lantern_where_attensor_attensor_constatscalar)
  LOAD_SYMBOL(_lantern_where_attensor_constatscalar_constatscalar)
  LOAD_SYMBOL(_lantern_where_attensor)
  LOAD_SYMBOL(_lantern__s_where_attensor_attensor_attensor)
  LOAD_SYMBOL(_lantern_norm_except_dim_attensor_intt_intt)
  LOAD_SYMBOL(_lantern__weight_norm_attensor_attensor_intt)
  LOAD_SYMBOL(_lantern__weight_norm_cuda_interface_attensor_attensor_intt)
  LOAD_SYMBOL(_lantern__weight_norm_cuda_interface_backward_attensor_attensor_attensor_attensor_intt)
  LOAD_SYMBOL(_lantern__weight_norm_differentiable_backward_attensor_attensor_attensor_attensor_intt)
  LOAD_SYMBOL(_lantern_zeros_atintarrayref_atdimnamelist_attensoroptions)
  LOAD_SYMBOL(_lantern_zeros_atintarrayref_attensoroptions)
  LOAD_SYMBOL(_lantern_zeros_out_attensor_atintarrayref)
  LOAD_SYMBOL(_lantern_zeros_like_attensor_attensoroptions_atmemoryformat)
  LOAD_SYMBOL(_lantern__standard_gamma_grad_attensor_attensor)
  LOAD_SYMBOL(_lantern__standard_gamma_attensor_atgenerator)
  LOAD_SYMBOL(_lantern__dirichlet_grad_attensor_attensor_attensor)
  LOAD_SYMBOL(_lantern__sample_dirichlet_attensor_atgenerator)
  LOAD_SYMBOL(_lantern_poisson_attensor_atgenerator)
  LOAD_SYMBOL(_lantern_binomial_attensor_attensor_atgenerator)
  LOAD_SYMBOL(_lantern_native_norm_attensor_constatscalar)
  LOAD_SYMBOL(_lantern_native_norm_attensor_constatscalar_atintarrayref_bool_atscalartype)
  LOAD_SYMBOL(_lantern__sparse_sum_attensor)
  LOAD_SYMBOL(_lantern__sparse_sum_attensor_atscalartype)
  LOAD_SYMBOL(_lantern__sparse_sum_attensor_atintarrayref)
  LOAD_SYMBOL(_lantern__sparse_sum_attensor_atintarrayref_atscalartype)
  LOAD_SYMBOL(_lantern__sparse_sum_backward_attensor_attensor_atintarrayref)
  LOAD_SYMBOL(_lantern__sparse_softmax_attensor_intt_atscalartype)
  LOAD_SYMBOL(_lantern__sparse_softmax_attensor_atdimname_atscalartype)
  LOAD_SYMBOL(_lantern__sparse_softmax_attensor_intt_bool)
  LOAD_SYMBOL(_lantern__sparse_softmax_backward_data_attensor_attensor_intt_attensor)
  LOAD_SYMBOL(_lantern__sparse_log_softmax_attensor_intt_atscalartype)
  LOAD_SYMBOL(_lantern__sparse_log_softmax_attensor_atdimname_atscalartype)
  LOAD_SYMBOL(_lantern__sparse_log_softmax_attensor_intt_bool)
  LOAD_SYMBOL(_lantern__sparse_log_softmax_backward_data_attensor_attensor_intt_attensor)
  LOAD_SYMBOL(_lantern_norm_attensor_constatscalar_atscalartype)
  LOAD_SYMBOL(_lantern_Tensor_norm_attensor_constatscalar_atscalartype)
  LOAD_SYMBOL(_lantern_norm_attensor_constatscalar)
  LOAD_SYMBOL(_lantern_Tensor_norm_attensor_constatscalar)
  LOAD_SYMBOL(_lantern_norm_attensor_constatscalar_atintarrayref_bool_atscalartype)
  LOAD_SYMBOL(_lantern_Tensor_norm_attensor_constatscalar_atintarrayref_bool_atscalartype)
  LOAD_SYMBOL(_lantern_norm_attensor_constatscalar_atintarrayref_bool)
  LOAD_SYMBOL(_lantern_Tensor_norm_attensor_constatscalar_atintarrayref_bool)
  LOAD_SYMBOL(_lantern_norm_out_attensor_attensor_constatscalar_atintarrayref_bool_atscalartype)
  LOAD_SYMBOL(_lantern_norm_out_attensor_attensor_constatscalar_atintarrayref_bool)
  LOAD_SYMBOL(_lantern_norm_attensor_constatscalar_atdimnamelist_bool_atscalartype)
  LOAD_SYMBOL(_lantern_Tensor_norm_attensor_constatscalar_atdimnamelist_bool_atscalartype)
  LOAD_SYMBOL(_lantern_norm_attensor_constatscalar_atdimnamelist_bool)
  LOAD_SYMBOL(_lantern_Tensor_norm_attensor_constatscalar_atdimnamelist_bool)
  LOAD_SYMBOL(_lantern_norm_out_attensor_attensor_constatscalar_atdimnamelist_bool_atscalartype)
  LOAD_SYMBOL(_lantern_norm_out_attensor_attensor_constatscalar_atdimnamelist_bool)
  LOAD_SYMBOL(_lantern_frexp_attensor)
  LOAD_SYMBOL(_lantern_Tensor_frexp_attensor)
  LOAD_SYMBOL(_lantern_frexp_out_attensor_attensor_attensor)
  LOAD_SYMBOL(_lantern_frobenius_norm_attensor)
  LOAD_SYMBOL(_lantern_frobenius_norm_attensor_atintarrayref_bool)
  LOAD_SYMBOL(_lantern_frobenius_norm_out_attensor_attensor_atintarrayref_bool)
  LOAD_SYMBOL(_lantern_nuclear_norm_attensor_bool)
  LOAD_SYMBOL(_lantern_nuclear_norm_out_attensor_attensor_bool)
  LOAD_SYMBOL(_lantern_nuclear_norm_attensor_atintarrayref_bool)
  LOAD_SYMBOL(_lantern_nuclear_norm_out_attensor_attensor_atintarrayref_bool)
  LOAD_SYMBOL(_lantern_clone_attensor_atmemoryformat)
  LOAD_SYMBOL(_lantern_Tensor_clone_attensor_atmemoryformat)
  LOAD_SYMBOL(_lantern_positive_attensor)
  LOAD_SYMBOL(_lantern_Tensor_positive_attensor)
  LOAD_SYMBOL(_lantern_resize_as__attensor_attensor_atmemoryformat)
  LOAD_SYMBOL(_lantern_Tensor_resize_as__attensor_attensor_atmemoryformat)
  LOAD_SYMBOL(_lantern_resize_as_sparse__attensor_attensor)
  LOAD_SYMBOL(_lantern_zero__attensor)
  LOAD_SYMBOL(_lantern_Tensor_zero__attensor)
  LOAD_SYMBOL(_lantern_sub_out_attensor_attensor_attensor_constatscalar)
  LOAD_SYMBOL(_lantern_sub_attensor_attensor_constatscalar)
  LOAD_SYMBOL(_lantern_Tensor_sub_attensor_attensor_constatscalar)
  LOAD_SYMBOL(_lantern_Tensor_sub__attensor_attensor_constatscalar)
  LOAD_SYMBOL(_lantern_sub_attensor_constatscalar_constatscalar)
  LOAD_SYMBOL(_lantern_Tensor_sub_attensor_constatscalar_constatscalar)
  LOAD_SYMBOL(_lantern_Tensor_sub__attensor_constatscalar_constatscalar)
  LOAD_SYMBOL(_lantern_subtract_out_attensor_attensor_attensor_constatscalar)
  LOAD_SYMBOL(_lantern_subtract_attensor_attensor_constatscalar)
  LOAD_SYMBOL(_lantern_Tensor_subtract_attensor_attensor_constatscalar)
  LOAD_SYMBOL(_lantern_Tensor_subtract__attensor_attensor_constatscalar)
  LOAD_SYMBOL(_lantern_subtract_attensor_constatscalar_constatscalar)
  LOAD_SYMBOL(_lantern_Tensor_subtract_attensor_constatscalar_constatscalar)
  LOAD_SYMBOL(_lantern_Tensor_subtract__attensor_constatscalar_constatscalar)
  LOAD_SYMBOL(_lantern_rsub_attensor_attensor_constatscalar)
  LOAD_SYMBOL(_lantern_heaviside_out_attensor_attensor_attensor)
  LOAD_SYMBOL(_lantern_heaviside_attensor_attensor)
  LOAD_SYMBOL(_lantern_Tensor_heaviside_attensor_attensor)
  LOAD_SYMBOL(_lantern_Tensor_heaviside__attensor_attensor)
  LOAD_SYMBOL(_lantern_rsub_attensor_constatscalar_constatscalar)
  LOAD_SYMBOL(_lantern__sparse_addmm_attensor_attensor_attensor_constatscalar_constatscalar)
  LOAD_SYMBOL(_lantern_addmm_out_attensor_attensor_attensor_attensor_constatscalar_constatscalar)
  LOAD_SYMBOL(_lantern_addmm_attensor_attensor_attensor_constatscalar_constatscalar)
  LOAD_SYMBOL(_lantern_Tensor_addmm_attensor_attensor_attensor_constatscalar_constatscalar)
  LOAD_SYMBOL(_lantern_Tensor_addmm__attensor_attensor_attensor_constatscalar_constatscalar)
  LOAD_SYMBOL(_lantern__sparse_csr_tensor_attensor_attensor_attensor_atintarrayref_attensoroptions)
  LOAD_SYMBOL(_lantern__sparse_csr_tensor_attensor_attensor_attensor_attensoroptions)
  LOAD_SYMBOL(_lantern_sparse_coo_tensor_atintarrayref_attensoroptions)
  LOAD_SYMBOL(_lantern_sparse_coo_tensor_attensor_attensor_attensoroptions)
  LOAD_SYMBOL(_lantern_sparse_coo_tensor_attensor_attensor_atintarrayref_attensoroptions)
  LOAD_SYMBOL(_lantern__sparse_coo_tensor_unsafe_attensor_attensor_atintarrayref_attensoroptions)
  LOAD_SYMBOL(_lantern__validate_sparse_coo_tensor_args_attensor_attensor_atintarrayref)
  LOAD_SYMBOL(_lantern__sparse_coo_tensor_with_dims_intt_intt_atintarrayref_attensoroptions)
  LOAD_SYMBOL(_lantern__sparse_coo_tensor_with_dims_and_tensors_intt_intt_atintarrayref_attensor_attensor_attensoroptions)
  LOAD_SYMBOL(_lantern_Tensor_sparse_resize__attensor_atintarrayref_intt_intt)
  LOAD_SYMBOL(_lantern_Tensor_sparse_resize_and_clear__attensor_atintarrayref_intt_intt)
  LOAD_SYMBOL(_lantern_Tensor_sparse_mask_attensor_attensor)
  LOAD_SYMBOL(_lantern_Tensor_to_dense_attensor_atscalartype)
  LOAD_SYMBOL(_lantern_to_dense_backward_attensor_attensor)
  LOAD_SYMBOL(_lantern_Tensor_sparse_dim_attensor)
  LOAD_SYMBOL(_lantern_Tensor__dimi_attensor)
  LOAD_SYMBOL(_lantern_Tensor_dense_dim_attensor)
  LOAD_SYMBOL(_lantern_Tensor__dimv_attensor)
  LOAD_SYMBOL(_lantern_Tensor__nnz_attensor)
  LOAD_SYMBOL(_lantern_Tensor_coalesce_attensor)
  LOAD_SYMBOL(_lantern__coalesce_attensor)
  LOAD_SYMBOL(_lantern_Tensor_is_coalesced_attensor)
  LOAD_SYMBOL(_lantern_Tensor__indices_attensor)
  LOAD_SYMBOL(_lantern_Tensor__values_attensor)
  LOAD_SYMBOL(_lantern_Tensor__coalesced__attensor_bool)
  LOAD_SYMBOL(_lantern_Tensor_indices_attensor)
  LOAD_SYMBOL(_lantern_Tensor_values_attensor)
  LOAD_SYMBOL(_lantern_Tensor_crow_indices_attensor)
  LOAD_SYMBOL(_lantern_Tensor_col_indices_attensor)
  LOAD_SYMBOL(_lantern_hspmm_out_attensor_attensor_attensor)
  LOAD_SYMBOL(_lantern_hspmm_attensor_attensor)
  LOAD_SYMBOL(_lantern_copy_sparse_to_sparse__attensor_attensor_bool)
  LOAD_SYMBOL(_lantern_unbind_attensor_intt)
  LOAD_SYMBOL(_lantern_Tensor_unbind_attensor_intt)
  LOAD_SYMBOL(_lantern_unbind_attensor_atdimname)
  LOAD_SYMBOL(_lantern_Tensor_unbind_attensor_atdimname)
  LOAD_SYMBOL(_lantern_Tensor_to_sparse_attensor_intt)
  LOAD_SYMBOL(_lantern_Tensor_to_sparse_attensor)
  LOAD_SYMBOL(_lantern_Tensor_to_mkldnn_attensor_atscalartype)
  LOAD_SYMBOL(_lantern_mkldnn_reorder_conv2d_weight_attensor_atintarrayref_atintarrayref_atintarrayref_intt)
  LOAD_SYMBOL(_lantern_mkldnn_reorder_conv3d_weight_attensor_atintarrayref_atintarrayref_atintarrayref_intt)
  LOAD_SYMBOL(_lantern_to_mkldnn_backward_attensor_attensor)
  LOAD_SYMBOL(_lantern_quantize_per_tensor_attensor_double_intt_atscalartype)
  LOAD_SYMBOL(_lantern_quantize_per_tensor_attensorlist_attensor_attensor_atscalartype)
  LOAD_SYMBOL(_lantern_quantize_per_channel_attensor_attensor_attensor_intt_atscalartype)
  LOAD_SYMBOL(_lantern_dequantize_attensor)
  LOAD_SYMBOL(_lantern_Tensor_dequantize_attensor)
  LOAD_SYMBOL(_lantern_dequantize_attensorlist)
  LOAD_SYMBOL(_lantern_q_scale_attensor)
  LOAD_SYMBOL(_lantern_Tensor_q_scale_attensor)
  LOAD_SYMBOL(_lantern_q_zero_point_attensor)
  LOAD_SYMBOL(_lantern_Tensor_q_zero_point_attensor)
  LOAD_SYMBOL(_lantern_q_per_channel_scales_attensor)
  LOAD_SYMBOL(_lantern_Tensor_q_per_channel_scales_attensor)
  LOAD_SYMBOL(_lantern_q_per_channel_zero_points_attensor)
  LOAD_SYMBOL(_lantern_Tensor_q_per_channel_zero_points_attensor)
  LOAD_SYMBOL(_lantern_q_per_channel_axis_attensor)
  LOAD_SYMBOL(_lantern_Tensor_q_per_channel_axis_attensor)
  LOAD_SYMBOL(_lantern_int_repr_attensor)
  LOAD_SYMBOL(_lantern_Tensor_int_repr_attensor)
  LOAD_SYMBOL(_lantern__make_per_tensor_quantized_tensor_attensor_double_intt)
  LOAD_SYMBOL(_lantern__make_per_channel_quantized_tensor_attensor_attensor_attensor_intt)
  LOAD_SYMBOL(_lantern_Tensor_qscheme_attensor)
  LOAD_SYMBOL(_lantern_fake_quantize_per_tensor_affine_attensor_double_intt_intt_intt)
  LOAD_SYMBOL(_lantern_fake_quantize_per_tensor_affine_cachemask_attensor_double_intt_intt_intt)
  LOAD_SYMBOL(_lantern_fake_quantize_per_tensor_affine_cachemask_backward_attensor_attensor)
  LOAD_SYMBOL(_lantern__fake_quantize_learnable_per_tensor_affine_attensor_attensor_attensor_intt_intt_double)
  LOAD_SYMBOL(_lantern__fake_quantize_learnable_per_tensor_affine_backward_attensor_attensor_attensor_attensor_intt_intt_double)
  LOAD_SYMBOL(_lantern_fake_quantize_per_channel_affine_attensor_attensor_attensor_intt_intt_intt)
  LOAD_SYMBOL(_lantern_fake_quantize_per_channel_affine_cachemask_attensor_attensor_attensor_intt_intt_intt)
  LOAD_SYMBOL(_lantern_fake_quantize_per_channel_affine_cachemask_backward_attensor_attensor)
  LOAD_SYMBOL(_lantern__fake_quantize_learnable_per_channel_affine_attensor_attensor_attensor_intt_intt_intt_double)
  LOAD_SYMBOL(_lantern__fake_quantize_learnable_per_channel_affine_backward_attensor_attensor_attensor_attensor_intt_intt_intt_double)
  LOAD_SYMBOL(_lantern__choose_qparams_per_tensor_attensor_bool)
  LOAD_SYMBOL(_lantern__saturate_weight_to_fp16_attensor)
  LOAD_SYMBOL(_lantern_choose_qparams_optimized_attensor_intt_intt_double_intt)
  LOAD_SYMBOL(_lantern_Tensor_to_attensor_attensoroptions_bool_bool_atmemoryformat)
  LOAD_SYMBOL(_lantern_Tensor_to_attensor_atdevice_atscalartype_bool_bool_atmemoryformat)
  LOAD_SYMBOL(_lantern_Tensor_to_attensor_atscalartype_bool_bool_atmemoryformat)
  LOAD_SYMBOL(_lantern_Tensor_to_attensor_attensor_bool_bool_atmemoryformat)
  LOAD_SYMBOL(_lantern_meshgrid_attensorlist)
  LOAD_SYMBOL(_lantern_cartesian_prod_attensorlist)
  LOAD_SYMBOL(_lantern_combinations_attensor_intt_bool)
  LOAD_SYMBOL(_lantern_Tensor_item_attensor)
  LOAD_SYMBOL(_lantern_result_type_attensor_attensor)
  LOAD_SYMBOL(_lantern_result_type_attensor_constatscalar)
  LOAD_SYMBOL(_lantern_result_type_constatscalar_attensor)
  LOAD_SYMBOL(_lantern_result_type_constatscalar_constatscalar)
  LOAD_SYMBOL(_lantern_can_cast_atscalartype_atscalartype)
  LOAD_SYMBOL(_lantern_promote_types_atscalartype_atscalartype)
  LOAD_SYMBOL(_lantern__local_scalar_dense_attensor)
  LOAD_SYMBOL(_lantern__thnn_fused_lstm_cell_attensor_attensor_attensor_attensor_attensor)
  LOAD_SYMBOL(_lantern__thnn_fused_lstm_cell_backward_attensor_attensor_attensor_attensor_attensor_bool)
  LOAD_SYMBOL(_lantern__thnn_differentiable_lstm_cell_backward_attensor_attensor_attensor_attensor_attensor_attensor_attensor_attensor)
  LOAD_SYMBOL(_lantern__thnn_fused_gru_cell_attensor_attensor_attensor_attensor_attensor)
  LOAD_SYMBOL(_lantern__thnn_fused_gru_cell_backward_attensor_attensor_bool)
  LOAD_SYMBOL(_lantern__thnn_differentiable_gru_cell_backward_attensor_attensor_attensor_attensor_attensor_attensor)
  LOAD_SYMBOL(_lantern_lstm_attensor_attensorlist_attensorlist_bool_intt_double_bool_bool_bool)
  LOAD_SYMBOL(_lantern_lstm_attensor_attensor_attensorlist_attensorlist_bool_intt_double_bool_bool)
  LOAD_SYMBOL(_lantern_gru_attensor_attensor_attensorlist_bool_intt_double_bool_bool_bool)
  LOAD_SYMBOL(_lantern_gru_attensor_attensor_attensor_attensorlist_bool_intt_double_bool_bool)
  LOAD_SYMBOL(_lantern_rnn_tanh_attensor_attensor_attensorlist_bool_intt_double_bool_bool_bool)
  LOAD_SYMBOL(_lantern_rnn_tanh_attensor_attensor_attensor_attensorlist_bool_intt_double_bool_bool)
  LOAD_SYMBOL(_lantern_rnn_relu_attensor_attensor_attensorlist_bool_intt_double_bool_bool_bool)
  LOAD_SYMBOL(_lantern_rnn_relu_attensor_attensor_attensor_attensorlist_bool_intt_double_bool_bool)
  LOAD_SYMBOL(_lantern_lstm_cell_attensor_attensorlist_attensor_attensor_attensor_attensor)
  LOAD_SYMBOL(_lantern_gru_cell_attensor_attensor_attensor_attensor_attensor_attensor)
  LOAD_SYMBOL(_lantern_rnn_tanh_cell_attensor_attensor_attensor_attensor_attensor_attensor)
  LOAD_SYMBOL(_lantern_rnn_relu_cell_attensor_attensor_attensor_attensor_attensor_attensor)
  LOAD_SYMBOL(_lantern_quantized_lstm_cell_attensor_attensorlist_attensor_attensor_attensor_attensor_attensor_attensor_attensor_attensor_constatscalar_constatscalar_constatscalar_constatscalar)
  LOAD_SYMBOL(_lantern_quantized_gru_cell_attensor_attensor_attensor_attensor_attensor_attensor_attensor_attensor_attensor_attensor_constatscalar_constatscalar_constatscalar_constatscalar)
  LOAD_SYMBOL(_lantern_quantized_rnn_relu_cell_attensor_attensor_attensor_attensor_attensor_attensor_attensor_attensor_attensor_attensor_constatscalar_constatscalar_constatscalar_constatscalar)
  LOAD_SYMBOL(_lantern_quantized_rnn_tanh_cell_attensor_attensor_attensor_attensor_attensor_attensor_attensor_attensor_attensor_attensor_constatscalar_constatscalar_constatscalar_constatscalar)
  LOAD_SYMBOL(_lantern__pack_padded_sequence_attensor_attensor_bool)
  LOAD_SYMBOL(_lantern__pack_padded_sequence_backward_attensor_atintarrayref_attensor_bool)
  LOAD_SYMBOL(_lantern__pad_packed_sequence_attensor_attensor_bool_constatscalar_intt)
  LOAD_SYMBOL(_lantern_Tensor_set__attensor_atstorage)
  LOAD_SYMBOL(_lantern_Tensor_set__attensor_atstorage_intt_atintarrayref_atintarrayref)
  LOAD_SYMBOL(_lantern_Tensor_set__attensor_attensor)
  LOAD_SYMBOL(_lantern_Tensor_set__attensor)
  LOAD_SYMBOL(_lantern_Tensor_is_set_to_attensor_attensor)
  LOAD_SYMBOL(_lantern_Tensor_masked_fill__attensor_attensor_constatscalar)
  LOAD_SYMBOL(_lantern_masked_fill_attensor_attensor_constatscalar)
  LOAD_SYMBOL(_lantern_Tensor_masked_fill_attensor_attensor_constatscalar)
  LOAD_SYMBOL(_lantern_Tensor_masked_fill__attensor_attensor_attensor)
  LOAD_SYMBOL(_lantern_masked_fill_attensor_attensor_attensor)
  LOAD_SYMBOL(_lantern_Tensor_masked_fill_attensor_attensor_attensor)
  LOAD_SYMBOL(_lantern_Tensor_masked_scatter__attensor_attensor_attensor)
  LOAD_SYMBOL(_lantern_masked_scatter_attensor_attensor_attensor)
  LOAD_SYMBOL(_lantern_Tensor_masked_scatter_attensor_attensor_attensor)
  LOAD_SYMBOL(_lantern_Tensor_view_attensor_atintarrayref)
  LOAD_SYMBOL(_lantern_Tensor_view_attensor_atscalartype)
  LOAD_SYMBOL(_lantern_Tensor_put__attensor_attensor_attensor_bool)
  LOAD_SYMBOL(_lantern_put_attensor_attensor_attensor_bool)
  LOAD_SYMBOL(_lantern_Tensor_put_attensor_attensor_attensor_bool)
  LOAD_SYMBOL(_lantern_Tensor_index_add__attensor_intt_attensor_attensor)
  LOAD_SYMBOL(_lantern_Tensor_index_add__attensor_intt_attensor_attensor_constatscalar)
  LOAD_SYMBOL(_lantern_index_add_attensor_intt_attensor_attensor)
  LOAD_SYMBOL(_lantern_Tensor_index_add_attensor_intt_attensor_attensor)
  LOAD_SYMBOL(_lantern_index_add_attensor_intt_attensor_attensor_constatscalar)
  LOAD_SYMBOL(_lantern_Tensor_index_add_attensor_intt_attensor_attensor_constatscalar)
  LOAD_SYMBOL(_lantern_index_add_attensor_atdimname_attensor_attensor_constatscalar)
  LOAD_SYMBOL(_lantern_Tensor_index_add_attensor_atdimname_attensor_attensor_constatscalar)
  LOAD_SYMBOL(_lantern_Tensor_index_fill__attensor_intt_attensor_constatscalar)
  LOAD_SYMBOL(_lantern_index_fill_attensor_intt_attensor_constatscalar)
  LOAD_SYMBOL(_lantern_Tensor_index_fill_attensor_intt_attensor_constatscalar)
  LOAD_SYMBOL(_lantern_Tensor_index_fill__attensor_intt_attensor_attensor)
  LOAD_SYMBOL(_lantern_index_fill_attensor_intt_attensor_attensor)
  LOAD_SYMBOL(_lantern_Tensor_index_fill_attensor_intt_attensor_attensor)
  LOAD_SYMBOL(_lantern_Tensor_index_fill__attensor_atdimname_attensor_constatscalar)
  LOAD_SYMBOL(_lantern_Tensor_index_fill__attensor_atdimname_attensor_attensor)
  LOAD_SYMBOL(_lantern_index_fill_attensor_atdimname_attensor_constatscalar)
  LOAD_SYMBOL(_lantern_Tensor_index_fill_attensor_atdimname_attensor_constatscalar)
  LOAD_SYMBOL(_lantern_index_fill_attensor_atdimname_attensor_attensor)
  LOAD_SYMBOL(_lantern_Tensor_index_fill_attensor_atdimname_attensor_attensor)
  LOAD_SYMBOL(_lantern_Tensor_scatter__attensor_intt_attensor_attensor)
  LOAD_SYMBOL(_lantern_scatter_attensor_intt_attensor_attensor)
  LOAD_SYMBOL(_lantern_Tensor_scatter_attensor_intt_attensor_attensor)
  LOAD_SYMBOL(_lantern_Tensor_scatter__attensor_intt_attensor_constatscalar)
  LOAD_SYMBOL(_lantern_scatter_attensor_intt_attensor_constatscalar)
  LOAD_SYMBOL(_lantern_Tensor_scatter_attensor_intt_attensor_constatscalar)
  LOAD_SYMBOL(_lantern_scatter_attensor_atdimname_attensor_attensor)
  LOAD_SYMBOL(_lantern_Tensor_scatter_attensor_atdimname_attensor_attensor)
  LOAD_SYMBOL(_lantern_scatter_attensor_atdimname_attensor_constatscalar)
  LOAD_SYMBOL(_lantern_Tensor_scatter_attensor_atdimname_attensor_constatscalar)
  LOAD_SYMBOL(_lantern_Tensor_scatter__attensor_intt_attensor_attensor_stdstring)
  LOAD_SYMBOL(_lantern_Tensor_scatter__attensor_intt_attensor_constatscalar_stdstring)
  LOAD_SYMBOL(_lantern_Tensor_scatter_add__attensor_intt_attensor_attensor)
  LOAD_SYMBOL(_lantern_scatter_add_attensor_intt_attensor_attensor)
  LOAD_SYMBOL(_lantern_Tensor_scatter_add_attensor_intt_attensor_attensor)
  LOAD_SYMBOL(_lantern_scatter_add_attensor_atdimname_attensor_attensor)
  LOAD_SYMBOL(_lantern_Tensor_scatter_add_attensor_atdimname_attensor_attensor)
  LOAD_SYMBOL(_lantern_Tensor_eq__attensor_constatscalar)
  LOAD_SYMBOL(_lantern_Tensor_eq__attensor_attensor)
  LOAD_SYMBOL(_lantern_bitwise_and_out_attensor_attensor_attensor)
  LOAD_SYMBOL(_lantern_bitwise_and_out_attensor_attensor_constatscalar)
  LOAD_SYMBOL(_lantern_bitwise_and_attensor_constatscalar)
  LOAD_SYMBOL(_lantern_Tensor_bitwise_and_attensor_constatscalar)
  LOAD_SYMBOL(_lantern_bitwise_and_attensor_attensor)
  LOAD_SYMBOL(_lantern_Tensor_bitwise_and_attensor_attensor)
  LOAD_SYMBOL(_lantern_Tensor_bitwise_and__attensor_constatscalar)
  LOAD_SYMBOL(_lantern_Tensor_bitwise_and__attensor_attensor)
  LOAD_SYMBOL(_lantern___and___attensor_constatscalar)
  LOAD_SYMBOL(_lantern_Tensor___and___attensor_constatscalar)
  LOAD_SYMBOL(_lantern___and___attensor_attensor)
  LOAD_SYMBOL(_lantern_Tensor___and___attensor_attensor)
  LOAD_SYMBOL(_lantern_Tensor___iand___attensor_constatscalar)
  LOAD_SYMBOL(_lantern_Tensor___iand___attensor_attensor)
  LOAD_SYMBOL(_lantern_bitwise_or_out_attensor_attensor_attensor)
  LOAD_SYMBOL(_lantern_bitwise_or_out_attensor_attensor_constatscalar)
  LOAD_SYMBOL(_lantern_bitwise_or_attensor_constatscalar)
  LOAD_SYMBOL(_lantern_Tensor_bitwise_or_attensor_constatscalar)
  LOAD_SYMBOL(_lantern_bitwise_or_attensor_attensor)
  LOAD_SYMBOL(_lantern_Tensor_bitwise_or_attensor_attensor)
  LOAD_SYMBOL(_lantern_Tensor_bitwise_or__attensor_constatscalar)
  LOAD_SYMBOL(_lantern_Tensor_bitwise_or__attensor_attensor)
  LOAD_SYMBOL(_lantern___or___attensor_constatscalar)
  LOAD_SYMBOL(_lantern_Tensor___or___attensor_constatscalar)
  LOAD_SYMBOL(_lantern___or___attensor_attensor)
  LOAD_SYMBOL(_lantern_Tensor___or___attensor_attensor)
  LOAD_SYMBOL(_lantern_Tensor___ior___attensor_constatscalar)
  LOAD_SYMBOL(_lantern_Tensor___ior___attensor_attensor)
  LOAD_SYMBOL(_lantern_bitwise_xor_out_attensor_attensor_attensor)
  LOAD_SYMBOL(_lantern_bitwise_xor_out_attensor_attensor_constatscalar)
  LOAD_SYMBOL(_lantern_bitwise_xor_attensor_constatscalar)
  LOAD_SYMBOL(_lantern_Tensor_bitwise_xor_attensor_constatscalar)
  LOAD_SYMBOL(_lantern_bitwise_xor_attensor_attensor)
  LOAD_SYMBOL(_lantern_Tensor_bitwise_xor_attensor_attensor)
  LOAD_SYMBOL(_lantern_Tensor_bitwise_xor__attensor_constatscalar)
  LOAD_SYMBOL(_lantern_Tensor_bitwise_xor__attensor_attensor)
  LOAD_SYMBOL(_lantern___xor___attensor_constatscalar)
  LOAD_SYMBOL(_lantern_Tensor___xor___attensor_constatscalar)
  LOAD_SYMBOL(_lantern___xor___attensor_attensor)
  LOAD_SYMBOL(_lantern_Tensor___xor___attensor_attensor)
  LOAD_SYMBOL(_lantern_Tensor___ixor___attensor_constatscalar)
  LOAD_SYMBOL(_lantern_Tensor___ixor___attensor_attensor)
  LOAD_SYMBOL(_lantern___lshift___attensor_constatscalar)
  LOAD_SYMBOL(_lantern_Tensor___lshift___attensor_constatscalar)
  LOAD_SYMBOL(_lantern___lshift___attensor_attensor)
  LOAD_SYMBOL(_lantern_Tensor___lshift___attensor_attensor)
  LOAD_SYMBOL(_lantern_Tensor___ilshift___attensor_constatscalar)
  LOAD_SYMBOL(_lantern_Tensor___ilshift___attensor_attensor)
  LOAD_SYMBOL(_lantern___rshift___attensor_constatscalar)
  LOAD_SYMBOL(_lantern_Tensor___rshift___attensor_constatscalar)
  LOAD_SYMBOL(_lantern___rshift___attensor_attensor)
  LOAD_SYMBOL(_lantern_Tensor___rshift___attensor_attensor)
  LOAD_SYMBOL(_lantern_Tensor___irshift___attensor_constatscalar)
  LOAD_SYMBOL(_lantern_Tensor___irshift___attensor_attensor)
  LOAD_SYMBOL(_lantern_Tensor_tril__attensor_intt)
  LOAD_SYMBOL(_lantern_Tensor_triu__attensor_intt)
  LOAD_SYMBOL(_lantern_Tensor_digamma__attensor)
  LOAD_SYMBOL(_lantern_Tensor_renorm__attensor_constatscalar_intt_constatscalar)
  LOAD_SYMBOL(_lantern_Tensor_lerp__attensor_attensor_constatscalar)
  LOAD_SYMBOL(_lantern_Tensor_lerp__attensor_attensor_attensor)
  LOAD_SYMBOL(_lantern_Tensor_fmod__attensor_constatscalar)
  LOAD_SYMBOL(_lantern_Tensor_fmod__attensor_attensor)
  LOAD_SYMBOL(_lantern_Tensor_remainder__attensor_constatscalar)
  LOAD_SYMBOL(_lantern_Tensor_remainder__attensor_attensor)
  LOAD_SYMBOL(_lantern_Tensor_addbmm__attensor_attensor_attensor_constatscalar_constatscalar)
  LOAD_SYMBOL(_lantern_addbmm_out_attensor_attensor_attensor_attensor_constatscalar_constatscalar)
  LOAD_SYMBOL(_lantern_addbmm_attensor_attensor_attensor_constatscalar_constatscalar)
  LOAD_SYMBOL(_lantern_Tensor_addbmm_attensor_attensor_attensor_constatscalar_constatscalar)
  LOAD_SYMBOL(_lantern_Tensor_addcdiv__attensor_attensor_attensor_constatscalar)
  LOAD_SYMBOL(_lantern_Tensor_random__attensor_intt_intt_atgenerator)
  LOAD_SYMBOL(_lantern_Tensor_random__attensor_intt_atgenerator)
  LOAD_SYMBOL(_lantern_Tensor_random__attensor_atgenerator)
  LOAD_SYMBOL(_lantern_Tensor_uniform__attensor_double_double_atgenerator)
  LOAD_SYMBOL(_lantern_Tensor_cauchy__attensor_double_double_atgenerator)
  LOAD_SYMBOL(_lantern_Tensor_log_normal__attensor_double_double_atgenerator)
  LOAD_SYMBOL(_lantern_Tensor_exponential__attensor_double_atgenerator)
  LOAD_SYMBOL(_lantern_Tensor_geometric__attensor_double_atgenerator)
  LOAD_SYMBOL(_lantern_diag_out_attensor_attensor_intt)
  LOAD_SYMBOL(_lantern_diag_attensor_intt)
  LOAD_SYMBOL(_lantern_Tensor_diag_attensor_intt)
  LOAD_SYMBOL(_lantern_diag_backward_attensor_atintarrayref_intt)
  LOAD_SYMBOL(_lantern_cross_out_attensor_attensor_attensor_intt)
  LOAD_SYMBOL(_lantern_cross_attensor_attensor_intt)
  LOAD_SYMBOL(_lantern_Tensor_cross_attensor_attensor_intt)
  LOAD_SYMBOL(_lantern_triu_out_attensor_attensor_intt)
  LOAD_SYMBOL(_lantern_triu_attensor_intt)
  LOAD_SYMBOL(_lantern_Tensor_triu_attensor_intt)
  LOAD_SYMBOL(_lantern_tril_out_attensor_attensor_intt)
  LOAD_SYMBOL(_lantern_tril_attensor_intt)
  LOAD_SYMBOL(_lantern_Tensor_tril_attensor_intt)
  LOAD_SYMBOL(_lantern_tril_indices_intt_intt_intt_attensoroptions)
  LOAD_SYMBOL(_lantern_triu_indices_intt_intt_intt_attensoroptions)
  LOAD_SYMBOL(_lantern_trace_attensor)
  LOAD_SYMBOL(_lantern_Tensor_trace_attensor)
  LOAD_SYMBOL(_lantern_trace_backward_attensor_atintarrayref)
  LOAD_SYMBOL(_lantern_ne_out_attensor_attensor_constatscalar)
  LOAD_SYMBOL(_lantern_ne_attensor_constatscalar)
  LOAD_SYMBOL(_lantern_Tensor_ne_attensor_constatscalar)
  LOAD_SYMBOL(_lantern_ne_out_attensor_attensor_attensor)
  LOAD_SYMBOL(_lantern_ne_attensor_attensor)
  LOAD_SYMBOL(_lantern_Tensor_ne_attensor_attensor)
  LOAD_SYMBOL(_lantern_Tensor_ne__attensor_constatscalar)
  LOAD_SYMBOL(_lantern_Tensor_ne__attensor_attensor)
  LOAD_SYMBOL(_lantern_not_equal_out_attensor_attensor_constatscalar)
  LOAD_SYMBOL(_lantern_not_equal_attensor_constatscalar)
  LOAD_SYMBOL(_lantern_Tensor_not_equal_attensor_constatscalar)
  LOAD_SYMBOL(_lantern_not_equal_out_attensor_attensor_attensor)
  LOAD_SYMBOL(_lantern_not_equal_attensor_attensor)
  LOAD_SYMBOL(_lantern_Tensor_not_equal_attensor_attensor)
  LOAD_SYMBOL(_lantern_Tensor_not_equal__attensor_constatscalar)
  LOAD_SYMBOL(_lantern_Tensor_not_equal__attensor_attensor)
  LOAD_SYMBOL(_lantern_eq_out_attensor_attensor_constatscalar)
  LOAD_SYMBOL(_lantern_eq_attensor_constatscalar)
  LOAD_SYMBOL(_lantern_Tensor_eq_attensor_constatscalar)
  LOAD_SYMBOL(_lantern_eq_out_attensor_attensor_attensor)
  LOAD_SYMBOL(_lantern_eq_attensor_attensor)
  LOAD_SYMBOL(_lantern_Tensor_eq_attensor_attensor)
  LOAD_SYMBOL(_lantern_ge_out_attensor_attensor_constatscalar)
  LOAD_SYMBOL(_lantern_ge_attensor_constatscalar)
  LOAD_SYMBOL(_lantern_Tensor_ge_attensor_constatscalar)
  LOAD_SYMBOL(_lantern_ge_out_attensor_attensor_attensor)
  LOAD_SYMBOL(_lantern_ge_attensor_attensor)
  LOAD_SYMBOL(_lantern_Tensor_ge_attensor_attensor)
  LOAD_SYMBOL(_lantern_Tensor_ge__attensor_constatscalar)
  LOAD_SYMBOL(_lantern_Tensor_ge__attensor_attensor)
  LOAD_SYMBOL(_lantern_greater_equal_out_attensor_attensor_constatscalar)
  LOAD_SYMBOL(_lantern_greater_equal_attensor_constatscalar)
  LOAD_SYMBOL(_lantern_Tensor_greater_equal_attensor_constatscalar)
  LOAD_SYMBOL(_lantern_greater_equal_out_attensor_attensor_attensor)
  LOAD_SYMBOL(_lantern_greater_equal_attensor_attensor)
  LOAD_SYMBOL(_lantern_Tensor_greater_equal_attensor_attensor)
  LOAD_SYMBOL(_lantern_Tensor_greater_equal__attensor_constatscalar)
  LOAD_SYMBOL(_lantern_Tensor_greater_equal__attensor_attensor)
  LOAD_SYMBOL(_lantern_le_out_attensor_attensor_constatscalar)
  LOAD_SYMBOL(_lantern_le_attensor_constatscalar)
  LOAD_SYMBOL(_lantern_Tensor_le_attensor_constatscalar)
  LOAD_SYMBOL(_lantern_le_out_attensor_attensor_attensor)
  LOAD_SYMBOL(_lantern_le_attensor_attensor)
  LOAD_SYMBOL(_lantern_Tensor_le_attensor_attensor)
  LOAD_SYMBOL(_lantern_Tensor_le__attensor_constatscalar)
  LOAD_SYMBOL(_lantern_Tensor_le__attensor_attensor)
  LOAD_SYMBOL(_lantern_less_equal_out_attensor_attensor_constatscalar)
  LOAD_SYMBOL(_lantern_less_equal_attensor_constatscalar)
  LOAD_SYMBOL(_lantern_Tensor_less_equal_attensor_constatscalar)
  LOAD_SYMBOL(_lantern_less_equal_out_attensor_attensor_attensor)
  LOAD_SYMBOL(_lantern_less_equal_attensor_attensor)
  LOAD_SYMBOL(_lantern_Tensor_less_equal_attensor_attensor)
  LOAD_SYMBOL(_lantern_Tensor_less_equal__attensor_constatscalar)
  LOAD_SYMBOL(_lantern_Tensor_less_equal__attensor_attensor)
  LOAD_SYMBOL(_lantern_gt_out_attensor_attensor_constatscalar)
  LOAD_SYMBOL(_lantern_gt_attensor_constatscalar)
  LOAD_SYMBOL(_lantern_Tensor_gt_attensor_constatscalar)
  LOAD_SYMBOL(_lantern_gt_out_attensor_attensor_attensor)
  LOAD_SYMBOL(_lantern_gt_attensor_attensor)
  LOAD_SYMBOL(_lantern_Tensor_gt_attensor_attensor)
  LOAD_SYMBOL(_lantern_Tensor_gt__attensor_constatscalar)
  LOAD_SYMBOL(_lantern_Tensor_gt__attensor_attensor)
  LOAD_SYMBOL(_lantern_greater_out_attensor_attensor_constatscalar)
  LOAD_SYMBOL(_lantern_greater_attensor_constatscalar)
  LOAD_SYMBOL(_lantern_Tensor_greater_attensor_constatscalar)
  LOAD_SYMBOL(_lantern_greater_out_attensor_attensor_attensor)
  LOAD_SYMBOL(_lantern_greater_attensor_attensor)
  LOAD_SYMBOL(_lantern_Tensor_greater_attensor_attensor)
  LOAD_SYMBOL(_lantern_Tensor_greater__attensor_constatscalar)
  LOAD_SYMBOL(_lantern_Tensor_greater__attensor_attensor)
  LOAD_SYMBOL(_lantern_lt_out_attensor_attensor_constatscalar)
  LOAD_SYMBOL(_lantern_lt_attensor_constatscalar)
  LOAD_SYMBOL(_lantern_Tensor_lt_attensor_constatscalar)
  LOAD_SYMBOL(_lantern_lt_out_attensor_attensor_attensor)
  LOAD_SYMBOL(_lantern_lt_attensor_attensor)
  LOAD_SYMBOL(_lantern_Tensor_lt_attensor_attensor)
  LOAD_SYMBOL(_lantern_Tensor_lt__attensor_constatscalar)
  LOAD_SYMBOL(_lantern_Tensor_lt__attensor_attensor)
  LOAD_SYMBOL(_lantern_less_out_attensor_attensor_constatscalar)
  LOAD_SYMBOL(_lantern_less_attensor_constatscalar)
  LOAD_SYMBOL(_lantern_Tensor_less_attensor_constatscalar)
  LOAD_SYMBOL(_lantern_less_out_attensor_attensor_attensor)
  LOAD_SYMBOL(_lantern_less_attensor_attensor)
  LOAD_SYMBOL(_lantern_Tensor_less_attensor_attensor)
  LOAD_SYMBOL(_lantern_Tensor_less__attensor_constatscalar)
  LOAD_SYMBOL(_lantern_Tensor_less__attensor_attensor)
  LOAD_SYMBOL(_lantern_take_out_attensor_attensor_attensor)
  LOAD_SYMBOL(_lantern_take_attensor_attensor)
  LOAD_SYMBOL(_lantern_Tensor_take_attensor_attensor)
  LOAD_SYMBOL(_lantern_take_along_dim_out_attensor_attensor_attensor_intt)
  LOAD_SYMBOL(_lantern_take_along_dim_attensor_attensor_intt)
  LOAD_SYMBOL(_lantern_Tensor_take_along_dim_attensor_attensor_intt)
  LOAD_SYMBOL(_lantern_index_select_out_attensor_attensor_intt_attensor)
  LOAD_SYMBOL(_lantern_index_select_attensor_intt_attensor)
  LOAD_SYMBOL(_lantern_Tensor_index_select_attensor_intt_attensor)
  LOAD_SYMBOL(_lantern_index_select_out_attensor_attensor_atdimname_attensor)
  LOAD_SYMBOL(_lantern_index_select_attensor_atdimname_attensor)
  LOAD_SYMBOL(_lantern_Tensor_index_select_attensor_atdimname_attensor)
  LOAD_SYMBOL(_lantern_index_select_backward_attensor_atintarrayref_intt_attensor)
  LOAD_SYMBOL(_lantern_masked_select_out_attensor_attensor_attensor)
  LOAD_SYMBOL(_lantern_masked_select_attensor_attensor)
  LOAD_SYMBOL(_lantern_Tensor_masked_select_attensor_attensor)
  LOAD_SYMBOL(_lantern_masked_select_backward_attensor_attensor_attensor)
  LOAD_SYMBOL(_lantern_nonzero_out_attensor_attensor)
  LOAD_SYMBOL(_lantern_nonzero_attensor)
  LOAD_SYMBOL(_lantern_Tensor_nonzero_attensor)
  LOAD_SYMBOL(_lantern_nonzero_numpy_attensor)
  LOAD_SYMBOL(_lantern_Tensor_nonzero_numpy_attensor)
  LOAD_SYMBOL(_lantern_gather_out_attensor_attensor_intt_attensor_bool)
  LOAD_SYMBOL(_lantern_gather_attensor_intt_attensor_bool)
  LOAD_SYMBOL(_lantern_Tensor_gather_attensor_intt_attensor_bool)
  LOAD_SYMBOL(_lantern_gather_backward_attensor_attensor_intt_attensor_bool)
  LOAD_SYMBOL(_lantern_gather_out_attensor_attensor_atdimname_attensor_bool)
  LOAD_SYMBOL(_lantern_gather_attensor_atdimname_attensor_bool)
  LOAD_SYMBOL(_lantern_Tensor_gather_attensor_atdimname_attensor_bool)
  LOAD_SYMBOL(_lantern__gather_sparse_backward_attensor_intt_attensor_attensor)
  LOAD_SYMBOL(_lantern_addcmul_out_attensor_attensor_attensor_attensor_constatscalar)
  LOAD_SYMBOL(_lantern_addcmul_attensor_attensor_attensor_constatscalar)
  LOAD_SYMBOL(_lantern_Tensor_addcmul_attensor_attensor_attensor_constatscalar)
  LOAD_SYMBOL(_lantern_Tensor_addcmul__attensor_attensor_attensor_constatscalar)
  LOAD_SYMBOL(_lantern_addcdiv_out_attensor_attensor_attensor_attensor_constatscalar)
  LOAD_SYMBOL(_lantern_addcdiv_attensor_attensor_attensor_constatscalar)
  LOAD_SYMBOL(_lantern_Tensor_addcdiv_attensor_attensor_attensor_constatscalar)
  LOAD_SYMBOL(_lantern_cross_entropy_loss_attensor_attensor_attensor_intt_intt)
  LOAD_SYMBOL(_lantern_lstsq_out_attensor_attensor_attensor_attensor)
  LOAD_SYMBOL(_lantern_lstsq_attensor_attensor)
  LOAD_SYMBOL(_lantern_Tensor_lstsq_attensor_attensor)
  LOAD_SYMBOL(_lantern_triangular_solve_out_attensor_attensor_attensor_attensor_bool_bool_bool)
  LOAD_SYMBOL(_lantern_triangular_solve_attensor_attensor_bool_bool_bool)
  LOAD_SYMBOL(_lantern_Tensor_triangular_solve_attensor_attensor_bool_bool_bool)
  LOAD_SYMBOL(_lantern_symeig_out_attensor_attensor_attensor_bool_bool)
  LOAD_SYMBOL(_lantern_symeig_attensor_bool_bool)
  LOAD_SYMBOL(_lantern_Tensor_symeig_attensor_bool_bool)
  LOAD_SYMBOL(_lantern__symeig_helper_attensor_bool_bool)
  LOAD_SYMBOL(_lantern_eig_out_attensor_attensor_attensor_bool)
  LOAD_SYMBOL(_lantern_eig_attensor_bool)
  LOAD_SYMBOL(_lantern_Tensor_eig_attensor_bool)
  LOAD_SYMBOL(_lantern_svd_out_attensor_attensor_attensor_attensor_bool_bool)
  LOAD_SYMBOL(_lantern_svd_attensor_bool_bool)
  LOAD_SYMBOL(_lantern_Tensor_svd_attensor_bool_bool)
  LOAD_SYMBOL(_lantern__svd_helper_attensor_bool_bool)
  LOAD_SYMBOL(_lantern_swapaxes_attensor_intt_intt)
  LOAD_SYMBOL(_lantern_Tensor_swapaxes_attensor_intt_intt)
  LOAD_SYMBOL(_lantern_Tensor_swapaxes__attensor_intt_intt)
  LOAD_SYMBOL(_lantern_swapdims_attensor_intt_intt)
  LOAD_SYMBOL(_lantern_Tensor_swapdims_attensor_intt_intt)
  LOAD_SYMBOL(_lantern_Tensor_swapdims__attensor_intt_intt)
  LOAD_SYMBOL(_lantern_cholesky_out_attensor_attensor_bool)
  LOAD_SYMBOL(_lantern_cholesky_attensor_bool)
  LOAD_SYMBOL(_lantern_Tensor_cholesky_attensor_bool)
  LOAD_SYMBOL(_lantern_cholesky_solve_out_attensor_attensor_attensor_bool)
  LOAD_SYMBOL(_lantern_cholesky_solve_attensor_attensor_bool)
  LOAD_SYMBOL(_lantern_Tensor_cholesky_solve_attensor_attensor_bool)
  LOAD_SYMBOL(_lantern__cholesky_solve_helper_attensor_attensor_bool)
  LOAD_SYMBOL(_lantern_solve_attensor_attensor)
  LOAD_SYMBOL(_lantern_Tensor_solve_attensor_attensor)
  LOAD_SYMBOL(_lantern_solve_out_attensor_attensor_attensor_attensor)
  LOAD_SYMBOL(_lantern__solve_helper_attensor_attensor)
  LOAD_SYMBOL(_lantern_cholesky_inverse_attensor_bool)
  LOAD_SYMBOL(_lantern_Tensor_cholesky_inverse_attensor_bool)
  LOAD_SYMBOL(_lantern_cholesky_inverse_out_attensor_attensor_bool)
  LOAD_SYMBOL(_lantern_qr_out_attensor_attensor_attensor_bool)
  LOAD_SYMBOL(_lantern_qr_attensor_bool)
  LOAD_SYMBOL(_lantern_Tensor_qr_attensor_bool)
  LOAD_SYMBOL(_lantern_geqrf_out_attensor_attensor_attensor)
  LOAD_SYMBOL(_lantern_geqrf_attensor)
  LOAD_SYMBOL(_lantern_Tensor_geqrf_attensor)
  LOAD_SYMBOL(_lantern_orgqr_attensor_attensor)
  LOAD_SYMBOL(_lantern_Tensor_orgqr_attensor_attensor)
  LOAD_SYMBOL(_lantern_orgqr_out_attensor_attensor_attensor)
  LOAD_SYMBOL(_lantern_ormqr_out_attensor_attensor_attensor_attensor_bool_bool)
  LOAD_SYMBOL(_lantern_ormqr_attensor_attensor_attensor_bool_bool)
  LOAD_SYMBOL(_lantern_Tensor_ormqr_attensor_attensor_attensor_bool_bool)
  LOAD_SYMBOL(_lantern__lu_with_info_attensor_bool_bool)
  LOAD_SYMBOL(_lantern_lu_solve_out_attensor_attensor_attensor_attensor)
  LOAD_SYMBOL(_lantern_lu_solve_attensor_attensor_attensor)
  LOAD_SYMBOL(_lantern_Tensor_lu_solve_attensor_attensor_attensor)
  LOAD_SYMBOL(_lantern_lu_unpack_attensor_attensor_bool_bool)
  LOAD_SYMBOL(_lantern_lu_unpack_out_attensor_attensor_attensor_attensor_attensor_bool_bool)
  LOAD_SYMBOL(_lantern_multinomial_out_attensor_attensor_intt_bool_atgenerator)
  LOAD_SYMBOL(_lantern_multinomial_attensor_intt_bool_atgenerator)
  LOAD_SYMBOL(_lantern_Tensor_multinomial_attensor_intt_bool_atgenerator)
  LOAD_SYMBOL(_lantern_lgamma_out_attensor_attensor)
  LOAD_SYMBOL(_lantern_Tensor_lgamma__attensor)
  LOAD_SYMBOL(_lantern_lgamma_attensor)
  LOAD_SYMBOL(_lantern_Tensor_lgamma_attensor)
  LOAD_SYMBOL(_lantern_digamma_out_attensor_attensor)
  LOAD_SYMBOL(_lantern_digamma_attensor)
  LOAD_SYMBOL(_lantern_Tensor_digamma_attensor)
  LOAD_SYMBOL(_lantern_polygamma_out_attensor_intt_attensor)
  LOAD_SYMBOL(_lantern_Tensor_polygamma__attensor_intt)
  LOAD_SYMBOL(_lantern_erfinv_attensor)
  LOAD_SYMBOL(_lantern_Tensor_erfinv_attensor)
  LOAD_SYMBOL(_lantern_Tensor_erfinv__attensor)
  LOAD_SYMBOL(_lantern_erfinv_out_attensor_attensor)
  LOAD_SYMBOL(_lantern_i0_attensor)
  LOAD_SYMBOL(_lantern_Tensor_i0_attensor)
  LOAD_SYMBOL(_lantern_i0__attensor)
  LOAD_SYMBOL(_lantern_Tensor_i0__attensor)
  LOAD_SYMBOL(_lantern_i0_out_attensor_attensor)
  LOAD_SYMBOL(_lantern_sign_attensor)
  LOAD_SYMBOL(_lantern_Tensor_sign_attensor)
  LOAD_SYMBOL(_lantern_Tensor_sign__attensor)
  LOAD_SYMBOL(_lantern_sign_out_attensor_attensor)
  LOAD_SYMBOL(_lantern_signbit_attensor)
  LOAD_SYMBOL(_lantern_Tensor_signbit_attensor)
  LOAD_SYMBOL(_lantern_signbit_out_attensor_attensor)
  LOAD_SYMBOL(_lantern_dist_attensor_attensor_constatscalar)
  LOAD_SYMBOL(_lantern_Tensor_dist_attensor_attensor_constatscalar)
  LOAD_SYMBOL(_lantern_atan2_out_attensor_attensor_attensor)
  LOAD_SYMBOL(_lantern_Tensor_atan2__attensor_attensor)
  LOAD_SYMBOL(_lantern_atan2_attensor_attensor)
  LOAD_SYMBOL(_lantern_Tensor_atan2_attensor_attensor)
  LOAD_SYMBOL(_lantern_lerp_out_attensor_attensor_attensor_constatscalar)
  LOAD_SYMBOL(_lantern_lerp_out_attensor_attensor_attensor_attensor)
  LOAD_SYMBOL(_lantern_lerp_attensor_attensor_constatscalar)
  LOAD_SYMBOL(_lantern_Tensor_lerp_attensor_attensor_constatscalar)
  LOAD_SYMBOL(_lantern_lerp_attensor_attensor_attensor)
  LOAD_SYMBOL(_lantern_Tensor_lerp_attensor_attensor_attensor)
  LOAD_SYMBOL(_lantern_histc_out_attensor_attensor_intt_constatscalar_constatscalar)
  LOAD_SYMBOL(_lantern_histc_attensor_intt_constatscalar_constatscalar)
  LOAD_SYMBOL(_lantern_Tensor_histc_attensor_intt_constatscalar_constatscalar)
  LOAD_SYMBOL(_lantern_fmod_out_attensor_attensor_constatscalar)
  LOAD_SYMBOL(_lantern_fmod_attensor_constatscalar)
  LOAD_SYMBOL(_lantern_Tensor_fmod_attensor_constatscalar)
  LOAD_SYMBOL(_lantern_fmod_out_attensor_attensor_attensor)
  LOAD_SYMBOL(_lantern_fmod_attensor_attensor)
  LOAD_SYMBOL(_lantern_Tensor_fmod_attensor_attensor)
  LOAD_SYMBOL(_lantern_hypot_out_attensor_attensor_attensor)
  LOAD_SYMBOL(_lantern_hypot_attensor_attensor)
  LOAD_SYMBOL(_lantern_Tensor_hypot_attensor_attensor)
  LOAD_SYMBOL(_lantern_Tensor_hypot__attensor_attensor)
  LOAD_SYMBOL(_lantern_igamma_out_attensor_attensor_attensor)
  LOAD_SYMBOL(_lantern_igamma_attensor_attensor)
  LOAD_SYMBOL(_lantern_Tensor_igamma_attensor_attensor)
  LOAD_SYMBOL(_lantern_Tensor_igamma__attensor_attensor)
  LOAD_SYMBOL(_lantern_igammac_out_attensor_attensor_attensor)
  LOAD_SYMBOL(_lantern_igammac_attensor_attensor)
  LOAD_SYMBOL(_lantern_Tensor_igammac_attensor_attensor)
  LOAD_SYMBOL(_lantern_Tensor_igammac__attensor_attensor)
  LOAD_SYMBOL(_lantern_nextafter_out_attensor_attensor_attensor)
  LOAD_SYMBOL(_lantern_nextafter_attensor_attensor)
  LOAD_SYMBOL(_lantern_Tensor_nextafter_attensor_attensor)
  LOAD_SYMBOL(_lantern_Tensor_nextafter__attensor_attensor)
  LOAD_SYMBOL(_lantern_remainder_out_attensor_attensor_constatscalar)
  LOAD_SYMBOL(_lantern_remainder_attensor_constatscalar)
  LOAD_SYMBOL(_lantern_Tensor_remainder_attensor_constatscalar)
  LOAD_SYMBOL(_lantern_remainder_out_attensor_attensor_attensor)
  LOAD_SYMBOL(_lantern_remainder_attensor_attensor)
  LOAD_SYMBOL(_lantern_Tensor_remainder_attensor_attensor)
  LOAD_SYMBOL(_lantern_min_attensor)
  LOAD_SYMBOL(_lantern_Tensor_min_attensor)
  LOAD_SYMBOL(_lantern_fmin_attensor_attensor)
  LOAD_SYMBOL(_lantern_Tensor_fmin_attensor_attensor)
  LOAD_SYMBOL(_lantern_fmin_out_attensor_attensor_attensor)
  LOAD_SYMBOL(_lantern_max_attensor)
  LOAD_SYMBOL(_lantern_Tensor_max_attensor)
  LOAD_SYMBOL(_lantern_fmax_attensor_attensor)
  LOAD_SYMBOL(_lantern_Tensor_fmax_attensor_attensor)
  LOAD_SYMBOL(_lantern_fmax_out_attensor_attensor_attensor)
  LOAD_SYMBOL(_lantern_maximum_attensor_attensor)
  LOAD_SYMBOL(_lantern_Tensor_maximum_attensor_attensor)
  LOAD_SYMBOL(_lantern_maximum_out_attensor_attensor_attensor)
  LOAD_SYMBOL(_lantern_max_attensor_attensor)
  LOAD_SYMBOL(_lantern_Tensor_max_attensor_attensor)
  LOAD_SYMBOL(_lantern_max_out_attensor_attensor_attensor)
  LOAD_SYMBOL(_lantern_minimum_attensor_attensor)
  LOAD_SYMBOL(_lantern_Tensor_minimum_attensor_attensor)
  LOAD_SYMBOL(_lantern_minimum_out_attensor_attensor_attensor)
  LOAD_SYMBOL(_lantern_min_out_attensor_attensor_attensor)
  LOAD_SYMBOL(_lantern_min_attensor_attensor)
  LOAD_SYMBOL(_lantern_Tensor_min_attensor_attensor)
  LOAD_SYMBOL(_lantern_quantile_out_attensor_attensor_double_intt_bool)
  LOAD_SYMBOL(_lantern_quantile_attensor_double_intt_bool)
  LOAD_SYMBOL(_lantern_Tensor_quantile_attensor_double_intt_bool)
  LOAD_SYMBOL(_lantern_quantile_out_attensor_attensor_attensor_intt_bool)
  LOAD_SYMBOL(_lantern_quantile_attensor_attensor_intt_bool)
  LOAD_SYMBOL(_lantern_Tensor_quantile_attensor_attensor_intt_bool)
  LOAD_SYMBOL(_lantern_nanquantile_out_attensor_attensor_double_intt_bool)
  LOAD_SYMBOL(_lantern_nanquantile_attensor_double_intt_bool)
  LOAD_SYMBOL(_lantern_Tensor_nanquantile_attensor_double_intt_bool)
  LOAD_SYMBOL(_lantern_nanquantile_out_attensor_attensor_attensor_intt_bool)
  LOAD_SYMBOL(_lantern_nanquantile_attensor_attensor_intt_bool)
  LOAD_SYMBOL(_lantern_Tensor_nanquantile_attensor_attensor_intt_bool)
  LOAD_SYMBOL(_lantern_quantile_out_attensor_attensor_double_intt_bool_stdstring)
  LOAD_SYMBOL(_lantern_quantile_attensor_double_intt_bool_stdstring)
  LOAD_SYMBOL(_lantern_Tensor_quantile_attensor_double_intt_bool_stdstring)
  LOAD_SYMBOL(_lantern_quantile_out_attensor_attensor_attensor_intt_bool_stdstring)
  LOAD_SYMBOL(_lantern_quantile_attensor_attensor_intt_bool_stdstring)
  LOAD_SYMBOL(_lantern_Tensor_quantile_attensor_attensor_intt_bool_stdstring)
  LOAD_SYMBOL(_lantern_nanquantile_out_attensor_attensor_double_intt_bool_stdstring)
  LOAD_SYMBOL(_lantern_nanquantile_attensor_double_intt_bool_stdstring)
  LOAD_SYMBOL(_lantern_Tensor_nanquantile_attensor_double_intt_bool_stdstring)
  LOAD_SYMBOL(_lantern_nanquantile_out_attensor_attensor_attensor_intt_bool_stdstring)
  LOAD_SYMBOL(_lantern_nanquantile_attensor_attensor_intt_bool_stdstring)
  LOAD_SYMBOL(_lantern_Tensor_nanquantile_attensor_attensor_intt_bool_stdstring)
  LOAD_SYMBOL(_lantern_sort_out_attensor_attensor_attensor_intt_bool)
  LOAD_SYMBOL(_lantern_sort_out_attensor_attensor_attensor_bool_intt_bool)
  LOAD_SYMBOL(_lantern_sort_attensor_intt_bool)
  LOAD_SYMBOL(_lantern_Tensor_sort_attensor_intt_bool)
  LOAD_SYMBOL(_lantern_sort_attensor_bool_intt_bool)
  LOAD_SYMBOL(_lantern_Tensor_sort_attensor_bool_intt_bool)
  LOAD_SYMBOL(_lantern_sort_out_attensor_attensor_attensor_atdimname_bool)
  LOAD_SYMBOL(_lantern_sort_out_attensor_attensor_attensor_bool_atdimname_bool)
  LOAD_SYMBOL(_lantern_sort_attensor_atdimname_bool)
  LOAD_SYMBOL(_lantern_Tensor_sort_attensor_atdimname_bool)
  LOAD_SYMBOL(_lantern_sort_attensor_bool_atdimname_bool)
  LOAD_SYMBOL(_lantern_Tensor_sort_attensor_bool_atdimname_bool)
  LOAD_SYMBOL(_lantern_msort_out_attensor_attensor)
  LOAD_SYMBOL(_lantern_msort_attensor)
  LOAD_SYMBOL(_lantern_Tensor_msort_attensor)
  LOAD_SYMBOL(_lantern_argsort_attensor_intt_bool)
  LOAD_SYMBOL(_lantern_Tensor_argsort_attensor_intt_bool)
  LOAD_SYMBOL(_lantern_argsort_attensor_atdimname_bool)
  LOAD_SYMBOL(_lantern_Tensor_argsort_attensor_atdimname_bool)
  LOAD_SYMBOL(_lantern_topk_out_attensor_attensor_attensor_intt_intt_bool_bool)
  LOAD_SYMBOL(_lantern_topk_attensor_intt_intt_bool_bool)
  LOAD_SYMBOL(_lantern_Tensor_topk_attensor_intt_intt_bool_bool)
  LOAD_SYMBOL(_lantern_all_attensor)
  LOAD_SYMBOL(_lantern_Tensor_all_attensor)
  LOAD_SYMBOL(_lantern_any_attensor)
  LOAD_SYMBOL(_lantern_Tensor_any_attensor)
  LOAD_SYMBOL(_lantern_renorm_out_attensor_attensor_constatscalar_intt_constatscalar)
  LOAD_SYMBOL(_lantern_renorm_attensor_constatscalar_intt_constatscalar)
  LOAD_SYMBOL(_lantern_Tensor_renorm_attensor_constatscalar_intt_constatscalar)
  LOAD_SYMBOL(_lantern_Tensor_unfold_attensor_intt_intt_intt)
  LOAD_SYMBOL(_lantern_unfold_backward_attensor_atintarrayref_intt_intt_intt)
  LOAD_SYMBOL(_lantern_equal_attensor_attensor)
  LOAD_SYMBOL(_lantern_Tensor_equal_attensor_attensor)
  LOAD_SYMBOL(_lantern_pow_out_attensor_attensor_attensor)
  LOAD_SYMBOL(_lantern_pow_attensor_attensor)
  LOAD_SYMBOL(_lantern_Tensor_pow_attensor_attensor)
  LOAD_SYMBOL(_lantern_pow_out_attensor_constatscalar_attensor)
  LOAD_SYMBOL(_lantern_pow_constatscalar_attensor)
  LOAD_SYMBOL(_lantern_pow_out_attensor_attensor_constatscalar)
  LOAD_SYMBOL(_lantern_pow_attensor_constatscalar)
  LOAD_SYMBOL(_lantern_Tensor_pow_attensor_constatscalar)
  LOAD_SYMBOL(_lantern_Tensor_pow__attensor_constatscalar)
  LOAD_SYMBOL(_lantern_Tensor_pow__attensor_attensor)
  LOAD_SYMBOL(_lantern_float_power_out_attensor_attensor_attensor)
  LOAD_SYMBOL(_lantern_float_power_attensor_attensor)
  LOAD_SYMBOL(_lantern_Tensor_float_power_attensor_attensor)
  LOAD_SYMBOL(_lantern_float_power_out_attensor_constatscalar_attensor)
  LOAD_SYMBOL(_lantern_float_power_constatscalar_attensor)
  LOAD_SYMBOL(_lantern_float_power_out_attensor_attensor_constatscalar)
  LOAD_SYMBOL(_lantern_float_power_attensor_constatscalar)
  LOAD_SYMBOL(_lantern_Tensor_float_power_attensor_constatscalar)
  LOAD_SYMBOL(_lantern_Tensor_float_power__attensor_constatscalar)
  LOAD_SYMBOL(_lantern_Tensor_float_power__attensor_attensor)
  LOAD_SYMBOL(_lantern_Tensor_normal__attensor_double_double_atgenerator)
  LOAD_SYMBOL(_lantern_normal_out_attensor_attensor_double_atgenerator)
  LOAD_SYMBOL(_lantern_normal_out_attensor_double_attensor_atgenerator)
  LOAD_SYMBOL(_lantern_normal_out_attensor_attensor_attensor_atgenerator)
  LOAD_SYMBOL(_lantern_normal_out_attensor_double_double_atintarrayref_atgenerator)
  LOAD_SYMBOL(_lantern_alias_attensor)
  LOAD_SYMBOL(_lantern_Tensor_alias_attensor)
  LOAD_SYMBOL(_lantern__index_copy__attensor_intt_attensor_attensor)
  LOAD_SYMBOL(_lantern__cumsum_attensor_intt)
  LOAD_SYMBOL(_lantern__cumsum_out_attensor_attensor_intt)
  LOAD_SYMBOL(_lantern__cumprod_attensor_intt)
  LOAD_SYMBOL(_lantern__cumprod_out_attensor_attensor_intt)
  LOAD_SYMBOL(_lantern__amp_foreach_non_finite_check_and_unscale__attensorlist_attensor_attensor)
  LOAD_SYMBOL(_lantern__amp_update_scale__attensor_attensor_attensor_double_double_intt)
  LOAD_SYMBOL(_lantern__cat_attensorlist_intt)
  LOAD_SYMBOL(_lantern__cat_out_attensor_attensorlist_intt)
  LOAD_SYMBOL(_lantern__foreach_add_attensorlist_constatscalar)
  LOAD_SYMBOL(_lantern__foreach_add__attensorlist_constatscalar)
  LOAD_SYMBOL(_lantern__foreach_sub_attensorlist_constatscalar)
  LOAD_SYMBOL(_lantern__foreach_sub__attensorlist_constatscalar)
  LOAD_SYMBOL(_lantern__foreach_mul_attensorlist_constatscalar)
  LOAD_SYMBOL(_lantern__foreach_mul__attensorlist_constatscalar)
  LOAD_SYMBOL(_lantern__foreach_div_attensorlist_constatscalar)
  LOAD_SYMBOL(_lantern__foreach_div__attensorlist_constatscalar)
  LOAD_SYMBOL(_lantern__foreach_add_attensorlist_attensorlist_constatscalar)
  LOAD_SYMBOL(_lantern__foreach_add__attensorlist_attensorlist_constatscalar)
  LOAD_SYMBOL(_lantern__foreach_sub_attensorlist_attensorlist_constatscalar)
  LOAD_SYMBOL(_lantern__foreach_sub__attensorlist_attensorlist_constatscalar)
  LOAD_SYMBOL(_lantern__foreach_mul_attensorlist_attensorlist)
  LOAD_SYMBOL(_lantern__foreach_mul__attensorlist_attensorlist)
  LOAD_SYMBOL(_lantern__foreach_div_attensorlist_attensorlist)
  LOAD_SYMBOL(_lantern__foreach_div__attensorlist_attensorlist)
  LOAD_SYMBOL(_lantern__foreach_add_attensorlist_atarrayrefatscalar)
  LOAD_SYMBOL(_lantern__foreach_add__attensorlist_atarrayrefatscalar)
  LOAD_SYMBOL(_lantern__foreach_sub_attensorlist_atarrayrefatscalar)
  LOAD_SYMBOL(_lantern__foreach_sub__attensorlist_atarrayrefatscalar)
  LOAD_SYMBOL(_lantern__foreach_div_attensorlist_atarrayrefatscalar)
  LOAD_SYMBOL(_lantern__foreach_div__attensorlist_atarrayrefatscalar)
  LOAD_SYMBOL(_lantern__foreach_mul_attensorlist_atarrayrefatscalar)
  LOAD_SYMBOL(_lantern__foreach_mul__attensorlist_atarrayrefatscalar)
  LOAD_SYMBOL(_lantern__foreach_exp_attensorlist)
  LOAD_SYMBOL(_lantern__foreach_zero__attensorlist)
  LOAD_SYMBOL(_lantern__foreach_exp__attensorlist)
  LOAD_SYMBOL(_lantern__foreach_sqrt_attensorlist)
  LOAD_SYMBOL(_lantern__foreach_sqrt__attensorlist)
  LOAD_SYMBOL(_lantern__foreach_abs_attensorlist)
  LOAD_SYMBOL(_lantern__foreach_abs__attensorlist)
  LOAD_SYMBOL(_lantern__foreach_acos_attensorlist)
  LOAD_SYMBOL(_lantern__foreach_acos__attensorlist)
  LOAD_SYMBOL(_lantern__foreach_asin_attensorlist)
  LOAD_SYMBOL(_lantern__foreach_asin__attensorlist)
  LOAD_SYMBOL(_lantern__foreach_atan_attensorlist)
  LOAD_SYMBOL(_lantern__foreach_atan__attensorlist)
  LOAD_SYMBOL(_lantern__foreach_ceil_attensorlist)
  LOAD_SYMBOL(_lantern__foreach_ceil__attensorlist)
  LOAD_SYMBOL(_lantern__foreach_cos_attensorlist)
  LOAD_SYMBOL(_lantern__foreach_cos__attensorlist)
  LOAD_SYMBOL(_lantern__foreach_cosh_attensorlist)
  LOAD_SYMBOL(_lantern__foreach_cosh__attensorlist)
  LOAD_SYMBOL(_lantern__foreach_erf_attensorlist)
  LOAD_SYMBOL(_lantern__foreach_erf__attensorlist)
  LOAD_SYMBOL(_lantern__foreach_erfc_attensorlist)
  LOAD_SYMBOL(_lantern__foreach_erfc__attensorlist)
  LOAD_SYMBOL(_lantern__foreach_expm1_attensorlist)
  LOAD_SYMBOL(_lantern__foreach_expm1__attensorlist)
  LOAD_SYMBOL(_lantern__foreach_floor_attensorlist)
  LOAD_SYMBOL(_lantern__foreach_floor__attensorlist)
  LOAD_SYMBOL(_lantern__foreach_log_attensorlist)
  LOAD_SYMBOL(_lantern__foreach_log__attensorlist)
  LOAD_SYMBOL(_lantern__foreach_log10_attensorlist)
  LOAD_SYMBOL(_lantern__foreach_log10__attensorlist)
  LOAD_SYMBOL(_lantern__foreach_log1p_attensorlist)
  LOAD_SYMBOL(_lantern__foreach_log1p__attensorlist)
  LOAD_SYMBOL(_lantern__foreach_log2_attensorlist)
  LOAD_SYMBOL(_lantern__foreach_log2__attensorlist)
  LOAD_SYMBOL(_lantern__foreach_neg_attensorlist)
  LOAD_SYMBOL(_lantern__foreach_neg__attensorlist)
  LOAD_SYMBOL(_lantern__foreach_tan_attensorlist)
  LOAD_SYMBOL(_lantern__foreach_tan__attensorlist)
  LOAD_SYMBOL(_lantern__foreach_tanh_attensorlist)
  LOAD_SYMBOL(_lantern__foreach_tanh__attensorlist)
  LOAD_SYMBOL(_lantern__foreach_sin_attensorlist)
  LOAD_SYMBOL(_lantern__foreach_sin__attensorlist)
  LOAD_SYMBOL(_lantern__foreach_sinh_attensorlist)
  LOAD_SYMBOL(_lantern__foreach_sinh__attensorlist)
  LOAD_SYMBOL(_lantern__foreach_round_attensorlist)
  LOAD_SYMBOL(_lantern__foreach_round__attensorlist)
  LOAD_SYMBOL(_lantern__foreach_lgamma_attensorlist)
  LOAD_SYMBOL(_lantern__foreach_lgamma__attensorlist)
  LOAD_SYMBOL(_lantern__foreach_frac_attensorlist)
  LOAD_SYMBOL(_lantern__foreach_frac__attensorlist)
  LOAD_SYMBOL(_lantern__foreach_reciprocal_attensorlist)
  LOAD_SYMBOL(_lantern__foreach_reciprocal__attensorlist)
  LOAD_SYMBOL(_lantern__foreach_sigmoid_attensorlist)
  LOAD_SYMBOL(_lantern__foreach_sigmoid__attensorlist)
  LOAD_SYMBOL(_lantern__foreach_trunc_attensorlist)
  LOAD_SYMBOL(_lantern__foreach_trunc__attensorlist)
  LOAD_SYMBOL(_lantern__foreach_addcdiv__attensorlist_attensorlist_attensorlist_constatscalar)
  LOAD_SYMBOL(_lantern__foreach_addcmul__attensorlist_attensorlist_attensorlist_constatscalar)
  LOAD_SYMBOL(_lantern__foreach_addcdiv__attensorlist_attensorlist_attensorlist_atarrayrefatscalar)
  LOAD_SYMBOL(_lantern__foreach_addcmul__attensorlist_attensorlist_attensorlist_atarrayrefatscalar)
  LOAD_SYMBOL(_lantern__foreach_addcdiv_attensorlist_attensorlist_attensorlist_constatscalar)
  LOAD_SYMBOL(_lantern__foreach_addcmul_attensorlist_attensorlist_attensorlist_constatscalar)
  LOAD_SYMBOL(_lantern__foreach_addcdiv_attensorlist_attensorlist_attensorlist_atarrayrefatscalar)
  LOAD_SYMBOL(_lantern__foreach_addcmul_attensorlist_attensorlist_attensorlist_atarrayrefatscalar)
  LOAD_SYMBOL(_lantern__foreach_maximum_attensorlist_attensorlist)
  LOAD_SYMBOL(_lantern__foreach_minimum_attensorlist_attensorlist)
  LOAD_SYMBOL(_lantern_bucketize_attensor_attensor_bool_bool)
  LOAD_SYMBOL(_lantern_bucketize_out_attensor_attensor_attensor_bool_bool)
  LOAD_SYMBOL(_lantern_bucketize_constatscalar_attensor_bool_bool)
  LOAD_SYMBOL(_lantern_searchsorted_attensor_attensor_bool_bool)
  LOAD_SYMBOL(_lantern_searchsorted_out_attensor_attensor_attensor_bool_bool)
  LOAD_SYMBOL(_lantern_searchsorted_attensor_constatscalar_bool_bool)
  LOAD_SYMBOL(_lantern_mse_loss_out_attensor_attensor_attensor_intt)
  LOAD_SYMBOL(_lantern_mse_loss_attensor_attensor_intt)
  LOAD_SYMBOL(_lantern_mse_loss_backward_out_attensor_attensor_attensor_attensor_intt)
  LOAD_SYMBOL(_lantern_mse_loss_backward_attensor_attensor_attensor_intt)
  LOAD_SYMBOL(_lantern_l1_loss_out_attensor_attensor_attensor_intt)
  LOAD_SYMBOL(_lantern_l1_loss_attensor_attensor_intt)
  LOAD_SYMBOL(_lantern_l1_loss_backward_out_attensor_attensor_attensor_attensor_intt)
  LOAD_SYMBOL(_lantern_l1_loss_backward_attensor_attensor_attensor_intt)
  LOAD_SYMBOL(_lantern_multi_margin_loss_out_attensor_attensor_attensor_constatscalar_constatscalar_attensor_intt)
  LOAD_SYMBOL(_lantern_multi_margin_loss_attensor_attensor_constatscalar_constatscalar_attensor_intt)
  LOAD_SYMBOL(_lantern_multi_margin_loss_backward_out_attensor_attensor_attensor_attensor_constatscalar_constatscalar_attensor_intt)
  LOAD_SYMBOL(_lantern_multi_margin_loss_backward_attensor_attensor_attensor_constatscalar_constatscalar_attensor_intt)
  LOAD_SYMBOL(_lantern_multilabel_margin_loss_out_attensor_attensor_attensor_intt)
  LOAD_SYMBOL(_lantern_multilabel_margin_loss_attensor_attensor_intt)
  LOAD_SYMBOL(_lantern_multilabel_margin_loss_forward_out_attensor_attensor_attensor_attensor_intt)
  LOAD_SYMBOL(_lantern_multilabel_margin_loss_forward_attensor_attensor_intt)
  LOAD_SYMBOL(_lantern_multilabel_margin_loss_backward_out_attensor_attensor_attensor_attensor_intt_attensor)
  LOAD_SYMBOL(_lantern_multilabel_margin_loss_backward_attensor_attensor_attensor_intt_attensor)
  LOAD_SYMBOL(_lantern_nll_loss_out_attensor_attensor_attensor_attensor_intt_intt)
  LOAD_SYMBOL(_lantern_nll_loss_nd_attensor_attensor_attensor_intt_intt)
  LOAD_SYMBOL(_lantern_nll_loss_attensor_attensor_attensor_intt_intt)
  LOAD_SYMBOL(_lantern_nll_loss_forward_out_attensor_attensor_attensor_attensor_attensor_intt_intt)
  LOAD_SYMBOL(_lantern_nll_loss_forward_attensor_attensor_attensor_intt_intt)
  LOAD_SYMBOL(_lantern_nll_loss_backward_out_attensor_attensor_attensor_attensor_attensor_intt_intt_attensor)
  LOAD_SYMBOL(_lantern_nll_loss_backward_attensor_attensor_attensor_attensor_intt_intt_attensor)
  LOAD_SYMBOL(_lantern_nll_loss2d_out_attensor_attensor_attensor_attensor_intt_intt)
  LOAD_SYMBOL(_lantern_nll_loss2d_attensor_attensor_attensor_intt_intt)
  LOAD_SYMBOL(_lantern_nll_loss2d_forward_out_attensor_attensor_attensor_attensor_attensor_intt_intt)
  LOAD_SYMBOL(_lantern_nll_loss2d_forward_attensor_attensor_attensor_intt_intt)
  LOAD_SYMBOL(_lantern_nll_loss2d_backward_out_attensor_attensor_attensor_attensor_attensor_intt_intt_attensor)
  LOAD_SYMBOL(_lantern_nll_loss2d_backward_attensor_attensor_attensor_attensor_intt_intt_attensor)
  LOAD_SYMBOL(_lantern_smooth_l1_loss_out_attensor_attensor_attensor_intt_double)
  LOAD_SYMBOL(_lantern_smooth_l1_loss_attensor_attensor_intt_double)
  LOAD_SYMBOL(_lantern_smooth_l1_loss_backward_out_attensor_attensor_attensor_attensor_intt_double)
  LOAD_SYMBOL(_lantern_smooth_l1_loss_backward_attensor_attensor_attensor_intt_double)
  LOAD_SYMBOL(_lantern_huber_loss_out_attensor_attensor_attensor_intt_double)
  LOAD_SYMBOL(_lantern_huber_loss_attensor_attensor_intt_double)
  LOAD_SYMBOL(_lantern_huber_loss_backward_out_attensor_attensor_attensor_attensor_intt_double)
  LOAD_SYMBOL(_lantern_huber_loss_backward_attensor_attensor_attensor_intt_double)
  LOAD_SYMBOL(_lantern_soft_margin_loss_out_attensor_attensor_attensor_intt)
  LOAD_SYMBOL(_lantern_soft_margin_loss_attensor_attensor_intt)
  LOAD_SYMBOL(_lantern_soft_margin_loss_backward_out_attensor_attensor_attensor_attensor_intt)
  LOAD_SYMBOL(_lantern_soft_margin_loss_backward_attensor_attensor_attensor_intt)
  LOAD_SYMBOL(_lantern_elu_out_attensor_attensor_constatscalar_constatscalar_constatscalar)
  LOAD_SYMBOL(_lantern_elu_attensor_constatscalar_constatscalar_constatscalar)
  LOAD_SYMBOL(_lantern_elu_backward_attensor_constatscalar_constatscalar_constatscalar_bool_attensor)
  LOAD_SYMBOL(_lantern_elu__attensor_constatscalar_constatscalar_constatscalar)
  LOAD_SYMBOL(_lantern_glu_out_attensor_attensor_intt)
  LOAD_SYMBOL(_lantern_glu_attensor_intt)
  LOAD_SYMBOL(_lantern_glu_backward_out_attensor_attensor_attensor_intt)
  LOAD_SYMBOL(_lantern_glu_backward_attensor_attensor_intt)
  LOAD_SYMBOL(_lantern_hardsigmoid_out_attensor_attensor)
  LOAD_SYMBOL(_lantern_hardsigmoid_attensor)
  LOAD_SYMBOL(_lantern_hardsigmoid__attensor)
  LOAD_SYMBOL(_lantern_hardsigmoid_backward_attensor_attensor)
  LOAD_SYMBOL(_lantern_hardtanh_out_attensor_attensor_constatscalar_constatscalar)
  LOAD_SYMBOL(_lantern_hardtanh_attensor_constatscalar_constatscalar)
  LOAD_SYMBOL(_lantern_hardtanh_backward_out_attensor_attensor_attensor_constatscalar_constatscalar)
  LOAD_SYMBOL(_lantern_hardtanh_backward_attensor_attensor_constatscalar_constatscalar)
  LOAD_SYMBOL(_lantern_hardtanh__attensor_constatscalar_constatscalar)
  LOAD_SYMBOL(_lantern_hardswish_out_attensor_attensor)
  LOAD_SYMBOL(_lantern_hardswish_attensor)
  LOAD_SYMBOL(_lantern_hardswish__attensor)
  LOAD_SYMBOL(_lantern_hardswish_backward_attensor_attensor)
  LOAD_SYMBOL(_lantern_leaky_relu_out_attensor_attensor_constatscalar)
  LOAD_SYMBOL(_lantern_leaky_relu_attensor_constatscalar)
  LOAD_SYMBOL(_lantern_leaky_relu_backward_attensor_attensor_constatscalar_bool)
  LOAD_SYMBOL(_lantern_leaky_relu__attensor_constatscalar)
  LOAD_SYMBOL(_lantern_log_sigmoid_out_attensor_attensor)
  LOAD_SYMBOL(_lantern_log_sigmoid_attensor)
  LOAD_SYMBOL(_lantern_log_sigmoid_forward_out_attensor_attensor_attensor)
  LOAD_SYMBOL(_lantern_log_sigmoid_forward_attensor)
  LOAD_SYMBOL(_lantern_log_sigmoid_backward_out_attensor_attensor_attensor_attensor)
  LOAD_SYMBOL(_lantern_log_sigmoid_backward_attensor_attensor_attensor)
  LOAD_SYMBOL(_lantern_rrelu_with_noise_out_attensor_attensor_attensor_constatscalar_constatscalar_bool_atgenerator)
  LOAD_SYMBOL(_lantern_rrelu_with_noise_attensor_attensor_constatscalar_constatscalar_bool_atgenerator)
  LOAD_SYMBOL(_lantern_rrelu_with_noise_backward_attensor_attensor_attensor_constatscalar_constatscalar_bool_bool)
  LOAD_SYMBOL(_lantern_rrelu_with_noise__attensor_attensor_constatscalar_constatscalar_bool_atgenerator)
  LOAD_SYMBOL(_lantern_softplus_out_attensor_attensor_constatscalar_constatscalar)
  LOAD_SYMBOL(_lantern_softplus_attensor_constatscalar_constatscalar)
  LOAD_SYMBOL(_lantern_softplus_backward_out_attensor_attensor_attensor_constatscalar_constatscalar_attensor)
  LOAD_SYMBOL(_lantern_softplus_backward_attensor_attensor_constatscalar_constatscalar_attensor)
  LOAD_SYMBOL(_lantern_softshrink_out_attensor_attensor_constatscalar)
  LOAD_SYMBOL(_lantern_softshrink_attensor_constatscalar)
  LOAD_SYMBOL(_lantern_softshrink_backward_out_attensor_attensor_attensor_constatscalar)
  LOAD_SYMBOL(_lantern_softshrink_backward_attensor_attensor_constatscalar)
  LOAD_SYMBOL(_lantern_adaptive_avg_pool2d_out_attensor_attensor_atintarrayref)
  LOAD_SYMBOL(_lantern_adaptive_avg_pool2d_attensor_atintarrayref)
  LOAD_SYMBOL(_lantern_mkldnn_adaptive_avg_pool2d_attensor_atintarrayref)
  LOAD_SYMBOL(_lantern_mkldnn_adaptive_avg_pool2d_backward_attensor_attensor)
  LOAD_SYMBOL(_lantern__adaptive_avg_pool2d_attensor_atintarrayref)
  LOAD_SYMBOL(_lantern__adaptive_avg_pool2d_backward_attensor_attensor)
  LOAD_SYMBOL(_lantern_adaptive_avg_pool3d_out_attensor_attensor_atintarrayref)
  LOAD_SYMBOL(_lantern_adaptive_avg_pool3d_attensor_atintarrayref)
  LOAD_SYMBOL(_lantern__adaptive_avg_pool3d_attensor_atintarrayref)
  LOAD_SYMBOL(_lantern_adaptive_avg_pool3d_backward_out_attensor_attensor_attensor)
  LOAD_SYMBOL(_lantern__adaptive_avg_pool3d_backward_attensor_attensor)
  LOAD_SYMBOL(_lantern_adaptive_max_pool2d_out_attensor_attensor_attensor_atintarrayref)
  LOAD_SYMBOL(_lantern_adaptive_max_pool2d_attensor_atintarrayref)
  LOAD_SYMBOL(_lantern_adaptive_max_pool2d_backward_out_attensor_attensor_attensor_attensor)
  LOAD_SYMBOL(_lantern_adaptive_max_pool2d_backward_attensor_attensor_attensor)
  LOAD_SYMBOL(_lantern_adaptive_max_pool3d_out_attensor_attensor_attensor_atintarrayref)
  LOAD_SYMBOL(_lantern_adaptive_max_pool3d_attensor_atintarrayref)
  LOAD_SYMBOL(_lantern_adaptive_max_pool3d_backward_out_attensor_attensor_attensor_attensor)
  LOAD_SYMBOL(_lantern_adaptive_max_pool3d_backward_attensor_attensor_attensor)
  LOAD_SYMBOL(_lantern_avg_pool2d_out_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_bool_bool_intt)
  LOAD_SYMBOL(_lantern_avg_pool2d_attensor_atintarrayref_atintarrayref_atintarrayref_bool_bool_intt)
  LOAD_SYMBOL(_lantern_avg_pool2d_backward_out_attensor_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_bool_bool_intt)
  LOAD_SYMBOL(_lantern_avg_pool2d_backward_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_bool_bool_intt)
  LOAD_SYMBOL(_lantern_avg_pool3d_out_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_bool_bool_intt)
  LOAD_SYMBOL(_lantern_avg_pool3d_attensor_atintarrayref_atintarrayref_atintarrayref_bool_bool_intt)
  LOAD_SYMBOL(_lantern_avg_pool3d_backward_out_attensor_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_bool_bool_intt)
  LOAD_SYMBOL(_lantern_avg_pool3d_backward_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_bool_bool_intt)
  LOAD_SYMBOL(_lantern_fractional_max_pool2d_out_attensor_attensor_attensor_atintarrayref_atintarrayref_attensor)
  LOAD_SYMBOL(_lantern_fractional_max_pool2d_attensor_atintarrayref_atintarrayref_attensor)
  LOAD_SYMBOL(_lantern_fractional_max_pool2d_backward_out_attensor_attensor_attensor_atintarrayref_atintarrayref_attensor)
  LOAD_SYMBOL(_lantern_fractional_max_pool2d_backward_attensor_attensor_atintarrayref_atintarrayref_attensor)
  LOAD_SYMBOL(_lantern_fractional_max_pool3d_out_attensor_attensor_attensor_atintarrayref_atintarrayref_attensor)
  LOAD_SYMBOL(_lantern_fractional_max_pool3d_attensor_atintarrayref_atintarrayref_attensor)
  LOAD_SYMBOL(_lantern_fractional_max_pool3d_backward_out_attensor_attensor_attensor_atintarrayref_atintarrayref_attensor)
  LOAD_SYMBOL(_lantern_fractional_max_pool3d_backward_attensor_attensor_atintarrayref_atintarrayref_attensor)
  LOAD_SYMBOL(_lantern_max_pool2d_with_indices_out_attensor_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_atintarrayref_bool)
  LOAD_SYMBOL(_lantern_max_pool2d_with_indices_attensor_atintarrayref_atintarrayref_atintarrayref_atintarrayref_bool)
  LOAD_SYMBOL(_lantern_max_pool2d_with_indices_backward_out_attensor_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_atintarrayref_bool_attensor)
  LOAD_SYMBOL(_lantern_max_pool2d_with_indices_backward_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_atintarrayref_bool_attensor)
  LOAD_SYMBOL(_lantern_max_pool3d_with_indices_out_attensor_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_atintarrayref_bool)
  LOAD_SYMBOL(_lantern_max_pool3d_with_indices_attensor_atintarrayref_atintarrayref_atintarrayref_atintarrayref_bool)
  LOAD_SYMBOL(_lantern_max_pool3d_with_indices_backward_out_attensor_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_atintarrayref_bool_attensor)
  LOAD_SYMBOL(_lantern_max_pool3d_with_indices_backward_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_atintarrayref_bool_attensor)
  LOAD_SYMBOL(_lantern_max_unpool2d_out_attensor_attensor_attensor_atintarrayref)
  LOAD_SYMBOL(_lantern_max_unpool2d_attensor_attensor_atintarrayref)
  LOAD_SYMBOL(_lantern_max_unpool2d_backward_out_attensor_attensor_attensor_attensor_atintarrayref)
  LOAD_SYMBOL(_lantern_max_unpool2d_backward_attensor_attensor_attensor_atintarrayref)
  LOAD_SYMBOL(_lantern_max_unpool3d_out_attensor_attensor_attensor_atintarrayref_atintarrayref_atintarrayref)
  LOAD_SYMBOL(_lantern_max_unpool3d_attensor_attensor_atintarrayref_atintarrayref_atintarrayref)
  LOAD_SYMBOL(_lantern_max_unpool3d_backward_out_attensor_attensor_attensor_attensor_atintarrayref_atintarrayref_atintarrayref)
  LOAD_SYMBOL(_lantern_max_unpool3d_backward_attensor_attensor_attensor_atintarrayref_atintarrayref_atintarrayref)
  LOAD_SYMBOL(_lantern_reflection_pad1d_out_attensor_attensor_atintarrayref)
  LOAD_SYMBOL(_lantern_reflection_pad1d_attensor_atintarrayref)
  LOAD_SYMBOL(_lantern_reflection_pad1d_backward_out_attensor_attensor_attensor_atintarrayref)
  LOAD_SYMBOL(_lantern_reflection_pad1d_backward_attensor_attensor_atintarrayref)
  LOAD_SYMBOL(_lantern_reflection_pad2d_out_attensor_attensor_atintarrayref)
  LOAD_SYMBOL(_lantern_reflection_pad2d_attensor_atintarrayref)
  LOAD_SYMBOL(_lantern_reflection_pad2d_backward_out_attensor_attensor_attensor_atintarrayref)
  LOAD_SYMBOL(_lantern_reflection_pad2d_backward_attensor_attensor_atintarrayref)
  LOAD_SYMBOL(_lantern_replication_pad1d_out_attensor_attensor_atintarrayref)
  LOAD_SYMBOL(_lantern_replication_pad1d_attensor_atintarrayref)
  LOAD_SYMBOL(_lantern_replication_pad1d_backward_out_attensor_attensor_attensor_atintarrayref)
  LOAD_SYMBOL(_lantern_replication_pad1d_backward_attensor_attensor_atintarrayref)
  LOAD_SYMBOL(_lantern_replication_pad2d_out_attensor_attensor_atintarrayref)
  LOAD_SYMBOL(_lantern_replication_pad2d_attensor_atintarrayref)
  LOAD_SYMBOL(_lantern_replication_pad2d_backward_out_attensor_attensor_attensor_atintarrayref)
  LOAD_SYMBOL(_lantern_replication_pad2d_backward_attensor_attensor_atintarrayref)
  LOAD_SYMBOL(_lantern_replication_pad3d_out_attensor_attensor_atintarrayref)
  LOAD_SYMBOL(_lantern_replication_pad3d_attensor_atintarrayref)
  LOAD_SYMBOL(_lantern_replication_pad3d_backward_out_attensor_attensor_attensor_atintarrayref)
  LOAD_SYMBOL(_lantern_replication_pad3d_backward_attensor_attensor_atintarrayref)
  LOAD_SYMBOL(_lantern_upsample_linear1d_attensor_atintarrayref_bool_atarrayrefdouble)
  LOAD_SYMBOL(_lantern_upsample_linear1d_backward_attensor_atintarrayref_atintarrayref_bool_atarrayrefdouble)
  LOAD_SYMBOL(_lantern_upsample_bilinear2d_attensor_atintarrayref_bool_atarrayrefdouble)
  LOAD_SYMBOL(_lantern_upsample_bilinear2d_backward_attensor_atintarrayref_atintarrayref_bool_atarrayrefdouble)
  LOAD_SYMBOL(_lantern_upsample_trilinear3d_attensor_atintarrayref_bool_atarrayrefdouble)
  LOAD_SYMBOL(_lantern_upsample_trilinear3d_backward_attensor_atintarrayref_atintarrayref_bool_atarrayrefdouble)
  LOAD_SYMBOL(_lantern_upsample_bicubic2d_attensor_atintarrayref_bool_atarrayrefdouble)
  LOAD_SYMBOL(_lantern_upsample_bicubic2d_backward_attensor_atintarrayref_atintarrayref_bool_atarrayrefdouble)
  LOAD_SYMBOL(_lantern_upsample_nearest1d_attensor_atintarrayref_atarrayrefdouble)
  LOAD_SYMBOL(_lantern_upsample_nearest1d_backward_attensor_atintarrayref_atintarrayref_atarrayrefdouble)
  LOAD_SYMBOL(_lantern_upsample_nearest2d_attensor_atintarrayref_atarrayrefdouble)
  LOAD_SYMBOL(_lantern_upsample_nearest2d_backward_attensor_atintarrayref_atintarrayref_atarrayrefdouble)
  LOAD_SYMBOL(_lantern_upsample_nearest3d_attensor_atintarrayref_atarrayrefdouble)
  LOAD_SYMBOL(_lantern_upsample_nearest3d_backward_attensor_atintarrayref_atintarrayref_atarrayrefdouble)
  LOAD_SYMBOL(_lantern_upsample_linear1d_out_attensor_attensor_atintarrayref_bool_double)
  LOAD_SYMBOL(_lantern_upsample_linear1d_attensor_atintarrayref_bool_double)
  LOAD_SYMBOL(_lantern_upsample_linear1d_backward_out_attensor_attensor_atintarrayref_atintarrayref_bool_double)
  LOAD_SYMBOL(_lantern_upsample_linear1d_backward_attensor_atintarrayref_atintarrayref_bool_double)
  LOAD_SYMBOL(_lantern_upsample_bilinear2d_out_attensor_attensor_atintarrayref_bool_double_double)
  LOAD_SYMBOL(_lantern_upsample_bilinear2d_attensor_atintarrayref_bool_double_double)
  LOAD_SYMBOL(_lantern_upsample_bilinear2d_backward_out_attensor_attensor_atintarrayref_atintarrayref_bool_double_double)
  LOAD_SYMBOL(_lantern_upsample_bilinear2d_backward_attensor_atintarrayref_atintarrayref_bool_double_double)
  LOAD_SYMBOL(_lantern_upsample_bicubic2d_out_attensor_attensor_atintarrayref_bool_double_double)
  LOAD_SYMBOL(_lantern_upsample_bicubic2d_attensor_atintarrayref_bool_double_double)
  LOAD_SYMBOL(_lantern_upsample_bicubic2d_backward_out_attensor_attensor_atintarrayref_atintarrayref_bool_double_double)
  LOAD_SYMBOL(_lantern_upsample_bicubic2d_backward_attensor_atintarrayref_atintarrayref_bool_double_double)
  LOAD_SYMBOL(_lantern_upsample_trilinear3d_out_attensor_attensor_atintarrayref_bool_double_double_double)
  LOAD_SYMBOL(_lantern_upsample_trilinear3d_attensor_atintarrayref_bool_double_double_double)
  LOAD_SYMBOL(_lantern_upsample_trilinear3d_backward_out_attensor_attensor_atintarrayref_atintarrayref_bool_double_double_double)
  LOAD_SYMBOL(_lantern_upsample_trilinear3d_backward_attensor_atintarrayref_atintarrayref_bool_double_double_double)
  LOAD_SYMBOL(_lantern_upsample_nearest1d_out_attensor_attensor_atintarrayref_double)
  LOAD_SYMBOL(_lantern_upsample_nearest1d_attensor_atintarrayref_double)
  LOAD_SYMBOL(_lantern_upsample_nearest1d_backward_out_attensor_attensor_atintarrayref_atintarrayref_double)
  LOAD_SYMBOL(_lantern_upsample_nearest1d_backward_attensor_atintarrayref_atintarrayref_double)
  LOAD_SYMBOL(_lantern_upsample_nearest2d_out_attensor_attensor_atintarrayref_double_double)
  LOAD_SYMBOL(_lantern_upsample_nearest2d_attensor_atintarrayref_double_double)
  LOAD_SYMBOL(_lantern_upsample_nearest2d_backward_out_attensor_attensor_atintarrayref_atintarrayref_double_double)
  LOAD_SYMBOL(_lantern_upsample_nearest2d_backward_attensor_atintarrayref_atintarrayref_double_double)
  LOAD_SYMBOL(_lantern_upsample_nearest3d_out_attensor_attensor_atintarrayref_double_double_double)
  LOAD_SYMBOL(_lantern_upsample_nearest3d_attensor_atintarrayref_double_double_double)
  LOAD_SYMBOL(_lantern_upsample_nearest3d_backward_out_attensor_attensor_atintarrayref_atintarrayref_double_double_double)
  LOAD_SYMBOL(_lantern_upsample_nearest3d_backward_attensor_atintarrayref_atintarrayref_double_double_double)
  LOAD_SYMBOL(_lantern_sigmoid_backward_out_attensor_attensor_attensor)
  LOAD_SYMBOL(_lantern_sigmoid_backward_attensor_attensor)
  LOAD_SYMBOL(_lantern_logit_backward_out_attensor_attensor_attensor_double)
  LOAD_SYMBOL(_lantern_logit_backward_attensor_attensor_double)
  LOAD_SYMBOL(_lantern_tanh_backward_out_attensor_attensor_attensor)
  LOAD_SYMBOL(_lantern_tanh_backward_attensor_attensor)
  LOAD_SYMBOL(_lantern_slow_conv_transpose2d_out_attensor_attensor_attensor_atintarrayref_attensor_atintarrayref_atintarrayref_atintarrayref_atintarrayref)
  LOAD_SYMBOL(_lantern_slow_conv_transpose2d_attensor_attensor_atintarrayref_attensor_atintarrayref_atintarrayref_atintarrayref_atintarrayref)
  LOAD_SYMBOL(_lantern_slow_conv_transpose2d_backward_out_attensor_attensor_attensor_attensor_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_atintarrayref_atintarrayref_attensor_attensor)
  LOAD_SYMBOL(_lantern_slow_conv_transpose2d_backward_attensor_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_atintarrayref_atintarrayref_attensor_attensor_stdarraybool)
  LOAD_SYMBOL(_lantern_slow_conv_transpose3d_out_attensor_attensor_attensor_atintarrayref_attensor_atintarrayref_atintarrayref_atintarrayref_atintarrayref)
  LOAD_SYMBOL(_lantern_slow_conv_transpose3d_attensor_attensor_atintarrayref_attensor_atintarrayref_atintarrayref_atintarrayref_atintarrayref)
  LOAD_SYMBOL(_lantern_slow_conv_transpose3d_backward_out_attensor_attensor_attensor_attensor_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_atintarrayref_atintarrayref_attensor_attensor)
  LOAD_SYMBOL(_lantern_slow_conv_transpose3d_backward_attensor_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_atintarrayref_atintarrayref_attensor_attensor_stdarraybool)
  LOAD_SYMBOL(_lantern_thnn_conv2d_out_attensor_attensor_attensor_atintarrayref_attensor_atintarrayref_atintarrayref)
  LOAD_SYMBOL(_lantern_thnn_conv2d_attensor_attensor_atintarrayref_attensor_atintarrayref_atintarrayref)
  LOAD_SYMBOL(_lantern_thnn_conv2d_forward_out_attensor_attensor_attensor_attensor_attensor_atintarrayref_attensor_atintarrayref_atintarrayref)
  LOAD_SYMBOL(_lantern_thnn_conv2d_forward_attensor_attensor_atintarrayref_attensor_atintarrayref_atintarrayref)
  LOAD_SYMBOL(_lantern_thnn_conv2d_backward_out_attensor_attensor_attensor_attensor_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_attensor_attensor)
  LOAD_SYMBOL(_lantern_thnn_conv2d_backward_attensor_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_attensor_attensor_stdarraybool)
  LOAD_SYMBOL(_lantern_thnn_conv_depthwise2d_out_attensor_attensor_attensor_atintarrayref_attensor_atintarrayref_atintarrayref_atintarrayref)
  LOAD_SYMBOL(_lantern_thnn_conv_depthwise2d_attensor_attensor_atintarrayref_attensor_atintarrayref_atintarrayref_atintarrayref)
  LOAD_SYMBOL(_lantern_thnn_conv_depthwise2d_forward_out_attensor_attensor_attensor_atintarrayref_attensor_atintarrayref_atintarrayref_atintarrayref)
  LOAD_SYMBOL(_lantern_thnn_conv_depthwise2d_forward_attensor_attensor_atintarrayref_attensor_atintarrayref_atintarrayref_atintarrayref)
  LOAD_SYMBOL(_lantern_thnn_conv_depthwise2d_backward_out_attensor_attensor_attensor_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_atintarrayref)
  LOAD_SYMBOL(_lantern_thnn_conv_depthwise2d_backward_attensor_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_atintarrayref_stdarraybool)
  LOAD_SYMBOL(_lantern_conv_depthwise3d_attensor_attensor_atintarrayref_attensor_atintarrayref_atintarrayref_atintarrayref)
  LOAD_SYMBOL(_lantern_conv_depthwise3d_backward_out_attensor_attensor_attensor_attensor_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_atintarrayref)
  LOAD_SYMBOL(_lantern_conv_depthwise3d_backward_attensor_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_atintarrayref_stdarraybool)
  LOAD_SYMBOL(_lantern_slow_conv3d_out_attensor_attensor_attensor_atintarrayref_attensor_atintarrayref_atintarrayref)
  LOAD_SYMBOL(_lantern_slow_conv3d_attensor_attensor_atintarrayref_attensor_atintarrayref_atintarrayref)
  LOAD_SYMBOL(_lantern_slow_conv3d_forward_out_attensor_attensor_attensor_attensor_attensor_atintarrayref_attensor_atintarrayref_atintarrayref)
  LOAD_SYMBOL(_lantern_slow_conv3d_forward_attensor_attensor_atintarrayref_attensor_atintarrayref_atintarrayref)
  LOAD_SYMBOL(_lantern_slow_conv3d_backward_out_attensor_attensor_attensor_attensor_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_attensor_attensor)
  LOAD_SYMBOL(_lantern_slow_conv3d_backward_attensor_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_attensor_attensor_stdarraybool)
  LOAD_SYMBOL(_lantern_slow_conv_dilated2d_attensor_attensor_atintarrayref_attensor_atintarrayref_atintarrayref_atintarrayref)
  LOAD_SYMBOL(_lantern_slow_conv_dilated2d_backward_attensor_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_atintarrayref_stdarraybool)
  LOAD_SYMBOL(_lantern_slow_conv_dilated3d_attensor_attensor_atintarrayref_attensor_atintarrayref_atintarrayref_atintarrayref)
  LOAD_SYMBOL(_lantern_slow_conv_dilated3d_backward_attensor_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_atintarrayref_stdarraybool)
  LOAD_SYMBOL(_lantern_col2im_out_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_atintarrayref_atintarrayref)
  LOAD_SYMBOL(_lantern_col2im_attensor_atintarrayref_atintarrayref_atintarrayref_atintarrayref_atintarrayref)
  LOAD_SYMBOL(_lantern_col2im_backward_out_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_atintarrayref)
  LOAD_SYMBOL(_lantern_col2im_backward_attensor_atintarrayref_atintarrayref_atintarrayref_atintarrayref)
  LOAD_SYMBOL(_lantern_column_stack_attensorlist)
  LOAD_SYMBOL(_lantern_column_stack_out_attensor_attensorlist)
  LOAD_SYMBOL(_lantern_im2col_out_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_atintarrayref)
  LOAD_SYMBOL(_lantern_im2col_attensor_atintarrayref_atintarrayref_atintarrayref_atintarrayref)
  LOAD_SYMBOL(_lantern_im2col_backward_out_attensor_attensor_atintarrayref_atintarrayref_atintarrayref_atintarrayref_atintarrayref)
  LOAD_SYMBOL(_lantern_im2col_backward_attensor_atintarrayref_atintarrayref_atintarrayref_atintarrayref_atintarrayref)
  LOAD_SYMBOL(_lantern_isfinite_attensor)
  LOAD_SYMBOL(_lantern_Tensor_isfinite_attensor)
  LOAD_SYMBOL(_lantern_isinf_attensor)
  LOAD_SYMBOL(_lantern_Tensor_isinf_attensor)
  LOAD_SYMBOL(_lantern_Tensor_record_stream_attensor_atstream)
  LOAD_SYMBOL(_lantern_isposinf_attensor)
  LOAD_SYMBOL(_lantern_Tensor_isposinf_attensor)
  LOAD_SYMBOL(_lantern_isposinf_out_attensor_attensor)
  LOAD_SYMBOL(_lantern_isneginf_attensor)
  LOAD_SYMBOL(_lantern_Tensor_isneginf_attensor)
  LOAD_SYMBOL(_lantern_isneginf_out_attensor_attensor)
  LOAD_SYMBOL(_lantern__add_batch_dim_attensor_intt_intt)
  LOAD_SYMBOL(_lantern__remove_batch_dim_attensor_intt_intt_intt)
  LOAD_SYMBOL(_lantern_special_entr_attensor)
  LOAD_SYMBOL(_lantern_special_entr_out_attensor_attensor)
  LOAD_SYMBOL(_lantern_special_expm1_attensor)
  LOAD_SYMBOL(_lantern_special_expm1_out_attensor_attensor)
  LOAD_SYMBOL(_lantern_special_exp2_attensor)
  LOAD_SYMBOL(_lantern_special_exp2_out_attensor_attensor)
  LOAD_SYMBOL(_lantern_special_gammaln_attensor)
  LOAD_SYMBOL(_lantern_special_gammaln_out_attensor_attensor)
  LOAD_SYMBOL(_lantern_special_erf_attensor)
  LOAD_SYMBOL(_lantern_special_erf_out_attensor_attensor)
  LOAD_SYMBOL(_lantern_special_erfc_attensor)
  LOAD_SYMBOL(_lantern_special_erfc_out_attensor_attensor)
  LOAD_SYMBOL(_lantern_special_erfinv_attensor)
  LOAD_SYMBOL(_lantern_special_erfinv_out_attensor_attensor)
  LOAD_SYMBOL(_lantern_special_xlog1py_attensor_attensor)
  LOAD_SYMBOL(_lantern_special_xlog1py_constatscalar_attensor)
  LOAD_SYMBOL(_lantern_special_xlog1py_attensor_constatscalar)
  LOAD_SYMBOL(_lantern_special_xlog1py_out_attensor_attensor_attensor)
  LOAD_SYMBOL(_lantern_special_xlog1py_out_attensor_constatscalar_attensor)
  LOAD_SYMBOL(_lantern_special_xlog1py_out_attensor_attensor_constatscalar)
  LOAD_SYMBOL(_lantern_special_i0e_attensor)
  LOAD_SYMBOL(_lantern_special_i0e_out_attensor_attensor)
  LOAD_SYMBOL(_lantern_special_logit_attensor_double)
  LOAD_SYMBOL(_lantern_special_logit_out_attensor_attensor_double)
  LOAD_SYMBOL(_lantern_special_expit_attensor)
  LOAD_SYMBOL(_lantern_special_expit_out_attensor_attensor)
  LOAD_SYMBOL(_lantern_fft_fft_attensor_intt_intt_stdstring)
  LOAD_SYMBOL(_lantern_fft_fft_out_attensor_attensor_intt_intt_stdstring)
  LOAD_SYMBOL(_lantern_fft_ifft_attensor_intt_intt_stdstring)
  LOAD_SYMBOL(_lantern_fft_ifft_out_attensor_attensor_intt_intt_stdstring)
  LOAD_SYMBOL(_lantern_fft_rfft_attensor_intt_intt_stdstring)
  LOAD_SYMBOL(_lantern_fft_rfft_out_attensor_attensor_intt_intt_stdstring)
  LOAD_SYMBOL(_lantern_fft_irfft_attensor_intt_intt_stdstring)
  LOAD_SYMBOL(_lantern_fft_irfft_out_attensor_attensor_intt_intt_stdstring)
  LOAD_SYMBOL(_lantern_fft_hfft_attensor_intt_intt_stdstring)
  LOAD_SYMBOL(_lantern_fft_hfft_out_attensor_attensor_intt_intt_stdstring)
  LOAD_SYMBOL(_lantern_fft_ihfft_attensor_intt_intt_stdstring)
  LOAD_SYMBOL(_lantern_fft_ihfft_out_attensor_attensor_intt_intt_stdstring)
  LOAD_SYMBOL(_lantern_fft_fft2_attensor_atintarrayref_atintarrayref_stdstring)
  LOAD_SYMBOL(_lantern_fft_fft2_out_attensor_attensor_atintarrayref_atintarrayref_stdstring)
  LOAD_SYMBOL(_lantern_fft_ifft2_attensor_atintarrayref_atintarrayref_stdstring)
  LOAD_SYMBOL(_lantern_fft_ifft2_out_attensor_attensor_atintarrayref_atintarrayref_stdstring)
  LOAD_SYMBOL(_lantern_fft_rfft2_attensor_atintarrayref_atintarrayref_stdstring)
  LOAD_SYMBOL(_lantern_fft_rfft2_out_attensor_attensor_atintarrayref_atintarrayref_stdstring)
  LOAD_SYMBOL(_lantern_fft_irfft2_attensor_atintarrayref_atintarrayref_stdstring)
  LOAD_SYMBOL(_lantern_fft_irfft2_out_attensor_attensor_atintarrayref_atintarrayref_stdstring)
  LOAD_SYMBOL(_lantern_fft_fftn_attensor_atintarrayref_atintarrayref_stdstring)
  LOAD_SYMBOL(_lantern_fft_fftn_out_attensor_attensor_atintarrayref_atintarrayref_stdstring)
  LOAD_SYMBOL(_lantern_fft_ifftn_attensor_atintarrayref_atintarrayref_stdstring)
  LOAD_SYMBOL(_lantern_fft_ifftn_out_attensor_attensor_atintarrayref_atintarrayref_stdstring)
  LOAD_SYMBOL(_lantern_fft_rfftn_attensor_atintarrayref_atintarrayref_stdstring)
  LOAD_SYMBOL(_lantern_fft_rfftn_out_attensor_attensor_atintarrayref_atintarrayref_stdstring)
  LOAD_SYMBOL(_lantern_fft_irfftn_attensor_atintarrayref_atintarrayref_stdstring)
  LOAD_SYMBOL(_lantern_fft_irfftn_out_attensor_attensor_atintarrayref_atintarrayref_stdstring)
  LOAD_SYMBOL(_lantern_fft_fftfreq_intt_double_attensoroptions)
  LOAD_SYMBOL(_lantern_fft_fftfreq_out_attensor_intt_double)
  LOAD_SYMBOL(_lantern_fft_rfftfreq_intt_double_attensoroptions)
  LOAD_SYMBOL(_lantern_fft_rfftfreq_out_attensor_intt_double)
  LOAD_SYMBOL(_lantern_fft_fftshift_attensor_atintarrayref)
  LOAD_SYMBOL(_lantern_fft_ifftshift_attensor_atintarrayref)
  LOAD_SYMBOL(_lantern_linalg_cholesky_ex_attensor_bool)
  LOAD_SYMBOL(_lantern_linalg_cholesky_ex_out_attensor_attensor_attensor_bool)
  LOAD_SYMBOL(_lantern_linalg_cholesky_attensor)
  LOAD_SYMBOL(_lantern_linalg_cholesky_out_attensor_attensor)
  LOAD_SYMBOL(_lantern_linalg_det_attensor)
  LOAD_SYMBOL(_lantern_linalg_det_out_attensor_attensor)
  LOAD_SYMBOL(_lantern_det_attensor)
  LOAD_SYMBOL(_lantern_Tensor_det_attensor)
  LOAD_SYMBOL(_lantern_linalg_lstsq_attensor_attensor_double_stdstring)
  LOAD_SYMBOL(_lantern_linalg_lstsq_out_attensor_attensor_attensor_attensor_attensor_attensor_double_stdstring)
  LOAD_SYMBOL(_lantern_linalg_slogdet_attensor)
  LOAD_SYMBOL(_lantern_linalg_slogdet_out_attensor_attensor_attensor)
  LOAD_SYMBOL(_lantern_linalg_eig_attensor)
  LOAD_SYMBOL(_lantern_linalg_eig_out_attensor_attensor_attensor)
  LOAD_SYMBOL(_lantern_linalg_eigvals_attensor)
  LOAD_SYMBOL(_lantern_linalg_eigvals_out_attensor_attensor)
  LOAD_SYMBOL(_lantern_linalg_eigh_attensor_stdstring)
  LOAD_SYMBOL(_lantern_linalg_eigh_out_attensor_attensor_attensor_stdstring)
  LOAD_SYMBOL(_lantern_linalg_eigvalsh_attensor_stdstring)
  LOAD_SYMBOL(_lantern_linalg_eigvalsh_out_attensor_attensor_stdstring)
  LOAD_SYMBOL(_lantern_linalg_householder_product_attensor_attensor)
  LOAD_SYMBOL(_lantern_linalg_householder_product_out_attensor_attensor_attensor)
  LOAD_SYMBOL(_lantern__linalg_inv_out_helper__attensor_attensor_attensor)
  LOAD_SYMBOL(_lantern_linalg_inv_ex_attensor_bool)
  LOAD_SYMBOL(_lantern_linalg_inv_ex_out_attensor_attensor_attensor_bool)
  LOAD_SYMBOL(_lantern_linalg_inv_attensor)
  LOAD_SYMBOL(_lantern_linalg_inv_out_attensor_attensor)
  LOAD_SYMBOL(_lantern_inner_attensor_attensor)
  LOAD_SYMBOL(_lantern_Tensor_inner_attensor_attensor)
  LOAD_SYMBOL(_lantern_inner_out_attensor_attensor_attensor)
  LOAD_SYMBOL(_lantern_outer_attensor_attensor)
  LOAD_SYMBOL(_lantern_Tensor_outer_attensor_attensor)
  LOAD_SYMBOL(_lantern_outer_out_attensor_attensor_attensor)
  LOAD_SYMBOL(_lantern_ger_attensor_attensor)
  LOAD_SYMBOL(_lantern_Tensor_ger_attensor_attensor)
  LOAD_SYMBOL(_lantern_ger_out_attensor_attensor_attensor)
  LOAD_SYMBOL(_lantern_linalg_norm_attensor_constatscalar_atintarrayref_bool_atscalartype)
  LOAD_SYMBOL(_lantern_linalg_norm_attensor_stdstring_atintarrayref_bool_atscalartype)
  LOAD_SYMBOL(_lantern_linalg_norm_out_attensor_attensor_constatscalar_atintarrayref_bool_atscalartype)
  LOAD_SYMBOL(_lantern_linalg_norm_out_attensor_attensor_stdstring_atintarrayref_bool_atscalartype)
  LOAD_SYMBOL(_lantern_linalg_vector_norm_attensor_constatscalar_atintarrayref_bool_atscalartype)
  LOAD_SYMBOL(_lantern_linalg_vector_norm_out_attensor_attensor_constatscalar_atintarrayref_bool_atscalartype)
  LOAD_SYMBOL(_lantern_linalg_matrix_norm_attensor_constatscalar_atintarrayref_bool_atscalartype)
  LOAD_SYMBOL(_lantern_linalg_matrix_norm_out_attensor_attensor_constatscalar_atintarrayref_bool_atscalartype)
  LOAD_SYMBOL(_lantern_linalg_matrix_norm_attensor_stdstring_atintarrayref_bool_atscalartype)
  LOAD_SYMBOL(_lantern_linalg_matrix_norm_out_attensor_attensor_stdstring_atintarrayref_bool_atscalartype)
  LOAD_SYMBOL(_lantern_linalg_svd_out_attensor_attensor_attensor_attensor_bool)
  LOAD_SYMBOL(_lantern_linalg_svd_attensor_bool)
  LOAD_SYMBOL(_lantern_linalg_svdvals_attensor)
  LOAD_SYMBOL(_lantern_linalg_svdvals_out_attensor_attensor)
  LOAD_SYMBOL(_lantern_linalg_cond_attensor_constatscalar)
  LOAD_SYMBOL(_lantern_linalg_cond_out_attensor_attensor_constatscalar)
  LOAD_SYMBOL(_lantern_linalg_cond_attensor_stdstring)
  LOAD_SYMBOL(_lantern_linalg_cond_out_attensor_attensor_stdstring)
  LOAD_SYMBOL(_lantern_linalg_pinv_attensor_double_bool)
  LOAD_SYMBOL(_lantern_linalg_pinv_attensor_attensor_bool)
  LOAD_SYMBOL(_lantern_linalg_pinv_out_attensor_attensor_double_bool)
  LOAD_SYMBOL(_lantern_linalg_pinv_out_attensor_attensor_attensor_bool)
  LOAD_SYMBOL(_lantern__linalg_solve_out_helper__attensor_attensor_attensor)
  LOAD_SYMBOL(_lantern_linalg_solve_attensor_attensor)
  LOAD_SYMBOL(_lantern_linalg_solve_out_attensor_attensor_attensor)
  LOAD_SYMBOL(_lantern_linalg_tensorinv_attensor_intt)
  LOAD_SYMBOL(_lantern_linalg_tensorinv_out_attensor_attensor_intt)
  LOAD_SYMBOL(_lantern_linalg_tensorsolve_attensor_attensor_atintarrayref)
  LOAD_SYMBOL(_lantern_linalg_tensorsolve_out_attensor_attensor_attensor_atintarrayref)
  LOAD_SYMBOL(_lantern_linalg_qr_attensor_stdstring)
  LOAD_SYMBOL(_lantern_linalg_qr_out_attensor_attensor_attensor_stdstring)
  LOAD_SYMBOL(_lantern__linalg_qr_helper_attensor_stdstring)
  LOAD_SYMBOL(_lantern_linalg_matrix_power_attensor_intt)
  LOAD_SYMBOL(_lantern_linalg_matrix_power_out_attensor_attensor_intt)
  LOAD_SYMBOL(_lantern_linalg_matrix_rank_attensor_double_bool)
  LOAD_SYMBOL(_lantern_linalg_matrix_rank_out_attensor_attensor_double_bool)
  LOAD_SYMBOL(_lantern_linalg_matrix_rank_attensor_attensor_bool)
  LOAD_SYMBOL(_lantern_linalg_matrix_rank_out_attensor_attensor_attensor_bool)
  LOAD_SYMBOL(_lantern_linalg_multi_dot_attensorlist)
  LOAD_SYMBOL(_lantern_linalg_multi_dot_out_attensor_attensorlist)
  LOAD_SYMBOL(_lantern__test_serialization_subcmul_attensor_attensor_constatscalar)
  LOAD_SYMBOL(_lantern__test_optional_intlist_attensor_atintarrayref)
  LOAD_SYMBOL(_lantern__test_optional_filled_intlist_attensor_atintarrayref)
  LOAD_SYMBOL(_lantern__test_optional_floatlist_attensor_atarrayrefdouble)
  LOAD_SYMBOL(_lantern__test_string_default_attensor_stdstring_stdstring)
  LOAD_SYMBOL(_lantern__test_ambiguous_defaults_attensor_intt_intt)
  LOAD_SYMBOL(_lantern__test_ambiguous_defaults_attensor_intt_stdstring)
  LOAD_SYMBOL(_lantern_segment_reduce_attensor_stdstring_attensor_attensor_intt_bool_constatscalar)
  LOAD_SYMBOL(_lantern_segment_reduce_backward_attensor_attensor_attensor_attensor)
  LOAD_SYMBOL(_lantern_pad_sequence_attensorlist_bool_double)
  LOAD_SYMBOL(_lantern_flatten_dense_tensors_attensorlist)
  LOAD_SYMBOL(_lantern_unflatten_dense_tensors_attensor_attensorlist)
  /* Autogen Symbols -- End */

  return true;
}

#else

extern bool lanternInit(const std::string &libPath, std::string *pError);
extern bool laternCloseLibrary(void *pLib, std::string *pError);

#endif
#endif
