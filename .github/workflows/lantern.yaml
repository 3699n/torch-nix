name: Lantern

on: [push]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-2019, ubuntu-18.04, macos-10.15]
        include:
          - os: windows-2019
            library: lantern.dll
            test: "& './lanterntest.exe' "
            make: "& 'C:/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/MSBuild/Current/Bin/MSBuild' lantern.sln /t:Build /p:Configuration=Release"
            build: build/Release
            libext: .dll
            exeext: .exe
            fixlib:
            flavor: Release
            artifacts: lantern.dll
          - os: ubuntu-18.04
            library: liblantern.so
            test: ./lanterntest
            make: make
            build: build
            libext:
            exeext:
            fixlib: chrpath -r '$ORIGIN/.' liblantern.so
            flavor: Release
            artifacts: liblantern.so
          - os: macos-10.15
            library: liblantern.dylib
            test: ./lanterntest
            make: make
            build: build
            libext: .dylib
            exeext:
            fixlib: install_name_tool -add_rpath @loader_path/. liblantern.dylib
            flavor: Release
            artifacts: liblantern.dylib
    steps:
      - uses: actions/checkout@v2
      - name: Create environment
        run: cmake -E make_directory ${{runner.workspace}}/build
      - name: Run cmake
        working-directory: ${{runner.workspace}}/build
        run: cmake -DCMAKE_BUILD_TYPE=${{matrix.flavor}} ${{github.workspace}}/lantern
      - name: Run make
        working-directory: ${{runner.workspace}}/build
        run: ${{matrix.make}}
      - name: Fix library
        working-directory: ${{runner.workspace}}/build
        run: ${{matrix.fixlib}}
      - name: Install libs
        working-directory: ${{runner.workspace}}
        run: |
          mkdir install
          cp ${{matrix.build}}/lanterntest${{matrix.exeext}} install/
          cp ${{matrix.build}}/${{matrix.library}} install/${{matrix.library}}
          cp build/libtorch/lib/*${{matrix.libext}} install
          mkdir artifacts
          cp -R ${{matrix.build}}/${{matrix.artifacts}} artifacts
          rm -r build
      - name: Test library
        working-directory: ${{runner.workspace}}/install
        run: ${{matrix.test}} ${{runner.workspace}}/install
      - name: Upload artifacts
        uses: actions/upload-artifact@v1
        with:
          name: ${{runner.os}}
          path: ${{runner.workspace}}/artifacts
      - name: zip files
        uses: montudor/action-zip@v0.1.0
        with:
          args: zip -j -qq -r ${{runner.workspace}}/${{ matrix.os }}.zip ${{runner.workspace}}/artifacts/${{matrix.artifact}}
      - name: upload
        uses: svenstaro/upload-release-action@v1-release
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ${{runner.workspace}}/${{ matrix.os }}.zip
          tag: ${{ github.ref }}
          asset_name: ${{ matrix.os }}-cpu.zip
          overwrite: true
  autogen:
    runs-on: ubuntu-16.04
    name: autogen (ubuntu-16.04)
    timeout-minutes: 5
    steps:
      - uses: actions/checkout@v2
      - name: Create environment
        run: mkdir ${{runner.workspace}}/build
      - name: Run cmake
        working-directory: ${{runner.workspace}}/build
        run: cmake ${{github.workspace}}/lantern/headers
      - name: Run make
        working-directory: ${{runner.workspace}}/build
        run: make
      - name: Prepare autogen
        working-directory: ${{runner.workspace}}
        run: |
          mkdir output
          cp ${{github.workspace}}/lantern/src/lantern.cpp output/lantern.cpp
          cp ${{github.workspace}}/lantern/include/lantern/lantern.h output/lantern.h
      - name: Run autogen
        working-directory: ${{runner.workspace}}/build
        run: ./lanterngen ${{github.workspace}}/lantern/headers/declarations/declarations.yaml ${{runner.workspace}}/output/lantern.cpp ${{runner.workspace}}/output/lantern.h
      - name: Upload artifacts
        uses: actions/upload-artifact@v1
        with:
          name: Autogen
          path: ${{runner.workspace}}/output
