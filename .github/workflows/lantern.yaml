name: Lantern

on:
  push:
    branches:
      - master
      - main
<<<<<<< HEAD
      - "cran/**"
      - cuda-116
      - empty-cache
      - nonabi116
      - disk
=======
      - configure
>>>>>>> cc91689ea (Produce and upload lantern binary packages)

jobs:
  build:
    runs-on: ${{ matrix.config.os }}
    container: ${{ matrix.config.container }}
    strategy:
      fail-fast: false
      matrix:
        config:
          - {
              os: macOS-latest,
            }
          - {
              os: [self-hosted, m1],
            }
          - {
              os: windows-2019,
            }
          - {
              os: ubuntu-20.04,
              container: "ubuntu:18.04",
            }
          - {
              os: [self-hosted, gce],
              cuda: "11.6",
              cuda_patch: "1",
              cudnn: "https://storage.googleapis.com/torch-lantern-builds/cudnn/cudnn-linux-x86_64-8.6.0.163_cuda11-archive.tgz",
              container: "ubuntu:18.04",
            }
          - {
              os: ubuntu-20.04,
<<<<<<< HEAD
              artifact: "build/liblantern.so",
              upload: "LinuxNonABI-Cuda-116",
              cuda: "11.6",
              cuda_patch: "1",
              cudnn: "https://storage.googleapis.com/torch-lantern-builds/cudnn/cudnn-linux-x86_64-8.6.0.163_cuda11-archive.tgz",
              fixlib: "chrpath -r '$ORIGIN/.' liblantern.so",
              pre_cxx11_abi: 1,
              container: "ubuntu:18.04",
            }
          - {
              os: [self-hosted, gce, disk],
              artifact: "build/liblantern.so",
              upload: "Linux-Cuda-113",
=======
>>>>>>> cc91689ea (Produce and upload lantern binary packages)
              cuda: "11.3",
              cuda_patch: "1",
              cudnn: "https://storage.googleapis.com/torch-lantern-builds/cudnn/cudnn-11.3-linux-x64-v8.2.1.32.tgz",
              container: "ubuntu:18.04",
            }
          - {
              os: ubuntu-20.04,
              cuda: "10.2",
              cuda_patch: "89",
              cudnn: "https://storage.googleapis.com/torch-lantern-builds/cudnn/cudnn-10.2-linux-x64-v7.6.5.32.tgz",
              container: "ubuntu:18.04",
            }
          - {
              os: windows-2019,
              upload: "Windows-Cuda-113",
              cuda: "11.3",
              cuda_patch: "1",
              cudnn: "https://storage.googleapis.com/torch-lantern-builds/cudnn/cudnn-11.3-windows-x64-v8.2.1.32.zip",
            }
    env:
      CUDA: ${{matrix.config.cuda}}
      PRECXX11ABI: ${{matrix.config.pre_cxx11_abi}}

    steps:

      - name: Install system dependencies
        if: matrix.config.container != ''
        run: |
          apt update
          apt install -y curl sudo libxml2-dev wget chrpath rsync git
          curl -fsSL https://get.docker.com -o get-docker.sh
          DRY_RUN=1 sh ./get-docker.sh

      - uses: actions/checkout@v3

      - name: Setup cmake
        uses: jwlawson/actions-setup-cmake@v1
        with:
          cmake-version: "latest"

      - name: Install CUDA
        if: ${{matrix.config.cuda != ''}}
        uses: Jimver/cuda-toolkit@v0.2.8
        id: cuda-toolkit
        with:
          cuda: "${{matrix.config.cuda}}.${{matrix.config.cuda_patch}}"

      - name: Install cuDNN (Linux)
        if: ${{ matrix.config.cuda != '' && runner.os == 'Linux' }}
        run: |
          find $CUDA_PATH -maxdepth 2 -type d -ls
          wget --quiet ${{matrix.config.cudnn}} -O cudnn.tgz
          tar -xzvf cudnn.tgz
          sudo cp cuda/include/cudnn*.h $CUDA_PATH/include
          sudo cp cuda/lib64/libcudnn* $CUDA_PATH/lib64 2>/dev/null || :
          sudo cp cuda/lib/libcudnn* $CUDA_PATH/lib64 2>/dev/null || :
          sudo chmod a+r $CUDA_PATH/include/cudnn*.h $CUDA_PATH/lib64/libcudnn* 2>/dev/null || :
          sudo chmod a+r $CUDA_PATH/include/cudnn*.h $CUDA_PATH/lib/libcudnn* 2>/dev/null || :
          ls $CUDA_PATH/lib/ || true
          ls $CUDA_PATH/lib64/ || true
          rm cudnn.tgz
          find $CUDA_PATH -maxdepth 2 -type d -ls

      - name: Install cuDNN (Windows)
        if: ${{ matrix.config.cuda != '' && runner.os == 'Windows' }}
        run: |
          curl ${{ matrix.config.cudnn }} --output cudnn.zip --silent --location
          Expand-Archive -Path cudnn.zip -DestinationPath "C:\cudnn"
          Get-ChildItem -Path "C:\cudnn"
          Get-ChildItem -Path "${env:CUDA_PATH}"
          Move-Item -Path "C:\cudnn\cuda\bin\cudnn*.dll" -Destination "${env:CUDA_PATH}\bin"
          Move-Item -Path "C:\cudnn\cuda\include\cudnn*.h" -Destination "${env:CUDA_PATH}\include"
          Move-Item -Path "C:\cudnn\cuda\lib\x64\cudnn*.lib" -Destination "${env:CUDA_PATH}\lib\x64"
          echo "CUDNN_INCLUDE_PATH=""${CUDA_PATH}\include""" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          echo "CUDNN_LIBRARY_PATH=""${CUDA_PATH}\lib\x64""" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          Remove-Item -Path cudnn.zip

      - name: Run cmake
        run: |
          cd src/lantern/
          mkdir build
          cd build
          cmake ..

      - name: Build libs
        id: build
        run: |
          cd src/lantern/build
          cmake --build . --config Release --parallel 4 --target package
          fname=$(ls . | grep "lantern.*\.zip")
          echo "fname=$fname" >> $GITHUB_OUTPUT
        shell: bash

      - id: 'auth'
        uses: 'google-github-actions/auth@v1'
        with:
          credentials_json: '${{ secrets.GCP_APPLICATION_CREDENTIALS }}'

      - id: 'upload-file'
        uses: 'google-github-actions/upload-cloud-storage@v1'
        with:
          path: 'src/lantern/build/${{ steps.build.outputs.fname }}'
          destination: 'torch-lantern-builds/binaries/${{ github.sha }}/${{ steps.build.outputs.fname }}'

      - uses: 'google-github-actions/upload-cloud-storage@v1'
        with:
          path: 'src/lantern/build/${{ steps.build.outputs.fname }}'
          destination: 'torch-lantern-builds/binaries/${{ github.ref }}/latest/${{ steps.build.outputs.fname }}'
      