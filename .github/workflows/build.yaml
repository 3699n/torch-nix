name: Build

on: [push, deployment]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    timeout-minutes: 3
    strategy:
      matrix:
        os: [windows-2019, ubuntu-16.04, macos-10.15]
        include:
          - os: windows-latest
            library: lantern.dll
            test: "& './lanterntest.exe' "
            make: "& 'C:/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/MSBuild/Current/Bin/MSBuild' lantern.sln /t:Build /p:Configuration=Release"
            build: build/Release
            libext: .dll
            exeext: .exe
            fixlib:
            flavor: Release
            artifacts: lantern.dll
          - os: ubuntu-latest
            library: liblantern.so
            test: ./lanterntest
            make: make
            build: build
            libext: .so
            exeext:
            fixlib: chrpath -r '$ORIGIN/.' liblantern.so 
            flavor: Release
            artifacts: liblantern.so
          - os: macOS-latest
            library: liblantern.dylib
            test: ./lanterntest
            make: make
            build: build
            libext: .dylib
            exeext:
            fixlib: install_name_tool -add_rpath @loader_path/. liblantern.dylib
            flavor: Release
            artifacts: liblantern.dylib
    steps:
    - uses: actions/checkout@v2
    - name: Create environment
      run: cmake -E make_directory ${{runner.workspace}}/build
    - name: Run cmake
      working-directory: ${{runner.workspace}}/build
      run: cmake -DCMAKE_BUILD_TYPE=${{matrix.flavor}} ${{github.workspace}}
    - name: Run make
      working-directory: ${{runner.workspace}}/build
      run: ${{matrix.make}}
    - name: Fix library
      working-directory: ${{runner.workspace}}/build
      run: ${{matrix.fixlib}}
    - name: Install libs
      working-directory: ${{runner.workspace}}
      run: |
        mkdir install
        cp ${{matrix.build}}/lanterntest${{matrix.exeext}} install/
        cp ${{matrix.build}}/${{matrix.library}} install/${{matrix.library}}
        cp build/libtorch/lib/*${{matrix.libext}} install
        mkdir artifacts
        cp -R ${{matrix.build}}/${{matrix.artifacts}} artifacts
        rm -r build
    - name: Test library
      working-directory: ${{runner.workspace}}/install
      run: ${{matrix.test}} ${{runner.workspace}}/install
    - name: Upload artifacts
      uses: actions/upload-artifact@v1
      with:
        name: ${{runner.os}}
        path: ${{runner.workspace}}/artifacts
