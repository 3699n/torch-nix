#include <iostream>

#define LANTERN_BUILD

#include "lantern/lantern.h"

#include <torch/torch.h>

void lanternTest()
{
    std::cout << "-- Lantern: 0.1.0" << std::endl;

    std::cout << "-- Testing Tensor" << std::endl;
    torch::Tensor tensor = torch::rand({2, 3});
    std::cout << tensor << std::endl;

    std::cout << "-- Success!" << std::endl;
}

/* Autogen Body -- Start */
/*
void _cast_Byte() {}
void _cast_Char() {}
void _cast_Double() {}
void _cast_Float() {}
void _cast_Int() {}
void _cast_Long() {}
void _cast_Short() {}
void _cast_Half() {}
void backward() {}
void set_data() {}
void data() {}
void is_leaf() {}
void output_nr() {}
void _version() {}
void rename_() {}
void rename() {}
void align_to() {}
void align_as() {}
void align_tensors() {}
void refine_names() {}
void unflatten() {}
void unflatten() {}
void _cudnn_ctc_loss() {}
void _cudnn_rnn_flatten_weight() {}
void _cudnn_rnn() {}
void _cudnn_rnn_backward() {}
void _cudnn_init_dropout_state() {}
void _debug_has_internal_overlap() {}
void _fused_dropout() {}
void _masked_scale() {}
void _sobol_engine_draw() {}
void _sobol_engine_ff_() {}
void _sobol_engine_scramble_() {}
void _sobol_engine_initialize_state_() {}
void _reshape_from_tensor() {}
void _shape_as_tensor() {}
void dropout() {}
void dropout_() {}
void feature_dropout() {}
void feature_dropout_() {}
void alpha_dropout() {}
void alpha_dropout_() {}
void feature_alpha_dropout() {}
void feature_alpha_dropout_() {}
void abs() {}
void abs_() {}
void abs_out() {}
void acos() {}
void acos_() {}
void acos_out() {}
void avg_pool1d() {}
void adaptive_avg_pool1d() {}
void adaptive_max_pool1d() {}
void add() {}
void add_() {}
void add_out() {}
void add() {}
void add_() {}
void addmv() {}
void addmv_() {}
void addmv_out() {}
void addr() {}
void addr_() {}
void addr_out() {}
void affine_grid_generator() {}
void affine_grid_generator_backward() {}
void all() {}
void all_out() {}
void all() {}
void all_out() {}
void allclose() {}
void any() {}
void any_out() {}
void any() {}
void any_out() {}
void arange() {}
void arange() {}
void arange() {}
void arange_out() {}
void arange_out() {}
void _dim_arange() {}
void argmax() {}
void argmin() {}
void as_strided() {}
void as_strided_() {}
void asin() {}
void asin_() {}
void asin_out() {}
void atan() {}
void atan_() {}
void atan_out() {}
void baddbmm() {}
void baddbmm_() {}
void _baddbmm_mkl_() {}
void baddbmm_out() {}
void bartlett_window() {}
void bartlett_window() {}
void batch_norm() {}
void _batch_norm_impl_index() {}
void _batch_norm_impl_index_backward() {}
void bernoulli() {}
void bernoulli_out() {}
void bernoulli_() {}
void bernoulli_() {}
void bernoulli() {}
void bilinear() {}
void binary_cross_entropy_with_logits() {}
void binary_cross_entropy_with_logits_backward() {}
void bincount() {}
void bitwise_not() {}
void bitwise_not_() {}
void bitwise_not_out() {}
void logical_not() {}
void logical_not_() {}
void logical_not_out() {}
void logical_xor() {}
void logical_xor_() {}
void logical_xor_out() {}
void blackman_window() {}
void blackman_window() {}
void bmm() {}
void bmm_out() {}
void broadcast_tensors() {}
void cat() {}
void cat_out() {}
void cat() {}
void cat_out() {}
void ceil() {}
void ceil_() {}
void ceil_out() {}
void chain_matmul() {}
void chunk() {}
void clamp() {}
void clamp_() {}
void clamp_out() {}
void clamp_max() {}
void clamp_max_() {}
void clamp_max_out() {}
void clamp_min() {}
void clamp_min_() {}
void clamp_min_out() {}
void cudnn_is_acceptable() {}
void constant_pad_nd() {}
void contiguous() {}
void convolution() {}
void convolution_overrideable() {}
void convolution_backward_overrideable() {}
void _convolution() {}
void _convolution_nogroup() {}
void _convolution_double_backward() {}
void conv1d() {}
void conv2d() {}
void conv3d() {}
void conv_tbc() {}
void conv_tbc_backward() {}
void conv_transpose1d() {}
void conv_transpose2d() {}
void conv_transpose3d() {}
void copy_() {}
void _copy_from() {}
void cos() {}
void cos_() {}
void cos_out() {}
void cosh() {}
void cosh_() {}
void cosh_out() {}
void cosine_embedding_loss() {}
void cudnn_affine_grid_generator() {}
void cudnn_affine_grid_generator_backward() {}
void cudnn_batch_norm() {}
void cudnn_batch_norm_backward() {}
void cudnn_convolution() {}
void cudnn_convolution_backward_input() {}
void cudnn_convolution_backward() {}
void cudnn_convolution_backward_bias() {}
void cudnn_convolution_backward_weight() {}
void cudnn_convolution_transpose() {}
void cudnn_convolution_transpose_backward() {}
void cudnn_convolution_transpose_backward_bias() {}
void cudnn_convolution_transpose_backward_input() {}
void cudnn_convolution_transpose_backward_weight() {}
void cudnn_grid_sampler() {}
void cudnn_grid_sampler_backward() {}
void cumsum() {}
void cumsum_out() {}
void cumsum() {}
void cumsum_out() {}
void cumprod() {}
void cumprod_out() {}
void cumprod() {}
void cumprod_out() {}
void ctc_loss() {}
void ctc_loss() {}
void _ctc_loss() {}
void _ctc_loss_backward() {}
void det() {}
void diag_embed() {}
void diagflat() {}
void diagonal() {}
void fill_diagonal_() {}
void div() {}
void div_() {}
void div_out() {}
void div() {}
void div_() {}
void dot() {}
void dot_out() {}
void einsum() {}
void embedding() {}
void embedding_backward() {}
void embedding_dense_backward() {}
void embedding_renorm_() {}
void embedding_sparse_backward() {}
void embedding_bag() {}
void _embedding_bag() {}
void _embedding_bag_backward() {}
void _embedding_bag_sparse_backward() {}
void _embedding_bag_dense_backward() {}
void _embedding_bag_per_sample_weights_backward() {}
void empty() {}
void empty() {}
void new_empty() {}
void new_full() {}
void _empty_affine_quantized() {}
void _empty_per_channel_affine_quantized() {}
void resize_() {}
void empty_out() {}
void empty_like() {}
void empty_like() {}
void empty_strided() {}
void erf() {}
void erf_() {}
void erf_out() {}
void erfc() {}
void erfc_() {}
void erfc_out() {}
void exp() {}
void exp_() {}
void exp_out() {}
void expm1() {}
void expm1_() {}
void expm1_out() {}
void expand() {}
void expand_as() {}
void eye() {}
void eye() {}
void eye_out() {}
void eye_out() {}
void flatten() {}
void flatten() {}
void flatten() {}
void flatten() {}
void fill_() {}
void fill_() {}
void floor() {}
void floor_() {}
void floor_out() {}
void frac() {}
void frac_() {}
void frac_out() {}
void full() {}
void full() {}
void full_out() {}
void full_like() {}
void full_like() {}
void from_file() {}
void grid_sampler() {}
void grid_sampler_2d() {}
void grid_sampler_2d_backward() {}
void grid_sampler_3d() {}
void grid_sampler_3d_backward() {}
void hann_window() {}
void hann_window() {}
void hamming_window() {}
void hamming_window() {}
void hamming_window() {}
void hamming_window() {}
void hinge_embedding_loss() {}
void ger() {}
void ger_out() {}
void group_norm() {}
void fft() {}
void ifft() {}
void rfft() {}
void irfft() {}
void _fft_with_size() {}
void _cufft_get_plan_cache_size() {}
void _cufft_get_plan_cache_max_size() {}
void _cufft_set_plan_cache_max_size() {}
void _cufft_clear_plan_cache() {}
void index() {}
void index_copy_() {}
void index_copy() {}
void index_copy_() {}
void index_copy() {}
void index_put_() {}
void index_put() {}
void _index_put_impl_() {}
void instance_norm() {}
void inverse() {}
void inverse_out() {}
void _inverse_helper() {}
void isclose() {}
void isnan() {}
void is_distributed() {}
void is_floating_point() {}
void is_complex() {}
void is_nonzero() {}
void is_same_size() {}
void is_signed() {}
void kl_div() {}
void kl_div_backward() {}
void kthvalue() {}
void kthvalue_out() {}
void kthvalue() {}
void kthvalue_out() {}
void layer_norm() {}
void native_layer_norm() {}
void native_layer_norm_backward() {}
void native_layer_norm_double_backward() {}
void linear() {}
void mkldnn_linear() {}
void fbgemm_linear_int8_weight_fp32_activation() {}
void fbgemm_linear_int8_weight() {}
void fbgemm_linear_quantize_weight() {}
void fbgemm_pack_gemm_matrix_fp16() {}
void fbgemm_linear_fp16_weight_fp32_activation() {}
void fbgemm_linear_fp16_weight() {}
void fbgemm_pack_quantized_matrix() {}
void fbgemm_pack_quantized_matrix() {}
void linspace() {}
void linspace_out() {}
void log() {}
void log_() {}
void log_out() {}
void log10() {}
void log10_() {}
void log10_out() {}
void log1p() {}
void log1p_() {}
void log1p_out() {}
void log2() {}
void log2_() {}
void log2_out() {}
void logdet() {}
void logspace() {}
void logspace_out() {}
void log_softmax() {}
void log_softmax() {}
void _log_softmax() {}
void _log_softmax_backward_data() {}
void logsumexp() {}
void logsumexp_out() {}
void logsumexp() {}
void logsumexp_out() {}
void margin_ranking_loss() {}
void matmul() {}
void matmul_out() {}
void matrix_rank() {}
void matrix_rank() {}
void matrix_power() {}
void max() {}
void max_out() {}
void max_values() {}
void max() {}
void max_out() {}
void max_values() {}
void max_pool1d_with_indices() {}
void max_pool1d() {}
void max_pool2d() {}
void mkldnn_max_pool2d() {}
void quantized_max_pool2d() {}
void max_pool3d() {}
void mean() {}
void mean() {}
void mean_out() {}
void mean() {}
void mean_out() {}
void median() {}
void median_out() {}
void median() {}
void median_out() {}
void min() {}
void min_out() {}
void min_values() {}
void min() {}
void min_out() {}
void min_values() {}
void mkldnn_convolution() {}
void mkldnn_convolution_backward_input() {}
void mkldnn_convolution_backward_weights() {}
void mkldnn_convolution_backward() {}
void miopen_batch_norm() {}
void miopen_batch_norm_backward() {}
void miopen_convolution() {}
void miopen_convolution_backward_input() {}
void miopen_convolution_backward() {}
void miopen_convolution_backward_bias() {}
void miopen_convolution_backward_weight() {}
void miopen_convolution_transpose() {}
void miopen_convolution_transpose_backward() {}
void miopen_convolution_transpose_backward_input() {}
void miopen_convolution_transpose_backward_weight() {}
void miopen_depthwise_convolution() {}
void miopen_depthwise_convolution_backward_input() {}
void miopen_depthwise_convolution_backward() {}
void miopen_depthwise_convolution_backward_weight() {}
void miopen_rnn() {}
void miopen_rnn_backward() {}
void mm() {}
void mm_out() {}
void _sparse_mm() {}
void mode() {}
void mode_out() {}
void mode() {}
void mode_out() {}
void mul() {}
void mul_() {}
void mul_out() {}
void mul() {}
void mul_() {}
void mv() {}
void mv_out() {}
void mvlgamma() {}
void mvlgamma_() {}
void narrow_copy() {}
void narrow() {}
void native_batch_norm() {}
void batch_norm_stats() {}
void batch_norm_elemt() {}
void batch_norm_gather_stats() {}
void batch_norm_gather_stats_with_counts() {}
void native_batch_norm_backward() {}
void batch_norm_backward_reduce() {}
void batch_norm_backward_elemt() {}
void batch_norm_update_stats() {}
void _nnpack_available() {}
void _nnpack_spatial_convolution() {}
void _nnpack_spatial_convolution_backward() {}
void _nnpack_spatial_convolution_backward_input() {}
void _nnpack_spatial_convolution_backward_weight() {}
void ones() {}
void ones() {}
void ones_out() {}
void ones_like() {}
void ones_like() {}
void pairwise_distance() {}
void cdist() {}
void _cdist_backward() {}
void pdist() {}
void _pdist_forward() {}
void _pdist_backward() {}
void cosine_similarity() {}
void permute() {}
void numpy_T() {}
void pixel_shuffle() {}
void is_pinned() {}
void pin_memory() {}
void pinverse() {}
void poisson_nll_loss() {}
void scalar_tensor() {}
void rand() {}
void rand() {}
void rand() {}
void rand() {}
void rand_out() {}
void rand_out() {}
void rand_like() {}
void rand_like() {}
void randint() {}
void randint() {}
void randint() {}
void randint() {}
void randint_out() {}
void randint_out() {}
void randint_out() {}
void randint_out() {}
void randint_like() {}
void randint_like() {}
void randint_like() {}
void randint_like() {}
void randn() {}
void randn() {}
void randn() {}
void randn() {}
void randn_out() {}
void randn_out() {}
void randn_like() {}
void randn_like() {}
void randperm() {}
void randperm() {}
void randperm_out() {}
void randperm_out() {}
void range() {}
void range() {}
void range_out() {}
void reciprocal() {}
void reciprocal_() {}
void reciprocal_out() {}
void neg() {}
void neg_() {}
void neg_out() {}
void repeat() {}
void repeat_interleave() {}
void repeat_interleave() {}
void repeat_interleave() {}
void reshape() {}
void _mkldnn_reshape() {}
void reshape_as() {}
void round() {}
void round_() {}
void round_out() {}
void rrelu() {}
void rrelu_() {}
void relu() {}
void relu_() {}
void prelu() {}
void prelu_backward() {}
void gelu() {}
void gelu_backward() {}
void hardshrink() {}
void hardshrink_backward() {}
void rsqrt() {}
void rsqrt_() {}
void rsqrt_out() {}
void select() {}
void select() {}
void selu() {}
void selu_() {}
void celu() {}
void celu_() {}
void sigmoid() {}
void sigmoid_() {}
void sigmoid_out() {}
void sin() {}
void sin_() {}
void sin_out() {}
void sinh() {}
void sinh_() {}
void sinh_out() {}
void detach() {}
void detach_() {}
void size() {}
void size() {}
void slice() {}
void slogdet() {}
void smm() {}
void softmax() {}
void softmax() {}
void _softmax() {}
void _softmax_backward_data() {}
void split() {}
void split_with_sizes() {}
void squeeze() {}
void squeeze() {}
void squeeze() {}
void squeeze_() {}
void squeeze_() {}
void squeeze_() {}
void sspaddmm() {}
void sspaddmm_out() {}
void stack() {}
void stack_out() {}
void stft() {}
void stride() {}
void stride() {}
void sum() {}
void sum() {}
void sum() {}
void sum_out() {}
void sum_out() {}
void sum_to_size() {}
void sqrt() {}
void sqrt_() {}
void sqrt_out() {}
void std() {}
void std() {}
void std_mean() {}
void std_mean() {}
void std_mean() {}
void std_out() {}
void std() {}
void std_out() {}
void prod() {}
void prod() {}
void prod_out() {}
void prod() {}
void prod_out() {}
void t() {}
void t_() {}
void tan() {}
void tan_() {}
void tan_out() {}
void tanh() {}
void tanh_() {}
void tanh_out() {}
void tensordot() {}
void threshold() {}
void threshold_() {}
void threshold_out() {}
void threshold_backward() {}
void transpose() {}
void transpose() {}
void _mkldnn_transpose() {}
void transpose_() {}
void _mkldnn_transpose_() {}
void one_hot() {}
void flip() {}
void roll() {}
void rot90() {}
void trapz() {}
void trapz() {}
void _trilinear() {}
void triplet_margin_loss() {}
void trunc() {}
void trunc_() {}
void trunc_out() {}
void type_as() {}
void _has_compatible_shallow_copy_type() {}
void _unique() {}
void unique_dim() {}
void unique_consecutive() {}
void unique_dim_consecutive() {}
void _unique2() {}
void _unsafe_view() {}
void unsqueeze() {}
void unsqueeze_() {}
void var() {}
void var() {}
void var_out() {}
void var() {}
void var_out() {}
void var_mean() {}
void var_mean() {}
void var_mean() {}
void view_as() {}
void where() {}
void where() {}
void _s_where() {}
void norm_except_dim() {}
void _weight_norm() {}
void _weight_norm_cuda_interface() {}
void _weight_norm_cuda_interface_backward() {}
void _weight_norm_differentiable_backward() {}
void zeros() {}
void zeros() {}
void zeros_out() {}
void zeros_like() {}
void zeros_like() {}
void _standard_gamma_grad() {}
void _standard_gamma() {}
void _dirichlet_grad() {}
void _sample_dirichlet() {}
void poisson() {}
void native_norm() {}
void _sparse_sum() {}
void _sparse_sum() {}
void _sparse_sum() {}
void _sparse_sum() {}
void _sparse_sum_backward() {}
void norm() {}
void norm() {}
void norm() {}
void norm() {}
void norm_out() {}
void norm_out() {}
void norm() {}
void norm() {}
void norm_out() {}
void norm_out() {}
void frobenius_norm() {}
void frobenius_norm() {}
void frobenius_norm_out() {}
void nuclear_norm() {}
void nuclear_norm_out() {}
void nuclear_norm() {}
void nuclear_norm_out() {}
void clone() {}
void resize_as_() {}
void pow_out() {}
void pow() {}
void zero_() {}
void sub_out() {}
void sub() {}
void sub_() {}
void sub() {}
void sub_() {}
void rsub() {}
void rsub() {}
void _sparse_addmm() {}
void addmm_out() {}
void addmm() {}
void addmm_() {}
void sparse_coo_tensor() {}
void sparse_coo_tensor() {}
void sparse_coo_tensor() {}
void _sparse_coo_tensor_unsafe() {}
void _sparse_coo_tensor_with_dims() {}
void _sparse_coo_tensor_with_dims_and_tensors() {}
void sparse_resize_() {}
void sparse_resize_and_clear_() {}
void sparse_mask() {}
void to_dense() {}
void to_dense_backward() {}
void sparse_dim() {}
void _dimI() {}
void dense_dim() {}
void _dimV() {}
void _nnz() {}
void coalesce() {}
void is_coalesced() {}
void _indices() {}
void _values() {}
void _coalesced_() {}
void indices() {}
void values() {}
void hspmm_out() {}
void hspmm() {}
void copy_sparse_to_sparse_() {}
void numel() {}
void unbind() {}
void unbind() {}
void to_sparse() {}
void to_sparse() {}
void to_mkldnn() {}
void mkldnn_reorder_conv2d_weight() {}
void to_mkldnn_backward() {}
void quantize_per_tensor() {}
void quantize_per_channel() {}
void dequantize() {}
void q_scale() {}
void q_zero_point() {}
void q_per_channel_scales() {}
void q_per_channel_zero_points() {}
void q_per_channel_axis() {}
void int_repr() {}
void _make_per_tensor_quantized_tensor() {}
void _make_per_channel_quantized_tensor() {}
void qscheme() {}
void fake_quantize_per_tensor_affine() {}
void fake_quantize_per_tensor_affine_backward() {}
void fake_quantize_per_channel_affine() {}
void fake_quantize_per_channel_affine_backward() {}
void to() {}
void to() {}
void to() {}
void to() {}
void meshgrid() {}
void cartesian_prod() {}
void combinations() {}
void item() {}
void result_type() {}
void result_type() {}
void result_type() {}
void result_type() {}
void can_cast() {}
void promote_types() {}
void _local_scalar_dense() {}
void _thnn_fused_lstm_cell() {}
void _thnn_fused_lstm_cell_backward() {}
void _thnn_differentiable_lstm_cell_backward() {}
void _thnn_fused_gru_cell() {}
void _thnn_fused_gru_cell_backward() {}
void _thnn_differentiable_gru_cell_backward() {}
void lstm() {}
void lstm() {}
void gru() {}
void gru() {}
void rnn_tanh() {}
void rnn_tanh() {}
void rnn_relu() {}
void rnn_relu() {}
void lstm_cell() {}
void gru_cell() {}
void rnn_tanh_cell() {}
void rnn_relu_cell() {}
void quantized_lstm() {}
void quantized_gru() {}
void quantized_gru() {}
void quantized_lstm_cell() {}
void quantized_gru_cell() {}
void quantized_rnn_relu_cell() {}
void quantized_rnn_tanh_cell() {}
void _pack_padded_sequence() {}
void _pack_padded_sequence_backward() {}
void _pad_packed_sequence() {}
void set_() {}
void set_() {}
void set_() {}
void set_() {}
void set_quantizer_() {}
void is_set_to() {}
void masked_fill_() {}
void masked_fill() {}
void masked_fill_() {}
void masked_fill() {}
void masked_scatter_() {}
void masked_scatter() {}
void view() {}
void put_() {}
void index_add_() {}
void index_add() {}
void index_add() {}
void index_fill_() {}
void index_fill() {}
void index_fill_() {}
void index_fill() {}
void index_fill_() {}
void index_fill_() {}
void index_fill() {}
void index_fill() {}
void scatter_() {}
void scatter() {}
void scatter_() {}
void scatter() {}
void scatter() {}
void scatter() {}
void scatter_add_() {}
void scatter_add() {}
void scatter_add() {}
void lt_() {}
void lt_() {}
void gt_() {}
void gt_() {}
void le_() {}
void le_() {}
void ge_() {}
void ge_() {}
void eq_() {}
void eq_() {}
void ne_() {}
void ne_() {}
void __and__() {}
void __and__() {}
void __iand__() {}
void __iand__() {}
void __or__() {}
void __or__() {}
void __ior__() {}
void __ior__() {}
void __xor__() {}
void __xor__() {}
void __ixor__() {}
void __ixor__() {}
void __lshift__() {}
void __lshift__() {}
void __ilshift__() {}
void __ilshift__() {}
void __rshift__() {}
void __rshift__() {}
void __irshift__() {}
void __irshift__() {}
void lgamma_() {}
void atan2_() {}
void tril_() {}
void triu_() {}
void digamma_() {}
void polygamma_() {}
void renorm_() {}
void pow_() {}
void pow_() {}
void lerp_() {}
void lerp_() {}
void fmod_() {}
void fmod_() {}
void remainder_() {}
void remainder_() {}
void addbmm_() {}
void addbmm_out() {}
void addbmm() {}
void addcdiv_() {}
void random_() {}
void random_() {}
void random_() {}
void uniform_() {}
void normal_() {}
void cauchy_() {}
void log_normal_() {}
void exponential_() {}
void geometric_() {}
void diag_out() {}
void diag() {}
void cross_out() {}
void cross() {}
void triu_out() {}
void triu() {}
void tril_out() {}
void tril() {}
void tril_indices() {}
void triu_indices() {}
void trace() {}
void ne_out() {}
void ne() {}
void ne_out() {}
void ne() {}
void eq_out() {}
void eq() {}
void eq_out() {}
void eq() {}
void ge_out() {}
void ge() {}
void ge_out() {}
void ge() {}
void le_out() {}
void le() {}
void le_out() {}
void le() {}
void gt_out() {}
void gt() {}
void gt_out() {}
void gt() {}
void lt_out() {}
void lt() {}
void lt_out() {}
void lt() {}
void take_out() {}
void take() {}
void index_select_out() {}
void index_select() {}
void index_select_out() {}
void index_select() {}
void masked_select_out() {}
void masked_select() {}
void nonzero_out() {}
void nonzero() {}
void nonzero_numpy() {}
void gather_out() {}
void gather() {}
void gather_out() {}
void gather() {}
void _gather_sparse_backward() {}
void addcmul_out() {}
void addcmul() {}
void addcmul_() {}
void addcdiv_out() {}
void addcdiv() {}
void lstsq_out() {}
void lstsq() {}
void triangular_solve_out() {}
void triangular_solve() {}
void _triangular_solve_helper() {}
void symeig_out() {}
void symeig() {}
void _symeig_helper() {}
void eig_out() {}
void eig() {}
void svd_out() {}
void svd() {}
void _svd_helper() {}
void cholesky_out() {}
void cholesky() {}
void _cholesky_helper() {}
void cholesky_solve_out() {}
void cholesky_solve() {}
void _cholesky_solve_helper() {}
void solve() {}
void solve_out() {}
void _solve_helper() {}
void cholesky_inverse_out() {}
void cholesky_inverse() {}
void qr_out() {}
void qr() {}
void _qr_helper() {}
void geqrf_out() {}
void geqrf() {}
void orgqr_out() {}
void orgqr() {}
void ormqr_out() {}
void ormqr() {}
void _lu_with_info() {}
void lu_solve_out() {}
void lu_solve() {}
void _lu_solve_helper() {}
void multinomial_out() {}
void multinomial() {}
void _multinomial_alias_setup() {}
void _multinomial_alias_draw() {}
void lgamma_out() {}
void lgamma() {}
void digamma_out() {}
void digamma() {}
void polygamma_out() {}
void polygamma() {}
void erfinv() {}
void erfinv_() {}
void erfinv_out() {}
void sign() {}
void sign_() {}
void sign_out() {}
void dist() {}
void atan2_out() {}
void atan2() {}
void lerp_out() {}
void lerp_out() {}
void lerp() {}
void lerp() {}
void histc_out() {}
void histc() {}
void fmod_out() {}
void fmod() {}
void fmod_out() {}
void fmod() {}
void remainder_out() {}
void remainder() {}
void remainder_out() {}
void remainder() {}
void min_out() {}
void min() {}
void min() {}
void max_out() {}
void max() {}
void max() {}
void median() {}
void sort_out() {}
void sort() {}
void sort_out() {}
void sort() {}
void argsort() {}
void argsort() {}
void topk_out() {}
void topk() {}
void all() {}
void any() {}
void renorm_out() {}
void renorm() {}
void unfold() {}
void equal() {}
void pow_out() {}
void pow() {}
void pow_out() {}
void pow() {}
void normal_out() {}
void normal() {}
void normal_out() {}
void normal() {}
void normal_out() {}
void normal() {}
void normal() {}
void normal_out() {}
void alias() {}
void _addr() {}
void _addr_() {}
void _addr_out() {}
void _index_copy_() {}
void _cumsum() {}
void _cumsum_out() {}
void _cumprod() {}
void _cumprod_out() {}
void _var() {}
void _std() {}
void _cat() {}
void _cat_out() {}
void _mode() {}
void _mode_out() {}
void _max() {}
void _max_out() {}
void _min() {}
void _min_out() {}
void binary_cross_entropy_out() {}
void binary_cross_entropy() {}
void binary_cross_entropy_backward_out() {}
void binary_cross_entropy_backward() {}
void mse_loss_out() {}
void mse_loss() {}
void mse_loss_backward_out() {}
void mse_loss_backward() {}
void l1_loss_out() {}
void l1_loss() {}
void l1_loss_backward_out() {}
void l1_loss_backward() {}
void multi_margin_loss_out() {}
void multi_margin_loss() {}
void multi_margin_loss_backward_out() {}
void multi_margin_loss_backward() {}
void multilabel_margin_loss_out() {}
void multilabel_margin_loss() {}
void multilabel_margin_loss_forward_out() {}
void multilabel_margin_loss_forward() {}
void multilabel_margin_loss_backward_out() {}
void multilabel_margin_loss_backward() {}
void nll_loss_out() {}
void nll_loss() {}
void nll_loss_forward_out() {}
void nll_loss_forward() {}
void nll_loss_backward_out() {}
void nll_loss_backward() {}
void nll_loss2d_out() {}
void nll_loss2d() {}
void nll_loss2d_forward_out() {}
void nll_loss2d_forward() {}
void nll_loss2d_backward_out() {}
void nll_loss2d_backward() {}
void smooth_l1_loss_out() {}
void smooth_l1_loss() {}
void smooth_l1_loss_backward_out() {}
void smooth_l1_loss_backward() {}
void soft_margin_loss_out() {}
void soft_margin_loss() {}
void soft_margin_loss_backward_out() {}
void soft_margin_loss_backward() {}
void elu_out() {}
void elu() {}
void elu_backward_out() {}
void elu_backward() {}
void elu_() {}
void glu_out() {}
void glu() {}
void glu_backward_out() {}
void glu_backward() {}
void hardtanh_out() {}
void hardtanh() {}
void hardtanh_backward_out() {}
void hardtanh_backward() {}
void hardtanh_() {}
void leaky_relu_out() {}
void leaky_relu() {}
void leaky_relu_backward_out() {}
void leaky_relu_backward() {}
void leaky_relu_() {}
void log_sigmoid_out() {}
void log_sigmoid() {}
void log_sigmoid_forward_out() {}
void log_sigmoid_forward() {}
void log_sigmoid_backward_out() {}
void log_sigmoid_backward() {}
void rrelu_with_noise_out() {}
void rrelu_with_noise() {}
void rrelu_with_noise_backward_out() {}
void rrelu_with_noise_backward() {}
void rrelu_with_noise_() {}
void softplus_out() {}
void softplus() {}
void softplus_backward_out() {}
void softplus_backward() {}
void softshrink_out() {}
void softshrink() {}
void softshrink_backward_out() {}
void softshrink_backward() {}
void adaptive_avg_pool2d_out() {}
void adaptive_avg_pool2d() {}
void mkldnn_adaptive_avg_pool2d() {}
void _adaptive_avg_pool2d() {}
void _adaptive_avg_pool2d_backward() {}
void adaptive_avg_pool3d_out() {}
void adaptive_avg_pool3d() {}
void adaptive_avg_pool3d_backward_out() {}
void adaptive_avg_pool3d_backward() {}
void adaptive_max_pool2d_out() {}
void adaptive_max_pool2d() {}
void adaptive_max_pool2d_backward_out() {}
void adaptive_max_pool2d_backward() {}
void adaptive_max_pool3d_out() {}
void adaptive_max_pool3d() {}
void adaptive_max_pool3d_backward_out() {}
void adaptive_max_pool3d_backward() {}
void avg_pool2d_out() {}
void avg_pool2d() {}
void avg_pool2d_backward_out() {}
void avg_pool2d_backward() {}
void avg_pool3d_out() {}
void avg_pool3d() {}
void avg_pool3d_backward_out() {}
void avg_pool3d_backward() {}
void fractional_max_pool2d_out() {}
void fractional_max_pool2d() {}
void fractional_max_pool2d_backward_out() {}
void fractional_max_pool2d_backward() {}
void fractional_max_pool3d_out() {}
void fractional_max_pool3d() {}
void fractional_max_pool3d_backward_out() {}
void fractional_max_pool3d_backward() {}
void max_pool2d_with_indices_out() {}
void max_pool2d_with_indices() {}
void max_pool2d_with_indices_backward_out() {}
void max_pool2d_with_indices_backward() {}
void max_pool3d_with_indices_out() {}
void max_pool3d_with_indices() {}
void max_pool3d_with_indices_backward_out() {}
void max_pool3d_with_indices_backward() {}
void max_unpool2d_out() {}
void max_unpool2d() {}
void max_unpool2d_backward_out() {}
void max_unpool2d_backward() {}
void max_unpool3d_out() {}
void max_unpool3d() {}
void max_unpool3d_backward_out() {}
void max_unpool3d_backward() {}
void reflection_pad1d_out() {}
void reflection_pad1d() {}
void reflection_pad1d_backward_out() {}
void reflection_pad1d_backward() {}
void reflection_pad2d_out() {}
void reflection_pad2d() {}
void reflection_pad2d_backward_out() {}
void reflection_pad2d_backward() {}
void replication_pad1d_out() {}
void replication_pad1d() {}
void replication_pad1d_backward_out() {}
void replication_pad1d_backward() {}
void replication_pad2d_out() {}
void replication_pad2d() {}
void replication_pad2d_backward_out() {}
void replication_pad2d_backward() {}
void replication_pad3d_out() {}
void replication_pad3d() {}
void replication_pad3d_backward_out() {}
void replication_pad3d_backward() {}
void upsample_linear1d_out() {}
void upsample_linear1d() {}
void upsample_linear1d_backward_out() {}
void upsample_linear1d_backward() {}
void upsample_bilinear2d_out() {}
void upsample_bilinear2d() {}
void upsample_bilinear2d_backward_out() {}
void upsample_bilinear2d_backward() {}
void upsample_bicubic2d_out() {}
void upsample_bicubic2d() {}
void upsample_bicubic2d_backward_out() {}
void upsample_bicubic2d_backward() {}
void upsample_trilinear3d_out() {}
void upsample_trilinear3d() {}
void upsample_trilinear3d_backward_out() {}
void upsample_trilinear3d_backward() {}
void upsample_nearest1d_out() {}
void upsample_nearest1d() {}
void upsample_nearest1d_backward_out() {}
void upsample_nearest1d_backward() {}
void upsample_nearest2d_out() {}
void upsample_nearest2d() {}
void upsample_nearest2d_backward_out() {}
void upsample_nearest2d_backward() {}
void upsample_nearest3d_out() {}
void upsample_nearest3d() {}
void upsample_nearest3d_backward_out() {}
void upsample_nearest3d_backward() {}
void sigmoid_backward_out() {}
void sigmoid_backward() {}
void tanh_backward_out() {}
void tanh_backward() {}
void slow_conv_transpose2d_out() {}
void slow_conv_transpose2d() {}
void slow_conv_transpose2d_backward_out() {}
void slow_conv_transpose2d_backward() {}
void slow_conv_transpose3d_out() {}
void slow_conv_transpose3d() {}
void slow_conv_transpose3d_backward_out() {}
void slow_conv_transpose3d_backward() {}
void thnn_conv2d_out() {}
void thnn_conv2d() {}
void thnn_conv2d_forward_out() {}
void thnn_conv2d_forward() {}
void thnn_conv2d_backward_out() {}
void thnn_conv2d_backward() {}
void thnn_conv_depthwise2d_out() {}
void thnn_conv_depthwise2d() {}
void thnn_conv_depthwise2d_forward_out() {}
void thnn_conv_depthwise2d_forward() {}
void thnn_conv_depthwise2d_backward_out() {}
void thnn_conv_depthwise2d_backward() {}
void thnn_conv3d_out() {}
void thnn_conv3d() {}
void thnn_conv3d_forward_out() {}
void thnn_conv3d_forward() {}
void thnn_conv3d_backward_out() {}
void thnn_conv3d_backward() {}
void slow_conv_dilated2d() {}
void slow_conv_dilated2d_backward() {}
void slow_conv_dilated3d() {}
void slow_conv_dilated3d_backward() {}
void col2im_out() {}
void col2im() {}
void col2im_backward_out() {}
void col2im_backward() {}
void im2col_out() {}
void im2col() {}
void im2col_backward_out() {}
void im2col_backward() {}
*/
/* Autogen Body -- End */
