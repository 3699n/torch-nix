// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "torch_types.h"
#include <Rcpp.h>

using namespace Rcpp;

// cpp_device_type_to_string
std::string cpp_device_type_to_string(Rcpp::XPtr<torch::Device> device);
RcppExport SEXP _torch_cpp_device_type_to_string(SEXP deviceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Device> >::type device(deviceSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_device_type_to_string(device));
    return rcpp_result_gen;
END_RCPP
}
// cpp_device_index_to_int
std::int64_t cpp_device_index_to_int(Rcpp::XPtr<torch::Device> device);
RcppExport SEXP _torch_cpp_device_index_to_int(SEXP deviceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Device> >::type device(deviceSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_device_index_to_int(device));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_device
Rcpp::XPtr<torch::Device> cpp_torch_device(std::string type, Rcpp::Nullable<std::int64_t> index);
RcppExport SEXP _torch_cpp_torch_device(SEXP typeSEXP, SEXP indexSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type type(typeSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<std::int64_t> >::type index(indexSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_device(type, index));
    return rcpp_result_gen;
END_RCPP
}
// get_device_index
std::int64_t get_device_index(Rcpp::XPtr<torch::Device> device);
RcppExport SEXP _torch_get_device_index(SEXP deviceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Device> >::type device(deviceSEXP);
    rcpp_result_gen = Rcpp::wrap(get_device_index(device));
    return rcpp_result_gen;
END_RCPP
}
// get_device_type
std::string get_device_type(Rcpp::XPtr<torch::Device> device);
RcppExport SEXP _torch_get_device_type(SEXP deviceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Device> >::type device(deviceSEXP);
    rcpp_result_gen = Rcpp::wrap(get_device_type(device));
    return rcpp_result_gen;
END_RCPP
}
// device_has_index
bool device_has_index(Rcpp::XPtr<torch::Device> device);
RcppExport SEXP _torch_device_has_index(SEXP deviceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Device> >::type device(deviceSEXP);
    rcpp_result_gen = Rcpp::wrap(device_has_index(device));
    return rcpp_result_gen;
END_RCPP
}
// device_is_cuda
bool device_is_cuda(Rcpp::XPtr<torch::Device> device);
RcppExport SEXP _torch_device_is_cuda(SEXP deviceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Device> >::type device(deviceSEXP);
    rcpp_result_gen = Rcpp::wrap(device_is_cuda(device));
    return rcpp_result_gen;
END_RCPP
}
// device_is_cpu
bool device_is_cpu(Rcpp::XPtr<torch::Device> device);
RcppExport SEXP _torch_device_is_cpu(SEXP deviceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Device> >::type device(deviceSEXP);
    rcpp_result_gen = Rcpp::wrap(device_is_cpu(device));
    return rcpp_result_gen;
END_RCPP
}
// device_equals
bool device_equals(Rcpp::XPtr<torch::Device> device1, Rcpp::XPtr<torch::Device> device2);
RcppExport SEXP _torch_device_equals(SEXP device1SEXP, SEXP device2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Device> >::type device1(device1SEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Device> >::type device2(device2SEXP);
    rcpp_result_gen = Rcpp::wrap(device_equals(device1, device2));
    return rcpp_result_gen;
END_RCPP
}
// device_set_index
void device_set_index(Rcpp::XPtr<torch::Device> device, std::int64_t index);
RcppExport SEXP _torch_device_set_index(SEXP deviceSEXP, SEXP indexSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Device> >::type device(deviceSEXP);
    Rcpp::traits::input_parameter< std::int64_t >::type index(indexSEXP);
    device_set_index(device, index);
    return R_NilValue;
END_RCPP
}
// device_from_r
Rcpp::XPtr<torch::Device> device_from_r(std::string device, Rcpp::Nullable<std::int64_t> index);
RcppExport SEXP _torch_device_from_r(SEXP deviceSEXP, SEXP indexSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type device(deviceSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<std::int64_t> >::type index(indexSEXP);
    rcpp_result_gen = Rcpp::wrap(device_from_r(device, index));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_dimname
Rcpp::XPtr<torch::Dimname> cpp_torch_dimname(const std::string& str);
RcppExport SEXP _torch_cpp_torch_dimname(SEXP strSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type str(strSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_dimname(str));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_dimname_list
Rcpp::XPtr<std::vector<torch::Dimname>> cpp_torch_dimname_list(const Rcpp::List& x);
RcppExport SEXP _torch_cpp_torch_dimname_list(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_dimname_list(x));
    return rcpp_result_gen;
END_RCPP
}
// cpp_dimname_to_string
std::string cpp_dimname_to_string(Rcpp::XPtr<torch::Dimname> x);
RcppExport SEXP _torch_cpp_dimname_to_string(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Dimname> >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_dimname_to_string(x));
    return rcpp_result_gen;
END_RCPP
}
// cpp_dimname_list_to_string
std::vector<std::string> cpp_dimname_list_to_string(Rcpp::XPtr<std::vector<torch::Dimname>> x);
RcppExport SEXP _torch_cpp_dimname_list_to_string(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::vector<torch::Dimname>> >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_dimname_list_to_string(x));
    return rcpp_result_gen;
END_RCPP
}
// cpp_dtype_to_string
std::string cpp_dtype_to_string(Rcpp::XPtr<torch::Dtype> dtype_ptr);
RcppExport SEXP _torch_cpp_dtype_to_string(SEXP dtype_ptrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Dtype> >::type dtype_ptr(dtype_ptrSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_dtype_to_string(dtype_ptr));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_float32
Rcpp::XPtr<torch::Dtype> cpp_torch_float32();
RcppExport SEXP _torch_cpp_torch_float32() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(cpp_torch_float32());
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_float64
Rcpp::XPtr<torch::Dtype> cpp_torch_float64();
RcppExport SEXP _torch_cpp_torch_float64() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(cpp_torch_float64());
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_float16
Rcpp::XPtr<torch::Dtype> cpp_torch_float16();
RcppExport SEXP _torch_cpp_torch_float16() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(cpp_torch_float16());
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_uint8
Rcpp::XPtr<torch::Dtype> cpp_torch_uint8();
RcppExport SEXP _torch_cpp_torch_uint8() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(cpp_torch_uint8());
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_int8
Rcpp::XPtr<torch::Dtype> cpp_torch_int8();
RcppExport SEXP _torch_cpp_torch_int8() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(cpp_torch_int8());
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_int16
Rcpp::XPtr<torch::Dtype> cpp_torch_int16();
RcppExport SEXP _torch_cpp_torch_int16() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(cpp_torch_int16());
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_int32
Rcpp::XPtr<torch::Dtype> cpp_torch_int32();
RcppExport SEXP _torch_cpp_torch_int32() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(cpp_torch_int32());
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_int64
Rcpp::XPtr<torch::Dtype> cpp_torch_int64();
RcppExport SEXP _torch_cpp_torch_int64() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(cpp_torch_int64());
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_bool
Rcpp::XPtr<torch::Dtype> cpp_torch_bool();
RcppExport SEXP _torch_cpp_torch_bool() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(cpp_torch_bool());
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_backward_self_Tensor
void cpp_torch_method_backward_self_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> gradient, bool keep_graph, bool create_graph);
RcppExport SEXP _torch_cpp_torch_method_backward_self_Tensor(SEXP selfSEXP, SEXP gradientSEXP, SEXP keep_graphSEXP, SEXP create_graphSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type gradient(gradientSEXP);
    Rcpp::traits::input_parameter< bool >::type keep_graph(keep_graphSEXP);
    Rcpp::traits::input_parameter< bool >::type create_graph(create_graphSEXP);
    cpp_torch_method_backward_self_Tensor(self, gradient, keep_graph, create_graph);
    return R_NilValue;
END_RCPP
}
// cpp_torch_method_set_data_self_Tensor_new_data_Tensor
void cpp_torch_method_set_data_self_Tensor_new_data_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> new_data);
RcppExport SEXP _torch_cpp_torch_method_set_data_self_Tensor_new_data_Tensor(SEXP selfSEXP, SEXP new_dataSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type new_data(new_dataSEXP);
    cpp_torch_method_set_data_self_Tensor_new_data_Tensor(self, new_data);
    return R_NilValue;
END_RCPP
}
// cpp_torch_method_data_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_data_self_Tensor(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_method_data_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_data_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_is_leaf_self_Tensor
bool cpp_torch_method_is_leaf_self_Tensor(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_method_is_leaf_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_is_leaf_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_output_nr_self_Tensor
int64_t cpp_torch_method_output_nr_self_Tensor(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_method_output_nr_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_output_nr_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method__version_self_Tensor
int64_t cpp_torch_method__version_self_Tensor(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_method__version_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method__version_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_requires_grad__self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_requires_grad__self_Tensor(Rcpp::XPtr<torch::Tensor> self, bool requires_grad);
RcppExport SEXP _torch_cpp_torch_method_requires_grad__self_Tensor(SEXP selfSEXP, SEXP requires_gradSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< bool >::type requires_grad(requires_gradSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_requires_grad__self_Tensor(self, requires_grad));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_rename__self_Tensor_names_DimnameList
Rcpp::XPtr<torch::Tensor> cpp_torch_method_rename__self_Tensor_names_DimnameList(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<std::vector<torch::Dimname>> names);
RcppExport SEXP _torch_cpp_torch_method_rename__self_Tensor_names_DimnameList(SEXP selfSEXP, SEXP namesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::vector<torch::Dimname>> >::type names(namesSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_rename__self_Tensor_names_DimnameList(self, names));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_rename_self_Tensor_names_DimnameList
Rcpp::XPtr<torch::Tensor> cpp_torch_method_rename_self_Tensor_names_DimnameList(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<std::vector<torch::Dimname>> names);
RcppExport SEXP _torch_cpp_torch_method_rename_self_Tensor_names_DimnameList(SEXP selfSEXP, SEXP namesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::vector<torch::Dimname>> >::type names(namesSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_rename_self_Tensor_names_DimnameList(self, names));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_align_to_self_Tensor_names_DimnameList
Rcpp::XPtr<torch::Tensor> cpp_torch_method_align_to_self_Tensor_names_DimnameList(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<std::vector<torch::Dimname>> names);
RcppExport SEXP _torch_cpp_torch_method_align_to_self_Tensor_names_DimnameList(SEXP selfSEXP, SEXP namesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::vector<torch::Dimname>> >::type names(namesSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_align_to_self_Tensor_names_DimnameList(self, names));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_align_to_self_Tensor_order_DimnameList_ellipsis_idx_int64_t
Rcpp::XPtr<torch::Tensor> cpp_torch_method_align_to_self_Tensor_order_DimnameList_ellipsis_idx_int64_t(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<std::vector<torch::Dimname>> order, int64_t ellipsis_idx);
RcppExport SEXP _torch_cpp_torch_method_align_to_self_Tensor_order_DimnameList_ellipsis_idx_int64_t(SEXP selfSEXP, SEXP orderSEXP, SEXP ellipsis_idxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::vector<torch::Dimname>> >::type order(orderSEXP);
    Rcpp::traits::input_parameter< int64_t >::type ellipsis_idx(ellipsis_idxSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_align_to_self_Tensor_order_DimnameList_ellipsis_idx_int64_t(self, order, ellipsis_idx));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_align_as_self_Tensor_other_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_align_as_self_Tensor_other_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> other);
RcppExport SEXP _torch_cpp_torch_method_align_as_self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_align_as_self_Tensor_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_refine_names_self_Tensor_names_DimnameList
Rcpp::XPtr<torch::Tensor> cpp_torch_method_refine_names_self_Tensor_names_DimnameList(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<std::vector<torch::Dimname>> names);
RcppExport SEXP _torch_cpp_torch_method_refine_names_self_Tensor_names_DimnameList(SEXP selfSEXP, SEXP namesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::vector<torch::Dimname>> >::type names(namesSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_refine_names_self_Tensor_names_DimnameList(self, names));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_unflatten_self_Tensor_dim_Dimname_sizes_IntArrayRef_names_DimnameList
Rcpp::XPtr<torch::Tensor> cpp_torch_method_unflatten_self_Tensor_dim_Dimname_sizes_IntArrayRef_names_DimnameList(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Dimname> dim, std::vector<int64_t> sizes, Rcpp::XPtr<std::vector<torch::Dimname>> names);
RcppExport SEXP _torch_cpp_torch_method_unflatten_self_Tensor_dim_Dimname_sizes_IntArrayRef_names_DimnameList(SEXP selfSEXP, SEXP dimSEXP, SEXP sizesSEXP, SEXP namesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Dimname> >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type sizes(sizesSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::vector<torch::Dimname>> >::type names(namesSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_unflatten_self_Tensor_dim_Dimname_sizes_IntArrayRef_names_DimnameList(self, dim, sizes, names));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_unflatten_self_Tensor_dim_int64_t_sizes_IntArrayRef_names_DimnameList
Rcpp::XPtr<torch::Tensor> cpp_torch_method_unflatten_self_Tensor_dim_int64_t_sizes_IntArrayRef_names_DimnameList(Rcpp::XPtr<torch::Tensor> self, int64_t dim, std::vector<int64_t> sizes, Rcpp::XPtr<std::vector<torch::Dimname>> names);
RcppExport SEXP _torch_cpp_torch_method_unflatten_self_Tensor_dim_int64_t_sizes_IntArrayRef_names_DimnameList(SEXP selfSEXP, SEXP dimSEXP, SEXP sizesSEXP, SEXP namesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type sizes(sizesSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::vector<torch::Dimname>> >::type names(namesSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_unflatten_self_Tensor_dim_int64_t_sizes_IntArrayRef_names_DimnameList(self, dim, sizes, names));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_abs_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_abs_self_Tensor(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_method_abs_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_abs_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_abs__self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_abs__self_Tensor(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_method_abs__self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_abs__self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_angle_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_angle_self_Tensor(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_method_angle_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_angle_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_real_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_real_self_Tensor(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_method_real_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_real_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_imag_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_imag_self_Tensor(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_method_imag_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_imag_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_conj_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_conj_self_Tensor(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_method_conj_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_conj_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_acos_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_acos_self_Tensor(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_method_acos_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_acos_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_acos__self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_acos__self_Tensor(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_method_acos__self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_acos__self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_add_self_Tensor_other_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_add_self_Tensor_other_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> other, Rcpp::XPtr<torch::Scalar> alpha);
RcppExport SEXP _torch_cpp_torch_method_add_self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type other(otherSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_add_self_Tensor_other_Tensor(self, other, alpha));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_add__self_Tensor_other_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_add__self_Tensor_other_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> other, Rcpp::XPtr<torch::Scalar> alpha);
RcppExport SEXP _torch_cpp_torch_method_add__self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type other(otherSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_add__self_Tensor_other_Tensor(self, other, alpha));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_add_self_Tensor_other_Scalar
Rcpp::XPtr<torch::Tensor> cpp_torch_method_add_self_Tensor_other_Scalar(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Scalar> other, Rcpp::XPtr<torch::Scalar> alpha);
RcppExport SEXP _torch_cpp_torch_method_add_self_Tensor_other_Scalar(SEXP selfSEXP, SEXP otherSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type other(otherSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_add_self_Tensor_other_Scalar(self, other, alpha));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_add__self_Tensor_other_Scalar
Rcpp::XPtr<torch::Tensor> cpp_torch_method_add__self_Tensor_other_Scalar(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Scalar> other, Rcpp::XPtr<torch::Scalar> alpha);
RcppExport SEXP _torch_cpp_torch_method_add__self_Tensor_other_Scalar(SEXP selfSEXP, SEXP otherSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type other(otherSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_add__self_Tensor_other_Scalar(self, other, alpha));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_addmv_self_Tensor_mat_Tensor_vec_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_addmv_self_Tensor_mat_Tensor_vec_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> mat, Rcpp::XPtr<torch::Tensor> vec, Rcpp::XPtr<torch::Scalar> beta, Rcpp::XPtr<torch::Scalar> alpha);
RcppExport SEXP _torch_cpp_torch_method_addmv_self_Tensor_mat_Tensor_vec_Tensor(SEXP selfSEXP, SEXP matSEXP, SEXP vecSEXP, SEXP betaSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type mat(matSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type vec(vecSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_addmv_self_Tensor_mat_Tensor_vec_Tensor(self, mat, vec, beta, alpha));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_addmv__self_Tensor_mat_Tensor_vec_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_addmv__self_Tensor_mat_Tensor_vec_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> mat, Rcpp::XPtr<torch::Tensor> vec, Rcpp::XPtr<torch::Scalar> beta, Rcpp::XPtr<torch::Scalar> alpha);
RcppExport SEXP _torch_cpp_torch_method_addmv__self_Tensor_mat_Tensor_vec_Tensor(SEXP selfSEXP, SEXP matSEXP, SEXP vecSEXP, SEXP betaSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type mat(matSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type vec(vecSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_addmv__self_Tensor_mat_Tensor_vec_Tensor(self, mat, vec, beta, alpha));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_addr_self_Tensor_vec1_Tensor_vec2_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_addr_self_Tensor_vec1_Tensor_vec2_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> vec1, Rcpp::XPtr<torch::Tensor> vec2, Rcpp::XPtr<torch::Scalar> beta, Rcpp::XPtr<torch::Scalar> alpha);
RcppExport SEXP _torch_cpp_torch_method_addr_self_Tensor_vec1_Tensor_vec2_Tensor(SEXP selfSEXP, SEXP vec1SEXP, SEXP vec2SEXP, SEXP betaSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type vec1(vec1SEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type vec2(vec2SEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_addr_self_Tensor_vec1_Tensor_vec2_Tensor(self, vec1, vec2, beta, alpha));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_addr__self_Tensor_vec1_Tensor_vec2_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_addr__self_Tensor_vec1_Tensor_vec2_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> vec1, Rcpp::XPtr<torch::Tensor> vec2, Rcpp::XPtr<torch::Scalar> beta, Rcpp::XPtr<torch::Scalar> alpha);
RcppExport SEXP _torch_cpp_torch_method_addr__self_Tensor_vec1_Tensor_vec2_Tensor(SEXP selfSEXP, SEXP vec1SEXP, SEXP vec2SEXP, SEXP betaSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type vec1(vec1SEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type vec2(vec2SEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_addr__self_Tensor_vec1_Tensor_vec2_Tensor(self, vec1, vec2, beta, alpha));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_all_self_Tensor_dim_int64_t
Rcpp::XPtr<torch::Tensor> cpp_torch_method_all_self_Tensor_dim_int64_t(Rcpp::XPtr<torch::Tensor> self, int64_t dim, bool keepdim);
RcppExport SEXP _torch_cpp_torch_method_all_self_Tensor_dim_int64_t(SEXP selfSEXP, SEXP dimSEXP, SEXP keepdimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< bool >::type keepdim(keepdimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_all_self_Tensor_dim_int64_t(self, dim, keepdim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_all_self_Tensor_dim_Dimname
Rcpp::XPtr<torch::Tensor> cpp_torch_method_all_self_Tensor_dim_Dimname(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Dimname> dim, bool keepdim);
RcppExport SEXP _torch_cpp_torch_method_all_self_Tensor_dim_Dimname(SEXP selfSEXP, SEXP dimSEXP, SEXP keepdimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Dimname> >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< bool >::type keepdim(keepdimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_all_self_Tensor_dim_Dimname(self, dim, keepdim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_allclose_self_Tensor_other_Tensor
bool cpp_torch_method_allclose_self_Tensor_other_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> other, double rtol, double atol, bool equal_nan);
RcppExport SEXP _torch_cpp_torch_method_allclose_self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP, SEXP rtolSEXP, SEXP atolSEXP, SEXP equal_nanSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type other(otherSEXP);
    Rcpp::traits::input_parameter< double >::type rtol(rtolSEXP);
    Rcpp::traits::input_parameter< double >::type atol(atolSEXP);
    Rcpp::traits::input_parameter< bool >::type equal_nan(equal_nanSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_allclose_self_Tensor_other_Tensor(self, other, rtol, atol, equal_nan));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_any_self_Tensor_dim_int64_t
Rcpp::XPtr<torch::Tensor> cpp_torch_method_any_self_Tensor_dim_int64_t(Rcpp::XPtr<torch::Tensor> self, int64_t dim, bool keepdim);
RcppExport SEXP _torch_cpp_torch_method_any_self_Tensor_dim_int64_t(SEXP selfSEXP, SEXP dimSEXP, SEXP keepdimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< bool >::type keepdim(keepdimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_any_self_Tensor_dim_int64_t(self, dim, keepdim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_any_self_Tensor_dim_Dimname
Rcpp::XPtr<torch::Tensor> cpp_torch_method_any_self_Tensor_dim_Dimname(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Dimname> dim, bool keepdim);
RcppExport SEXP _torch_cpp_torch_method_any_self_Tensor_dim_Dimname(SEXP selfSEXP, SEXP dimSEXP, SEXP keepdimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Dimname> >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< bool >::type keepdim(keepdimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_any_self_Tensor_dim_Dimname(self, dim, keepdim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_argmax_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_argmax_self_Tensor(Rcpp::XPtr<torch::Tensor> self, int64_t dim, bool keepdim);
RcppExport SEXP _torch_cpp_torch_method_argmax_self_Tensor(SEXP selfSEXP, SEXP dimSEXP, SEXP keepdimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< bool >::type keepdim(keepdimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_argmax_self_Tensor(self, dim, keepdim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_argmin_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_argmin_self_Tensor(Rcpp::XPtr<torch::Tensor> self, int64_t dim, bool keepdim);
RcppExport SEXP _torch_cpp_torch_method_argmin_self_Tensor(SEXP selfSEXP, SEXP dimSEXP, SEXP keepdimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< bool >::type keepdim(keepdimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_argmin_self_Tensor(self, dim, keepdim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_as_strided_self_Tensor_size_IntArrayRef_stride_IntArrayRef
Rcpp::XPtr<torch::Tensor> cpp_torch_method_as_strided_self_Tensor_size_IntArrayRef_stride_IntArrayRef(Rcpp::XPtr<torch::Tensor> self, std::vector<int64_t> size, std::vector<int64_t> stride, int64_t storage_offset);
RcppExport SEXP _torch_cpp_torch_method_as_strided_self_Tensor_size_IntArrayRef_stride_IntArrayRef(SEXP selfSEXP, SEXP sizeSEXP, SEXP strideSEXP, SEXP storage_offsetSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type stride(strideSEXP);
    Rcpp::traits::input_parameter< int64_t >::type storage_offset(storage_offsetSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_as_strided_self_Tensor_size_IntArrayRef_stride_IntArrayRef(self, size, stride, storage_offset));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_as_strided__self_Tensor_size_IntArrayRef_stride_IntArrayRef
Rcpp::XPtr<torch::Tensor> cpp_torch_method_as_strided__self_Tensor_size_IntArrayRef_stride_IntArrayRef(Rcpp::XPtr<torch::Tensor> self, std::vector<int64_t> size, std::vector<int64_t> stride, int64_t storage_offset);
RcppExport SEXP _torch_cpp_torch_method_as_strided__self_Tensor_size_IntArrayRef_stride_IntArrayRef(SEXP selfSEXP, SEXP sizeSEXP, SEXP strideSEXP, SEXP storage_offsetSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type stride(strideSEXP);
    Rcpp::traits::input_parameter< int64_t >::type storage_offset(storage_offsetSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_as_strided__self_Tensor_size_IntArrayRef_stride_IntArrayRef(self, size, stride, storage_offset));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_asin_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_asin_self_Tensor(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_method_asin_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_asin_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_asin__self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_asin__self_Tensor(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_method_asin__self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_asin__self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_atan_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_atan_self_Tensor(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_method_atan_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_atan_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_atan__self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_atan__self_Tensor(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_method_atan__self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_atan__self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_baddbmm_self_Tensor_batch1_Tensor_batch2_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_baddbmm_self_Tensor_batch1_Tensor_batch2_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> batch1, Rcpp::XPtr<torch::Tensor> batch2, Rcpp::XPtr<torch::Scalar> beta, Rcpp::XPtr<torch::Scalar> alpha);
RcppExport SEXP _torch_cpp_torch_method_baddbmm_self_Tensor_batch1_Tensor_batch2_Tensor(SEXP selfSEXP, SEXP batch1SEXP, SEXP batch2SEXP, SEXP betaSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type batch1(batch1SEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type batch2(batch2SEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_baddbmm_self_Tensor_batch1_Tensor_batch2_Tensor(self, batch1, batch2, beta, alpha));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_baddbmm__self_Tensor_batch1_Tensor_batch2_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_baddbmm__self_Tensor_batch1_Tensor_batch2_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> batch1, Rcpp::XPtr<torch::Tensor> batch2, Rcpp::XPtr<torch::Scalar> beta, Rcpp::XPtr<torch::Scalar> alpha);
RcppExport SEXP _torch_cpp_torch_method_baddbmm__self_Tensor_batch1_Tensor_batch2_Tensor(SEXP selfSEXP, SEXP batch1SEXP, SEXP batch2SEXP, SEXP betaSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type batch1(batch1SEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type batch2(batch2SEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_baddbmm__self_Tensor_batch1_Tensor_batch2_Tensor(self, batch1, batch2, beta, alpha));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_bernoulli_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_bernoulli_self_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Generator *> generator);
RcppExport SEXP _torch_cpp_torch_method_bernoulli_self_Tensor(SEXP selfSEXP, SEXP generatorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Generator *> >::type generator(generatorSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_bernoulli_self_Tensor(self, generator));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_bernoulli__self_Tensor_p_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_bernoulli__self_Tensor_p_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> p, Rcpp::XPtr<torch::Generator *> generator);
RcppExport SEXP _torch_cpp_torch_method_bernoulli__self_Tensor_p_Tensor(SEXP selfSEXP, SEXP pSEXP, SEXP generatorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type p(pSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Generator *> >::type generator(generatorSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_bernoulli__self_Tensor_p_Tensor(self, p, generator));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_bernoulli__self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_bernoulli__self_Tensor(Rcpp::XPtr<torch::Tensor> self, double p, Rcpp::XPtr<torch::Generator *> generator);
RcppExport SEXP _torch_cpp_torch_method_bernoulli__self_Tensor(SEXP selfSEXP, SEXP pSEXP, SEXP generatorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< double >::type p(pSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Generator *> >::type generator(generatorSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_bernoulli__self_Tensor(self, p, generator));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_bernoulli_self_Tensor_p_double
Rcpp::XPtr<torch::Tensor> cpp_torch_method_bernoulli_self_Tensor_p_double(Rcpp::XPtr<torch::Tensor> self, double p, Rcpp::XPtr<torch::Generator *> generator);
RcppExport SEXP _torch_cpp_torch_method_bernoulli_self_Tensor_p_double(SEXP selfSEXP, SEXP pSEXP, SEXP generatorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< double >::type p(pSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Generator *> >::type generator(generatorSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_bernoulli_self_Tensor_p_double(self, p, generator));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_bincount_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_bincount_self_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> weights, int64_t minlength);
RcppExport SEXP _torch_cpp_torch_method_bincount_self_Tensor(SEXP selfSEXP, SEXP weightsSEXP, SEXP minlengthSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< int64_t >::type minlength(minlengthSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_bincount_self_Tensor(self, weights, minlength));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_bitwise_not_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_bitwise_not_self_Tensor(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_method_bitwise_not_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_bitwise_not_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_bitwise_not__self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_bitwise_not__self_Tensor(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_method_bitwise_not__self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_bitwise_not__self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_logical_not_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_logical_not_self_Tensor(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_method_logical_not_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_logical_not_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_logical_not__self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_logical_not__self_Tensor(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_method_logical_not__self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_logical_not__self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_logical_xor_self_Tensor_other_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_logical_xor_self_Tensor_other_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> other);
RcppExport SEXP _torch_cpp_torch_method_logical_xor_self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_logical_xor_self_Tensor_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_logical_xor__self_Tensor_other_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_logical_xor__self_Tensor_other_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> other);
RcppExport SEXP _torch_cpp_torch_method_logical_xor__self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_logical_xor__self_Tensor_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_bmm_self_Tensor_mat2_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_bmm_self_Tensor_mat2_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> mat2);
RcppExport SEXP _torch_cpp_torch_method_bmm_self_Tensor_mat2_Tensor(SEXP selfSEXP, SEXP mat2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type mat2(mat2SEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_bmm_self_Tensor_mat2_Tensor(self, mat2));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_ceil_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_ceil_self_Tensor(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_method_ceil_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_ceil_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_ceil__self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_ceil__self_Tensor(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_method_ceil__self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_ceil__self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_chunk_self_Tensor_chunks_int64_t
Rcpp::XPtr<torch::TensorList> cpp_torch_method_chunk_self_Tensor_chunks_int64_t(Rcpp::XPtr<torch::Tensor> self, int64_t chunks, int64_t dim);
RcppExport SEXP _torch_cpp_torch_method_chunk_self_Tensor_chunks_int64_t(SEXP selfSEXP, SEXP chunksSEXP, SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< int64_t >::type chunks(chunksSEXP);
    Rcpp::traits::input_parameter< int64_t >::type dim(dimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_chunk_self_Tensor_chunks_int64_t(self, chunks, dim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_clamp_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_clamp_self_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Scalar> min, Rcpp::XPtr<torch::Scalar> max);
RcppExport SEXP _torch_cpp_torch_method_clamp_self_Tensor(SEXP selfSEXP, SEXP minSEXP, SEXP maxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type min(minSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type max(maxSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_clamp_self_Tensor(self, min, max));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_clamp__self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_clamp__self_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Scalar> min, Rcpp::XPtr<torch::Scalar> max);
RcppExport SEXP _torch_cpp_torch_method_clamp__self_Tensor(SEXP selfSEXP, SEXP minSEXP, SEXP maxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type min(minSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type max(maxSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_clamp__self_Tensor(self, min, max));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_clamp_max_self_Tensor_max_Scalar
Rcpp::XPtr<torch::Tensor> cpp_torch_method_clamp_max_self_Tensor_max_Scalar(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Scalar> max);
RcppExport SEXP _torch_cpp_torch_method_clamp_max_self_Tensor_max_Scalar(SEXP selfSEXP, SEXP maxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type max(maxSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_clamp_max_self_Tensor_max_Scalar(self, max));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_clamp_max__self_Tensor_max_Scalar
Rcpp::XPtr<torch::Tensor> cpp_torch_method_clamp_max__self_Tensor_max_Scalar(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Scalar> max);
RcppExport SEXP _torch_cpp_torch_method_clamp_max__self_Tensor_max_Scalar(SEXP selfSEXP, SEXP maxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type max(maxSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_clamp_max__self_Tensor_max_Scalar(self, max));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_clamp_min_self_Tensor_min_Scalar
Rcpp::XPtr<torch::Tensor> cpp_torch_method_clamp_min_self_Tensor_min_Scalar(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Scalar> min);
RcppExport SEXP _torch_cpp_torch_method_clamp_min_self_Tensor_min_Scalar(SEXP selfSEXP, SEXP minSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type min(minSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_clamp_min_self_Tensor_min_Scalar(self, min));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_clamp_min__self_Tensor_min_Scalar
Rcpp::XPtr<torch::Tensor> cpp_torch_method_clamp_min__self_Tensor_min_Scalar(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Scalar> min);
RcppExport SEXP _torch_cpp_torch_method_clamp_min__self_Tensor_min_Scalar(SEXP selfSEXP, SEXP minSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type min(minSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_clamp_min__self_Tensor_min_Scalar(self, min));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_contiguous_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_contiguous_self_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::MemoryFormat> memory_format);
RcppExport SEXP _torch_cpp_torch_method_contiguous_self_Tensor(SEXP selfSEXP, SEXP memory_formatSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::MemoryFormat> >::type memory_format(memory_formatSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_contiguous_self_Tensor(self, memory_format));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_copy__self_Tensor_src_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_copy__self_Tensor_src_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> src, bool non_blocking);
RcppExport SEXP _torch_cpp_torch_method_copy__self_Tensor_src_Tensor(SEXP selfSEXP, SEXP srcSEXP, SEXP non_blockingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type src(srcSEXP);
    Rcpp::traits::input_parameter< bool >::type non_blocking(non_blockingSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_copy__self_Tensor_src_Tensor(self, src, non_blocking));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_cos_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_cos_self_Tensor(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_method_cos_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_cos_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_cos__self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_cos__self_Tensor(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_method_cos__self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_cos__self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_cosh_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_cosh_self_Tensor(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_method_cosh_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_cosh_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_cosh__self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_cosh__self_Tensor(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_method_cosh__self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_cosh__self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_cumsum_self_Tensor_dim_int64_t
Rcpp::XPtr<torch::Tensor> cpp_torch_method_cumsum_self_Tensor_dim_int64_t(Rcpp::XPtr<torch::Tensor> self, int64_t dim, Rcpp::XPtr<torch::Dtype> dtype);
RcppExport SEXP _torch_cpp_torch_method_cumsum_self_Tensor_dim_int64_t(SEXP selfSEXP, SEXP dimSEXP, SEXP dtypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Dtype> >::type dtype(dtypeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_cumsum_self_Tensor_dim_int64_t(self, dim, dtype));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_cumsum_self_Tensor_dim_Dimname
Rcpp::XPtr<torch::Tensor> cpp_torch_method_cumsum_self_Tensor_dim_Dimname(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Dimname> dim, Rcpp::XPtr<torch::Dtype> dtype);
RcppExport SEXP _torch_cpp_torch_method_cumsum_self_Tensor_dim_Dimname(SEXP selfSEXP, SEXP dimSEXP, SEXP dtypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Dimname> >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Dtype> >::type dtype(dtypeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_cumsum_self_Tensor_dim_Dimname(self, dim, dtype));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_cumprod_self_Tensor_dim_int64_t
Rcpp::XPtr<torch::Tensor> cpp_torch_method_cumprod_self_Tensor_dim_int64_t(Rcpp::XPtr<torch::Tensor> self, int64_t dim, Rcpp::XPtr<torch::Dtype> dtype);
RcppExport SEXP _torch_cpp_torch_method_cumprod_self_Tensor_dim_int64_t(SEXP selfSEXP, SEXP dimSEXP, SEXP dtypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Dtype> >::type dtype(dtypeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_cumprod_self_Tensor_dim_int64_t(self, dim, dtype));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_cumprod_self_Tensor_dim_Dimname
Rcpp::XPtr<torch::Tensor> cpp_torch_method_cumprod_self_Tensor_dim_Dimname(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Dimname> dim, Rcpp::XPtr<torch::Dtype> dtype);
RcppExport SEXP _torch_cpp_torch_method_cumprod_self_Tensor_dim_Dimname(SEXP selfSEXP, SEXP dimSEXP, SEXP dtypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Dimname> >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Dtype> >::type dtype(dtypeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_cumprod_self_Tensor_dim_Dimname(self, dim, dtype));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_det_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_det_self_Tensor(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_method_det_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_det_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_diag_embed_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_diag_embed_self_Tensor(Rcpp::XPtr<torch::Tensor> self, int64_t offset, int64_t dim1, int64_t dim2);
RcppExport SEXP _torch_cpp_torch_method_diag_embed_self_Tensor(SEXP selfSEXP, SEXP offsetSEXP, SEXP dim1SEXP, SEXP dim2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< int64_t >::type offset(offsetSEXP);
    Rcpp::traits::input_parameter< int64_t >::type dim1(dim1SEXP);
    Rcpp::traits::input_parameter< int64_t >::type dim2(dim2SEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_diag_embed_self_Tensor(self, offset, dim1, dim2));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_diagflat_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_diagflat_self_Tensor(Rcpp::XPtr<torch::Tensor> self, int64_t offset);
RcppExport SEXP _torch_cpp_torch_method_diagflat_self_Tensor(SEXP selfSEXP, SEXP offsetSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< int64_t >::type offset(offsetSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_diagflat_self_Tensor(self, offset));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_diagonal_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_diagonal_self_Tensor(Rcpp::XPtr<torch::Tensor> self, int64_t offset, int64_t dim1, int64_t dim2);
RcppExport SEXP _torch_cpp_torch_method_diagonal_self_Tensor(SEXP selfSEXP, SEXP offsetSEXP, SEXP dim1SEXP, SEXP dim2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< int64_t >::type offset(offsetSEXP);
    Rcpp::traits::input_parameter< int64_t >::type dim1(dim1SEXP);
    Rcpp::traits::input_parameter< int64_t >::type dim2(dim2SEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_diagonal_self_Tensor(self, offset, dim1, dim2));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_fill_diagonal__self_Tensor_fill_value_Scalar
Rcpp::XPtr<torch::Tensor> cpp_torch_method_fill_diagonal__self_Tensor_fill_value_Scalar(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Scalar> fill_value, bool wrap);
RcppExport SEXP _torch_cpp_torch_method_fill_diagonal__self_Tensor_fill_value_Scalar(SEXP selfSEXP, SEXP fill_valueSEXP, SEXP wrapSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type fill_value(fill_valueSEXP);
    Rcpp::traits::input_parameter< bool >::type wrap(wrapSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_fill_diagonal__self_Tensor_fill_value_Scalar(self, fill_value, wrap));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_div_self_Tensor_other_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_div_self_Tensor_other_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> other);
RcppExport SEXP _torch_cpp_torch_method_div_self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_div_self_Tensor_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_div__self_Tensor_other_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_div__self_Tensor_other_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> other);
RcppExport SEXP _torch_cpp_torch_method_div__self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_div__self_Tensor_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_div_self_Tensor_other_Scalar
Rcpp::XPtr<torch::Tensor> cpp_torch_method_div_self_Tensor_other_Scalar(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Scalar> other);
RcppExport SEXP _torch_cpp_torch_method_div_self_Tensor_other_Scalar(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_div_self_Tensor_other_Scalar(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_div__self_Tensor_other_Scalar
Rcpp::XPtr<torch::Tensor> cpp_torch_method_div__self_Tensor_other_Scalar(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Scalar> other);
RcppExport SEXP _torch_cpp_torch_method_div__self_Tensor_other_Scalar(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_div__self_Tensor_other_Scalar(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_dot_self_Tensor_tensor_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_dot_self_Tensor_tensor_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> tensor);
RcppExport SEXP _torch_cpp_torch_method_dot_self_Tensor_tensor_Tensor(SEXP selfSEXP, SEXP tensorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type tensor(tensorSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_dot_self_Tensor_tensor_Tensor(self, tensor));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_new_empty_self_Tensor_size_IntArrayRef
Rcpp::XPtr<torch::Tensor> cpp_torch_method_new_empty_self_Tensor_size_IntArrayRef(Rcpp::XPtr<torch::Tensor> self, std::vector<int64_t> size, Rcpp::XPtr<torch::TensorOptions> options);
RcppExport SEXP _torch_cpp_torch_method_new_empty_self_Tensor_size_IntArrayRef(SEXP selfSEXP, SEXP sizeSEXP, SEXP optionsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::TensorOptions> >::type options(optionsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_new_empty_self_Tensor_size_IntArrayRef(self, size, options));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_new_full_self_Tensor_size_IntArrayRef_fill_value_Scalar
Rcpp::XPtr<torch::Tensor> cpp_torch_method_new_full_self_Tensor_size_IntArrayRef_fill_value_Scalar(Rcpp::XPtr<torch::Tensor> self, std::vector<int64_t> size, Rcpp::XPtr<torch::Scalar> fill_value, Rcpp::XPtr<torch::TensorOptions> options);
RcppExport SEXP _torch_cpp_torch_method_new_full_self_Tensor_size_IntArrayRef_fill_value_Scalar(SEXP selfSEXP, SEXP sizeSEXP, SEXP fill_valueSEXP, SEXP optionsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type fill_value(fill_valueSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::TensorOptions> >::type options(optionsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_new_full_self_Tensor_size_IntArrayRef_fill_value_Scalar(self, size, fill_value, options));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_new_zeros_self_Tensor_size_IntArrayRef
Rcpp::XPtr<torch::Tensor> cpp_torch_method_new_zeros_self_Tensor_size_IntArrayRef(Rcpp::XPtr<torch::Tensor> self, std::vector<int64_t> size, Rcpp::XPtr<torch::TensorOptions> options);
RcppExport SEXP _torch_cpp_torch_method_new_zeros_self_Tensor_size_IntArrayRef(SEXP selfSEXP, SEXP sizeSEXP, SEXP optionsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::TensorOptions> >::type options(optionsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_new_zeros_self_Tensor_size_IntArrayRef(self, size, options));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_resize__self_Tensor_size_IntArrayRef
Rcpp::XPtr<torch::Tensor> cpp_torch_method_resize__self_Tensor_size_IntArrayRef(Rcpp::XPtr<torch::Tensor> self, std::vector<int64_t> size, Rcpp::XPtr<c10::optional<torch::MemoryFormat>> memory_format);
RcppExport SEXP _torch_cpp_torch_method_resize__self_Tensor_size_IntArrayRef(SEXP selfSEXP, SEXP sizeSEXP, SEXP memory_formatSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<c10::optional<torch::MemoryFormat>> >::type memory_format(memory_formatSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_resize__self_Tensor_size_IntArrayRef(self, size, memory_format));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_erf_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_erf_self_Tensor(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_method_erf_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_erf_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_erf__self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_erf__self_Tensor(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_method_erf__self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_erf__self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_erfc_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_erfc_self_Tensor(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_method_erfc_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_erfc_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_erfc__self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_erfc__self_Tensor(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_method_erfc__self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_erfc__self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_exp_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_exp_self_Tensor(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_method_exp_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_exp_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_exp__self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_exp__self_Tensor(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_method_exp__self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_exp__self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_expm1_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_expm1_self_Tensor(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_method_expm1_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_expm1_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_expm1__self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_expm1__self_Tensor(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_method_expm1__self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_expm1__self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_expand_self_Tensor_size_IntArrayRef
Rcpp::XPtr<torch::Tensor> cpp_torch_method_expand_self_Tensor_size_IntArrayRef(Rcpp::XPtr<torch::Tensor> self, std::vector<int64_t> size, bool implicit);
RcppExport SEXP _torch_cpp_torch_method_expand_self_Tensor_size_IntArrayRef(SEXP selfSEXP, SEXP sizeSEXP, SEXP implicitSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< bool >::type implicit(implicitSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_expand_self_Tensor_size_IntArrayRef(self, size, implicit));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_expand_as_self_Tensor_other_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_expand_as_self_Tensor_other_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> other);
RcppExport SEXP _torch_cpp_torch_method_expand_as_self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_expand_as_self_Tensor_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_flatten_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_flatten_self_Tensor(Rcpp::XPtr<torch::Tensor> self, int64_t start_dim, int64_t end_dim);
RcppExport SEXP _torch_cpp_torch_method_flatten_self_Tensor(SEXP selfSEXP, SEXP start_dimSEXP, SEXP end_dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< int64_t >::type start_dim(start_dimSEXP);
    Rcpp::traits::input_parameter< int64_t >::type end_dim(end_dimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_flatten_self_Tensor(self, start_dim, end_dim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_flatten_self_Tensor_start_dim_int64_t_end_dim_int64_t_out_dim_Dimname
Rcpp::XPtr<torch::Tensor> cpp_torch_method_flatten_self_Tensor_start_dim_int64_t_end_dim_int64_t_out_dim_Dimname(Rcpp::XPtr<torch::Tensor> self, int64_t start_dim, int64_t end_dim, Rcpp::XPtr<torch::Dimname> out_dim);
RcppExport SEXP _torch_cpp_torch_method_flatten_self_Tensor_start_dim_int64_t_end_dim_int64_t_out_dim_Dimname(SEXP selfSEXP, SEXP start_dimSEXP, SEXP end_dimSEXP, SEXP out_dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< int64_t >::type start_dim(start_dimSEXP);
    Rcpp::traits::input_parameter< int64_t >::type end_dim(end_dimSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Dimname> >::type out_dim(out_dimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_flatten_self_Tensor_start_dim_int64_t_end_dim_int64_t_out_dim_Dimname(self, start_dim, end_dim, out_dim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_flatten_self_Tensor_start_dim_Dimname_end_dim_Dimname_out_dim_Dimname
Rcpp::XPtr<torch::Tensor> cpp_torch_method_flatten_self_Tensor_start_dim_Dimname_end_dim_Dimname_out_dim_Dimname(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Dimname> start_dim, Rcpp::XPtr<torch::Dimname> end_dim, Rcpp::XPtr<torch::Dimname> out_dim);
RcppExport SEXP _torch_cpp_torch_method_flatten_self_Tensor_start_dim_Dimname_end_dim_Dimname_out_dim_Dimname(SEXP selfSEXP, SEXP start_dimSEXP, SEXP end_dimSEXP, SEXP out_dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Dimname> >::type start_dim(start_dimSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Dimname> >::type end_dim(end_dimSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Dimname> >::type out_dim(out_dimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_flatten_self_Tensor_start_dim_Dimname_end_dim_Dimname_out_dim_Dimname(self, start_dim, end_dim, out_dim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_flatten_self_Tensor_dims_DimnameList_out_dim_Dimname
Rcpp::XPtr<torch::Tensor> cpp_torch_method_flatten_self_Tensor_dims_DimnameList_out_dim_Dimname(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<std::vector<torch::Dimname>> dims, Rcpp::XPtr<torch::Dimname> out_dim);
RcppExport SEXP _torch_cpp_torch_method_flatten_self_Tensor_dims_DimnameList_out_dim_Dimname(SEXP selfSEXP, SEXP dimsSEXP, SEXP out_dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::vector<torch::Dimname>> >::type dims(dimsSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Dimname> >::type out_dim(out_dimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_flatten_self_Tensor_dims_DimnameList_out_dim_Dimname(self, dims, out_dim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_fill__self_Tensor_value_Scalar
Rcpp::XPtr<torch::Tensor> cpp_torch_method_fill__self_Tensor_value_Scalar(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Scalar> value);
RcppExport SEXP _torch_cpp_torch_method_fill__self_Tensor_value_Scalar(SEXP selfSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_fill__self_Tensor_value_Scalar(self, value));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_fill__self_Tensor_value_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_fill__self_Tensor_value_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> value);
RcppExport SEXP _torch_cpp_torch_method_fill__self_Tensor_value_Tensor(SEXP selfSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_fill__self_Tensor_value_Tensor(self, value));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_floor_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_floor_self_Tensor(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_method_floor_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_floor_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_floor__self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_floor__self_Tensor(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_method_floor__self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_floor__self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_frac_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_frac_self_Tensor(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_method_frac_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_frac_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_frac__self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_frac__self_Tensor(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_method_frac__self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_frac__self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_ger_self_Tensor_vec2_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_ger_self_Tensor_vec2_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> vec2);
RcppExport SEXP _torch_cpp_torch_method_ger_self_Tensor_vec2_Tensor(SEXP selfSEXP, SEXP vec2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type vec2(vec2SEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_ger_self_Tensor_vec2_Tensor(self, vec2));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_fft_self_Tensor_signal_ndim_int64_t
Rcpp::XPtr<torch::Tensor> cpp_torch_method_fft_self_Tensor_signal_ndim_int64_t(Rcpp::XPtr<torch::Tensor> self, int64_t signal_ndim, bool normalized);
RcppExport SEXP _torch_cpp_torch_method_fft_self_Tensor_signal_ndim_int64_t(SEXP selfSEXP, SEXP signal_ndimSEXP, SEXP normalizedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< int64_t >::type signal_ndim(signal_ndimSEXP);
    Rcpp::traits::input_parameter< bool >::type normalized(normalizedSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_fft_self_Tensor_signal_ndim_int64_t(self, signal_ndim, normalized));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_ifft_self_Tensor_signal_ndim_int64_t
Rcpp::XPtr<torch::Tensor> cpp_torch_method_ifft_self_Tensor_signal_ndim_int64_t(Rcpp::XPtr<torch::Tensor> self, int64_t signal_ndim, bool normalized);
RcppExport SEXP _torch_cpp_torch_method_ifft_self_Tensor_signal_ndim_int64_t(SEXP selfSEXP, SEXP signal_ndimSEXP, SEXP normalizedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< int64_t >::type signal_ndim(signal_ndimSEXP);
    Rcpp::traits::input_parameter< bool >::type normalized(normalizedSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_ifft_self_Tensor_signal_ndim_int64_t(self, signal_ndim, normalized));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_rfft_self_Tensor_signal_ndim_int64_t
Rcpp::XPtr<torch::Tensor> cpp_torch_method_rfft_self_Tensor_signal_ndim_int64_t(Rcpp::XPtr<torch::Tensor> self, int64_t signal_ndim, bool normalized, bool onesided);
RcppExport SEXP _torch_cpp_torch_method_rfft_self_Tensor_signal_ndim_int64_t(SEXP selfSEXP, SEXP signal_ndimSEXP, SEXP normalizedSEXP, SEXP onesidedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< int64_t >::type signal_ndim(signal_ndimSEXP);
    Rcpp::traits::input_parameter< bool >::type normalized(normalizedSEXP);
    Rcpp::traits::input_parameter< bool >::type onesided(onesidedSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_rfft_self_Tensor_signal_ndim_int64_t(self, signal_ndim, normalized, onesided));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_irfft_self_Tensor_signal_ndim_int64_t
Rcpp::XPtr<torch::Tensor> cpp_torch_method_irfft_self_Tensor_signal_ndim_int64_t(Rcpp::XPtr<torch::Tensor> self, int64_t signal_ndim, bool normalized, bool onesided, std::vector<int64_t> signal_sizes);
RcppExport SEXP _torch_cpp_torch_method_irfft_self_Tensor_signal_ndim_int64_t(SEXP selfSEXP, SEXP signal_ndimSEXP, SEXP normalizedSEXP, SEXP onesidedSEXP, SEXP signal_sizesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< int64_t >::type signal_ndim(signal_ndimSEXP);
    Rcpp::traits::input_parameter< bool >::type normalized(normalizedSEXP);
    Rcpp::traits::input_parameter< bool >::type onesided(onesidedSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type signal_sizes(signal_sizesSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_irfft_self_Tensor_signal_ndim_int64_t(self, signal_ndim, normalized, onesided, signal_sizes));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_index_self_Tensor_indices_TensorList
Rcpp::XPtr<torch::Tensor> cpp_torch_method_index_self_Tensor_indices_TensorList(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<std::vector<torch::Tensor>> indices);
RcppExport SEXP _torch_cpp_torch_method_index_self_Tensor_indices_TensorList(SEXP selfSEXP, SEXP indicesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::vector<torch::Tensor>> >::type indices(indicesSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_index_self_Tensor_indices_TensorList(self, indices));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_index_copy__self_Tensor_dim_int64_t_index_Tensor_source_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_index_copy__self_Tensor_dim_int64_t_index_Tensor_source_Tensor(Rcpp::XPtr<torch::Tensor> self, int64_t dim, Rcpp::XPtr<torch::Tensor> index, Rcpp::XPtr<torch::Tensor> source);
RcppExport SEXP _torch_cpp_torch_method_index_copy__self_Tensor_dim_int64_t_index_Tensor_source_Tensor(SEXP selfSEXP, SEXP dimSEXP, SEXP indexSEXP, SEXP sourceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type index(indexSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type source(sourceSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_index_copy__self_Tensor_dim_int64_t_index_Tensor_source_Tensor(self, dim, index, source));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_index_copy_self_Tensor_dim_int64_t_index_Tensor_source_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_index_copy_self_Tensor_dim_int64_t_index_Tensor_source_Tensor(Rcpp::XPtr<torch::Tensor> self, int64_t dim, Rcpp::XPtr<torch::Tensor> index, Rcpp::XPtr<torch::Tensor> source);
RcppExport SEXP _torch_cpp_torch_method_index_copy_self_Tensor_dim_int64_t_index_Tensor_source_Tensor(SEXP selfSEXP, SEXP dimSEXP, SEXP indexSEXP, SEXP sourceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type index(indexSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type source(sourceSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_index_copy_self_Tensor_dim_int64_t_index_Tensor_source_Tensor(self, dim, index, source));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_index_copy__self_Tensor_dim_Dimname_index_Tensor_source_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_index_copy__self_Tensor_dim_Dimname_index_Tensor_source_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Dimname> dim, Rcpp::XPtr<torch::Tensor> index, Rcpp::XPtr<torch::Tensor> source);
RcppExport SEXP _torch_cpp_torch_method_index_copy__self_Tensor_dim_Dimname_index_Tensor_source_Tensor(SEXP selfSEXP, SEXP dimSEXP, SEXP indexSEXP, SEXP sourceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Dimname> >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type index(indexSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type source(sourceSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_index_copy__self_Tensor_dim_Dimname_index_Tensor_source_Tensor(self, dim, index, source));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_index_copy_self_Tensor_dim_Dimname_index_Tensor_source_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_index_copy_self_Tensor_dim_Dimname_index_Tensor_source_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Dimname> dim, Rcpp::XPtr<torch::Tensor> index, Rcpp::XPtr<torch::Tensor> source);
RcppExport SEXP _torch_cpp_torch_method_index_copy_self_Tensor_dim_Dimname_index_Tensor_source_Tensor(SEXP selfSEXP, SEXP dimSEXP, SEXP indexSEXP, SEXP sourceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Dimname> >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type index(indexSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type source(sourceSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_index_copy_self_Tensor_dim_Dimname_index_Tensor_source_Tensor(self, dim, index, source));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_index_put__self_Tensor_indices_TensorList_values_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_index_put__self_Tensor_indices_TensorList_values_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<std::vector<torch::Tensor>> indices, Rcpp::XPtr<torch::Tensor> values, bool accumulate);
RcppExport SEXP _torch_cpp_torch_method_index_put__self_Tensor_indices_TensorList_values_Tensor(SEXP selfSEXP, SEXP indicesSEXP, SEXP valuesSEXP, SEXP accumulateSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::vector<torch::Tensor>> >::type indices(indicesSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type values(valuesSEXP);
    Rcpp::traits::input_parameter< bool >::type accumulate(accumulateSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_index_put__self_Tensor_indices_TensorList_values_Tensor(self, indices, values, accumulate));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_index_put_self_Tensor_indices_TensorList_values_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_index_put_self_Tensor_indices_TensorList_values_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<std::vector<torch::Tensor>> indices, Rcpp::XPtr<torch::Tensor> values, bool accumulate);
RcppExport SEXP _torch_cpp_torch_method_index_put_self_Tensor_indices_TensorList_values_Tensor(SEXP selfSEXP, SEXP indicesSEXP, SEXP valuesSEXP, SEXP accumulateSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::vector<torch::Tensor>> >::type indices(indicesSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type values(valuesSEXP);
    Rcpp::traits::input_parameter< bool >::type accumulate(accumulateSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_index_put_self_Tensor_indices_TensorList_values_Tensor(self, indices, values, accumulate));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_inverse_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_inverse_self_Tensor(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_method_inverse_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_inverse_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_isclose_self_Tensor_other_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_isclose_self_Tensor_other_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> other, double rtol, double atol, bool equal_nan);
RcppExport SEXP _torch_cpp_torch_method_isclose_self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP, SEXP rtolSEXP, SEXP atolSEXP, SEXP equal_nanSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type other(otherSEXP);
    Rcpp::traits::input_parameter< double >::type rtol(rtolSEXP);
    Rcpp::traits::input_parameter< double >::type atol(atolSEXP);
    Rcpp::traits::input_parameter< bool >::type equal_nan(equal_nanSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_isclose_self_Tensor_other_Tensor(self, other, rtol, atol, equal_nan));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_is_distributed_self_Tensor
bool cpp_torch_method_is_distributed_self_Tensor(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_method_is_distributed_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_is_distributed_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_is_floating_point_self_Tensor
bool cpp_torch_method_is_floating_point_self_Tensor(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_method_is_floating_point_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_is_floating_point_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_is_complex_self_Tensor
bool cpp_torch_method_is_complex_self_Tensor(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_method_is_complex_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_is_complex_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_is_nonzero_self_Tensor
bool cpp_torch_method_is_nonzero_self_Tensor(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_method_is_nonzero_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_is_nonzero_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_is_same_size_self_Tensor_other_Tensor
bool cpp_torch_method_is_same_size_self_Tensor_other_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> other);
RcppExport SEXP _torch_cpp_torch_method_is_same_size_self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_is_same_size_self_Tensor_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_is_signed_self_Tensor
bool cpp_torch_method_is_signed_self_Tensor(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_method_is_signed_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_is_signed_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_kthvalue_self_Tensor_k_int64_t
Rcpp::List cpp_torch_method_kthvalue_self_Tensor_k_int64_t(Rcpp::XPtr<torch::Tensor> self, int64_t k, int64_t dim, bool keepdim);
RcppExport SEXP _torch_cpp_torch_method_kthvalue_self_Tensor_k_int64_t(SEXP selfSEXP, SEXP kSEXP, SEXP dimSEXP, SEXP keepdimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< int64_t >::type k(kSEXP);
    Rcpp::traits::input_parameter< int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< bool >::type keepdim(keepdimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_kthvalue_self_Tensor_k_int64_t(self, k, dim, keepdim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_kthvalue_self_Tensor_k_int64_t_dim_Dimname
Rcpp::List cpp_torch_method_kthvalue_self_Tensor_k_int64_t_dim_Dimname(Rcpp::XPtr<torch::Tensor> self, int64_t k, Rcpp::XPtr<torch::Dimname> dim, bool keepdim);
RcppExport SEXP _torch_cpp_torch_method_kthvalue_self_Tensor_k_int64_t_dim_Dimname(SEXP selfSEXP, SEXP kSEXP, SEXP dimSEXP, SEXP keepdimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< int64_t >::type k(kSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Dimname> >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< bool >::type keepdim(keepdimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_kthvalue_self_Tensor_k_int64_t_dim_Dimname(self, k, dim, keepdim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_log_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_log_self_Tensor(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_method_log_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_log_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_log__self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_log__self_Tensor(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_method_log__self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_log__self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_log10_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_log10_self_Tensor(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_method_log10_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_log10_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_log10__self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_log10__self_Tensor(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_method_log10__self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_log10__self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_log1p_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_log1p_self_Tensor(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_method_log1p_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_log1p_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_log1p__self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_log1p__self_Tensor(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_method_log1p__self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_log1p__self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_log2_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_log2_self_Tensor(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_method_log2_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_log2_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_log2__self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_log2__self_Tensor(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_method_log2__self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_log2__self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_logdet_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_logdet_self_Tensor(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_method_logdet_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_logdet_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_log_softmax_self_Tensor_dim_int64_t
Rcpp::XPtr<torch::Tensor> cpp_torch_method_log_softmax_self_Tensor_dim_int64_t(Rcpp::XPtr<torch::Tensor> self, int64_t dim, Rcpp::XPtr<torch::Dtype> dtype);
RcppExport SEXP _torch_cpp_torch_method_log_softmax_self_Tensor_dim_int64_t(SEXP selfSEXP, SEXP dimSEXP, SEXP dtypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Dtype> >::type dtype(dtypeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_log_softmax_self_Tensor_dim_int64_t(self, dim, dtype));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_log_softmax_self_Tensor_dim_Dimname
Rcpp::XPtr<torch::Tensor> cpp_torch_method_log_softmax_self_Tensor_dim_Dimname(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Dimname> dim, Rcpp::XPtr<torch::Dtype> dtype);
RcppExport SEXP _torch_cpp_torch_method_log_softmax_self_Tensor_dim_Dimname(SEXP selfSEXP, SEXP dimSEXP, SEXP dtypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Dimname> >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Dtype> >::type dtype(dtypeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_log_softmax_self_Tensor_dim_Dimname(self, dim, dtype));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_logsumexp_self_Tensor_dim_IntArrayRef
Rcpp::XPtr<torch::Tensor> cpp_torch_method_logsumexp_self_Tensor_dim_IntArrayRef(Rcpp::XPtr<torch::Tensor> self, std::vector<int64_t> dim, bool keepdim);
RcppExport SEXP _torch_cpp_torch_method_logsumexp_self_Tensor_dim_IntArrayRef(SEXP selfSEXP, SEXP dimSEXP, SEXP keepdimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< bool >::type keepdim(keepdimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_logsumexp_self_Tensor_dim_IntArrayRef(self, dim, keepdim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_logsumexp_self_Tensor_dim_DimnameList
Rcpp::XPtr<torch::Tensor> cpp_torch_method_logsumexp_self_Tensor_dim_DimnameList(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<std::vector<torch::Dimname>> dim, bool keepdim);
RcppExport SEXP _torch_cpp_torch_method_logsumexp_self_Tensor_dim_DimnameList(SEXP selfSEXP, SEXP dimSEXP, SEXP keepdimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::vector<torch::Dimname>> >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< bool >::type keepdim(keepdimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_logsumexp_self_Tensor_dim_DimnameList(self, dim, keepdim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_matmul_self_Tensor_other_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_matmul_self_Tensor_other_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> other);
RcppExport SEXP _torch_cpp_torch_method_matmul_self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_matmul_self_Tensor_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_matrix_power_self_Tensor_n_int64_t
Rcpp::XPtr<torch::Tensor> cpp_torch_method_matrix_power_self_Tensor_n_int64_t(Rcpp::XPtr<torch::Tensor> self, int64_t n);
RcppExport SEXP _torch_cpp_torch_method_matrix_power_self_Tensor_n_int64_t(SEXP selfSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< int64_t >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_matrix_power_self_Tensor_n_int64_t(self, n));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_max_self_Tensor_dim_int64_t
Rcpp::List cpp_torch_method_max_self_Tensor_dim_int64_t(Rcpp::XPtr<torch::Tensor> self, int64_t dim, bool keepdim);
RcppExport SEXP _torch_cpp_torch_method_max_self_Tensor_dim_int64_t(SEXP selfSEXP, SEXP dimSEXP, SEXP keepdimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< bool >::type keepdim(keepdimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_max_self_Tensor_dim_int64_t(self, dim, keepdim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_max_values_self_Tensor_dim_IntArrayRef
Rcpp::XPtr<torch::Tensor> cpp_torch_method_max_values_self_Tensor_dim_IntArrayRef(Rcpp::XPtr<torch::Tensor> self, std::vector<int64_t> dim, bool keepdim);
RcppExport SEXP _torch_cpp_torch_method_max_values_self_Tensor_dim_IntArrayRef(SEXP selfSEXP, SEXP dimSEXP, SEXP keepdimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< bool >::type keepdim(keepdimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_max_values_self_Tensor_dim_IntArrayRef(self, dim, keepdim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_max_self_Tensor_dim_Dimname
Rcpp::List cpp_torch_method_max_self_Tensor_dim_Dimname(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Dimname> dim, bool keepdim);
RcppExport SEXP _torch_cpp_torch_method_max_self_Tensor_dim_Dimname(SEXP selfSEXP, SEXP dimSEXP, SEXP keepdimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Dimname> >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< bool >::type keepdim(keepdimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_max_self_Tensor_dim_Dimname(self, dim, keepdim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_max_values_self_Tensor_dim_DimnameList
Rcpp::XPtr<torch::Tensor> cpp_torch_method_max_values_self_Tensor_dim_DimnameList(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<std::vector<torch::Dimname>> dim, bool keepdim);
RcppExport SEXP _torch_cpp_torch_method_max_values_self_Tensor_dim_DimnameList(SEXP selfSEXP, SEXP dimSEXP, SEXP keepdimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::vector<torch::Dimname>> >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< bool >::type keepdim(keepdimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_max_values_self_Tensor_dim_DimnameList(self, dim, keepdim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_mean_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_mean_self_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Dtype> dtype);
RcppExport SEXP _torch_cpp_torch_method_mean_self_Tensor(SEXP selfSEXP, SEXP dtypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Dtype> >::type dtype(dtypeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_mean_self_Tensor(self, dtype));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_mean_self_Tensor_dim_IntArrayRef
Rcpp::XPtr<torch::Tensor> cpp_torch_method_mean_self_Tensor_dim_IntArrayRef(Rcpp::XPtr<torch::Tensor> self, std::vector<int64_t> dim, bool keepdim, Rcpp::XPtr<torch::Dtype> dtype);
RcppExport SEXP _torch_cpp_torch_method_mean_self_Tensor_dim_IntArrayRef(SEXP selfSEXP, SEXP dimSEXP, SEXP keepdimSEXP, SEXP dtypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< bool >::type keepdim(keepdimSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Dtype> >::type dtype(dtypeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_mean_self_Tensor_dim_IntArrayRef(self, dim, keepdim, dtype));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_mean_self_Tensor_dim_DimnameList
Rcpp::XPtr<torch::Tensor> cpp_torch_method_mean_self_Tensor_dim_DimnameList(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<std::vector<torch::Dimname>> dim, bool keepdim, Rcpp::XPtr<torch::Dtype> dtype);
RcppExport SEXP _torch_cpp_torch_method_mean_self_Tensor_dim_DimnameList(SEXP selfSEXP, SEXP dimSEXP, SEXP keepdimSEXP, SEXP dtypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::vector<torch::Dimname>> >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< bool >::type keepdim(keepdimSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Dtype> >::type dtype(dtypeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_mean_self_Tensor_dim_DimnameList(self, dim, keepdim, dtype));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_median_self_Tensor_dim_int64_t
Rcpp::List cpp_torch_method_median_self_Tensor_dim_int64_t(Rcpp::XPtr<torch::Tensor> self, int64_t dim, bool keepdim);
RcppExport SEXP _torch_cpp_torch_method_median_self_Tensor_dim_int64_t(SEXP selfSEXP, SEXP dimSEXP, SEXP keepdimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< bool >::type keepdim(keepdimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_median_self_Tensor_dim_int64_t(self, dim, keepdim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_median_self_Tensor_dim_Dimname
Rcpp::List cpp_torch_method_median_self_Tensor_dim_Dimname(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Dimname> dim, bool keepdim);
RcppExport SEXP _torch_cpp_torch_method_median_self_Tensor_dim_Dimname(SEXP selfSEXP, SEXP dimSEXP, SEXP keepdimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Dimname> >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< bool >::type keepdim(keepdimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_median_self_Tensor_dim_Dimname(self, dim, keepdim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_min_self_Tensor_dim_int64_t
Rcpp::List cpp_torch_method_min_self_Tensor_dim_int64_t(Rcpp::XPtr<torch::Tensor> self, int64_t dim, bool keepdim);
RcppExport SEXP _torch_cpp_torch_method_min_self_Tensor_dim_int64_t(SEXP selfSEXP, SEXP dimSEXP, SEXP keepdimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< bool >::type keepdim(keepdimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_min_self_Tensor_dim_int64_t(self, dim, keepdim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_min_values_self_Tensor_dim_IntArrayRef
Rcpp::XPtr<torch::Tensor> cpp_torch_method_min_values_self_Tensor_dim_IntArrayRef(Rcpp::XPtr<torch::Tensor> self, std::vector<int64_t> dim, bool keepdim);
RcppExport SEXP _torch_cpp_torch_method_min_values_self_Tensor_dim_IntArrayRef(SEXP selfSEXP, SEXP dimSEXP, SEXP keepdimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< bool >::type keepdim(keepdimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_min_values_self_Tensor_dim_IntArrayRef(self, dim, keepdim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_min_self_Tensor_dim_Dimname
Rcpp::List cpp_torch_method_min_self_Tensor_dim_Dimname(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Dimname> dim, bool keepdim);
RcppExport SEXP _torch_cpp_torch_method_min_self_Tensor_dim_Dimname(SEXP selfSEXP, SEXP dimSEXP, SEXP keepdimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Dimname> >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< bool >::type keepdim(keepdimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_min_self_Tensor_dim_Dimname(self, dim, keepdim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_min_values_self_Tensor_dim_DimnameList
Rcpp::XPtr<torch::Tensor> cpp_torch_method_min_values_self_Tensor_dim_DimnameList(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<std::vector<torch::Dimname>> dim, bool keepdim);
RcppExport SEXP _torch_cpp_torch_method_min_values_self_Tensor_dim_DimnameList(SEXP selfSEXP, SEXP dimSEXP, SEXP keepdimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::vector<torch::Dimname>> >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< bool >::type keepdim(keepdimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_min_values_self_Tensor_dim_DimnameList(self, dim, keepdim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_mm_self_Tensor_mat2_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_mm_self_Tensor_mat2_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> mat2);
RcppExport SEXP _torch_cpp_torch_method_mm_self_Tensor_mat2_Tensor(SEXP selfSEXP, SEXP mat2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type mat2(mat2SEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_mm_self_Tensor_mat2_Tensor(self, mat2));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_mode_self_Tensor
Rcpp::List cpp_torch_method_mode_self_Tensor(Rcpp::XPtr<torch::Tensor> self, int64_t dim, bool keepdim);
RcppExport SEXP _torch_cpp_torch_method_mode_self_Tensor(SEXP selfSEXP, SEXP dimSEXP, SEXP keepdimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< bool >::type keepdim(keepdimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_mode_self_Tensor(self, dim, keepdim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_mode_self_Tensor_dim_Dimname
Rcpp::List cpp_torch_method_mode_self_Tensor_dim_Dimname(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Dimname> dim, bool keepdim);
RcppExport SEXP _torch_cpp_torch_method_mode_self_Tensor_dim_Dimname(SEXP selfSEXP, SEXP dimSEXP, SEXP keepdimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Dimname> >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< bool >::type keepdim(keepdimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_mode_self_Tensor_dim_Dimname(self, dim, keepdim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_mul_self_Tensor_other_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_mul_self_Tensor_other_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> other);
RcppExport SEXP _torch_cpp_torch_method_mul_self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_mul_self_Tensor_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_mul__self_Tensor_other_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_mul__self_Tensor_other_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> other);
RcppExport SEXP _torch_cpp_torch_method_mul__self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_mul__self_Tensor_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_mul_self_Tensor_other_Scalar
Rcpp::XPtr<torch::Tensor> cpp_torch_method_mul_self_Tensor_other_Scalar(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Scalar> other);
RcppExport SEXP _torch_cpp_torch_method_mul_self_Tensor_other_Scalar(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_mul_self_Tensor_other_Scalar(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_mul__self_Tensor_other_Scalar
Rcpp::XPtr<torch::Tensor> cpp_torch_method_mul__self_Tensor_other_Scalar(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Scalar> other);
RcppExport SEXP _torch_cpp_torch_method_mul__self_Tensor_other_Scalar(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_mul__self_Tensor_other_Scalar(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_mv_self_Tensor_vec_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_mv_self_Tensor_vec_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> vec);
RcppExport SEXP _torch_cpp_torch_method_mv_self_Tensor_vec_Tensor(SEXP selfSEXP, SEXP vecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type vec(vecSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_mv_self_Tensor_vec_Tensor(self, vec));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_mvlgamma_self_Tensor_p_int64_t
Rcpp::XPtr<torch::Tensor> cpp_torch_method_mvlgamma_self_Tensor_p_int64_t(Rcpp::XPtr<torch::Tensor> self, int64_t p);
RcppExport SEXP _torch_cpp_torch_method_mvlgamma_self_Tensor_p_int64_t(SEXP selfSEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< int64_t >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_mvlgamma_self_Tensor_p_int64_t(self, p));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_mvlgamma__self_Tensor_p_int64_t
Rcpp::XPtr<torch::Tensor> cpp_torch_method_mvlgamma__self_Tensor_p_int64_t(Rcpp::XPtr<torch::Tensor> self, int64_t p);
RcppExport SEXP _torch_cpp_torch_method_mvlgamma__self_Tensor_p_int64_t(SEXP selfSEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< int64_t >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_mvlgamma__self_Tensor_p_int64_t(self, p));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_narrow_copy_self_Tensor_dim_int64_t_start_int64_t_length_int64_t
Rcpp::XPtr<torch::Tensor> cpp_torch_method_narrow_copy_self_Tensor_dim_int64_t_start_int64_t_length_int64_t(Rcpp::XPtr<torch::Tensor> self, int64_t dim, int64_t start, int64_t length);
RcppExport SEXP _torch_cpp_torch_method_narrow_copy_self_Tensor_dim_int64_t_start_int64_t_length_int64_t(SEXP selfSEXP, SEXP dimSEXP, SEXP startSEXP, SEXP lengthSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< int64_t >::type start(startSEXP);
    Rcpp::traits::input_parameter< int64_t >::type length(lengthSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_narrow_copy_self_Tensor_dim_int64_t_start_int64_t_length_int64_t(self, dim, start, length));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_narrow_self_Tensor_dim_int64_t_start_int64_t_length_int64_t
Rcpp::XPtr<torch::Tensor> cpp_torch_method_narrow_self_Tensor_dim_int64_t_start_int64_t_length_int64_t(Rcpp::XPtr<torch::Tensor> self, int64_t dim, int64_t start, int64_t length);
RcppExport SEXP _torch_cpp_torch_method_narrow_self_Tensor_dim_int64_t_start_int64_t_length_int64_t(SEXP selfSEXP, SEXP dimSEXP, SEXP startSEXP, SEXP lengthSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< int64_t >::type start(startSEXP);
    Rcpp::traits::input_parameter< int64_t >::type length(lengthSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_narrow_self_Tensor_dim_int64_t_start_int64_t_length_int64_t(self, dim, start, length));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_permute_self_Tensor_dims_IntArrayRef
Rcpp::XPtr<torch::Tensor> cpp_torch_method_permute_self_Tensor_dims_IntArrayRef(Rcpp::XPtr<torch::Tensor> self, std::vector<int64_t> dims);
RcppExport SEXP _torch_cpp_torch_method_permute_self_Tensor_dims_IntArrayRef(SEXP selfSEXP, SEXP dimsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type dims(dimsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_permute_self_Tensor_dims_IntArrayRef(self, dims));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_numpy_T_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_numpy_T_self_Tensor(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_method_numpy_T_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_numpy_T_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_is_pinned_self_Tensor
bool cpp_torch_method_is_pinned_self_Tensor(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_method_is_pinned_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_is_pinned_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_pin_memory_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_pin_memory_self_Tensor(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_method_pin_memory_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_pin_memory_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_pinverse_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_pinverse_self_Tensor(Rcpp::XPtr<torch::Tensor> self, double rcond);
RcppExport SEXP _torch_cpp_torch_method_pinverse_self_Tensor(SEXP selfSEXP, SEXP rcondSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< double >::type rcond(rcondSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_pinverse_self_Tensor(self, rcond));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_reciprocal_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_reciprocal_self_Tensor(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_method_reciprocal_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_reciprocal_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_reciprocal__self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_reciprocal__self_Tensor(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_method_reciprocal__self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_reciprocal__self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_neg_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_neg_self_Tensor(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_method_neg_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_neg_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_neg__self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_neg__self_Tensor(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_method_neg__self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_neg__self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_repeat_self_Tensor_repeats_IntArrayRef
Rcpp::XPtr<torch::Tensor> cpp_torch_method_repeat_self_Tensor_repeats_IntArrayRef(Rcpp::XPtr<torch::Tensor> self, std::vector<int64_t> repeats);
RcppExport SEXP _torch_cpp_torch_method_repeat_self_Tensor_repeats_IntArrayRef(SEXP selfSEXP, SEXP repeatsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type repeats(repeatsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_repeat_self_Tensor_repeats_IntArrayRef(self, repeats));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_repeat_interleave_self_Tensor_repeats_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_repeat_interleave_self_Tensor_repeats_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> repeats, int64_t dim);
RcppExport SEXP _torch_cpp_torch_method_repeat_interleave_self_Tensor_repeats_Tensor(SEXP selfSEXP, SEXP repeatsSEXP, SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type repeats(repeatsSEXP);
    Rcpp::traits::input_parameter< int64_t >::type dim(dimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_repeat_interleave_self_Tensor_repeats_Tensor(self, repeats, dim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_repeat_interleave_self_Tensor_repeats_int64_t
Rcpp::XPtr<torch::Tensor> cpp_torch_method_repeat_interleave_self_Tensor_repeats_int64_t(Rcpp::XPtr<torch::Tensor> self, int64_t repeats, int64_t dim);
RcppExport SEXP _torch_cpp_torch_method_repeat_interleave_self_Tensor_repeats_int64_t(SEXP selfSEXP, SEXP repeatsSEXP, SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< int64_t >::type repeats(repeatsSEXP);
    Rcpp::traits::input_parameter< int64_t >::type dim(dimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_repeat_interleave_self_Tensor_repeats_int64_t(self, repeats, dim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_reshape_self_Tensor_shape_IntArrayRef
Rcpp::XPtr<torch::Tensor> cpp_torch_method_reshape_self_Tensor_shape_IntArrayRef(Rcpp::XPtr<torch::Tensor> self, std::vector<int64_t> shape);
RcppExport SEXP _torch_cpp_torch_method_reshape_self_Tensor_shape_IntArrayRef(SEXP selfSEXP, SEXP shapeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type shape(shapeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_reshape_self_Tensor_shape_IntArrayRef(self, shape));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_reshape_as_self_Tensor_other_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_reshape_as_self_Tensor_other_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> other);
RcppExport SEXP _torch_cpp_torch_method_reshape_as_self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_reshape_as_self_Tensor_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_round_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_round_self_Tensor(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_method_round_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_round_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_round__self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_round__self_Tensor(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_method_round__self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_round__self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_relu_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_relu_self_Tensor(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_method_relu_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_relu_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_relu__self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_relu__self_Tensor(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_method_relu__self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_relu__self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_prelu_self_Tensor_weight_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_prelu_self_Tensor_weight_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> weight);
RcppExport SEXP _torch_cpp_torch_method_prelu_self_Tensor_weight_Tensor(SEXP selfSEXP, SEXP weightSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type weight(weightSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_prelu_self_Tensor_weight_Tensor(self, weight));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_prelu_backward_grad_output_Tensor_self_Tensor_weight_Tensor
Rcpp::List cpp_torch_method_prelu_backward_grad_output_Tensor_self_Tensor_weight_Tensor(Rcpp::XPtr<torch::Tensor> grad_output, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> weight);
RcppExport SEXP _torch_cpp_torch_method_prelu_backward_grad_output_Tensor_self_Tensor_weight_Tensor(SEXP grad_outputSEXP, SEXP selfSEXP, SEXP weightSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type weight(weightSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_prelu_backward_grad_output_Tensor_self_Tensor_weight_Tensor(grad_output, self, weight));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_hardshrink_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_hardshrink_self_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Scalar> lambd);
RcppExport SEXP _torch_cpp_torch_method_hardshrink_self_Tensor(SEXP selfSEXP, SEXP lambdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type lambd(lambdSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_hardshrink_self_Tensor(self, lambd));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_hardshrink_backward_grad_out_Tensor_self_Tensor_lambd_Scalar
Rcpp::XPtr<torch::Tensor> cpp_torch_method_hardshrink_backward_grad_out_Tensor_self_Tensor_lambd_Scalar(Rcpp::XPtr<torch::Tensor> grad_out, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Scalar> lambd);
RcppExport SEXP _torch_cpp_torch_method_hardshrink_backward_grad_out_Tensor_self_Tensor_lambd_Scalar(SEXP grad_outSEXP, SEXP selfSEXP, SEXP lambdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type grad_out(grad_outSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type lambd(lambdSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_hardshrink_backward_grad_out_Tensor_self_Tensor_lambd_Scalar(grad_out, self, lambd));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_rsqrt_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_rsqrt_self_Tensor(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_method_rsqrt_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_rsqrt_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_rsqrt__self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_rsqrt__self_Tensor(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_method_rsqrt__self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_rsqrt__self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_select_self_Tensor_dim_Dimname_index_int64_t
Rcpp::XPtr<torch::Tensor> cpp_torch_method_select_self_Tensor_dim_Dimname_index_int64_t(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Dimname> dim, int64_t index);
RcppExport SEXP _torch_cpp_torch_method_select_self_Tensor_dim_Dimname_index_int64_t(SEXP selfSEXP, SEXP dimSEXP, SEXP indexSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Dimname> >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< int64_t >::type index(indexSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_select_self_Tensor_dim_Dimname_index_int64_t(self, dim, index));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_select_self_Tensor_dim_int64_t_index_int64_t
Rcpp::XPtr<torch::Tensor> cpp_torch_method_select_self_Tensor_dim_int64_t_index_int64_t(Rcpp::XPtr<torch::Tensor> self, int64_t dim, int64_t index);
RcppExport SEXP _torch_cpp_torch_method_select_self_Tensor_dim_int64_t_index_int64_t(SEXP selfSEXP, SEXP dimSEXP, SEXP indexSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< int64_t >::type index(indexSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_select_self_Tensor_dim_int64_t_index_int64_t(self, dim, index));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_sigmoid_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_sigmoid_self_Tensor(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_method_sigmoid_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_sigmoid_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_sigmoid__self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_sigmoid__self_Tensor(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_method_sigmoid__self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_sigmoid__self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_sin_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_sin_self_Tensor(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_method_sin_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_sin_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_sin__self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_sin__self_Tensor(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_method_sin__self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_sin__self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_sinh_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_sinh_self_Tensor(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_method_sinh_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_sinh_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_sinh__self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_sinh__self_Tensor(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_method_sinh__self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_sinh__self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_detach_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_detach_self_Tensor(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_method_detach_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_detach_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_detach__self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_detach__self_Tensor(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_method_detach__self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_detach__self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_size_self_Tensor_dim_int64_t
int64_t cpp_torch_method_size_self_Tensor_dim_int64_t(Rcpp::XPtr<torch::Tensor> self, int64_t dim);
RcppExport SEXP _torch_cpp_torch_method_size_self_Tensor_dim_int64_t(SEXP selfSEXP, SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< int64_t >::type dim(dimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_size_self_Tensor_dim_int64_t(self, dim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_size_self_Tensor_dim_Dimname
int64_t cpp_torch_method_size_self_Tensor_dim_Dimname(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Dimname> dim);
RcppExport SEXP _torch_cpp_torch_method_size_self_Tensor_dim_Dimname(SEXP selfSEXP, SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Dimname> >::type dim(dimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_size_self_Tensor_dim_Dimname(self, dim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_slice_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_slice_self_Tensor(Rcpp::XPtr<torch::Tensor> self, int64_t dim, int64_t start, int64_t end, int64_t step);
RcppExport SEXP _torch_cpp_torch_method_slice_self_Tensor(SEXP selfSEXP, SEXP dimSEXP, SEXP startSEXP, SEXP endSEXP, SEXP stepSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< int64_t >::type start(startSEXP);
    Rcpp::traits::input_parameter< int64_t >::type end(endSEXP);
    Rcpp::traits::input_parameter< int64_t >::type step(stepSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_slice_self_Tensor(self, dim, start, end, step));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_slogdet_self_Tensor
Rcpp::List cpp_torch_method_slogdet_self_Tensor(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_method_slogdet_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_slogdet_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_smm_self_Tensor_mat2_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_smm_self_Tensor_mat2_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> mat2);
RcppExport SEXP _torch_cpp_torch_method_smm_self_Tensor_mat2_Tensor(SEXP selfSEXP, SEXP mat2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type mat2(mat2SEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_smm_self_Tensor_mat2_Tensor(self, mat2));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_softmax_self_Tensor_dim_int64_t
Rcpp::XPtr<torch::Tensor> cpp_torch_method_softmax_self_Tensor_dim_int64_t(Rcpp::XPtr<torch::Tensor> self, int64_t dim, Rcpp::XPtr<torch::Dtype> dtype);
RcppExport SEXP _torch_cpp_torch_method_softmax_self_Tensor_dim_int64_t(SEXP selfSEXP, SEXP dimSEXP, SEXP dtypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Dtype> >::type dtype(dtypeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_softmax_self_Tensor_dim_int64_t(self, dim, dtype));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_softmax_self_Tensor_dim_Dimname
Rcpp::XPtr<torch::Tensor> cpp_torch_method_softmax_self_Tensor_dim_Dimname(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Dimname> dim, Rcpp::XPtr<torch::Dtype> dtype);
RcppExport SEXP _torch_cpp_torch_method_softmax_self_Tensor_dim_Dimname(SEXP selfSEXP, SEXP dimSEXP, SEXP dtypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Dimname> >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Dtype> >::type dtype(dtypeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_softmax_self_Tensor_dim_Dimname(self, dim, dtype));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_split_self_Tensor_split_size_int64_t
Rcpp::XPtr<torch::TensorList> cpp_torch_method_split_self_Tensor_split_size_int64_t(Rcpp::XPtr<torch::Tensor> self, int64_t split_size, int64_t dim);
RcppExport SEXP _torch_cpp_torch_method_split_self_Tensor_split_size_int64_t(SEXP selfSEXP, SEXP split_sizeSEXP, SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< int64_t >::type split_size(split_sizeSEXP);
    Rcpp::traits::input_parameter< int64_t >::type dim(dimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_split_self_Tensor_split_size_int64_t(self, split_size, dim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_split_with_sizes_self_Tensor_split_sizes_IntArrayRef
Rcpp::XPtr<torch::TensorList> cpp_torch_method_split_with_sizes_self_Tensor_split_sizes_IntArrayRef(Rcpp::XPtr<torch::Tensor> self, std::vector<int64_t> split_sizes, int64_t dim);
RcppExport SEXP _torch_cpp_torch_method_split_with_sizes_self_Tensor_split_sizes_IntArrayRef(SEXP selfSEXP, SEXP split_sizesSEXP, SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type split_sizes(split_sizesSEXP);
    Rcpp::traits::input_parameter< int64_t >::type dim(dimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_split_with_sizes_self_Tensor_split_sizes_IntArrayRef(self, split_sizes, dim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_squeeze_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_squeeze_self_Tensor(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_method_squeeze_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_squeeze_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_squeeze_self_Tensor_dim_int64_t
Rcpp::XPtr<torch::Tensor> cpp_torch_method_squeeze_self_Tensor_dim_int64_t(Rcpp::XPtr<torch::Tensor> self, int64_t dim);
RcppExport SEXP _torch_cpp_torch_method_squeeze_self_Tensor_dim_int64_t(SEXP selfSEXP, SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< int64_t >::type dim(dimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_squeeze_self_Tensor_dim_int64_t(self, dim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_squeeze_self_Tensor_dim_Dimname
Rcpp::XPtr<torch::Tensor> cpp_torch_method_squeeze_self_Tensor_dim_Dimname(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Dimname> dim);
RcppExport SEXP _torch_cpp_torch_method_squeeze_self_Tensor_dim_Dimname(SEXP selfSEXP, SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Dimname> >::type dim(dimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_squeeze_self_Tensor_dim_Dimname(self, dim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_squeeze__self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_squeeze__self_Tensor(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_method_squeeze__self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_squeeze__self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_squeeze__self_Tensor_dim_int64_t
Rcpp::XPtr<torch::Tensor> cpp_torch_method_squeeze__self_Tensor_dim_int64_t(Rcpp::XPtr<torch::Tensor> self, int64_t dim);
RcppExport SEXP _torch_cpp_torch_method_squeeze__self_Tensor_dim_int64_t(SEXP selfSEXP, SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< int64_t >::type dim(dimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_squeeze__self_Tensor_dim_int64_t(self, dim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_squeeze__self_Tensor_dim_Dimname
Rcpp::XPtr<torch::Tensor> cpp_torch_method_squeeze__self_Tensor_dim_Dimname(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Dimname> dim);
RcppExport SEXP _torch_cpp_torch_method_squeeze__self_Tensor_dim_Dimname(SEXP selfSEXP, SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Dimname> >::type dim(dimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_squeeze__self_Tensor_dim_Dimname(self, dim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_sspaddmm_self_Tensor_mat1_Tensor_mat2_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_sspaddmm_self_Tensor_mat1_Tensor_mat2_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> mat1, Rcpp::XPtr<torch::Tensor> mat2, Rcpp::XPtr<torch::Scalar> beta, Rcpp::XPtr<torch::Scalar> alpha);
RcppExport SEXP _torch_cpp_torch_method_sspaddmm_self_Tensor_mat1_Tensor_mat2_Tensor(SEXP selfSEXP, SEXP mat1SEXP, SEXP mat2SEXP, SEXP betaSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type mat1(mat1SEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type mat2(mat2SEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_sspaddmm_self_Tensor_mat1_Tensor_mat2_Tensor(self, mat1, mat2, beta, alpha));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_stft_self_Tensor_n_fft_int64_t
Rcpp::XPtr<torch::Tensor> cpp_torch_method_stft_self_Tensor_n_fft_int64_t(Rcpp::XPtr<torch::Tensor> self, int64_t n_fft, int64_t hop_length, int64_t win_length, Rcpp::XPtr<torch::Tensor> window, bool normalized, bool onesided);
RcppExport SEXP _torch_cpp_torch_method_stft_self_Tensor_n_fft_int64_t(SEXP selfSEXP, SEXP n_fftSEXP, SEXP hop_lengthSEXP, SEXP win_lengthSEXP, SEXP windowSEXP, SEXP normalizedSEXP, SEXP onesidedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< int64_t >::type n_fft(n_fftSEXP);
    Rcpp::traits::input_parameter< int64_t >::type hop_length(hop_lengthSEXP);
    Rcpp::traits::input_parameter< int64_t >::type win_length(win_lengthSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type window(windowSEXP);
    Rcpp::traits::input_parameter< bool >::type normalized(normalizedSEXP);
    Rcpp::traits::input_parameter< bool >::type onesided(onesidedSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_stft_self_Tensor_n_fft_int64_t(self, n_fft, hop_length, win_length, window, normalized, onesided));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_stride_self_Tensor_dim_int64_t
int64_t cpp_torch_method_stride_self_Tensor_dim_int64_t(Rcpp::XPtr<torch::Tensor> self, int64_t dim);
RcppExport SEXP _torch_cpp_torch_method_stride_self_Tensor_dim_int64_t(SEXP selfSEXP, SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< int64_t >::type dim(dimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_stride_self_Tensor_dim_int64_t(self, dim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_stride_self_Tensor_dim_Dimname
int64_t cpp_torch_method_stride_self_Tensor_dim_Dimname(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Dimname> dim);
RcppExport SEXP _torch_cpp_torch_method_stride_self_Tensor_dim_Dimname(SEXP selfSEXP, SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Dimname> >::type dim(dimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_stride_self_Tensor_dim_Dimname(self, dim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_sum_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_sum_self_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Dtype> dtype);
RcppExport SEXP _torch_cpp_torch_method_sum_self_Tensor(SEXP selfSEXP, SEXP dtypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Dtype> >::type dtype(dtypeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_sum_self_Tensor(self, dtype));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_sum_self_Tensor_dim_IntArrayRef
Rcpp::XPtr<torch::Tensor> cpp_torch_method_sum_self_Tensor_dim_IntArrayRef(Rcpp::XPtr<torch::Tensor> self, std::vector<int64_t> dim, bool keepdim, Rcpp::XPtr<torch::Dtype> dtype);
RcppExport SEXP _torch_cpp_torch_method_sum_self_Tensor_dim_IntArrayRef(SEXP selfSEXP, SEXP dimSEXP, SEXP keepdimSEXP, SEXP dtypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< bool >::type keepdim(keepdimSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Dtype> >::type dtype(dtypeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_sum_self_Tensor_dim_IntArrayRef(self, dim, keepdim, dtype));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_sum_self_Tensor_dim_DimnameList
Rcpp::XPtr<torch::Tensor> cpp_torch_method_sum_self_Tensor_dim_DimnameList(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<std::vector<torch::Dimname>> dim, bool keepdim, Rcpp::XPtr<torch::Dtype> dtype);
RcppExport SEXP _torch_cpp_torch_method_sum_self_Tensor_dim_DimnameList(SEXP selfSEXP, SEXP dimSEXP, SEXP keepdimSEXP, SEXP dtypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::vector<torch::Dimname>> >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< bool >::type keepdim(keepdimSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Dtype> >::type dtype(dtypeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_sum_self_Tensor_dim_DimnameList(self, dim, keepdim, dtype));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_sum_to_size_self_Tensor_size_IntArrayRef
Rcpp::XPtr<torch::Tensor> cpp_torch_method_sum_to_size_self_Tensor_size_IntArrayRef(Rcpp::XPtr<torch::Tensor> self, std::vector<int64_t> size);
RcppExport SEXP _torch_cpp_torch_method_sum_to_size_self_Tensor_size_IntArrayRef(SEXP selfSEXP, SEXP sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type size(sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_sum_to_size_self_Tensor_size_IntArrayRef(self, size));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_sqrt_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_sqrt_self_Tensor(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_method_sqrt_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_sqrt_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_sqrt__self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_sqrt__self_Tensor(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_method_sqrt__self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_sqrt__self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_std_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_std_self_Tensor(Rcpp::XPtr<torch::Tensor> self, bool unbiased);
RcppExport SEXP _torch_cpp_torch_method_std_self_Tensor(SEXP selfSEXP, SEXP unbiasedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< bool >::type unbiased(unbiasedSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_std_self_Tensor(self, unbiased));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_std_self_Tensor_dim_IntArrayRef
Rcpp::XPtr<torch::Tensor> cpp_torch_method_std_self_Tensor_dim_IntArrayRef(Rcpp::XPtr<torch::Tensor> self, std::vector<int64_t> dim, bool unbiased, bool keepdim);
RcppExport SEXP _torch_cpp_torch_method_std_self_Tensor_dim_IntArrayRef(SEXP selfSEXP, SEXP dimSEXP, SEXP unbiasedSEXP, SEXP keepdimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< bool >::type unbiased(unbiasedSEXP);
    Rcpp::traits::input_parameter< bool >::type keepdim(keepdimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_std_self_Tensor_dim_IntArrayRef(self, dim, unbiased, keepdim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_std_self_Tensor_dim_DimnameList
Rcpp::XPtr<torch::Tensor> cpp_torch_method_std_self_Tensor_dim_DimnameList(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<std::vector<torch::Dimname>> dim, bool unbiased, bool keepdim);
RcppExport SEXP _torch_cpp_torch_method_std_self_Tensor_dim_DimnameList(SEXP selfSEXP, SEXP dimSEXP, SEXP unbiasedSEXP, SEXP keepdimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::vector<torch::Dimname>> >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< bool >::type unbiased(unbiasedSEXP);
    Rcpp::traits::input_parameter< bool >::type keepdim(keepdimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_std_self_Tensor_dim_DimnameList(self, dim, unbiased, keepdim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_prod_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_prod_self_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Dtype> dtype);
RcppExport SEXP _torch_cpp_torch_method_prod_self_Tensor(SEXP selfSEXP, SEXP dtypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Dtype> >::type dtype(dtypeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_prod_self_Tensor(self, dtype));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_prod_self_Tensor_dim_int64_t
Rcpp::XPtr<torch::Tensor> cpp_torch_method_prod_self_Tensor_dim_int64_t(Rcpp::XPtr<torch::Tensor> self, int64_t dim, bool keepdim, Rcpp::XPtr<torch::Dtype> dtype);
RcppExport SEXP _torch_cpp_torch_method_prod_self_Tensor_dim_int64_t(SEXP selfSEXP, SEXP dimSEXP, SEXP keepdimSEXP, SEXP dtypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< bool >::type keepdim(keepdimSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Dtype> >::type dtype(dtypeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_prod_self_Tensor_dim_int64_t(self, dim, keepdim, dtype));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_prod_self_Tensor_dim_Dimname
Rcpp::XPtr<torch::Tensor> cpp_torch_method_prod_self_Tensor_dim_Dimname(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Dimname> dim, bool keepdim, Rcpp::XPtr<torch::Dtype> dtype);
RcppExport SEXP _torch_cpp_torch_method_prod_self_Tensor_dim_Dimname(SEXP selfSEXP, SEXP dimSEXP, SEXP keepdimSEXP, SEXP dtypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Dimname> >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< bool >::type keepdim(keepdimSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Dtype> >::type dtype(dtypeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_prod_self_Tensor_dim_Dimname(self, dim, keepdim, dtype));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_t_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_t_self_Tensor(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_method_t_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_t_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_t__self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_t__self_Tensor(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_method_t__self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_t__self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_tan_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_tan_self_Tensor(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_method_tan_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_tan_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_tan__self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_tan__self_Tensor(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_method_tan__self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_tan__self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_tanh_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_tanh_self_Tensor(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_method_tanh_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_tanh_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_tanh__self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_tanh__self_Tensor(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_method_tanh__self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_tanh__self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_transpose_self_Tensor_dim0_int64_t_dim1_int64_t
Rcpp::XPtr<torch::Tensor> cpp_torch_method_transpose_self_Tensor_dim0_int64_t_dim1_int64_t(Rcpp::XPtr<torch::Tensor> self, int64_t dim0, int64_t dim1);
RcppExport SEXP _torch_cpp_torch_method_transpose_self_Tensor_dim0_int64_t_dim1_int64_t(SEXP selfSEXP, SEXP dim0SEXP, SEXP dim1SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< int64_t >::type dim0(dim0SEXP);
    Rcpp::traits::input_parameter< int64_t >::type dim1(dim1SEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_transpose_self_Tensor_dim0_int64_t_dim1_int64_t(self, dim0, dim1));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_transpose_self_Tensor_dim0_Dimname_dim1_Dimname
Rcpp::XPtr<torch::Tensor> cpp_torch_method_transpose_self_Tensor_dim0_Dimname_dim1_Dimname(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Dimname> dim0, Rcpp::XPtr<torch::Dimname> dim1);
RcppExport SEXP _torch_cpp_torch_method_transpose_self_Tensor_dim0_Dimname_dim1_Dimname(SEXP selfSEXP, SEXP dim0SEXP, SEXP dim1SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Dimname> >::type dim0(dim0SEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Dimname> >::type dim1(dim1SEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_transpose_self_Tensor_dim0_Dimname_dim1_Dimname(self, dim0, dim1));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_transpose__self_Tensor_dim0_int64_t_dim1_int64_t
Rcpp::XPtr<torch::Tensor> cpp_torch_method_transpose__self_Tensor_dim0_int64_t_dim1_int64_t(Rcpp::XPtr<torch::Tensor> self, int64_t dim0, int64_t dim1);
RcppExport SEXP _torch_cpp_torch_method_transpose__self_Tensor_dim0_int64_t_dim1_int64_t(SEXP selfSEXP, SEXP dim0SEXP, SEXP dim1SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< int64_t >::type dim0(dim0SEXP);
    Rcpp::traits::input_parameter< int64_t >::type dim1(dim1SEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_transpose__self_Tensor_dim0_int64_t_dim1_int64_t(self, dim0, dim1));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_flip_self_Tensor_dims_IntArrayRef
Rcpp::XPtr<torch::Tensor> cpp_torch_method_flip_self_Tensor_dims_IntArrayRef(Rcpp::XPtr<torch::Tensor> self, std::vector<int64_t> dims);
RcppExport SEXP _torch_cpp_torch_method_flip_self_Tensor_dims_IntArrayRef(SEXP selfSEXP, SEXP dimsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type dims(dimsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_flip_self_Tensor_dims_IntArrayRef(self, dims));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_roll_self_Tensor_shifts_IntArrayRef
Rcpp::XPtr<torch::Tensor> cpp_torch_method_roll_self_Tensor_shifts_IntArrayRef(Rcpp::XPtr<torch::Tensor> self, std::vector<int64_t> shifts, std::vector<int64_t> dims);
RcppExport SEXP _torch_cpp_torch_method_roll_self_Tensor_shifts_IntArrayRef(SEXP selfSEXP, SEXP shiftsSEXP, SEXP dimsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type shifts(shiftsSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type dims(dimsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_roll_self_Tensor_shifts_IntArrayRef(self, shifts, dims));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_rot90_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_rot90_self_Tensor(Rcpp::XPtr<torch::Tensor> self, int64_t k, std::vector<int64_t> dims);
RcppExport SEXP _torch_cpp_torch_method_rot90_self_Tensor(SEXP selfSEXP, SEXP kSEXP, SEXP dimsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< int64_t >::type k(kSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type dims(dimsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_rot90_self_Tensor(self, k, dims));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_trunc_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_trunc_self_Tensor(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_method_trunc_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_trunc_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_trunc__self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_trunc__self_Tensor(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_method_trunc__self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_trunc__self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_type_as_self_Tensor_other_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_type_as_self_Tensor_other_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> other);
RcppExport SEXP _torch_cpp_torch_method_type_as_self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_type_as_self_Tensor_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_unsqueeze_self_Tensor_dim_int64_t
Rcpp::XPtr<torch::Tensor> cpp_torch_method_unsqueeze_self_Tensor_dim_int64_t(Rcpp::XPtr<torch::Tensor> self, int64_t dim);
RcppExport SEXP _torch_cpp_torch_method_unsqueeze_self_Tensor_dim_int64_t(SEXP selfSEXP, SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< int64_t >::type dim(dimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_unsqueeze_self_Tensor_dim_int64_t(self, dim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_unsqueeze__self_Tensor_dim_int64_t
Rcpp::XPtr<torch::Tensor> cpp_torch_method_unsqueeze__self_Tensor_dim_int64_t(Rcpp::XPtr<torch::Tensor> self, int64_t dim);
RcppExport SEXP _torch_cpp_torch_method_unsqueeze__self_Tensor_dim_int64_t(SEXP selfSEXP, SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< int64_t >::type dim(dimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_unsqueeze__self_Tensor_dim_int64_t(self, dim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_var_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_var_self_Tensor(Rcpp::XPtr<torch::Tensor> self, bool unbiased);
RcppExport SEXP _torch_cpp_torch_method_var_self_Tensor(SEXP selfSEXP, SEXP unbiasedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< bool >::type unbiased(unbiasedSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_var_self_Tensor(self, unbiased));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_var_self_Tensor_dim_IntArrayRef
Rcpp::XPtr<torch::Tensor> cpp_torch_method_var_self_Tensor_dim_IntArrayRef(Rcpp::XPtr<torch::Tensor> self, std::vector<int64_t> dim, bool unbiased, bool keepdim);
RcppExport SEXP _torch_cpp_torch_method_var_self_Tensor_dim_IntArrayRef(SEXP selfSEXP, SEXP dimSEXP, SEXP unbiasedSEXP, SEXP keepdimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< bool >::type unbiased(unbiasedSEXP);
    Rcpp::traits::input_parameter< bool >::type keepdim(keepdimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_var_self_Tensor_dim_IntArrayRef(self, dim, unbiased, keepdim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_var_self_Tensor_dim_DimnameList
Rcpp::XPtr<torch::Tensor> cpp_torch_method_var_self_Tensor_dim_DimnameList(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<std::vector<torch::Dimname>> dim, bool unbiased, bool keepdim);
RcppExport SEXP _torch_cpp_torch_method_var_self_Tensor_dim_DimnameList(SEXP selfSEXP, SEXP dimSEXP, SEXP unbiasedSEXP, SEXP keepdimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::vector<torch::Dimname>> >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< bool >::type unbiased(unbiasedSEXP);
    Rcpp::traits::input_parameter< bool >::type keepdim(keepdimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_var_self_Tensor_dim_DimnameList(self, dim, unbiased, keepdim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_view_as_self_Tensor_other_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_view_as_self_Tensor_other_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> other);
RcppExport SEXP _torch_cpp_torch_method_view_as_self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_view_as_self_Tensor_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_where_condition_Tensor_self_Tensor_other_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_where_condition_Tensor_self_Tensor_other_Tensor(Rcpp::XPtr<torch::Tensor> condition, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> other);
RcppExport SEXP _torch_cpp_torch_method_where_condition_Tensor_self_Tensor_other_Tensor(SEXP conditionSEXP, SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type condition(conditionSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_where_condition_Tensor_self_Tensor_other_Tensor(condition, self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_norm_self_Tensor_p_Scalar_dtype_ScalarType
Rcpp::XPtr<torch::Tensor> cpp_torch_method_norm_self_Tensor_p_Scalar_dtype_ScalarType(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Scalar> p, Rcpp::XPtr<torch::Dtype> dtype);
RcppExport SEXP _torch_cpp_torch_method_norm_self_Tensor_p_Scalar_dtype_ScalarType(SEXP selfSEXP, SEXP pSEXP, SEXP dtypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type p(pSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Dtype> >::type dtype(dtypeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_norm_self_Tensor_p_Scalar_dtype_ScalarType(self, p, dtype));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_norm_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_norm_self_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Scalar> p);
RcppExport SEXP _torch_cpp_torch_method_norm_self_Tensor(SEXP selfSEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_norm_self_Tensor(self, p));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_norm_self_Tensor_p_Scalar_dim_IntArrayRef_keepdim_bool_dtype_ScalarType
Rcpp::XPtr<torch::Tensor> cpp_torch_method_norm_self_Tensor_p_Scalar_dim_IntArrayRef_keepdim_bool_dtype_ScalarType(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Scalar> p, std::vector<int64_t> dim, bool keepdim, Rcpp::XPtr<torch::Dtype> dtype);
RcppExport SEXP _torch_cpp_torch_method_norm_self_Tensor_p_Scalar_dim_IntArrayRef_keepdim_bool_dtype_ScalarType(SEXP selfSEXP, SEXP pSEXP, SEXP dimSEXP, SEXP keepdimSEXP, SEXP dtypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type p(pSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< bool >::type keepdim(keepdimSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Dtype> >::type dtype(dtypeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_norm_self_Tensor_p_Scalar_dim_IntArrayRef_keepdim_bool_dtype_ScalarType(self, p, dim, keepdim, dtype));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_norm_self_Tensor_p_Scalar_dim_IntArrayRef
Rcpp::XPtr<torch::Tensor> cpp_torch_method_norm_self_Tensor_p_Scalar_dim_IntArrayRef(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Scalar> p, std::vector<int64_t> dim, bool keepdim);
RcppExport SEXP _torch_cpp_torch_method_norm_self_Tensor_p_Scalar_dim_IntArrayRef(SEXP selfSEXP, SEXP pSEXP, SEXP dimSEXP, SEXP keepdimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type p(pSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< bool >::type keepdim(keepdimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_norm_self_Tensor_p_Scalar_dim_IntArrayRef(self, p, dim, keepdim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_norm_self_Tensor_p_Scalar_dim_DimnameList_keepdim_bool_dtype_ScalarType
Rcpp::XPtr<torch::Tensor> cpp_torch_method_norm_self_Tensor_p_Scalar_dim_DimnameList_keepdim_bool_dtype_ScalarType(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Scalar> p, Rcpp::XPtr<std::vector<torch::Dimname>> dim, bool keepdim, Rcpp::XPtr<torch::Dtype> dtype);
RcppExport SEXP _torch_cpp_torch_method_norm_self_Tensor_p_Scalar_dim_DimnameList_keepdim_bool_dtype_ScalarType(SEXP selfSEXP, SEXP pSEXP, SEXP dimSEXP, SEXP keepdimSEXP, SEXP dtypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type p(pSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::vector<torch::Dimname>> >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< bool >::type keepdim(keepdimSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Dtype> >::type dtype(dtypeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_norm_self_Tensor_p_Scalar_dim_DimnameList_keepdim_bool_dtype_ScalarType(self, p, dim, keepdim, dtype));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_norm_self_Tensor_p_Scalar_dim_DimnameList
Rcpp::XPtr<torch::Tensor> cpp_torch_method_norm_self_Tensor_p_Scalar_dim_DimnameList(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Scalar> p, Rcpp::XPtr<std::vector<torch::Dimname>> dim, bool keepdim);
RcppExport SEXP _torch_cpp_torch_method_norm_self_Tensor_p_Scalar_dim_DimnameList(SEXP selfSEXP, SEXP pSEXP, SEXP dimSEXP, SEXP keepdimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type p(pSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::vector<torch::Dimname>> >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< bool >::type keepdim(keepdimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_norm_self_Tensor_p_Scalar_dim_DimnameList(self, p, dim, keepdim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_clone_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_clone_self_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<c10::optional<torch::MemoryFormat>> memory_format);
RcppExport SEXP _torch_cpp_torch_method_clone_self_Tensor(SEXP selfSEXP, SEXP memory_formatSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<c10::optional<torch::MemoryFormat>> >::type memory_format(memory_formatSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_clone_self_Tensor(self, memory_format));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_resize_as__self_Tensor_the_template_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_resize_as__self_Tensor_the_template_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> the_template, Rcpp::XPtr<c10::optional<torch::MemoryFormat>> memory_format);
RcppExport SEXP _torch_cpp_torch_method_resize_as__self_Tensor_the_template_Tensor(SEXP selfSEXP, SEXP the_templateSEXP, SEXP memory_formatSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type the_template(the_templateSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<c10::optional<torch::MemoryFormat>> >::type memory_format(memory_formatSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_resize_as__self_Tensor_the_template_Tensor(self, the_template, memory_format));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_pow_self_Tensor_exponent_Scalar
Rcpp::XPtr<torch::Tensor> cpp_torch_method_pow_self_Tensor_exponent_Scalar(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Scalar> exponent);
RcppExport SEXP _torch_cpp_torch_method_pow_self_Tensor_exponent_Scalar(SEXP selfSEXP, SEXP exponentSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type exponent(exponentSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_pow_self_Tensor_exponent_Scalar(self, exponent));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_zero__self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_zero__self_Tensor(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_method_zero__self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_zero__self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_sub_self_Tensor_other_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_sub_self_Tensor_other_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> other, Rcpp::XPtr<torch::Scalar> alpha);
RcppExport SEXP _torch_cpp_torch_method_sub_self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type other(otherSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_sub_self_Tensor_other_Tensor(self, other, alpha));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_sub__self_Tensor_other_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_sub__self_Tensor_other_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> other, Rcpp::XPtr<torch::Scalar> alpha);
RcppExport SEXP _torch_cpp_torch_method_sub__self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type other(otherSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_sub__self_Tensor_other_Tensor(self, other, alpha));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_sub_self_Tensor_other_Scalar
Rcpp::XPtr<torch::Tensor> cpp_torch_method_sub_self_Tensor_other_Scalar(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Scalar> other, Rcpp::XPtr<torch::Scalar> alpha);
RcppExport SEXP _torch_cpp_torch_method_sub_self_Tensor_other_Scalar(SEXP selfSEXP, SEXP otherSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type other(otherSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_sub_self_Tensor_other_Scalar(self, other, alpha));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_sub__self_Tensor_other_Scalar
Rcpp::XPtr<torch::Tensor> cpp_torch_method_sub__self_Tensor_other_Scalar(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Scalar> other, Rcpp::XPtr<torch::Scalar> alpha);
RcppExport SEXP _torch_cpp_torch_method_sub__self_Tensor_other_Scalar(SEXP selfSEXP, SEXP otherSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type other(otherSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_sub__self_Tensor_other_Scalar(self, other, alpha));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_addmm_self_Tensor_mat1_Tensor_mat2_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_addmm_self_Tensor_mat1_Tensor_mat2_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> mat1, Rcpp::XPtr<torch::Tensor> mat2, Rcpp::XPtr<torch::Scalar> beta, Rcpp::XPtr<torch::Scalar> alpha);
RcppExport SEXP _torch_cpp_torch_method_addmm_self_Tensor_mat1_Tensor_mat2_Tensor(SEXP selfSEXP, SEXP mat1SEXP, SEXP mat2SEXP, SEXP betaSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type mat1(mat1SEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type mat2(mat2SEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_addmm_self_Tensor_mat1_Tensor_mat2_Tensor(self, mat1, mat2, beta, alpha));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_addmm__self_Tensor_mat1_Tensor_mat2_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_addmm__self_Tensor_mat1_Tensor_mat2_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> mat1, Rcpp::XPtr<torch::Tensor> mat2, Rcpp::XPtr<torch::Scalar> beta, Rcpp::XPtr<torch::Scalar> alpha);
RcppExport SEXP _torch_cpp_torch_method_addmm__self_Tensor_mat1_Tensor_mat2_Tensor(SEXP selfSEXP, SEXP mat1SEXP, SEXP mat2SEXP, SEXP betaSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type mat1(mat1SEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type mat2(mat2SEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_addmm__self_Tensor_mat1_Tensor_mat2_Tensor(self, mat1, mat2, beta, alpha));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_sparse_resize__self_Tensor_size_IntArrayRef_sparse_dim_int64_t_dense_dim_int64_t
Rcpp::XPtr<torch::Tensor> cpp_torch_method_sparse_resize__self_Tensor_size_IntArrayRef_sparse_dim_int64_t_dense_dim_int64_t(Rcpp::XPtr<torch::Tensor> self, std::vector<int64_t> size, int64_t sparse_dim, int64_t dense_dim);
RcppExport SEXP _torch_cpp_torch_method_sparse_resize__self_Tensor_size_IntArrayRef_sparse_dim_int64_t_dense_dim_int64_t(SEXP selfSEXP, SEXP sizeSEXP, SEXP sparse_dimSEXP, SEXP dense_dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< int64_t >::type sparse_dim(sparse_dimSEXP);
    Rcpp::traits::input_parameter< int64_t >::type dense_dim(dense_dimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_sparse_resize__self_Tensor_size_IntArrayRef_sparse_dim_int64_t_dense_dim_int64_t(self, size, sparse_dim, dense_dim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_sparse_resize_and_clear__self_Tensor_size_IntArrayRef_sparse_dim_int64_t_dense_dim_int64_t
Rcpp::XPtr<torch::Tensor> cpp_torch_method_sparse_resize_and_clear__self_Tensor_size_IntArrayRef_sparse_dim_int64_t_dense_dim_int64_t(Rcpp::XPtr<torch::Tensor> self, std::vector<int64_t> size, int64_t sparse_dim, int64_t dense_dim);
RcppExport SEXP _torch_cpp_torch_method_sparse_resize_and_clear__self_Tensor_size_IntArrayRef_sparse_dim_int64_t_dense_dim_int64_t(SEXP selfSEXP, SEXP sizeSEXP, SEXP sparse_dimSEXP, SEXP dense_dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< int64_t >::type sparse_dim(sparse_dimSEXP);
    Rcpp::traits::input_parameter< int64_t >::type dense_dim(dense_dimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_sparse_resize_and_clear__self_Tensor_size_IntArrayRef_sparse_dim_int64_t_dense_dim_int64_t(self, size, sparse_dim, dense_dim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_sparse_mask_self_Tensor_mask_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_sparse_mask_self_Tensor_mask_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> mask);
RcppExport SEXP _torch_cpp_torch_method_sparse_mask_self_Tensor_mask_Tensor(SEXP selfSEXP, SEXP maskSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type mask(maskSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_sparse_mask_self_Tensor_mask_Tensor(self, mask));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_to_dense_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_to_dense_self_Tensor(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_method_to_dense_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_to_dense_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_sparse_dim_self_Tensor
int64_t cpp_torch_method_sparse_dim_self_Tensor(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_method_sparse_dim_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_sparse_dim_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method__dimI_self_Tensor
int64_t cpp_torch_method__dimI_self_Tensor(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_method__dimI_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method__dimI_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_dense_dim_self_Tensor
int64_t cpp_torch_method_dense_dim_self_Tensor(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_method_dense_dim_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_dense_dim_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method__dimV_self_Tensor
int64_t cpp_torch_method__dimV_self_Tensor(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_method__dimV_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method__dimV_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method__nnz_self_Tensor
int64_t cpp_torch_method__nnz_self_Tensor(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_method__nnz_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method__nnz_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_coalesce_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_coalesce_self_Tensor(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_method_coalesce_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_coalesce_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_is_coalesced_self_Tensor
bool cpp_torch_method_is_coalesced_self_Tensor(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_method_is_coalesced_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_is_coalesced_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method__indices_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method__indices_self_Tensor(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_method__indices_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method__indices_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method__values_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method__values_self_Tensor(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_method__values_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method__values_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method__coalesced__self_Tensor_coalesced_bool
Rcpp::XPtr<torch::Tensor> cpp_torch_method__coalesced__self_Tensor_coalesced_bool(Rcpp::XPtr<torch::Tensor> self, bool coalesced);
RcppExport SEXP _torch_cpp_torch_method__coalesced__self_Tensor_coalesced_bool(SEXP selfSEXP, SEXP coalescedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< bool >::type coalesced(coalescedSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method__coalesced__self_Tensor_coalesced_bool(self, coalesced));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_indices_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_indices_self_Tensor(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_method_indices_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_indices_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_values_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_values_self_Tensor(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_method_values_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_values_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_unbind_self_Tensor
Rcpp::XPtr<torch::TensorList> cpp_torch_method_unbind_self_Tensor(Rcpp::XPtr<torch::Tensor> self, int64_t dim);
RcppExport SEXP _torch_cpp_torch_method_unbind_self_Tensor(SEXP selfSEXP, SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< int64_t >::type dim(dimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_unbind_self_Tensor(self, dim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_unbind_self_Tensor_dim_Dimname
Rcpp::XPtr<torch::TensorList> cpp_torch_method_unbind_self_Tensor_dim_Dimname(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Dimname> dim);
RcppExport SEXP _torch_cpp_torch_method_unbind_self_Tensor_dim_Dimname(SEXP selfSEXP, SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Dimname> >::type dim(dimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_unbind_self_Tensor_dim_Dimname(self, dim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_to_sparse_self_Tensor_sparse_dim_int64_t
Rcpp::XPtr<torch::Tensor> cpp_torch_method_to_sparse_self_Tensor_sparse_dim_int64_t(Rcpp::XPtr<torch::Tensor> self, int64_t sparse_dim);
RcppExport SEXP _torch_cpp_torch_method_to_sparse_self_Tensor_sparse_dim_int64_t(SEXP selfSEXP, SEXP sparse_dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< int64_t >::type sparse_dim(sparse_dimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_to_sparse_self_Tensor_sparse_dim_int64_t(self, sparse_dim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_to_sparse_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_to_sparse_self_Tensor(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_method_to_sparse_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_to_sparse_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_to_mkldnn_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_to_mkldnn_self_Tensor(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_method_to_mkldnn_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_to_mkldnn_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_dequantize_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_dequantize_self_Tensor(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_method_dequantize_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_dequantize_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_q_scale_self_Tensor
double cpp_torch_method_q_scale_self_Tensor(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_method_q_scale_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_q_scale_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_q_zero_point_self_Tensor
int64_t cpp_torch_method_q_zero_point_self_Tensor(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_method_q_zero_point_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_q_zero_point_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_q_per_channel_scales_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_q_per_channel_scales_self_Tensor(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_method_q_per_channel_scales_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_q_per_channel_scales_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_q_per_channel_zero_points_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_q_per_channel_zero_points_self_Tensor(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_method_q_per_channel_zero_points_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_q_per_channel_zero_points_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_q_per_channel_axis_self_Tensor
int64_t cpp_torch_method_q_per_channel_axis_self_Tensor(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_method_q_per_channel_axis_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_q_per_channel_axis_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_int_repr_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_int_repr_self_Tensor(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_method_int_repr_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_int_repr_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_qscheme_self_Tensor
Rcpp::XPtr<torch::QScheme> cpp_torch_method_qscheme_self_Tensor(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_method_qscheme_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_qscheme_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_to_self_Tensor_options_TensorOptions
Rcpp::XPtr<torch::Tensor> cpp_torch_method_to_self_Tensor_options_TensorOptions(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::TensorOptions> options, bool non_blocking, bool copy, Rcpp::XPtr<c10::optional<torch::MemoryFormat>> memory_format);
RcppExport SEXP _torch_cpp_torch_method_to_self_Tensor_options_TensorOptions(SEXP selfSEXP, SEXP optionsSEXP, SEXP non_blockingSEXP, SEXP copySEXP, SEXP memory_formatSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::TensorOptions> >::type options(optionsSEXP);
    Rcpp::traits::input_parameter< bool >::type non_blocking(non_blockingSEXP);
    Rcpp::traits::input_parameter< bool >::type copy(copySEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<c10::optional<torch::MemoryFormat>> >::type memory_format(memory_formatSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_to_self_Tensor_options_TensorOptions(self, options, non_blocking, copy, memory_format));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_to_self_Tensor_device_Device_dtype_ScalarType
Rcpp::XPtr<torch::Tensor> cpp_torch_method_to_self_Tensor_device_Device_dtype_ScalarType(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Device> device, Rcpp::XPtr<torch::Dtype> dtype, bool non_blocking, bool copy, Rcpp::XPtr<c10::optional<torch::MemoryFormat>> memory_format);
RcppExport SEXP _torch_cpp_torch_method_to_self_Tensor_device_Device_dtype_ScalarType(SEXP selfSEXP, SEXP deviceSEXP, SEXP dtypeSEXP, SEXP non_blockingSEXP, SEXP copySEXP, SEXP memory_formatSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Device> >::type device(deviceSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Dtype> >::type dtype(dtypeSEXP);
    Rcpp::traits::input_parameter< bool >::type non_blocking(non_blockingSEXP);
    Rcpp::traits::input_parameter< bool >::type copy(copySEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<c10::optional<torch::MemoryFormat>> >::type memory_format(memory_formatSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_to_self_Tensor_device_Device_dtype_ScalarType(self, device, dtype, non_blocking, copy, memory_format));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_to_self_Tensor_dtype_ScalarType
Rcpp::XPtr<torch::Tensor> cpp_torch_method_to_self_Tensor_dtype_ScalarType(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Dtype> dtype, bool non_blocking, bool copy, Rcpp::XPtr<c10::optional<torch::MemoryFormat>> memory_format);
RcppExport SEXP _torch_cpp_torch_method_to_self_Tensor_dtype_ScalarType(SEXP selfSEXP, SEXP dtypeSEXP, SEXP non_blockingSEXP, SEXP copySEXP, SEXP memory_formatSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Dtype> >::type dtype(dtypeSEXP);
    Rcpp::traits::input_parameter< bool >::type non_blocking(non_blockingSEXP);
    Rcpp::traits::input_parameter< bool >::type copy(copySEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<c10::optional<torch::MemoryFormat>> >::type memory_format(memory_formatSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_to_self_Tensor_dtype_ScalarType(self, dtype, non_blocking, copy, memory_format));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_to_self_Tensor_other_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_to_self_Tensor_other_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> other, bool non_blocking, bool copy, Rcpp::XPtr<c10::optional<torch::MemoryFormat>> memory_format);
RcppExport SEXP _torch_cpp_torch_method_to_self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP, SEXP non_blockingSEXP, SEXP copySEXP, SEXP memory_formatSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type other(otherSEXP);
    Rcpp::traits::input_parameter< bool >::type non_blocking(non_blockingSEXP);
    Rcpp::traits::input_parameter< bool >::type copy(copySEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<c10::optional<torch::MemoryFormat>> >::type memory_format(memory_formatSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_to_self_Tensor_other_Tensor(self, other, non_blocking, copy, memory_format));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_item_self_Tensor
Rcpp::XPtr<torch::Scalar> cpp_torch_method_item_self_Tensor(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_method_item_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_item_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_set__self_Tensor_source_Storage
Rcpp::XPtr<torch::Tensor> cpp_torch_method_set__self_Tensor_source_Storage(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Storage> source);
RcppExport SEXP _torch_cpp_torch_method_set__self_Tensor_source_Storage(SEXP selfSEXP, SEXP sourceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Storage> >::type source(sourceSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_set__self_Tensor_source_Storage(self, source));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_set__self_Tensor_source_Storage_storage_offset_int64_t_size_IntArrayRef
Rcpp::XPtr<torch::Tensor> cpp_torch_method_set__self_Tensor_source_Storage_storage_offset_int64_t_size_IntArrayRef(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Storage> source, int64_t storage_offset, std::vector<int64_t> size, std::vector<int64_t> stride);
RcppExport SEXP _torch_cpp_torch_method_set__self_Tensor_source_Storage_storage_offset_int64_t_size_IntArrayRef(SEXP selfSEXP, SEXP sourceSEXP, SEXP storage_offsetSEXP, SEXP sizeSEXP, SEXP strideSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Storage> >::type source(sourceSEXP);
    Rcpp::traits::input_parameter< int64_t >::type storage_offset(storage_offsetSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type stride(strideSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_set__self_Tensor_source_Storage_storage_offset_int64_t_size_IntArrayRef(self, source, storage_offset, size, stride));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_set__self_Tensor_source_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_set__self_Tensor_source_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> source);
RcppExport SEXP _torch_cpp_torch_method_set__self_Tensor_source_Tensor(SEXP selfSEXP, SEXP sourceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type source(sourceSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_set__self_Tensor_source_Tensor(self, source));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_set__self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_set__self_Tensor(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_method_set__self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_set__self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_is_set_to_self_Tensor_tensor_Tensor
bool cpp_torch_method_is_set_to_self_Tensor_tensor_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> tensor);
RcppExport SEXP _torch_cpp_torch_method_is_set_to_self_Tensor_tensor_Tensor(SEXP selfSEXP, SEXP tensorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type tensor(tensorSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_is_set_to_self_Tensor_tensor_Tensor(self, tensor));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_masked_fill__self_Tensor_mask_Tensor_value_Scalar
Rcpp::XPtr<torch::Tensor> cpp_torch_method_masked_fill__self_Tensor_mask_Tensor_value_Scalar(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> mask, Rcpp::XPtr<torch::Scalar> value);
RcppExport SEXP _torch_cpp_torch_method_masked_fill__self_Tensor_mask_Tensor_value_Scalar(SEXP selfSEXP, SEXP maskSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type mask(maskSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_masked_fill__self_Tensor_mask_Tensor_value_Scalar(self, mask, value));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_masked_fill_self_Tensor_mask_Tensor_value_Scalar
Rcpp::XPtr<torch::Tensor> cpp_torch_method_masked_fill_self_Tensor_mask_Tensor_value_Scalar(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> mask, Rcpp::XPtr<torch::Scalar> value);
RcppExport SEXP _torch_cpp_torch_method_masked_fill_self_Tensor_mask_Tensor_value_Scalar(SEXP selfSEXP, SEXP maskSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type mask(maskSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_masked_fill_self_Tensor_mask_Tensor_value_Scalar(self, mask, value));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_masked_fill__self_Tensor_mask_Tensor_value_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_masked_fill__self_Tensor_mask_Tensor_value_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> mask, Rcpp::XPtr<torch::Tensor> value);
RcppExport SEXP _torch_cpp_torch_method_masked_fill__self_Tensor_mask_Tensor_value_Tensor(SEXP selfSEXP, SEXP maskSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type mask(maskSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_masked_fill__self_Tensor_mask_Tensor_value_Tensor(self, mask, value));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_masked_fill_self_Tensor_mask_Tensor_value_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_masked_fill_self_Tensor_mask_Tensor_value_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> mask, Rcpp::XPtr<torch::Tensor> value);
RcppExport SEXP _torch_cpp_torch_method_masked_fill_self_Tensor_mask_Tensor_value_Tensor(SEXP selfSEXP, SEXP maskSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type mask(maskSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_masked_fill_self_Tensor_mask_Tensor_value_Tensor(self, mask, value));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_masked_scatter__self_Tensor_mask_Tensor_source_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_masked_scatter__self_Tensor_mask_Tensor_source_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> mask, Rcpp::XPtr<torch::Tensor> source);
RcppExport SEXP _torch_cpp_torch_method_masked_scatter__self_Tensor_mask_Tensor_source_Tensor(SEXP selfSEXP, SEXP maskSEXP, SEXP sourceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type mask(maskSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type source(sourceSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_masked_scatter__self_Tensor_mask_Tensor_source_Tensor(self, mask, source));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_masked_scatter_self_Tensor_mask_Tensor_source_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_masked_scatter_self_Tensor_mask_Tensor_source_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> mask, Rcpp::XPtr<torch::Tensor> source);
RcppExport SEXP _torch_cpp_torch_method_masked_scatter_self_Tensor_mask_Tensor_source_Tensor(SEXP selfSEXP, SEXP maskSEXP, SEXP sourceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type mask(maskSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type source(sourceSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_masked_scatter_self_Tensor_mask_Tensor_source_Tensor(self, mask, source));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_view_self_Tensor_size_IntArrayRef
Rcpp::XPtr<torch::Tensor> cpp_torch_method_view_self_Tensor_size_IntArrayRef(Rcpp::XPtr<torch::Tensor> self, std::vector<int64_t> size);
RcppExport SEXP _torch_cpp_torch_method_view_self_Tensor_size_IntArrayRef(SEXP selfSEXP, SEXP sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type size(sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_view_self_Tensor_size_IntArrayRef(self, size));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_put__self_Tensor_index_Tensor_source_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_put__self_Tensor_index_Tensor_source_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> index, Rcpp::XPtr<torch::Tensor> source, bool accumulate);
RcppExport SEXP _torch_cpp_torch_method_put__self_Tensor_index_Tensor_source_Tensor(SEXP selfSEXP, SEXP indexSEXP, SEXP sourceSEXP, SEXP accumulateSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type index(indexSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type source(sourceSEXP);
    Rcpp::traits::input_parameter< bool >::type accumulate(accumulateSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_put__self_Tensor_index_Tensor_source_Tensor(self, index, source, accumulate));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_index_add__self_Tensor_dim_int64_t_index_Tensor_source_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_index_add__self_Tensor_dim_int64_t_index_Tensor_source_Tensor(Rcpp::XPtr<torch::Tensor> self, int64_t dim, Rcpp::XPtr<torch::Tensor> index, Rcpp::XPtr<torch::Tensor> source);
RcppExport SEXP _torch_cpp_torch_method_index_add__self_Tensor_dim_int64_t_index_Tensor_source_Tensor(SEXP selfSEXP, SEXP dimSEXP, SEXP indexSEXP, SEXP sourceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type index(indexSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type source(sourceSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_index_add__self_Tensor_dim_int64_t_index_Tensor_source_Tensor(self, dim, index, source));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_index_add_self_Tensor_dim_int64_t_index_Tensor_source_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_index_add_self_Tensor_dim_int64_t_index_Tensor_source_Tensor(Rcpp::XPtr<torch::Tensor> self, int64_t dim, Rcpp::XPtr<torch::Tensor> index, Rcpp::XPtr<torch::Tensor> source);
RcppExport SEXP _torch_cpp_torch_method_index_add_self_Tensor_dim_int64_t_index_Tensor_source_Tensor(SEXP selfSEXP, SEXP dimSEXP, SEXP indexSEXP, SEXP sourceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type index(indexSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type source(sourceSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_index_add_self_Tensor_dim_int64_t_index_Tensor_source_Tensor(self, dim, index, source));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_index_add_self_Tensor_dim_Dimname_index_Tensor_source_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_index_add_self_Tensor_dim_Dimname_index_Tensor_source_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Dimname> dim, Rcpp::XPtr<torch::Tensor> index, Rcpp::XPtr<torch::Tensor> source);
RcppExport SEXP _torch_cpp_torch_method_index_add_self_Tensor_dim_Dimname_index_Tensor_source_Tensor(SEXP selfSEXP, SEXP dimSEXP, SEXP indexSEXP, SEXP sourceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Dimname> >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type index(indexSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type source(sourceSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_index_add_self_Tensor_dim_Dimname_index_Tensor_source_Tensor(self, dim, index, source));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_index_fill__self_Tensor_dim_int64_t_index_Tensor_value_Scalar
Rcpp::XPtr<torch::Tensor> cpp_torch_method_index_fill__self_Tensor_dim_int64_t_index_Tensor_value_Scalar(Rcpp::XPtr<torch::Tensor> self, int64_t dim, Rcpp::XPtr<torch::Tensor> index, Rcpp::XPtr<torch::Scalar> value);
RcppExport SEXP _torch_cpp_torch_method_index_fill__self_Tensor_dim_int64_t_index_Tensor_value_Scalar(SEXP selfSEXP, SEXP dimSEXP, SEXP indexSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type index(indexSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_index_fill__self_Tensor_dim_int64_t_index_Tensor_value_Scalar(self, dim, index, value));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_index_fill_self_Tensor_dim_int64_t_index_Tensor_value_Scalar
Rcpp::XPtr<torch::Tensor> cpp_torch_method_index_fill_self_Tensor_dim_int64_t_index_Tensor_value_Scalar(Rcpp::XPtr<torch::Tensor> self, int64_t dim, Rcpp::XPtr<torch::Tensor> index, Rcpp::XPtr<torch::Scalar> value);
RcppExport SEXP _torch_cpp_torch_method_index_fill_self_Tensor_dim_int64_t_index_Tensor_value_Scalar(SEXP selfSEXP, SEXP dimSEXP, SEXP indexSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type index(indexSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_index_fill_self_Tensor_dim_int64_t_index_Tensor_value_Scalar(self, dim, index, value));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_index_fill__self_Tensor_dim_int64_t_index_Tensor_value_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_index_fill__self_Tensor_dim_int64_t_index_Tensor_value_Tensor(Rcpp::XPtr<torch::Tensor> self, int64_t dim, Rcpp::XPtr<torch::Tensor> index, Rcpp::XPtr<torch::Tensor> value);
RcppExport SEXP _torch_cpp_torch_method_index_fill__self_Tensor_dim_int64_t_index_Tensor_value_Tensor(SEXP selfSEXP, SEXP dimSEXP, SEXP indexSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type index(indexSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_index_fill__self_Tensor_dim_int64_t_index_Tensor_value_Tensor(self, dim, index, value));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_index_fill_self_Tensor_dim_int64_t_index_Tensor_value_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_index_fill_self_Tensor_dim_int64_t_index_Tensor_value_Tensor(Rcpp::XPtr<torch::Tensor> self, int64_t dim, Rcpp::XPtr<torch::Tensor> index, Rcpp::XPtr<torch::Tensor> value);
RcppExport SEXP _torch_cpp_torch_method_index_fill_self_Tensor_dim_int64_t_index_Tensor_value_Tensor(SEXP selfSEXP, SEXP dimSEXP, SEXP indexSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type index(indexSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_index_fill_self_Tensor_dim_int64_t_index_Tensor_value_Tensor(self, dim, index, value));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_index_fill__self_Tensor_dim_Dimname_index_Tensor_value_Scalar
Rcpp::XPtr<torch::Tensor> cpp_torch_method_index_fill__self_Tensor_dim_Dimname_index_Tensor_value_Scalar(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Dimname> dim, Rcpp::XPtr<torch::Tensor> index, Rcpp::XPtr<torch::Scalar> value);
RcppExport SEXP _torch_cpp_torch_method_index_fill__self_Tensor_dim_Dimname_index_Tensor_value_Scalar(SEXP selfSEXP, SEXP dimSEXP, SEXP indexSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Dimname> >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type index(indexSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_index_fill__self_Tensor_dim_Dimname_index_Tensor_value_Scalar(self, dim, index, value));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_index_fill__self_Tensor_dim_Dimname_index_Tensor_value_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_index_fill__self_Tensor_dim_Dimname_index_Tensor_value_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Dimname> dim, Rcpp::XPtr<torch::Tensor> index, Rcpp::XPtr<torch::Tensor> value);
RcppExport SEXP _torch_cpp_torch_method_index_fill__self_Tensor_dim_Dimname_index_Tensor_value_Tensor(SEXP selfSEXP, SEXP dimSEXP, SEXP indexSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Dimname> >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type index(indexSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_index_fill__self_Tensor_dim_Dimname_index_Tensor_value_Tensor(self, dim, index, value));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_index_fill_self_Tensor_dim_Dimname_index_Tensor_value_Scalar
Rcpp::XPtr<torch::Tensor> cpp_torch_method_index_fill_self_Tensor_dim_Dimname_index_Tensor_value_Scalar(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Dimname> dim, Rcpp::XPtr<torch::Tensor> index, Rcpp::XPtr<torch::Scalar> value);
RcppExport SEXP _torch_cpp_torch_method_index_fill_self_Tensor_dim_Dimname_index_Tensor_value_Scalar(SEXP selfSEXP, SEXP dimSEXP, SEXP indexSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Dimname> >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type index(indexSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_index_fill_self_Tensor_dim_Dimname_index_Tensor_value_Scalar(self, dim, index, value));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_index_fill_self_Tensor_dim_Dimname_index_Tensor_value_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_index_fill_self_Tensor_dim_Dimname_index_Tensor_value_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Dimname> dim, Rcpp::XPtr<torch::Tensor> index, Rcpp::XPtr<torch::Tensor> value);
RcppExport SEXP _torch_cpp_torch_method_index_fill_self_Tensor_dim_Dimname_index_Tensor_value_Tensor(SEXP selfSEXP, SEXP dimSEXP, SEXP indexSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Dimname> >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type index(indexSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_index_fill_self_Tensor_dim_Dimname_index_Tensor_value_Tensor(self, dim, index, value));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_scatter__self_Tensor_dim_int64_t_index_Tensor_src_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_scatter__self_Tensor_dim_int64_t_index_Tensor_src_Tensor(Rcpp::XPtr<torch::Tensor> self, int64_t dim, Rcpp::XPtr<torch::Tensor> index, Rcpp::XPtr<torch::Tensor> src);
RcppExport SEXP _torch_cpp_torch_method_scatter__self_Tensor_dim_int64_t_index_Tensor_src_Tensor(SEXP selfSEXP, SEXP dimSEXP, SEXP indexSEXP, SEXP srcSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type index(indexSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type src(srcSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_scatter__self_Tensor_dim_int64_t_index_Tensor_src_Tensor(self, dim, index, src));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_scatter_self_Tensor_dim_int64_t_index_Tensor_src_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_scatter_self_Tensor_dim_int64_t_index_Tensor_src_Tensor(Rcpp::XPtr<torch::Tensor> self, int64_t dim, Rcpp::XPtr<torch::Tensor> index, Rcpp::XPtr<torch::Tensor> src);
RcppExport SEXP _torch_cpp_torch_method_scatter_self_Tensor_dim_int64_t_index_Tensor_src_Tensor(SEXP selfSEXP, SEXP dimSEXP, SEXP indexSEXP, SEXP srcSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type index(indexSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type src(srcSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_scatter_self_Tensor_dim_int64_t_index_Tensor_src_Tensor(self, dim, index, src));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_scatter__self_Tensor_dim_int64_t_index_Tensor_value_Scalar
Rcpp::XPtr<torch::Tensor> cpp_torch_method_scatter__self_Tensor_dim_int64_t_index_Tensor_value_Scalar(Rcpp::XPtr<torch::Tensor> self, int64_t dim, Rcpp::XPtr<torch::Tensor> index, Rcpp::XPtr<torch::Scalar> value);
RcppExport SEXP _torch_cpp_torch_method_scatter__self_Tensor_dim_int64_t_index_Tensor_value_Scalar(SEXP selfSEXP, SEXP dimSEXP, SEXP indexSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type index(indexSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_scatter__self_Tensor_dim_int64_t_index_Tensor_value_Scalar(self, dim, index, value));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_scatter_self_Tensor_dim_int64_t_index_Tensor_value_Scalar
Rcpp::XPtr<torch::Tensor> cpp_torch_method_scatter_self_Tensor_dim_int64_t_index_Tensor_value_Scalar(Rcpp::XPtr<torch::Tensor> self, int64_t dim, Rcpp::XPtr<torch::Tensor> index, Rcpp::XPtr<torch::Scalar> value);
RcppExport SEXP _torch_cpp_torch_method_scatter_self_Tensor_dim_int64_t_index_Tensor_value_Scalar(SEXP selfSEXP, SEXP dimSEXP, SEXP indexSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type index(indexSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_scatter_self_Tensor_dim_int64_t_index_Tensor_value_Scalar(self, dim, index, value));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_scatter_self_Tensor_dim_Dimname_index_Tensor_src_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_scatter_self_Tensor_dim_Dimname_index_Tensor_src_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Dimname> dim, Rcpp::XPtr<torch::Tensor> index, Rcpp::XPtr<torch::Tensor> src);
RcppExport SEXP _torch_cpp_torch_method_scatter_self_Tensor_dim_Dimname_index_Tensor_src_Tensor(SEXP selfSEXP, SEXP dimSEXP, SEXP indexSEXP, SEXP srcSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Dimname> >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type index(indexSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type src(srcSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_scatter_self_Tensor_dim_Dimname_index_Tensor_src_Tensor(self, dim, index, src));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_scatter_self_Tensor_dim_Dimname_index_Tensor_value_Scalar
Rcpp::XPtr<torch::Tensor> cpp_torch_method_scatter_self_Tensor_dim_Dimname_index_Tensor_value_Scalar(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Dimname> dim, Rcpp::XPtr<torch::Tensor> index, Rcpp::XPtr<torch::Scalar> value);
RcppExport SEXP _torch_cpp_torch_method_scatter_self_Tensor_dim_Dimname_index_Tensor_value_Scalar(SEXP selfSEXP, SEXP dimSEXP, SEXP indexSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Dimname> >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type index(indexSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_scatter_self_Tensor_dim_Dimname_index_Tensor_value_Scalar(self, dim, index, value));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_scatter_add__self_Tensor_dim_int64_t_index_Tensor_src_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_scatter_add__self_Tensor_dim_int64_t_index_Tensor_src_Tensor(Rcpp::XPtr<torch::Tensor> self, int64_t dim, Rcpp::XPtr<torch::Tensor> index, Rcpp::XPtr<torch::Tensor> src);
RcppExport SEXP _torch_cpp_torch_method_scatter_add__self_Tensor_dim_int64_t_index_Tensor_src_Tensor(SEXP selfSEXP, SEXP dimSEXP, SEXP indexSEXP, SEXP srcSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type index(indexSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type src(srcSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_scatter_add__self_Tensor_dim_int64_t_index_Tensor_src_Tensor(self, dim, index, src));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_scatter_add_self_Tensor_dim_int64_t_index_Tensor_src_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_scatter_add_self_Tensor_dim_int64_t_index_Tensor_src_Tensor(Rcpp::XPtr<torch::Tensor> self, int64_t dim, Rcpp::XPtr<torch::Tensor> index, Rcpp::XPtr<torch::Tensor> src);
RcppExport SEXP _torch_cpp_torch_method_scatter_add_self_Tensor_dim_int64_t_index_Tensor_src_Tensor(SEXP selfSEXP, SEXP dimSEXP, SEXP indexSEXP, SEXP srcSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type index(indexSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type src(srcSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_scatter_add_self_Tensor_dim_int64_t_index_Tensor_src_Tensor(self, dim, index, src));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_scatter_add_self_Tensor_dim_Dimname_index_Tensor_src_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_scatter_add_self_Tensor_dim_Dimname_index_Tensor_src_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Dimname> dim, Rcpp::XPtr<torch::Tensor> index, Rcpp::XPtr<torch::Tensor> src);
RcppExport SEXP _torch_cpp_torch_method_scatter_add_self_Tensor_dim_Dimname_index_Tensor_src_Tensor(SEXP selfSEXP, SEXP dimSEXP, SEXP indexSEXP, SEXP srcSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Dimname> >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type index(indexSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type src(srcSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_scatter_add_self_Tensor_dim_Dimname_index_Tensor_src_Tensor(self, dim, index, src));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_lt__self_Tensor_other_Scalar
Rcpp::XPtr<torch::Tensor> cpp_torch_method_lt__self_Tensor_other_Scalar(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Scalar> other);
RcppExport SEXP _torch_cpp_torch_method_lt__self_Tensor_other_Scalar(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_lt__self_Tensor_other_Scalar(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_lt__self_Tensor_other_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_lt__self_Tensor_other_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> other);
RcppExport SEXP _torch_cpp_torch_method_lt__self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_lt__self_Tensor_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_gt__self_Tensor_other_Scalar
Rcpp::XPtr<torch::Tensor> cpp_torch_method_gt__self_Tensor_other_Scalar(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Scalar> other);
RcppExport SEXP _torch_cpp_torch_method_gt__self_Tensor_other_Scalar(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_gt__self_Tensor_other_Scalar(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_gt__self_Tensor_other_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_gt__self_Tensor_other_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> other);
RcppExport SEXP _torch_cpp_torch_method_gt__self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_gt__self_Tensor_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_le__self_Tensor_other_Scalar
Rcpp::XPtr<torch::Tensor> cpp_torch_method_le__self_Tensor_other_Scalar(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Scalar> other);
RcppExport SEXP _torch_cpp_torch_method_le__self_Tensor_other_Scalar(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_le__self_Tensor_other_Scalar(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_le__self_Tensor_other_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_le__self_Tensor_other_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> other);
RcppExport SEXP _torch_cpp_torch_method_le__self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_le__self_Tensor_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_ge__self_Tensor_other_Scalar
Rcpp::XPtr<torch::Tensor> cpp_torch_method_ge__self_Tensor_other_Scalar(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Scalar> other);
RcppExport SEXP _torch_cpp_torch_method_ge__self_Tensor_other_Scalar(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_ge__self_Tensor_other_Scalar(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_ge__self_Tensor_other_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_ge__self_Tensor_other_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> other);
RcppExport SEXP _torch_cpp_torch_method_ge__self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_ge__self_Tensor_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_eq__self_Tensor_other_Scalar
Rcpp::XPtr<torch::Tensor> cpp_torch_method_eq__self_Tensor_other_Scalar(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Scalar> other);
RcppExport SEXP _torch_cpp_torch_method_eq__self_Tensor_other_Scalar(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_eq__self_Tensor_other_Scalar(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_eq__self_Tensor_other_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_eq__self_Tensor_other_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> other);
RcppExport SEXP _torch_cpp_torch_method_eq__self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_eq__self_Tensor_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_ne__self_Tensor_other_Scalar
Rcpp::XPtr<torch::Tensor> cpp_torch_method_ne__self_Tensor_other_Scalar(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Scalar> other);
RcppExport SEXP _torch_cpp_torch_method_ne__self_Tensor_other_Scalar(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_ne__self_Tensor_other_Scalar(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_ne__self_Tensor_other_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_ne__self_Tensor_other_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> other);
RcppExport SEXP _torch_cpp_torch_method_ne__self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_ne__self_Tensor_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method___and___self_Tensor_other_Scalar
Rcpp::XPtr<torch::Tensor> cpp_torch_method___and___self_Tensor_other_Scalar(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Scalar> other);
RcppExport SEXP _torch_cpp_torch_method___and___self_Tensor_other_Scalar(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method___and___self_Tensor_other_Scalar(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method___and___self_Tensor_other_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method___and___self_Tensor_other_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> other);
RcppExport SEXP _torch_cpp_torch_method___and___self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method___and___self_Tensor_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method___iand___self_Tensor_other_Scalar
Rcpp::XPtr<torch::Tensor> cpp_torch_method___iand___self_Tensor_other_Scalar(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Scalar> other);
RcppExport SEXP _torch_cpp_torch_method___iand___self_Tensor_other_Scalar(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method___iand___self_Tensor_other_Scalar(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method___iand___self_Tensor_other_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method___iand___self_Tensor_other_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> other);
RcppExport SEXP _torch_cpp_torch_method___iand___self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method___iand___self_Tensor_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method___or___self_Tensor_other_Scalar
Rcpp::XPtr<torch::Tensor> cpp_torch_method___or___self_Tensor_other_Scalar(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Scalar> other);
RcppExport SEXP _torch_cpp_torch_method___or___self_Tensor_other_Scalar(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method___or___self_Tensor_other_Scalar(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method___or___self_Tensor_other_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method___or___self_Tensor_other_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> other);
RcppExport SEXP _torch_cpp_torch_method___or___self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method___or___self_Tensor_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method___ior___self_Tensor_other_Scalar
Rcpp::XPtr<torch::Tensor> cpp_torch_method___ior___self_Tensor_other_Scalar(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Scalar> other);
RcppExport SEXP _torch_cpp_torch_method___ior___self_Tensor_other_Scalar(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method___ior___self_Tensor_other_Scalar(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method___ior___self_Tensor_other_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method___ior___self_Tensor_other_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> other);
RcppExport SEXP _torch_cpp_torch_method___ior___self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method___ior___self_Tensor_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_bitwise_xor_self_Tensor_other_Scalar
Rcpp::XPtr<torch::Tensor> cpp_torch_method_bitwise_xor_self_Tensor_other_Scalar(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Scalar> other);
RcppExport SEXP _torch_cpp_torch_method_bitwise_xor_self_Tensor_other_Scalar(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_bitwise_xor_self_Tensor_other_Scalar(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_bitwise_xor_self_Tensor_other_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_bitwise_xor_self_Tensor_other_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> other);
RcppExport SEXP _torch_cpp_torch_method_bitwise_xor_self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_bitwise_xor_self_Tensor_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_bitwise_xor__self_Tensor_other_Scalar
Rcpp::XPtr<torch::Tensor> cpp_torch_method_bitwise_xor__self_Tensor_other_Scalar(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Scalar> other);
RcppExport SEXP _torch_cpp_torch_method_bitwise_xor__self_Tensor_other_Scalar(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_bitwise_xor__self_Tensor_other_Scalar(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_bitwise_xor__self_Tensor_other_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_bitwise_xor__self_Tensor_other_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> other);
RcppExport SEXP _torch_cpp_torch_method_bitwise_xor__self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_bitwise_xor__self_Tensor_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method___xor___self_Tensor_other_Scalar
Rcpp::XPtr<torch::Tensor> cpp_torch_method___xor___self_Tensor_other_Scalar(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Scalar> other);
RcppExport SEXP _torch_cpp_torch_method___xor___self_Tensor_other_Scalar(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method___xor___self_Tensor_other_Scalar(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method___xor___self_Tensor_other_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method___xor___self_Tensor_other_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> other);
RcppExport SEXP _torch_cpp_torch_method___xor___self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method___xor___self_Tensor_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method___ixor___self_Tensor_other_Scalar
Rcpp::XPtr<torch::Tensor> cpp_torch_method___ixor___self_Tensor_other_Scalar(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Scalar> other);
RcppExport SEXP _torch_cpp_torch_method___ixor___self_Tensor_other_Scalar(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method___ixor___self_Tensor_other_Scalar(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method___ixor___self_Tensor_other_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method___ixor___self_Tensor_other_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> other);
RcppExport SEXP _torch_cpp_torch_method___ixor___self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method___ixor___self_Tensor_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method___lshift___self_Tensor_other_Scalar
Rcpp::XPtr<torch::Tensor> cpp_torch_method___lshift___self_Tensor_other_Scalar(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Scalar> other);
RcppExport SEXP _torch_cpp_torch_method___lshift___self_Tensor_other_Scalar(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method___lshift___self_Tensor_other_Scalar(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method___lshift___self_Tensor_other_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method___lshift___self_Tensor_other_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> other);
RcppExport SEXP _torch_cpp_torch_method___lshift___self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method___lshift___self_Tensor_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method___ilshift___self_Tensor_other_Scalar
Rcpp::XPtr<torch::Tensor> cpp_torch_method___ilshift___self_Tensor_other_Scalar(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Scalar> other);
RcppExport SEXP _torch_cpp_torch_method___ilshift___self_Tensor_other_Scalar(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method___ilshift___self_Tensor_other_Scalar(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method___ilshift___self_Tensor_other_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method___ilshift___self_Tensor_other_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> other);
RcppExport SEXP _torch_cpp_torch_method___ilshift___self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method___ilshift___self_Tensor_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method___rshift___self_Tensor_other_Scalar
Rcpp::XPtr<torch::Tensor> cpp_torch_method___rshift___self_Tensor_other_Scalar(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Scalar> other);
RcppExport SEXP _torch_cpp_torch_method___rshift___self_Tensor_other_Scalar(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method___rshift___self_Tensor_other_Scalar(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method___rshift___self_Tensor_other_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method___rshift___self_Tensor_other_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> other);
RcppExport SEXP _torch_cpp_torch_method___rshift___self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method___rshift___self_Tensor_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method___irshift___self_Tensor_other_Scalar
Rcpp::XPtr<torch::Tensor> cpp_torch_method___irshift___self_Tensor_other_Scalar(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Scalar> other);
RcppExport SEXP _torch_cpp_torch_method___irshift___self_Tensor_other_Scalar(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method___irshift___self_Tensor_other_Scalar(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method___irshift___self_Tensor_other_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method___irshift___self_Tensor_other_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> other);
RcppExport SEXP _torch_cpp_torch_method___irshift___self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method___irshift___self_Tensor_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_lgamma__self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_lgamma__self_Tensor(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_method_lgamma__self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_lgamma__self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_atan2__self_Tensor_other_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_atan2__self_Tensor_other_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> other);
RcppExport SEXP _torch_cpp_torch_method_atan2__self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_atan2__self_Tensor_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_tril__self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_tril__self_Tensor(Rcpp::XPtr<torch::Tensor> self, int64_t diagonal);
RcppExport SEXP _torch_cpp_torch_method_tril__self_Tensor(SEXP selfSEXP, SEXP diagonalSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< int64_t >::type diagonal(diagonalSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_tril__self_Tensor(self, diagonal));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_triu__self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_triu__self_Tensor(Rcpp::XPtr<torch::Tensor> self, int64_t diagonal);
RcppExport SEXP _torch_cpp_torch_method_triu__self_Tensor(SEXP selfSEXP, SEXP diagonalSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< int64_t >::type diagonal(diagonalSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_triu__self_Tensor(self, diagonal));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_digamma__self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_digamma__self_Tensor(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_method_digamma__self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_digamma__self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_polygamma__self_Tensor_n_int64_t
Rcpp::XPtr<torch::Tensor> cpp_torch_method_polygamma__self_Tensor_n_int64_t(Rcpp::XPtr<torch::Tensor> self, int64_t n);
RcppExport SEXP _torch_cpp_torch_method_polygamma__self_Tensor_n_int64_t(SEXP selfSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< int64_t >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_polygamma__self_Tensor_n_int64_t(self, n));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_renorm__self_Tensor_p_Scalar_dim_int64_t_maxnorm_Scalar
Rcpp::XPtr<torch::Tensor> cpp_torch_method_renorm__self_Tensor_p_Scalar_dim_int64_t_maxnorm_Scalar(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Scalar> p, int64_t dim, Rcpp::XPtr<torch::Scalar> maxnorm);
RcppExport SEXP _torch_cpp_torch_method_renorm__self_Tensor_p_Scalar_dim_int64_t_maxnorm_Scalar(SEXP selfSEXP, SEXP pSEXP, SEXP dimSEXP, SEXP maxnormSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type p(pSEXP);
    Rcpp::traits::input_parameter< int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type maxnorm(maxnormSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_renorm__self_Tensor_p_Scalar_dim_int64_t_maxnorm_Scalar(self, p, dim, maxnorm));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_pow__self_Tensor_exponent_Scalar
Rcpp::XPtr<torch::Tensor> cpp_torch_method_pow__self_Tensor_exponent_Scalar(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Scalar> exponent);
RcppExport SEXP _torch_cpp_torch_method_pow__self_Tensor_exponent_Scalar(SEXP selfSEXP, SEXP exponentSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type exponent(exponentSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_pow__self_Tensor_exponent_Scalar(self, exponent));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_pow__self_Tensor_exponent_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_pow__self_Tensor_exponent_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> exponent);
RcppExport SEXP _torch_cpp_torch_method_pow__self_Tensor_exponent_Tensor(SEXP selfSEXP, SEXP exponentSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type exponent(exponentSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_pow__self_Tensor_exponent_Tensor(self, exponent));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_lerp__self_Tensor_end_Tensor_weight_Scalar
Rcpp::XPtr<torch::Tensor> cpp_torch_method_lerp__self_Tensor_end_Tensor_weight_Scalar(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> end, Rcpp::XPtr<torch::Scalar> weight);
RcppExport SEXP _torch_cpp_torch_method_lerp__self_Tensor_end_Tensor_weight_Scalar(SEXP selfSEXP, SEXP endSEXP, SEXP weightSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type end(endSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type weight(weightSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_lerp__self_Tensor_end_Tensor_weight_Scalar(self, end, weight));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_lerp__self_Tensor_end_Tensor_weight_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_lerp__self_Tensor_end_Tensor_weight_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> end, Rcpp::XPtr<torch::Tensor> weight);
RcppExport SEXP _torch_cpp_torch_method_lerp__self_Tensor_end_Tensor_weight_Tensor(SEXP selfSEXP, SEXP endSEXP, SEXP weightSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type end(endSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type weight(weightSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_lerp__self_Tensor_end_Tensor_weight_Tensor(self, end, weight));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_fmod__self_Tensor_other_Scalar
Rcpp::XPtr<torch::Tensor> cpp_torch_method_fmod__self_Tensor_other_Scalar(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Scalar> other);
RcppExport SEXP _torch_cpp_torch_method_fmod__self_Tensor_other_Scalar(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_fmod__self_Tensor_other_Scalar(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_fmod__self_Tensor_other_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_fmod__self_Tensor_other_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> other);
RcppExport SEXP _torch_cpp_torch_method_fmod__self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_fmod__self_Tensor_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_remainder__self_Tensor_other_Scalar
Rcpp::XPtr<torch::Tensor> cpp_torch_method_remainder__self_Tensor_other_Scalar(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Scalar> other);
RcppExport SEXP _torch_cpp_torch_method_remainder__self_Tensor_other_Scalar(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_remainder__self_Tensor_other_Scalar(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_remainder__self_Tensor_other_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_remainder__self_Tensor_other_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> other);
RcppExport SEXP _torch_cpp_torch_method_remainder__self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_remainder__self_Tensor_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_addbmm__self_Tensor_batch1_Tensor_batch2_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_addbmm__self_Tensor_batch1_Tensor_batch2_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> batch1, Rcpp::XPtr<torch::Tensor> batch2, Rcpp::XPtr<torch::Scalar> beta, Rcpp::XPtr<torch::Scalar> alpha);
RcppExport SEXP _torch_cpp_torch_method_addbmm__self_Tensor_batch1_Tensor_batch2_Tensor(SEXP selfSEXP, SEXP batch1SEXP, SEXP batch2SEXP, SEXP betaSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type batch1(batch1SEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type batch2(batch2SEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_addbmm__self_Tensor_batch1_Tensor_batch2_Tensor(self, batch1, batch2, beta, alpha));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_addbmm_self_Tensor_batch1_Tensor_batch2_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_addbmm_self_Tensor_batch1_Tensor_batch2_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> batch1, Rcpp::XPtr<torch::Tensor> batch2, Rcpp::XPtr<torch::Scalar> beta, Rcpp::XPtr<torch::Scalar> alpha);
RcppExport SEXP _torch_cpp_torch_method_addbmm_self_Tensor_batch1_Tensor_batch2_Tensor(SEXP selfSEXP, SEXP batch1SEXP, SEXP batch2SEXP, SEXP betaSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type batch1(batch1SEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type batch2(batch2SEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_addbmm_self_Tensor_batch1_Tensor_batch2_Tensor(self, batch1, batch2, beta, alpha));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_addcdiv__self_Tensor_tensor1_Tensor_tensor2_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_addcdiv__self_Tensor_tensor1_Tensor_tensor2_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> tensor1, Rcpp::XPtr<torch::Tensor> tensor2, Rcpp::XPtr<torch::Scalar> value);
RcppExport SEXP _torch_cpp_torch_method_addcdiv__self_Tensor_tensor1_Tensor_tensor2_Tensor(SEXP selfSEXP, SEXP tensor1SEXP, SEXP tensor2SEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type tensor1(tensor1SEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type tensor2(tensor2SEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_addcdiv__self_Tensor_tensor1_Tensor_tensor2_Tensor(self, tensor1, tensor2, value));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_random__self_Tensor_from_int64_t_to_int64_t
Rcpp::XPtr<torch::Tensor> cpp_torch_method_random__self_Tensor_from_int64_t_to_int64_t(Rcpp::XPtr<torch::Tensor> self, int64_t from, int64_t to, Rcpp::XPtr<torch::Generator *> generator);
RcppExport SEXP _torch_cpp_torch_method_random__self_Tensor_from_int64_t_to_int64_t(SEXP selfSEXP, SEXP fromSEXP, SEXP toSEXP, SEXP generatorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< int64_t >::type from(fromSEXP);
    Rcpp::traits::input_parameter< int64_t >::type to(toSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Generator *> >::type generator(generatorSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_random__self_Tensor_from_int64_t_to_int64_t(self, from, to, generator));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_random__self_Tensor_to_int64_t
Rcpp::XPtr<torch::Tensor> cpp_torch_method_random__self_Tensor_to_int64_t(Rcpp::XPtr<torch::Tensor> self, int64_t to, Rcpp::XPtr<torch::Generator *> generator);
RcppExport SEXP _torch_cpp_torch_method_random__self_Tensor_to_int64_t(SEXP selfSEXP, SEXP toSEXP, SEXP generatorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< int64_t >::type to(toSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Generator *> >::type generator(generatorSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_random__self_Tensor_to_int64_t(self, to, generator));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_random__self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_random__self_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Generator *> generator);
RcppExport SEXP _torch_cpp_torch_method_random__self_Tensor(SEXP selfSEXP, SEXP generatorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Generator *> >::type generator(generatorSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_random__self_Tensor(self, generator));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_uniform__self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_uniform__self_Tensor(Rcpp::XPtr<torch::Tensor> self, double from, double to, Rcpp::XPtr<torch::Generator *> generator);
RcppExport SEXP _torch_cpp_torch_method_uniform__self_Tensor(SEXP selfSEXP, SEXP fromSEXP, SEXP toSEXP, SEXP generatorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< double >::type from(fromSEXP);
    Rcpp::traits::input_parameter< double >::type to(toSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Generator *> >::type generator(generatorSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_uniform__self_Tensor(self, from, to, generator));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_normal__self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_normal__self_Tensor(Rcpp::XPtr<torch::Tensor> self, double mean, double std, Rcpp::XPtr<torch::Generator *> generator);
RcppExport SEXP _torch_cpp_torch_method_normal__self_Tensor(SEXP selfSEXP, SEXP meanSEXP, SEXP stdSEXP, SEXP generatorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< double >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< double >::type std(stdSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Generator *> >::type generator(generatorSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_normal__self_Tensor(self, mean, std, generator));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_cauchy__self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_cauchy__self_Tensor(Rcpp::XPtr<torch::Tensor> self, double median, double sigma, Rcpp::XPtr<torch::Generator *> generator);
RcppExport SEXP _torch_cpp_torch_method_cauchy__self_Tensor(SEXP selfSEXP, SEXP medianSEXP, SEXP sigmaSEXP, SEXP generatorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< double >::type median(medianSEXP);
    Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Generator *> >::type generator(generatorSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_cauchy__self_Tensor(self, median, sigma, generator));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_log_normal__self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_log_normal__self_Tensor(Rcpp::XPtr<torch::Tensor> self, double mean, double std, Rcpp::XPtr<torch::Generator *> generator);
RcppExport SEXP _torch_cpp_torch_method_log_normal__self_Tensor(SEXP selfSEXP, SEXP meanSEXP, SEXP stdSEXP, SEXP generatorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< double >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< double >::type std(stdSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Generator *> >::type generator(generatorSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_log_normal__self_Tensor(self, mean, std, generator));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_exponential__self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_exponential__self_Tensor(Rcpp::XPtr<torch::Tensor> self, double lambd, Rcpp::XPtr<torch::Generator *> generator);
RcppExport SEXP _torch_cpp_torch_method_exponential__self_Tensor(SEXP selfSEXP, SEXP lambdSEXP, SEXP generatorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< double >::type lambd(lambdSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Generator *> >::type generator(generatorSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_exponential__self_Tensor(self, lambd, generator));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_geometric__self_Tensor_p_double
Rcpp::XPtr<torch::Tensor> cpp_torch_method_geometric__self_Tensor_p_double(Rcpp::XPtr<torch::Tensor> self, double p, Rcpp::XPtr<torch::Generator *> generator);
RcppExport SEXP _torch_cpp_torch_method_geometric__self_Tensor_p_double(SEXP selfSEXP, SEXP pSEXP, SEXP generatorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< double >::type p(pSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Generator *> >::type generator(generatorSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_geometric__self_Tensor_p_double(self, p, generator));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_diag_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_diag_self_Tensor(Rcpp::XPtr<torch::Tensor> self, int64_t diagonal);
RcppExport SEXP _torch_cpp_torch_method_diag_self_Tensor(SEXP selfSEXP, SEXP diagonalSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< int64_t >::type diagonal(diagonalSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_diag_self_Tensor(self, diagonal));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_cross_self_Tensor_other_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_cross_self_Tensor_other_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> other, int64_t dim);
RcppExport SEXP _torch_cpp_torch_method_cross_self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP, SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type other(otherSEXP);
    Rcpp::traits::input_parameter< int64_t >::type dim(dimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_cross_self_Tensor_other_Tensor(self, other, dim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_triu_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_triu_self_Tensor(Rcpp::XPtr<torch::Tensor> self, int64_t diagonal);
RcppExport SEXP _torch_cpp_torch_method_triu_self_Tensor(SEXP selfSEXP, SEXP diagonalSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< int64_t >::type diagonal(diagonalSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_triu_self_Tensor(self, diagonal));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_tril_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_tril_self_Tensor(Rcpp::XPtr<torch::Tensor> self, int64_t diagonal);
RcppExport SEXP _torch_cpp_torch_method_tril_self_Tensor(SEXP selfSEXP, SEXP diagonalSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< int64_t >::type diagonal(diagonalSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_tril_self_Tensor(self, diagonal));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_trace_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_trace_self_Tensor(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_method_trace_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_trace_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_ne_self_Tensor_other_Scalar
Rcpp::XPtr<torch::Tensor> cpp_torch_method_ne_self_Tensor_other_Scalar(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Scalar> other);
RcppExport SEXP _torch_cpp_torch_method_ne_self_Tensor_other_Scalar(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_ne_self_Tensor_other_Scalar(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_ne_self_Tensor_other_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_ne_self_Tensor_other_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> other);
RcppExport SEXP _torch_cpp_torch_method_ne_self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_ne_self_Tensor_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_eq_self_Tensor_other_Scalar
Rcpp::XPtr<torch::Tensor> cpp_torch_method_eq_self_Tensor_other_Scalar(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Scalar> other);
RcppExport SEXP _torch_cpp_torch_method_eq_self_Tensor_other_Scalar(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_eq_self_Tensor_other_Scalar(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_eq_self_Tensor_other_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_eq_self_Tensor_other_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> other);
RcppExport SEXP _torch_cpp_torch_method_eq_self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_eq_self_Tensor_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_ge_self_Tensor_other_Scalar
Rcpp::XPtr<torch::Tensor> cpp_torch_method_ge_self_Tensor_other_Scalar(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Scalar> other);
RcppExport SEXP _torch_cpp_torch_method_ge_self_Tensor_other_Scalar(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_ge_self_Tensor_other_Scalar(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_ge_self_Tensor_other_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_ge_self_Tensor_other_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> other);
RcppExport SEXP _torch_cpp_torch_method_ge_self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_ge_self_Tensor_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_le_self_Tensor_other_Scalar
Rcpp::XPtr<torch::Tensor> cpp_torch_method_le_self_Tensor_other_Scalar(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Scalar> other);
RcppExport SEXP _torch_cpp_torch_method_le_self_Tensor_other_Scalar(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_le_self_Tensor_other_Scalar(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_le_self_Tensor_other_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_le_self_Tensor_other_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> other);
RcppExport SEXP _torch_cpp_torch_method_le_self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_le_self_Tensor_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_gt_self_Tensor_other_Scalar
Rcpp::XPtr<torch::Tensor> cpp_torch_method_gt_self_Tensor_other_Scalar(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Scalar> other);
RcppExport SEXP _torch_cpp_torch_method_gt_self_Tensor_other_Scalar(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_gt_self_Tensor_other_Scalar(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_gt_self_Tensor_other_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_gt_self_Tensor_other_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> other);
RcppExport SEXP _torch_cpp_torch_method_gt_self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_gt_self_Tensor_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_lt_self_Tensor_other_Scalar
Rcpp::XPtr<torch::Tensor> cpp_torch_method_lt_self_Tensor_other_Scalar(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Scalar> other);
RcppExport SEXP _torch_cpp_torch_method_lt_self_Tensor_other_Scalar(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_lt_self_Tensor_other_Scalar(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_lt_self_Tensor_other_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_lt_self_Tensor_other_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> other);
RcppExport SEXP _torch_cpp_torch_method_lt_self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_lt_self_Tensor_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_take_self_Tensor_index_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_take_self_Tensor_index_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> index);
RcppExport SEXP _torch_cpp_torch_method_take_self_Tensor_index_Tensor(SEXP selfSEXP, SEXP indexSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type index(indexSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_take_self_Tensor_index_Tensor(self, index));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_index_select_self_Tensor_dim_int64_t_index_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_index_select_self_Tensor_dim_int64_t_index_Tensor(Rcpp::XPtr<torch::Tensor> self, int64_t dim, Rcpp::XPtr<torch::Tensor> index);
RcppExport SEXP _torch_cpp_torch_method_index_select_self_Tensor_dim_int64_t_index_Tensor(SEXP selfSEXP, SEXP dimSEXP, SEXP indexSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type index(indexSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_index_select_self_Tensor_dim_int64_t_index_Tensor(self, dim, index));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_index_select_self_Tensor_dim_Dimname_index_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_index_select_self_Tensor_dim_Dimname_index_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Dimname> dim, Rcpp::XPtr<torch::Tensor> index);
RcppExport SEXP _torch_cpp_torch_method_index_select_self_Tensor_dim_Dimname_index_Tensor(SEXP selfSEXP, SEXP dimSEXP, SEXP indexSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Dimname> >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type index(indexSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_index_select_self_Tensor_dim_Dimname_index_Tensor(self, dim, index));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_masked_select_self_Tensor_mask_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_masked_select_self_Tensor_mask_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> mask);
RcppExport SEXP _torch_cpp_torch_method_masked_select_self_Tensor_mask_Tensor(SEXP selfSEXP, SEXP maskSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type mask(maskSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_masked_select_self_Tensor_mask_Tensor(self, mask));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_nonzero_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_nonzero_self_Tensor(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_method_nonzero_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_nonzero_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_nonzero_numpy_self_Tensor
Rcpp::XPtr<torch::TensorList> cpp_torch_method_nonzero_numpy_self_Tensor(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_method_nonzero_numpy_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_nonzero_numpy_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_gather_self_Tensor_dim_int64_t_index_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_gather_self_Tensor_dim_int64_t_index_Tensor(Rcpp::XPtr<torch::Tensor> self, int64_t dim, Rcpp::XPtr<torch::Tensor> index, bool sparse_grad);
RcppExport SEXP _torch_cpp_torch_method_gather_self_Tensor_dim_int64_t_index_Tensor(SEXP selfSEXP, SEXP dimSEXP, SEXP indexSEXP, SEXP sparse_gradSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type index(indexSEXP);
    Rcpp::traits::input_parameter< bool >::type sparse_grad(sparse_gradSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_gather_self_Tensor_dim_int64_t_index_Tensor(self, dim, index, sparse_grad));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_gather_self_Tensor_dim_Dimname_index_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_gather_self_Tensor_dim_Dimname_index_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Dimname> dim, Rcpp::XPtr<torch::Tensor> index, bool sparse_grad);
RcppExport SEXP _torch_cpp_torch_method_gather_self_Tensor_dim_Dimname_index_Tensor(SEXP selfSEXP, SEXP dimSEXP, SEXP indexSEXP, SEXP sparse_gradSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Dimname> >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type index(indexSEXP);
    Rcpp::traits::input_parameter< bool >::type sparse_grad(sparse_gradSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_gather_self_Tensor_dim_Dimname_index_Tensor(self, dim, index, sparse_grad));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_addcmul_self_Tensor_tensor1_Tensor_tensor2_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_addcmul_self_Tensor_tensor1_Tensor_tensor2_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> tensor1, Rcpp::XPtr<torch::Tensor> tensor2, Rcpp::XPtr<torch::Scalar> value);
RcppExport SEXP _torch_cpp_torch_method_addcmul_self_Tensor_tensor1_Tensor_tensor2_Tensor(SEXP selfSEXP, SEXP tensor1SEXP, SEXP tensor2SEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type tensor1(tensor1SEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type tensor2(tensor2SEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_addcmul_self_Tensor_tensor1_Tensor_tensor2_Tensor(self, tensor1, tensor2, value));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_addcmul__self_Tensor_tensor1_Tensor_tensor2_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_addcmul__self_Tensor_tensor1_Tensor_tensor2_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> tensor1, Rcpp::XPtr<torch::Tensor> tensor2, Rcpp::XPtr<torch::Scalar> value);
RcppExport SEXP _torch_cpp_torch_method_addcmul__self_Tensor_tensor1_Tensor_tensor2_Tensor(SEXP selfSEXP, SEXP tensor1SEXP, SEXP tensor2SEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type tensor1(tensor1SEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type tensor2(tensor2SEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_addcmul__self_Tensor_tensor1_Tensor_tensor2_Tensor(self, tensor1, tensor2, value));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_addcdiv_self_Tensor_tensor1_Tensor_tensor2_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_addcdiv_self_Tensor_tensor1_Tensor_tensor2_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> tensor1, Rcpp::XPtr<torch::Tensor> tensor2, Rcpp::XPtr<torch::Scalar> value);
RcppExport SEXP _torch_cpp_torch_method_addcdiv_self_Tensor_tensor1_Tensor_tensor2_Tensor(SEXP selfSEXP, SEXP tensor1SEXP, SEXP tensor2SEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type tensor1(tensor1SEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type tensor2(tensor2SEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_addcdiv_self_Tensor_tensor1_Tensor_tensor2_Tensor(self, tensor1, tensor2, value));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_lstsq_self_Tensor_A_Tensor
Rcpp::List cpp_torch_method_lstsq_self_Tensor_A_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> A);
RcppExport SEXP _torch_cpp_torch_method_lstsq_self_Tensor_A_Tensor(SEXP selfSEXP, SEXP ASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type A(ASEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_lstsq_self_Tensor_A_Tensor(self, A));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_triangular_solve_self_Tensor_A_Tensor
Rcpp::List cpp_torch_method_triangular_solve_self_Tensor_A_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> A, bool upper, bool transpose, bool unitriangular);
RcppExport SEXP _torch_cpp_torch_method_triangular_solve_self_Tensor_A_Tensor(SEXP selfSEXP, SEXP ASEXP, SEXP upperSEXP, SEXP transposeSEXP, SEXP unitriangularSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type A(ASEXP);
    Rcpp::traits::input_parameter< bool >::type upper(upperSEXP);
    Rcpp::traits::input_parameter< bool >::type transpose(transposeSEXP);
    Rcpp::traits::input_parameter< bool >::type unitriangular(unitriangularSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_triangular_solve_self_Tensor_A_Tensor(self, A, upper, transpose, unitriangular));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_symeig_self_Tensor
Rcpp::List cpp_torch_method_symeig_self_Tensor(Rcpp::XPtr<torch::Tensor> self, bool eigenvectors, bool upper);
RcppExport SEXP _torch_cpp_torch_method_symeig_self_Tensor(SEXP selfSEXP, SEXP eigenvectorsSEXP, SEXP upperSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< bool >::type eigenvectors(eigenvectorsSEXP);
    Rcpp::traits::input_parameter< bool >::type upper(upperSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_symeig_self_Tensor(self, eigenvectors, upper));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_eig_self_Tensor
Rcpp::List cpp_torch_method_eig_self_Tensor(Rcpp::XPtr<torch::Tensor> self, bool eigenvectors);
RcppExport SEXP _torch_cpp_torch_method_eig_self_Tensor(SEXP selfSEXP, SEXP eigenvectorsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< bool >::type eigenvectors(eigenvectorsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_eig_self_Tensor(self, eigenvectors));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_svd_self_Tensor
Rcpp::List cpp_torch_method_svd_self_Tensor(Rcpp::XPtr<torch::Tensor> self, bool some, bool compute_uv);
RcppExport SEXP _torch_cpp_torch_method_svd_self_Tensor(SEXP selfSEXP, SEXP someSEXP, SEXP compute_uvSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< bool >::type some(someSEXP);
    Rcpp::traits::input_parameter< bool >::type compute_uv(compute_uvSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_svd_self_Tensor(self, some, compute_uv));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_cholesky_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_cholesky_self_Tensor(Rcpp::XPtr<torch::Tensor> self, bool upper);
RcppExport SEXP _torch_cpp_torch_method_cholesky_self_Tensor(SEXP selfSEXP, SEXP upperSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< bool >::type upper(upperSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_cholesky_self_Tensor(self, upper));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_cholesky_solve_self_Tensor_input2_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_cholesky_solve_self_Tensor_input2_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> input2, bool upper);
RcppExport SEXP _torch_cpp_torch_method_cholesky_solve_self_Tensor_input2_Tensor(SEXP selfSEXP, SEXP input2SEXP, SEXP upperSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type input2(input2SEXP);
    Rcpp::traits::input_parameter< bool >::type upper(upperSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_cholesky_solve_self_Tensor_input2_Tensor(self, input2, upper));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_solve_self_Tensor_A_Tensor
Rcpp::List cpp_torch_method_solve_self_Tensor_A_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> A);
RcppExport SEXP _torch_cpp_torch_method_solve_self_Tensor_A_Tensor(SEXP selfSEXP, SEXP ASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type A(ASEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_solve_self_Tensor_A_Tensor(self, A));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_cholesky_inverse_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_cholesky_inverse_self_Tensor(Rcpp::XPtr<torch::Tensor> self, bool upper);
RcppExport SEXP _torch_cpp_torch_method_cholesky_inverse_self_Tensor(SEXP selfSEXP, SEXP upperSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< bool >::type upper(upperSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_cholesky_inverse_self_Tensor(self, upper));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_qr_self_Tensor
Rcpp::List cpp_torch_method_qr_self_Tensor(Rcpp::XPtr<torch::Tensor> self, bool some);
RcppExport SEXP _torch_cpp_torch_method_qr_self_Tensor(SEXP selfSEXP, SEXP someSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< bool >::type some(someSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_qr_self_Tensor(self, some));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_geqrf_self_Tensor
Rcpp::List cpp_torch_method_geqrf_self_Tensor(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_method_geqrf_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_geqrf_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_orgqr_self_Tensor_input2_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_orgqr_self_Tensor_input2_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> input2);
RcppExport SEXP _torch_cpp_torch_method_orgqr_self_Tensor_input2_Tensor(SEXP selfSEXP, SEXP input2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type input2(input2SEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_orgqr_self_Tensor_input2_Tensor(self, input2));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_ormqr_self_Tensor_input2_Tensor_input3_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_ormqr_self_Tensor_input2_Tensor_input3_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> input2, Rcpp::XPtr<torch::Tensor> input3, bool left, bool transpose);
RcppExport SEXP _torch_cpp_torch_method_ormqr_self_Tensor_input2_Tensor_input3_Tensor(SEXP selfSEXP, SEXP input2SEXP, SEXP input3SEXP, SEXP leftSEXP, SEXP transposeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type input2(input2SEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type input3(input3SEXP);
    Rcpp::traits::input_parameter< bool >::type left(leftSEXP);
    Rcpp::traits::input_parameter< bool >::type transpose(transposeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_ormqr_self_Tensor_input2_Tensor_input3_Tensor(self, input2, input3, left, transpose));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_lu_solve_self_Tensor_LU_data_Tensor_LU_pivots_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_lu_solve_self_Tensor_LU_data_Tensor_LU_pivots_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> LU_data, Rcpp::XPtr<torch::Tensor> LU_pivots);
RcppExport SEXP _torch_cpp_torch_method_lu_solve_self_Tensor_LU_data_Tensor_LU_pivots_Tensor(SEXP selfSEXP, SEXP LU_dataSEXP, SEXP LU_pivotsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type LU_data(LU_dataSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type LU_pivots(LU_pivotsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_lu_solve_self_Tensor_LU_data_Tensor_LU_pivots_Tensor(self, LU_data, LU_pivots));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_multinomial_self_Tensor_num_samples_int64_t
Rcpp::XPtr<torch::Tensor> cpp_torch_method_multinomial_self_Tensor_num_samples_int64_t(Rcpp::XPtr<torch::Tensor> self, int64_t num_samples, bool replacement, Rcpp::XPtr<torch::Generator *> generator);
RcppExport SEXP _torch_cpp_torch_method_multinomial_self_Tensor_num_samples_int64_t(SEXP selfSEXP, SEXP num_samplesSEXP, SEXP replacementSEXP, SEXP generatorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< int64_t >::type num_samples(num_samplesSEXP);
    Rcpp::traits::input_parameter< bool >::type replacement(replacementSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Generator *> >::type generator(generatorSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_multinomial_self_Tensor_num_samples_int64_t(self, num_samples, replacement, generator));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_lgamma_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_lgamma_self_Tensor(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_method_lgamma_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_lgamma_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_digamma_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_digamma_self_Tensor(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_method_digamma_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_digamma_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_polygamma_n_int64_t_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_polygamma_n_int64_t_self_Tensor(int64_t n, Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_method_polygamma_n_int64_t_self_Tensor(SEXP nSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int64_t >::type n(nSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_polygamma_n_int64_t_self_Tensor(n, self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_erfinv_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_erfinv_self_Tensor(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_method_erfinv_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_erfinv_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_erfinv__self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_erfinv__self_Tensor(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_method_erfinv__self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_erfinv__self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_sign_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_sign_self_Tensor(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_method_sign_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_sign_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_sign__self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_sign__self_Tensor(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_method_sign__self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_sign__self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_dist_self_Tensor_other_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_dist_self_Tensor_other_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> other, Rcpp::XPtr<torch::Scalar> p);
RcppExport SEXP _torch_cpp_torch_method_dist_self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type other(otherSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_dist_self_Tensor_other_Tensor(self, other, p));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_atan2_self_Tensor_other_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_atan2_self_Tensor_other_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> other);
RcppExport SEXP _torch_cpp_torch_method_atan2_self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_atan2_self_Tensor_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_lerp_self_Tensor_end_Tensor_weight_Scalar
Rcpp::XPtr<torch::Tensor> cpp_torch_method_lerp_self_Tensor_end_Tensor_weight_Scalar(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> end, Rcpp::XPtr<torch::Scalar> weight);
RcppExport SEXP _torch_cpp_torch_method_lerp_self_Tensor_end_Tensor_weight_Scalar(SEXP selfSEXP, SEXP endSEXP, SEXP weightSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type end(endSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type weight(weightSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_lerp_self_Tensor_end_Tensor_weight_Scalar(self, end, weight));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_lerp_self_Tensor_end_Tensor_weight_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_lerp_self_Tensor_end_Tensor_weight_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> end, Rcpp::XPtr<torch::Tensor> weight);
RcppExport SEXP _torch_cpp_torch_method_lerp_self_Tensor_end_Tensor_weight_Tensor(SEXP selfSEXP, SEXP endSEXP, SEXP weightSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type end(endSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type weight(weightSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_lerp_self_Tensor_end_Tensor_weight_Tensor(self, end, weight));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_histc_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_histc_self_Tensor(Rcpp::XPtr<torch::Tensor> self, int64_t bins, Rcpp::XPtr<torch::Scalar> min, Rcpp::XPtr<torch::Scalar> max);
RcppExport SEXP _torch_cpp_torch_method_histc_self_Tensor(SEXP selfSEXP, SEXP binsSEXP, SEXP minSEXP, SEXP maxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< int64_t >::type bins(binsSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type min(minSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type max(maxSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_histc_self_Tensor(self, bins, min, max));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_fmod_self_Tensor_other_Scalar
Rcpp::XPtr<torch::Tensor> cpp_torch_method_fmod_self_Tensor_other_Scalar(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Scalar> other);
RcppExport SEXP _torch_cpp_torch_method_fmod_self_Tensor_other_Scalar(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_fmod_self_Tensor_other_Scalar(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_fmod_self_Tensor_other_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_fmod_self_Tensor_other_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> other);
RcppExport SEXP _torch_cpp_torch_method_fmod_self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_fmod_self_Tensor_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_remainder_self_Tensor_other_Scalar
Rcpp::XPtr<torch::Tensor> cpp_torch_method_remainder_self_Tensor_other_Scalar(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Scalar> other);
RcppExport SEXP _torch_cpp_torch_method_remainder_self_Tensor_other_Scalar(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_remainder_self_Tensor_other_Scalar(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_remainder_self_Tensor_other_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_remainder_self_Tensor_other_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> other);
RcppExport SEXP _torch_cpp_torch_method_remainder_self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_remainder_self_Tensor_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_min_self_Tensor_other_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_min_self_Tensor_other_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> other);
RcppExport SEXP _torch_cpp_torch_method_min_self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_min_self_Tensor_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_min_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_min_self_Tensor(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_method_min_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_min_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_max_self_Tensor_other_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_max_self_Tensor_other_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> other);
RcppExport SEXP _torch_cpp_torch_method_max_self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_max_self_Tensor_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_max_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_max_self_Tensor(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_method_max_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_max_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_median_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_median_self_Tensor(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_method_median_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_median_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_sort_self_Tensor
Rcpp::List cpp_torch_method_sort_self_Tensor(Rcpp::XPtr<torch::Tensor> self, int64_t dim, bool descending);
RcppExport SEXP _torch_cpp_torch_method_sort_self_Tensor(SEXP selfSEXP, SEXP dimSEXP, SEXP descendingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< bool >::type descending(descendingSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_sort_self_Tensor(self, dim, descending));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_sort_self_Tensor_dim_Dimname
Rcpp::List cpp_torch_method_sort_self_Tensor_dim_Dimname(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Dimname> dim, bool descending);
RcppExport SEXP _torch_cpp_torch_method_sort_self_Tensor_dim_Dimname(SEXP selfSEXP, SEXP dimSEXP, SEXP descendingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Dimname> >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< bool >::type descending(descendingSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_sort_self_Tensor_dim_Dimname(self, dim, descending));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_argsort_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_argsort_self_Tensor(Rcpp::XPtr<torch::Tensor> self, int64_t dim, bool descending);
RcppExport SEXP _torch_cpp_torch_method_argsort_self_Tensor(SEXP selfSEXP, SEXP dimSEXP, SEXP descendingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< bool >::type descending(descendingSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_argsort_self_Tensor(self, dim, descending));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_argsort_self_Tensor_dim_Dimname
Rcpp::XPtr<torch::Tensor> cpp_torch_method_argsort_self_Tensor_dim_Dimname(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Dimname> dim, bool descending);
RcppExport SEXP _torch_cpp_torch_method_argsort_self_Tensor_dim_Dimname(SEXP selfSEXP, SEXP dimSEXP, SEXP descendingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Dimname> >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< bool >::type descending(descendingSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_argsort_self_Tensor_dim_Dimname(self, dim, descending));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_topk_self_Tensor_k_int64_t
Rcpp::List cpp_torch_method_topk_self_Tensor_k_int64_t(Rcpp::XPtr<torch::Tensor> self, int64_t k, int64_t dim, bool largest, bool sorted);
RcppExport SEXP _torch_cpp_torch_method_topk_self_Tensor_k_int64_t(SEXP selfSEXP, SEXP kSEXP, SEXP dimSEXP, SEXP largestSEXP, SEXP sortedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< int64_t >::type k(kSEXP);
    Rcpp::traits::input_parameter< int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< bool >::type largest(largestSEXP);
    Rcpp::traits::input_parameter< bool >::type sorted(sortedSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_topk_self_Tensor_k_int64_t(self, k, dim, largest, sorted));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_all_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_all_self_Tensor(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_method_all_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_all_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_any_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_any_self_Tensor(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_method_any_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_any_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_renorm_self_Tensor_p_Scalar_dim_int64_t_maxnorm_Scalar
Rcpp::XPtr<torch::Tensor> cpp_torch_method_renorm_self_Tensor_p_Scalar_dim_int64_t_maxnorm_Scalar(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Scalar> p, int64_t dim, Rcpp::XPtr<torch::Scalar> maxnorm);
RcppExport SEXP _torch_cpp_torch_method_renorm_self_Tensor_p_Scalar_dim_int64_t_maxnorm_Scalar(SEXP selfSEXP, SEXP pSEXP, SEXP dimSEXP, SEXP maxnormSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type p(pSEXP);
    Rcpp::traits::input_parameter< int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type maxnorm(maxnormSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_renorm_self_Tensor_p_Scalar_dim_int64_t_maxnorm_Scalar(self, p, dim, maxnorm));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_unfold_self_Tensor_dimension_int64_t_size_int64_t_step_int64_t
Rcpp::XPtr<torch::Tensor> cpp_torch_method_unfold_self_Tensor_dimension_int64_t_size_int64_t_step_int64_t(Rcpp::XPtr<torch::Tensor> self, int64_t dimension, int64_t size, int64_t step);
RcppExport SEXP _torch_cpp_torch_method_unfold_self_Tensor_dimension_int64_t_size_int64_t_step_int64_t(SEXP selfSEXP, SEXP dimensionSEXP, SEXP sizeSEXP, SEXP stepSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< int64_t >::type dimension(dimensionSEXP);
    Rcpp::traits::input_parameter< int64_t >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< int64_t >::type step(stepSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_unfold_self_Tensor_dimension_int64_t_size_int64_t_step_int64_t(self, dimension, size, step));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_equal_self_Tensor_other_Tensor
bool cpp_torch_method_equal_self_Tensor_other_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> other);
RcppExport SEXP _torch_cpp_torch_method_equal_self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_equal_self_Tensor_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_pow_self_Tensor_exponent_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_pow_self_Tensor_exponent_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> exponent);
RcppExport SEXP _torch_cpp_torch_method_pow_self_Tensor_exponent_Tensor(SEXP selfSEXP, SEXP exponentSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type exponent(exponentSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_pow_self_Tensor_exponent_Tensor(self, exponent));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_alias_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_method_alias_self_Tensor(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_method_alias_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_alias_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__cast_Byte_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace__cast_Byte_self_Tensor(Rcpp::XPtr<torch::Tensor> self, bool non_blocking);
RcppExport SEXP _torch_cpp_torch_namespace__cast_Byte_self_Tensor(SEXP selfSEXP, SEXP non_blockingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< bool >::type non_blocking(non_blockingSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__cast_Byte_self_Tensor(self, non_blocking));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__cast_Char_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace__cast_Char_self_Tensor(Rcpp::XPtr<torch::Tensor> self, bool non_blocking);
RcppExport SEXP _torch_cpp_torch_namespace__cast_Char_self_Tensor(SEXP selfSEXP, SEXP non_blockingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< bool >::type non_blocking(non_blockingSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__cast_Char_self_Tensor(self, non_blocking));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__cast_Double_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace__cast_Double_self_Tensor(Rcpp::XPtr<torch::Tensor> self, bool non_blocking);
RcppExport SEXP _torch_cpp_torch_namespace__cast_Double_self_Tensor(SEXP selfSEXP, SEXP non_blockingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< bool >::type non_blocking(non_blockingSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__cast_Double_self_Tensor(self, non_blocking));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__cast_Float_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace__cast_Float_self_Tensor(Rcpp::XPtr<torch::Tensor> self, bool non_blocking);
RcppExport SEXP _torch_cpp_torch_namespace__cast_Float_self_Tensor(SEXP selfSEXP, SEXP non_blockingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< bool >::type non_blocking(non_blockingSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__cast_Float_self_Tensor(self, non_blocking));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__cast_Int_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace__cast_Int_self_Tensor(Rcpp::XPtr<torch::Tensor> self, bool non_blocking);
RcppExport SEXP _torch_cpp_torch_namespace__cast_Int_self_Tensor(SEXP selfSEXP, SEXP non_blockingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< bool >::type non_blocking(non_blockingSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__cast_Int_self_Tensor(self, non_blocking));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__cast_Long_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace__cast_Long_self_Tensor(Rcpp::XPtr<torch::Tensor> self, bool non_blocking);
RcppExport SEXP _torch_cpp_torch_namespace__cast_Long_self_Tensor(SEXP selfSEXP, SEXP non_blockingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< bool >::type non_blocking(non_blockingSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__cast_Long_self_Tensor(self, non_blocking));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__cast_Short_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace__cast_Short_self_Tensor(Rcpp::XPtr<torch::Tensor> self, bool non_blocking);
RcppExport SEXP _torch_cpp_torch_namespace__cast_Short_self_Tensor(SEXP selfSEXP, SEXP non_blockingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< bool >::type non_blocking(non_blockingSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__cast_Short_self_Tensor(self, non_blocking));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__cast_Half_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace__cast_Half_self_Tensor(Rcpp::XPtr<torch::Tensor> self, bool non_blocking);
RcppExport SEXP _torch_cpp_torch_namespace__cast_Half_self_Tensor(SEXP selfSEXP, SEXP non_blockingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< bool >::type non_blocking(non_blockingSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__cast_Half_self_Tensor(self, non_blocking));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_align_tensors_tensors_TensorList
Rcpp::XPtr<torch::TensorList> cpp_torch_namespace_align_tensors_tensors_TensorList(Rcpp::XPtr<std::vector<torch::Tensor>> tensors);
RcppExport SEXP _torch_cpp_torch_namespace_align_tensors_tensors_TensorList(SEXP tensorsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::vector<torch::Tensor>> >::type tensors(tensorsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_align_tensors_tensors_TensorList(tensors));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__use_cudnn_ctc_loss_log_probs_Tensor_targets_Tensor_input_lengths_IntArrayRef_target_lengths_IntArrayRef_blank_int64_t
bool cpp_torch_namespace__use_cudnn_ctc_loss_log_probs_Tensor_targets_Tensor_input_lengths_IntArrayRef_target_lengths_IntArrayRef_blank_int64_t(Rcpp::XPtr<torch::Tensor> log_probs, Rcpp::XPtr<torch::Tensor> targets, std::vector<int64_t> input_lengths, std::vector<int64_t> target_lengths, int64_t blank);
RcppExport SEXP _torch_cpp_torch_namespace__use_cudnn_ctc_loss_log_probs_Tensor_targets_Tensor_input_lengths_IntArrayRef_target_lengths_IntArrayRef_blank_int64_t(SEXP log_probsSEXP, SEXP targetsSEXP, SEXP input_lengthsSEXP, SEXP target_lengthsSEXP, SEXP blankSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type log_probs(log_probsSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type targets(targetsSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type input_lengths(input_lengthsSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type target_lengths(target_lengthsSEXP);
    Rcpp::traits::input_parameter< int64_t >::type blank(blankSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__use_cudnn_ctc_loss_log_probs_Tensor_targets_Tensor_input_lengths_IntArrayRef_target_lengths_IntArrayRef_blank_int64_t(log_probs, targets, input_lengths, target_lengths, blank));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__cudnn_ctc_loss_log_probs_Tensor_targets_Tensor_input_lengths_IntArrayRef_target_lengths_IntArrayRef_blank_int64_t_deterministic_bool_zero_infinity_bool
Rcpp::List cpp_torch_namespace__cudnn_ctc_loss_log_probs_Tensor_targets_Tensor_input_lengths_IntArrayRef_target_lengths_IntArrayRef_blank_int64_t_deterministic_bool_zero_infinity_bool(Rcpp::XPtr<torch::Tensor> log_probs, Rcpp::XPtr<torch::Tensor> targets, std::vector<int64_t> input_lengths, std::vector<int64_t> target_lengths, int64_t blank, bool deterministic, bool zero_infinity);
RcppExport SEXP _torch_cpp_torch_namespace__cudnn_ctc_loss_log_probs_Tensor_targets_Tensor_input_lengths_IntArrayRef_target_lengths_IntArrayRef_blank_int64_t_deterministic_bool_zero_infinity_bool(SEXP log_probsSEXP, SEXP targetsSEXP, SEXP input_lengthsSEXP, SEXP target_lengthsSEXP, SEXP blankSEXP, SEXP deterministicSEXP, SEXP zero_infinitySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type log_probs(log_probsSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type targets(targetsSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type input_lengths(input_lengthsSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type target_lengths(target_lengthsSEXP);
    Rcpp::traits::input_parameter< int64_t >::type blank(blankSEXP);
    Rcpp::traits::input_parameter< bool >::type deterministic(deterministicSEXP);
    Rcpp::traits::input_parameter< bool >::type zero_infinity(zero_infinitySEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__cudnn_ctc_loss_log_probs_Tensor_targets_Tensor_input_lengths_IntArrayRef_target_lengths_IntArrayRef_blank_int64_t_deterministic_bool_zero_infinity_bool(log_probs, targets, input_lengths, target_lengths, blank, deterministic, zero_infinity));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__cudnn_rnn_flatten_weight_weight_arr_TensorList_weight_stride0_int64_t_input_size_int64_t_mode_int64_t_hidden_size_int64_t_num_layers_int64_t_batch_first_bool_bidirectional_bool
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace__cudnn_rnn_flatten_weight_weight_arr_TensorList_weight_stride0_int64_t_input_size_int64_t_mode_int64_t_hidden_size_int64_t_num_layers_int64_t_batch_first_bool_bidirectional_bool(Rcpp::XPtr<std::vector<torch::Tensor>> weight_arr, int64_t weight_stride0, int64_t input_size, int64_t mode, int64_t hidden_size, int64_t num_layers, bool batch_first, bool bidirectional);
RcppExport SEXP _torch_cpp_torch_namespace__cudnn_rnn_flatten_weight_weight_arr_TensorList_weight_stride0_int64_t_input_size_int64_t_mode_int64_t_hidden_size_int64_t_num_layers_int64_t_batch_first_bool_bidirectional_bool(SEXP weight_arrSEXP, SEXP weight_stride0SEXP, SEXP input_sizeSEXP, SEXP modeSEXP, SEXP hidden_sizeSEXP, SEXP num_layersSEXP, SEXP batch_firstSEXP, SEXP bidirectionalSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::vector<torch::Tensor>> >::type weight_arr(weight_arrSEXP);
    Rcpp::traits::input_parameter< int64_t >::type weight_stride0(weight_stride0SEXP);
    Rcpp::traits::input_parameter< int64_t >::type input_size(input_sizeSEXP);
    Rcpp::traits::input_parameter< int64_t >::type mode(modeSEXP);
    Rcpp::traits::input_parameter< int64_t >::type hidden_size(hidden_sizeSEXP);
    Rcpp::traits::input_parameter< int64_t >::type num_layers(num_layersSEXP);
    Rcpp::traits::input_parameter< bool >::type batch_first(batch_firstSEXP);
    Rcpp::traits::input_parameter< bool >::type bidirectional(bidirectionalSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__cudnn_rnn_flatten_weight_weight_arr_TensorList_weight_stride0_int64_t_input_size_int64_t_mode_int64_t_hidden_size_int64_t_num_layers_int64_t_batch_first_bool_bidirectional_bool(weight_arr, weight_stride0, input_size, mode, hidden_size, num_layers, batch_first, bidirectional));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__cudnn_rnn_input_Tensor_weight_TensorList_weight_stride0_int64_t_weight_buf_Tensor_hx_Tensor_cx_Tensor_mode_int64_t_hidden_size_int64_t_num_layers_int64_t_batch_first_bool_dropout_double_train_bool_bidirectional_bool_batch_sizes_IntArrayRef_dropout_state_Tensor
Rcpp::List cpp_torch_namespace__cudnn_rnn_input_Tensor_weight_TensorList_weight_stride0_int64_t_weight_buf_Tensor_hx_Tensor_cx_Tensor_mode_int64_t_hidden_size_int64_t_num_layers_int64_t_batch_first_bool_dropout_double_train_bool_bidirectional_bool_batch_sizes_IntArrayRef_dropout_state_Tensor(Rcpp::XPtr<torch::Tensor> input, Rcpp::XPtr<std::vector<torch::Tensor>> weight, int64_t weight_stride0, Rcpp::XPtr<torch::Tensor> weight_buf, Rcpp::XPtr<torch::Tensor> hx, Rcpp::XPtr<torch::Tensor> cx, int64_t mode, int64_t hidden_size, int64_t num_layers, bool batch_first, double dropout, bool train, bool bidirectional, std::vector<int64_t> batch_sizes, Rcpp::XPtr<torch::Tensor> dropout_state);
RcppExport SEXP _torch_cpp_torch_namespace__cudnn_rnn_input_Tensor_weight_TensorList_weight_stride0_int64_t_weight_buf_Tensor_hx_Tensor_cx_Tensor_mode_int64_t_hidden_size_int64_t_num_layers_int64_t_batch_first_bool_dropout_double_train_bool_bidirectional_bool_batch_sizes_IntArrayRef_dropout_state_Tensor(SEXP inputSEXP, SEXP weightSEXP, SEXP weight_stride0SEXP, SEXP weight_bufSEXP, SEXP hxSEXP, SEXP cxSEXP, SEXP modeSEXP, SEXP hidden_sizeSEXP, SEXP num_layersSEXP, SEXP batch_firstSEXP, SEXP dropoutSEXP, SEXP trainSEXP, SEXP bidirectionalSEXP, SEXP batch_sizesSEXP, SEXP dropout_stateSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type input(inputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::vector<torch::Tensor>> >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< int64_t >::type weight_stride0(weight_stride0SEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type weight_buf(weight_bufSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type hx(hxSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type cx(cxSEXP);
    Rcpp::traits::input_parameter< int64_t >::type mode(modeSEXP);
    Rcpp::traits::input_parameter< int64_t >::type hidden_size(hidden_sizeSEXP);
    Rcpp::traits::input_parameter< int64_t >::type num_layers(num_layersSEXP);
    Rcpp::traits::input_parameter< bool >::type batch_first(batch_firstSEXP);
    Rcpp::traits::input_parameter< double >::type dropout(dropoutSEXP);
    Rcpp::traits::input_parameter< bool >::type train(trainSEXP);
    Rcpp::traits::input_parameter< bool >::type bidirectional(bidirectionalSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type batch_sizes(batch_sizesSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type dropout_state(dropout_stateSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__cudnn_rnn_input_Tensor_weight_TensorList_weight_stride0_int64_t_weight_buf_Tensor_hx_Tensor_cx_Tensor_mode_int64_t_hidden_size_int64_t_num_layers_int64_t_batch_first_bool_dropout_double_train_bool_bidirectional_bool_batch_sizes_IntArrayRef_dropout_state_Tensor(input, weight, weight_stride0, weight_buf, hx, cx, mode, hidden_size, num_layers, batch_first, dropout, train, bidirectional, batch_sizes, dropout_state));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__cudnn_rnn_backward_input_Tensor_weight_TensorList_weight_stride0_int64_t_weight_buf_Tensor_hx_Tensor_cx_Tensor_output_Tensor_grad_output_Tensor_grad_hy_Tensor_grad_cy_Tensor_mode_int64_t_hidden_size_int64_t_num_layers_int64_t_batch_first_bool_dropout_double_train_bool_bidirectional_bool_batch_sizes_IntArrayRef_dropout_state_Tensor_reserve_Tensor_output_mask_stdarraybool4
Rcpp::List cpp_torch_namespace__cudnn_rnn_backward_input_Tensor_weight_TensorList_weight_stride0_int64_t_weight_buf_Tensor_hx_Tensor_cx_Tensor_output_Tensor_grad_output_Tensor_grad_hy_Tensor_grad_cy_Tensor_mode_int64_t_hidden_size_int64_t_num_layers_int64_t_batch_first_bool_dropout_double_train_bool_bidirectional_bool_batch_sizes_IntArrayRef_dropout_state_Tensor_reserve_Tensor_output_mask_stdarraybool4(Rcpp::XPtr<torch::Tensor> input, Rcpp::XPtr<std::vector<torch::Tensor>> weight, int64_t weight_stride0, Rcpp::XPtr<torch::Tensor> weight_buf, Rcpp::XPtr<torch::Tensor> hx, Rcpp::XPtr<torch::Tensor> cx, Rcpp::XPtr<torch::Tensor> output, Rcpp::XPtr<torch::Tensor> grad_output, Rcpp::XPtr<torch::Tensor> grad_hy, Rcpp::XPtr<torch::Tensor> grad_cy, int64_t mode, int64_t hidden_size, int64_t num_layers, bool batch_first, double dropout, bool train, bool bidirectional, std::vector<int64_t> batch_sizes, Rcpp::XPtr<torch::Tensor> dropout_state, Rcpp::XPtr<torch::Tensor> reserve, std::vector<bool> output_mask);
RcppExport SEXP _torch_cpp_torch_namespace__cudnn_rnn_backward_input_Tensor_weight_TensorList_weight_stride0_int64_t_weight_buf_Tensor_hx_Tensor_cx_Tensor_output_Tensor_grad_output_Tensor_grad_hy_Tensor_grad_cy_Tensor_mode_int64_t_hidden_size_int64_t_num_layers_int64_t_batch_first_bool_dropout_double_train_bool_bidirectional_bool_batch_sizes_IntArrayRef_dropout_state_Tensor_reserve_Tensor_output_mask_stdarraybool4(SEXP inputSEXP, SEXP weightSEXP, SEXP weight_stride0SEXP, SEXP weight_bufSEXP, SEXP hxSEXP, SEXP cxSEXP, SEXP outputSEXP, SEXP grad_outputSEXP, SEXP grad_hySEXP, SEXP grad_cySEXP, SEXP modeSEXP, SEXP hidden_sizeSEXP, SEXP num_layersSEXP, SEXP batch_firstSEXP, SEXP dropoutSEXP, SEXP trainSEXP, SEXP bidirectionalSEXP, SEXP batch_sizesSEXP, SEXP dropout_stateSEXP, SEXP reserveSEXP, SEXP output_maskSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type input(inputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::vector<torch::Tensor>> >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< int64_t >::type weight_stride0(weight_stride0SEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type weight_buf(weight_bufSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type hx(hxSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type cx(cxSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type output(outputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type grad_hy(grad_hySEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type grad_cy(grad_cySEXP);
    Rcpp::traits::input_parameter< int64_t >::type mode(modeSEXP);
    Rcpp::traits::input_parameter< int64_t >::type hidden_size(hidden_sizeSEXP);
    Rcpp::traits::input_parameter< int64_t >::type num_layers(num_layersSEXP);
    Rcpp::traits::input_parameter< bool >::type batch_first(batch_firstSEXP);
    Rcpp::traits::input_parameter< double >::type dropout(dropoutSEXP);
    Rcpp::traits::input_parameter< bool >::type train(trainSEXP);
    Rcpp::traits::input_parameter< bool >::type bidirectional(bidirectionalSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type batch_sizes(batch_sizesSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type dropout_state(dropout_stateSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type reserve(reserveSEXP);
    Rcpp::traits::input_parameter< std::vector<bool> >::type output_mask(output_maskSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__cudnn_rnn_backward_input_Tensor_weight_TensorList_weight_stride0_int64_t_weight_buf_Tensor_hx_Tensor_cx_Tensor_output_Tensor_grad_output_Tensor_grad_hy_Tensor_grad_cy_Tensor_mode_int64_t_hidden_size_int64_t_num_layers_int64_t_batch_first_bool_dropout_double_train_bool_bidirectional_bool_batch_sizes_IntArrayRef_dropout_state_Tensor_reserve_Tensor_output_mask_stdarraybool4(input, weight, weight_stride0, weight_buf, hx, cx, output, grad_output, grad_hy, grad_cy, mode, hidden_size, num_layers, batch_first, dropout, train, bidirectional, batch_sizes, dropout_state, reserve, output_mask));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__cudnn_init_dropout_state_dropout_double_train_bool_dropout_seed_int64_t_options_TensorOptions
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace__cudnn_init_dropout_state_dropout_double_train_bool_dropout_seed_int64_t_options_TensorOptions(double dropout, bool train, int64_t dropout_seed, Rcpp::XPtr<torch::TensorOptions> options);
RcppExport SEXP _torch_cpp_torch_namespace__cudnn_init_dropout_state_dropout_double_train_bool_dropout_seed_int64_t_options_TensorOptions(SEXP dropoutSEXP, SEXP trainSEXP, SEXP dropout_seedSEXP, SEXP optionsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type dropout(dropoutSEXP);
    Rcpp::traits::input_parameter< bool >::type train(trainSEXP);
    Rcpp::traits::input_parameter< int64_t >::type dropout_seed(dropout_seedSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::TensorOptions> >::type options(optionsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__cudnn_init_dropout_state_dropout_double_train_bool_dropout_seed_int64_t_options_TensorOptions(dropout, train, dropout_seed, options));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__debug_has_internal_overlap_self_Tensor
int64_t cpp_torch_namespace__debug_has_internal_overlap_self_Tensor(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_namespace__debug_has_internal_overlap_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__debug_has_internal_overlap_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__fused_dropout_self_Tensor_p_double
Rcpp::List cpp_torch_namespace__fused_dropout_self_Tensor_p_double(Rcpp::XPtr<torch::Tensor> self, double p, Rcpp::XPtr<torch::Generator *> generator);
RcppExport SEXP _torch_cpp_torch_namespace__fused_dropout_self_Tensor_p_double(SEXP selfSEXP, SEXP pSEXP, SEXP generatorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< double >::type p(pSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Generator *> >::type generator(generatorSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__fused_dropout_self_Tensor_p_double(self, p, generator));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__masked_scale_self_Tensor_mask_Tensor_scale_double
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace__masked_scale_self_Tensor_mask_Tensor_scale_double(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> mask, double scale);
RcppExport SEXP _torch_cpp_torch_namespace__masked_scale_self_Tensor_mask_Tensor_scale_double(SEXP selfSEXP, SEXP maskSEXP, SEXP scaleSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type mask(maskSEXP);
    Rcpp::traits::input_parameter< double >::type scale(scaleSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__masked_scale_self_Tensor_mask_Tensor_scale_double(self, mask, scale));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__sobol_engine_draw_quasi_Tensor_n_int64_t_sobolstate_Tensor_dimension_int64_t_num_generated_int64_t_dtype_ScalarType
Rcpp::List cpp_torch_namespace__sobol_engine_draw_quasi_Tensor_n_int64_t_sobolstate_Tensor_dimension_int64_t_num_generated_int64_t_dtype_ScalarType(Rcpp::XPtr<torch::Tensor> quasi, int64_t n, Rcpp::XPtr<torch::Tensor> sobolstate, int64_t dimension, int64_t num_generated, Rcpp::XPtr<torch::Dtype> dtype);
RcppExport SEXP _torch_cpp_torch_namespace__sobol_engine_draw_quasi_Tensor_n_int64_t_sobolstate_Tensor_dimension_int64_t_num_generated_int64_t_dtype_ScalarType(SEXP quasiSEXP, SEXP nSEXP, SEXP sobolstateSEXP, SEXP dimensionSEXP, SEXP num_generatedSEXP, SEXP dtypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type quasi(quasiSEXP);
    Rcpp::traits::input_parameter< int64_t >::type n(nSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type sobolstate(sobolstateSEXP);
    Rcpp::traits::input_parameter< int64_t >::type dimension(dimensionSEXP);
    Rcpp::traits::input_parameter< int64_t >::type num_generated(num_generatedSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Dtype> >::type dtype(dtypeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__sobol_engine_draw_quasi_Tensor_n_int64_t_sobolstate_Tensor_dimension_int64_t_num_generated_int64_t_dtype_ScalarType(quasi, n, sobolstate, dimension, num_generated, dtype));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__sobol_engine_ff__self_Tensor_n_int64_t_sobolstate_Tensor_dimension_int64_t_num_generated_int64_t
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace__sobol_engine_ff__self_Tensor_n_int64_t_sobolstate_Tensor_dimension_int64_t_num_generated_int64_t(Rcpp::XPtr<torch::Tensor> self, int64_t n, Rcpp::XPtr<torch::Tensor> sobolstate, int64_t dimension, int64_t num_generated);
RcppExport SEXP _torch_cpp_torch_namespace__sobol_engine_ff__self_Tensor_n_int64_t_sobolstate_Tensor_dimension_int64_t_num_generated_int64_t(SEXP selfSEXP, SEXP nSEXP, SEXP sobolstateSEXP, SEXP dimensionSEXP, SEXP num_generatedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< int64_t >::type n(nSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type sobolstate(sobolstateSEXP);
    Rcpp::traits::input_parameter< int64_t >::type dimension(dimensionSEXP);
    Rcpp::traits::input_parameter< int64_t >::type num_generated(num_generatedSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__sobol_engine_ff__self_Tensor_n_int64_t_sobolstate_Tensor_dimension_int64_t_num_generated_int64_t(self, n, sobolstate, dimension, num_generated));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__sobol_engine_scramble__self_Tensor_ltm_Tensor_dimension_int64_t
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace__sobol_engine_scramble__self_Tensor_ltm_Tensor_dimension_int64_t(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> ltm, int64_t dimension);
RcppExport SEXP _torch_cpp_torch_namespace__sobol_engine_scramble__self_Tensor_ltm_Tensor_dimension_int64_t(SEXP selfSEXP, SEXP ltmSEXP, SEXP dimensionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type ltm(ltmSEXP);
    Rcpp::traits::input_parameter< int64_t >::type dimension(dimensionSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__sobol_engine_scramble__self_Tensor_ltm_Tensor_dimension_int64_t(self, ltm, dimension));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__sobol_engine_initialize_state__self_Tensor_dimension_int64_t
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace__sobol_engine_initialize_state__self_Tensor_dimension_int64_t(Rcpp::XPtr<torch::Tensor> self, int64_t dimension);
RcppExport SEXP _torch_cpp_torch_namespace__sobol_engine_initialize_state__self_Tensor_dimension_int64_t(SEXP selfSEXP, SEXP dimensionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< int64_t >::type dimension(dimensionSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__sobol_engine_initialize_state__self_Tensor_dimension_int64_t(self, dimension));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__reshape_from_tensor_self_Tensor_shape_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace__reshape_from_tensor_self_Tensor_shape_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> shape);
RcppExport SEXP _torch_cpp_torch_namespace__reshape_from_tensor_self_Tensor_shape_Tensor(SEXP selfSEXP, SEXP shapeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type shape(shapeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__reshape_from_tensor_self_Tensor_shape_Tensor(self, shape));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__shape_as_tensor_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace__shape_as_tensor_self_Tensor(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_namespace__shape_as_tensor_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__shape_as_tensor_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_dropout_input_Tensor_p_double_train_bool
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_dropout_input_Tensor_p_double_train_bool(Rcpp::XPtr<torch::Tensor> input, double p, bool train);
RcppExport SEXP _torch_cpp_torch_namespace_dropout_input_Tensor_p_double_train_bool(SEXP inputSEXP, SEXP pSEXP, SEXP trainSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type input(inputSEXP);
    Rcpp::traits::input_parameter< double >::type p(pSEXP);
    Rcpp::traits::input_parameter< bool >::type train(trainSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_dropout_input_Tensor_p_double_train_bool(input, p, train));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_dropout__self_Tensor_p_double_train_bool
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_dropout__self_Tensor_p_double_train_bool(Rcpp::XPtr<torch::Tensor> self, double p, bool train);
RcppExport SEXP _torch_cpp_torch_namespace_dropout__self_Tensor_p_double_train_bool(SEXP selfSEXP, SEXP pSEXP, SEXP trainSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< double >::type p(pSEXP);
    Rcpp::traits::input_parameter< bool >::type train(trainSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_dropout__self_Tensor_p_double_train_bool(self, p, train));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_feature_dropout_input_Tensor_p_double_train_bool
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_feature_dropout_input_Tensor_p_double_train_bool(Rcpp::XPtr<torch::Tensor> input, double p, bool train);
RcppExport SEXP _torch_cpp_torch_namespace_feature_dropout_input_Tensor_p_double_train_bool(SEXP inputSEXP, SEXP pSEXP, SEXP trainSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type input(inputSEXP);
    Rcpp::traits::input_parameter< double >::type p(pSEXP);
    Rcpp::traits::input_parameter< bool >::type train(trainSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_feature_dropout_input_Tensor_p_double_train_bool(input, p, train));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_feature_dropout__self_Tensor_p_double_train_bool
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_feature_dropout__self_Tensor_p_double_train_bool(Rcpp::XPtr<torch::Tensor> self, double p, bool train);
RcppExport SEXP _torch_cpp_torch_namespace_feature_dropout__self_Tensor_p_double_train_bool(SEXP selfSEXP, SEXP pSEXP, SEXP trainSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< double >::type p(pSEXP);
    Rcpp::traits::input_parameter< bool >::type train(trainSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_feature_dropout__self_Tensor_p_double_train_bool(self, p, train));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_alpha_dropout_input_Tensor_p_double_train_bool
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_alpha_dropout_input_Tensor_p_double_train_bool(Rcpp::XPtr<torch::Tensor> input, double p, bool train);
RcppExport SEXP _torch_cpp_torch_namespace_alpha_dropout_input_Tensor_p_double_train_bool(SEXP inputSEXP, SEXP pSEXP, SEXP trainSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type input(inputSEXP);
    Rcpp::traits::input_parameter< double >::type p(pSEXP);
    Rcpp::traits::input_parameter< bool >::type train(trainSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_alpha_dropout_input_Tensor_p_double_train_bool(input, p, train));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_alpha_dropout__self_Tensor_p_double_train_bool
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_alpha_dropout__self_Tensor_p_double_train_bool(Rcpp::XPtr<torch::Tensor> self, double p, bool train);
RcppExport SEXP _torch_cpp_torch_namespace_alpha_dropout__self_Tensor_p_double_train_bool(SEXP selfSEXP, SEXP pSEXP, SEXP trainSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< double >::type p(pSEXP);
    Rcpp::traits::input_parameter< bool >::type train(trainSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_alpha_dropout__self_Tensor_p_double_train_bool(self, p, train));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_feature_alpha_dropout_input_Tensor_p_double_train_bool
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_feature_alpha_dropout_input_Tensor_p_double_train_bool(Rcpp::XPtr<torch::Tensor> input, double p, bool train);
RcppExport SEXP _torch_cpp_torch_namespace_feature_alpha_dropout_input_Tensor_p_double_train_bool(SEXP inputSEXP, SEXP pSEXP, SEXP trainSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type input(inputSEXP);
    Rcpp::traits::input_parameter< double >::type p(pSEXP);
    Rcpp::traits::input_parameter< bool >::type train(trainSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_feature_alpha_dropout_input_Tensor_p_double_train_bool(input, p, train));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_feature_alpha_dropout__self_Tensor_p_double_train_bool
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_feature_alpha_dropout__self_Tensor_p_double_train_bool(Rcpp::XPtr<torch::Tensor> self, double p, bool train);
RcppExport SEXP _torch_cpp_torch_namespace_feature_alpha_dropout__self_Tensor_p_double_train_bool(SEXP selfSEXP, SEXP pSEXP, SEXP trainSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< double >::type p(pSEXP);
    Rcpp::traits::input_parameter< bool >::type train(trainSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_feature_alpha_dropout__self_Tensor_p_double_train_bool(self, p, train));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_abs_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_abs_self_Tensor(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_namespace_abs_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_abs_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_abs__self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_abs__self_Tensor(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_namespace_abs__self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_abs__self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_abs_out_out_Tensor_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_abs_out_out_Tensor_self_Tensor(Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_namespace_abs_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type out(outSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_abs_out_out_Tensor_self_Tensor(out, self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_angle_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_angle_self_Tensor(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_namespace_angle_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_angle_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_angle_out_out_Tensor_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_angle_out_out_Tensor_self_Tensor(Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_namespace_angle_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type out(outSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_angle_out_out_Tensor_self_Tensor(out, self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_real_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_real_self_Tensor(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_namespace_real_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_real_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_real_out_out_Tensor_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_real_out_out_Tensor_self_Tensor(Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_namespace_real_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type out(outSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_real_out_out_Tensor_self_Tensor(out, self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_imag_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_imag_self_Tensor(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_namespace_imag_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_imag_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_imag_out_out_Tensor_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_imag_out_out_Tensor_self_Tensor(Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_namespace_imag_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type out(outSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_imag_out_out_Tensor_self_Tensor(out, self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_conj_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_conj_self_Tensor(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_namespace_conj_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_conj_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_conj_out_out_Tensor_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_conj_out_out_Tensor_self_Tensor(Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_namespace_conj_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type out(outSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_conj_out_out_Tensor_self_Tensor(out, self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_acos_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_acos_self_Tensor(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_namespace_acos_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_acos_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_acos__self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_acos__self_Tensor(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_namespace_acos__self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_acos__self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_acos_out_out_Tensor_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_acos_out_out_Tensor_self_Tensor(Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_namespace_acos_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type out(outSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_acos_out_out_Tensor_self_Tensor(out, self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_avg_pool1d_self_Tensor_kernel_size_IntArrayRef
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_avg_pool1d_self_Tensor_kernel_size_IntArrayRef(Rcpp::XPtr<torch::Tensor> self, std::vector<int64_t> kernel_size, std::vector<int64_t> stride, std::vector<int64_t> padding, bool ceil_mode, bool count_include_pad);
RcppExport SEXP _torch_cpp_torch_namespace_avg_pool1d_self_Tensor_kernel_size_IntArrayRef(SEXP selfSEXP, SEXP kernel_sizeSEXP, SEXP strideSEXP, SEXP paddingSEXP, SEXP ceil_modeSEXP, SEXP count_include_padSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type kernel_size(kernel_sizeSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type stride(strideSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type padding(paddingSEXP);
    Rcpp::traits::input_parameter< bool >::type ceil_mode(ceil_modeSEXP);
    Rcpp::traits::input_parameter< bool >::type count_include_pad(count_include_padSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_avg_pool1d_self_Tensor_kernel_size_IntArrayRef(self, kernel_size, stride, padding, ceil_mode, count_include_pad));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_adaptive_avg_pool1d_self_Tensor_output_size_IntArrayRef
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_adaptive_avg_pool1d_self_Tensor_output_size_IntArrayRef(Rcpp::XPtr<torch::Tensor> self, std::vector<int64_t> output_size);
RcppExport SEXP _torch_cpp_torch_namespace_adaptive_avg_pool1d_self_Tensor_output_size_IntArrayRef(SEXP selfSEXP, SEXP output_sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type output_size(output_sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_adaptive_avg_pool1d_self_Tensor_output_size_IntArrayRef(self, output_size));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_adaptive_max_pool1d_self_Tensor_output_size_IntArrayRef
Rcpp::List cpp_torch_namespace_adaptive_max_pool1d_self_Tensor_output_size_IntArrayRef(Rcpp::XPtr<torch::Tensor> self, std::vector<int64_t> output_size);
RcppExport SEXP _torch_cpp_torch_namespace_adaptive_max_pool1d_self_Tensor_output_size_IntArrayRef(SEXP selfSEXP, SEXP output_sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type output_size(output_sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_adaptive_max_pool1d_self_Tensor_output_size_IntArrayRef(self, output_size));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_add_self_Tensor_other_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_add_self_Tensor_other_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> other, Rcpp::XPtr<torch::Scalar> alpha);
RcppExport SEXP _torch_cpp_torch_namespace_add_self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type other(otherSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_add_self_Tensor_other_Tensor(self, other, alpha));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_add_out_out_Tensor_self_Tensor_other_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_add_out_out_Tensor_self_Tensor_other_Tensor(Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> other, Rcpp::XPtr<torch::Scalar> alpha);
RcppExport SEXP _torch_cpp_torch_namespace_add_out_out_Tensor_self_Tensor_other_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP otherSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type out(outSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type other(otherSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_add_out_out_Tensor_self_Tensor_other_Tensor(out, self, other, alpha));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_add_self_Tensor_other_Scalar
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_add_self_Tensor_other_Scalar(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Scalar> other, Rcpp::XPtr<torch::Scalar> alpha);
RcppExport SEXP _torch_cpp_torch_namespace_add_self_Tensor_other_Scalar(SEXP selfSEXP, SEXP otherSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type other(otherSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_add_self_Tensor_other_Scalar(self, other, alpha));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_addmv_self_Tensor_mat_Tensor_vec_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_addmv_self_Tensor_mat_Tensor_vec_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> mat, Rcpp::XPtr<torch::Tensor> vec, Rcpp::XPtr<torch::Scalar> beta, Rcpp::XPtr<torch::Scalar> alpha);
RcppExport SEXP _torch_cpp_torch_namespace_addmv_self_Tensor_mat_Tensor_vec_Tensor(SEXP selfSEXP, SEXP matSEXP, SEXP vecSEXP, SEXP betaSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type mat(matSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type vec(vecSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_addmv_self_Tensor_mat_Tensor_vec_Tensor(self, mat, vec, beta, alpha));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_addmv__self_Tensor_mat_Tensor_vec_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_addmv__self_Tensor_mat_Tensor_vec_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> mat, Rcpp::XPtr<torch::Tensor> vec, Rcpp::XPtr<torch::Scalar> beta, Rcpp::XPtr<torch::Scalar> alpha);
RcppExport SEXP _torch_cpp_torch_namespace_addmv__self_Tensor_mat_Tensor_vec_Tensor(SEXP selfSEXP, SEXP matSEXP, SEXP vecSEXP, SEXP betaSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type mat(matSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type vec(vecSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_addmv__self_Tensor_mat_Tensor_vec_Tensor(self, mat, vec, beta, alpha));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_addmv_out_out_Tensor_self_Tensor_mat_Tensor_vec_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_addmv_out_out_Tensor_self_Tensor_mat_Tensor_vec_Tensor(Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> mat, Rcpp::XPtr<torch::Tensor> vec, Rcpp::XPtr<torch::Scalar> beta, Rcpp::XPtr<torch::Scalar> alpha);
RcppExport SEXP _torch_cpp_torch_namespace_addmv_out_out_Tensor_self_Tensor_mat_Tensor_vec_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP matSEXP, SEXP vecSEXP, SEXP betaSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type out(outSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type mat(matSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type vec(vecSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_addmv_out_out_Tensor_self_Tensor_mat_Tensor_vec_Tensor(out, self, mat, vec, beta, alpha));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_addr_self_Tensor_vec1_Tensor_vec2_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_addr_self_Tensor_vec1_Tensor_vec2_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> vec1, Rcpp::XPtr<torch::Tensor> vec2, Rcpp::XPtr<torch::Scalar> beta, Rcpp::XPtr<torch::Scalar> alpha);
RcppExport SEXP _torch_cpp_torch_namespace_addr_self_Tensor_vec1_Tensor_vec2_Tensor(SEXP selfSEXP, SEXP vec1SEXP, SEXP vec2SEXP, SEXP betaSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type vec1(vec1SEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type vec2(vec2SEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_addr_self_Tensor_vec1_Tensor_vec2_Tensor(self, vec1, vec2, beta, alpha));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_addr_out_out_Tensor_self_Tensor_vec1_Tensor_vec2_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_addr_out_out_Tensor_self_Tensor_vec1_Tensor_vec2_Tensor(Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> vec1, Rcpp::XPtr<torch::Tensor> vec2, Rcpp::XPtr<torch::Scalar> beta, Rcpp::XPtr<torch::Scalar> alpha);
RcppExport SEXP _torch_cpp_torch_namespace_addr_out_out_Tensor_self_Tensor_vec1_Tensor_vec2_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP vec1SEXP, SEXP vec2SEXP, SEXP betaSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type out(outSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type vec1(vec1SEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type vec2(vec2SEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_addr_out_out_Tensor_self_Tensor_vec1_Tensor_vec2_Tensor(out, self, vec1, vec2, beta, alpha));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_affine_grid_generator_theta_Tensor_size_IntArrayRef_align_corners_bool
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_affine_grid_generator_theta_Tensor_size_IntArrayRef_align_corners_bool(Rcpp::XPtr<torch::Tensor> theta, std::vector<int64_t> size, bool align_corners);
RcppExport SEXP _torch_cpp_torch_namespace_affine_grid_generator_theta_Tensor_size_IntArrayRef_align_corners_bool(SEXP thetaSEXP, SEXP sizeSEXP, SEXP align_cornersSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< bool >::type align_corners(align_cornersSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_affine_grid_generator_theta_Tensor_size_IntArrayRef_align_corners_bool(theta, size, align_corners));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_affine_grid_generator_backward_grad_Tensor_size_IntArrayRef_align_corners_bool
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_affine_grid_generator_backward_grad_Tensor_size_IntArrayRef_align_corners_bool(Rcpp::XPtr<torch::Tensor> grad, std::vector<int64_t> size, bool align_corners);
RcppExport SEXP _torch_cpp_torch_namespace_affine_grid_generator_backward_grad_Tensor_size_IntArrayRef_align_corners_bool(SEXP gradSEXP, SEXP sizeSEXP, SEXP align_cornersSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type grad(gradSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< bool >::type align_corners(align_cornersSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_affine_grid_generator_backward_grad_Tensor_size_IntArrayRef_align_corners_bool(grad, size, align_corners));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_all_self_Tensor_dim_int64_t
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_all_self_Tensor_dim_int64_t(Rcpp::XPtr<torch::Tensor> self, int64_t dim, bool keepdim);
RcppExport SEXP _torch_cpp_torch_namespace_all_self_Tensor_dim_int64_t(SEXP selfSEXP, SEXP dimSEXP, SEXP keepdimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< bool >::type keepdim(keepdimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_all_self_Tensor_dim_int64_t(self, dim, keepdim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_all_out_out_Tensor_self_Tensor_dim_int64_t
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_all_out_out_Tensor_self_Tensor_dim_int64_t(Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, int64_t dim, bool keepdim);
RcppExport SEXP _torch_cpp_torch_namespace_all_out_out_Tensor_self_Tensor_dim_int64_t(SEXP outSEXP, SEXP selfSEXP, SEXP dimSEXP, SEXP keepdimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type out(outSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< bool >::type keepdim(keepdimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_all_out_out_Tensor_self_Tensor_dim_int64_t(out, self, dim, keepdim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_all_self_Tensor_dim_Dimname
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_all_self_Tensor_dim_Dimname(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Dimname> dim, bool keepdim);
RcppExport SEXP _torch_cpp_torch_namespace_all_self_Tensor_dim_Dimname(SEXP selfSEXP, SEXP dimSEXP, SEXP keepdimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Dimname> >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< bool >::type keepdim(keepdimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_all_self_Tensor_dim_Dimname(self, dim, keepdim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_all_out_out_Tensor_self_Tensor_dim_Dimname
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_all_out_out_Tensor_self_Tensor_dim_Dimname(Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Dimname> dim, bool keepdim);
RcppExport SEXP _torch_cpp_torch_namespace_all_out_out_Tensor_self_Tensor_dim_Dimname(SEXP outSEXP, SEXP selfSEXP, SEXP dimSEXP, SEXP keepdimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type out(outSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Dimname> >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< bool >::type keepdim(keepdimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_all_out_out_Tensor_self_Tensor_dim_Dimname(out, self, dim, keepdim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_allclose_self_Tensor_other_Tensor
bool cpp_torch_namespace_allclose_self_Tensor_other_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> other, double rtol, double atol, bool equal_nan);
RcppExport SEXP _torch_cpp_torch_namespace_allclose_self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP, SEXP rtolSEXP, SEXP atolSEXP, SEXP equal_nanSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type other(otherSEXP);
    Rcpp::traits::input_parameter< double >::type rtol(rtolSEXP);
    Rcpp::traits::input_parameter< double >::type atol(atolSEXP);
    Rcpp::traits::input_parameter< bool >::type equal_nan(equal_nanSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_allclose_self_Tensor_other_Tensor(self, other, rtol, atol, equal_nan));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_any_self_Tensor_dim_int64_t
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_any_self_Tensor_dim_int64_t(Rcpp::XPtr<torch::Tensor> self, int64_t dim, bool keepdim);
RcppExport SEXP _torch_cpp_torch_namespace_any_self_Tensor_dim_int64_t(SEXP selfSEXP, SEXP dimSEXP, SEXP keepdimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< bool >::type keepdim(keepdimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_any_self_Tensor_dim_int64_t(self, dim, keepdim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_any_out_out_Tensor_self_Tensor_dim_int64_t
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_any_out_out_Tensor_self_Tensor_dim_int64_t(Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, int64_t dim, bool keepdim);
RcppExport SEXP _torch_cpp_torch_namespace_any_out_out_Tensor_self_Tensor_dim_int64_t(SEXP outSEXP, SEXP selfSEXP, SEXP dimSEXP, SEXP keepdimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type out(outSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< bool >::type keepdim(keepdimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_any_out_out_Tensor_self_Tensor_dim_int64_t(out, self, dim, keepdim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_any_self_Tensor_dim_Dimname
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_any_self_Tensor_dim_Dimname(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Dimname> dim, bool keepdim);
RcppExport SEXP _torch_cpp_torch_namespace_any_self_Tensor_dim_Dimname(SEXP selfSEXP, SEXP dimSEXP, SEXP keepdimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Dimname> >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< bool >::type keepdim(keepdimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_any_self_Tensor_dim_Dimname(self, dim, keepdim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_any_out_out_Tensor_self_Tensor_dim_Dimname
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_any_out_out_Tensor_self_Tensor_dim_Dimname(Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Dimname> dim, bool keepdim);
RcppExport SEXP _torch_cpp_torch_namespace_any_out_out_Tensor_self_Tensor_dim_Dimname(SEXP outSEXP, SEXP selfSEXP, SEXP dimSEXP, SEXP keepdimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type out(outSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Dimname> >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< bool >::type keepdim(keepdimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_any_out_out_Tensor_self_Tensor_dim_Dimname(out, self, dim, keepdim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_arange_end_Scalar
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_arange_end_Scalar(Rcpp::XPtr<torch::Scalar> end, Rcpp::XPtr<torch::TensorOptions> options);
RcppExport SEXP _torch_cpp_torch_namespace_arange_end_Scalar(SEXP endSEXP, SEXP optionsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type end(endSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::TensorOptions> >::type options(optionsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_arange_end_Scalar(end, options));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_arange_start_Scalar_end_Scalar
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_arange_start_Scalar_end_Scalar(Rcpp::XPtr<torch::Scalar> start, Rcpp::XPtr<torch::Scalar> end, Rcpp::XPtr<torch::TensorOptions> options);
RcppExport SEXP _torch_cpp_torch_namespace_arange_start_Scalar_end_Scalar(SEXP startSEXP, SEXP endSEXP, SEXP optionsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type start(startSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type end(endSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::TensorOptions> >::type options(optionsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_arange_start_Scalar_end_Scalar(start, end, options));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_arange_start_Scalar_end_Scalar_step_Scalar
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_arange_start_Scalar_end_Scalar_step_Scalar(Rcpp::XPtr<torch::Scalar> start, Rcpp::XPtr<torch::Scalar> end, Rcpp::XPtr<torch::Scalar> step, Rcpp::XPtr<torch::TensorOptions> options);
RcppExport SEXP _torch_cpp_torch_namespace_arange_start_Scalar_end_Scalar_step_Scalar(SEXP startSEXP, SEXP endSEXP, SEXP stepSEXP, SEXP optionsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type start(startSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type end(endSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type step(stepSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::TensorOptions> >::type options(optionsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_arange_start_Scalar_end_Scalar_step_Scalar(start, end, step, options));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_arange_out_out_Tensor_end_Scalar
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_arange_out_out_Tensor_end_Scalar(Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Scalar> end);
RcppExport SEXP _torch_cpp_torch_namespace_arange_out_out_Tensor_end_Scalar(SEXP outSEXP, SEXP endSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type out(outSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type end(endSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_arange_out_out_Tensor_end_Scalar(out, end));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_arange_out_out_Tensor_start_Scalar_end_Scalar
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_arange_out_out_Tensor_start_Scalar_end_Scalar(Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Scalar> start, Rcpp::XPtr<torch::Scalar> end, Rcpp::XPtr<torch::Scalar> step);
RcppExport SEXP _torch_cpp_torch_namespace_arange_out_out_Tensor_start_Scalar_end_Scalar(SEXP outSEXP, SEXP startSEXP, SEXP endSEXP, SEXP stepSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type out(outSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type start(startSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type end(endSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type step(stepSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_arange_out_out_Tensor_start_Scalar_end_Scalar(out, start, end, step));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__dim_arange_like_Tensor_dim_int64_t
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace__dim_arange_like_Tensor_dim_int64_t(Rcpp::XPtr<torch::Tensor> like, int64_t dim);
RcppExport SEXP _torch_cpp_torch_namespace__dim_arange_like_Tensor_dim_int64_t(SEXP likeSEXP, SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type like(likeSEXP);
    Rcpp::traits::input_parameter< int64_t >::type dim(dimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__dim_arange_like_Tensor_dim_int64_t(like, dim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_argmax_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_argmax_self_Tensor(Rcpp::XPtr<torch::Tensor> self, int64_t dim, bool keepdim);
RcppExport SEXP _torch_cpp_torch_namespace_argmax_self_Tensor(SEXP selfSEXP, SEXP dimSEXP, SEXP keepdimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< bool >::type keepdim(keepdimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_argmax_self_Tensor(self, dim, keepdim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_argmin_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_argmin_self_Tensor(Rcpp::XPtr<torch::Tensor> self, int64_t dim, bool keepdim);
RcppExport SEXP _torch_cpp_torch_namespace_argmin_self_Tensor(SEXP selfSEXP, SEXP dimSEXP, SEXP keepdimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< bool >::type keepdim(keepdimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_argmin_self_Tensor(self, dim, keepdim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_as_strided_self_Tensor_size_IntArrayRef_stride_IntArrayRef
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_as_strided_self_Tensor_size_IntArrayRef_stride_IntArrayRef(Rcpp::XPtr<torch::Tensor> self, std::vector<int64_t> size, std::vector<int64_t> stride, int64_t storage_offset);
RcppExport SEXP _torch_cpp_torch_namespace_as_strided_self_Tensor_size_IntArrayRef_stride_IntArrayRef(SEXP selfSEXP, SEXP sizeSEXP, SEXP strideSEXP, SEXP storage_offsetSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type stride(strideSEXP);
    Rcpp::traits::input_parameter< int64_t >::type storage_offset(storage_offsetSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_as_strided_self_Tensor_size_IntArrayRef_stride_IntArrayRef(self, size, stride, storage_offset));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_as_strided__self_Tensor_size_IntArrayRef_stride_IntArrayRef
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_as_strided__self_Tensor_size_IntArrayRef_stride_IntArrayRef(Rcpp::XPtr<torch::Tensor> self, std::vector<int64_t> size, std::vector<int64_t> stride, int64_t storage_offset);
RcppExport SEXP _torch_cpp_torch_namespace_as_strided__self_Tensor_size_IntArrayRef_stride_IntArrayRef(SEXP selfSEXP, SEXP sizeSEXP, SEXP strideSEXP, SEXP storage_offsetSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type stride(strideSEXP);
    Rcpp::traits::input_parameter< int64_t >::type storage_offset(storage_offsetSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_as_strided__self_Tensor_size_IntArrayRef_stride_IntArrayRef(self, size, stride, storage_offset));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_asin_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_asin_self_Tensor(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_namespace_asin_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_asin_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_asin__self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_asin__self_Tensor(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_namespace_asin__self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_asin__self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_asin_out_out_Tensor_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_asin_out_out_Tensor_self_Tensor(Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_namespace_asin_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type out(outSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_asin_out_out_Tensor_self_Tensor(out, self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_atan_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_atan_self_Tensor(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_namespace_atan_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_atan_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_atan__self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_atan__self_Tensor(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_namespace_atan__self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_atan__self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_atan_out_out_Tensor_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_atan_out_out_Tensor_self_Tensor(Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_namespace_atan_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type out(outSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_atan_out_out_Tensor_self_Tensor(out, self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_baddbmm_self_Tensor_batch1_Tensor_batch2_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_baddbmm_self_Tensor_batch1_Tensor_batch2_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> batch1, Rcpp::XPtr<torch::Tensor> batch2, Rcpp::XPtr<torch::Scalar> beta, Rcpp::XPtr<torch::Scalar> alpha);
RcppExport SEXP _torch_cpp_torch_namespace_baddbmm_self_Tensor_batch1_Tensor_batch2_Tensor(SEXP selfSEXP, SEXP batch1SEXP, SEXP batch2SEXP, SEXP betaSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type batch1(batch1SEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type batch2(batch2SEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_baddbmm_self_Tensor_batch1_Tensor_batch2_Tensor(self, batch1, batch2, beta, alpha));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__baddbmm_mkl__self_Tensor_batch1_Tensor_batch2_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace__baddbmm_mkl__self_Tensor_batch1_Tensor_batch2_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> batch1, Rcpp::XPtr<torch::Tensor> batch2, Rcpp::XPtr<torch::Scalar> beta, Rcpp::XPtr<torch::Scalar> alpha);
RcppExport SEXP _torch_cpp_torch_namespace__baddbmm_mkl__self_Tensor_batch1_Tensor_batch2_Tensor(SEXP selfSEXP, SEXP batch1SEXP, SEXP batch2SEXP, SEXP betaSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type batch1(batch1SEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type batch2(batch2SEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__baddbmm_mkl__self_Tensor_batch1_Tensor_batch2_Tensor(self, batch1, batch2, beta, alpha));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_baddbmm_out_out_Tensor_self_Tensor_batch1_Tensor_batch2_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_baddbmm_out_out_Tensor_self_Tensor_batch1_Tensor_batch2_Tensor(Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> batch1, Rcpp::XPtr<torch::Tensor> batch2, Rcpp::XPtr<torch::Scalar> beta, Rcpp::XPtr<torch::Scalar> alpha);
RcppExport SEXP _torch_cpp_torch_namespace_baddbmm_out_out_Tensor_self_Tensor_batch1_Tensor_batch2_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP batch1SEXP, SEXP batch2SEXP, SEXP betaSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type out(outSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type batch1(batch1SEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type batch2(batch2SEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_baddbmm_out_out_Tensor_self_Tensor_batch1_Tensor_batch2_Tensor(out, self, batch1, batch2, beta, alpha));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_bartlett_window_window_length_int64_t
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_bartlett_window_window_length_int64_t(int64_t window_length, Rcpp::XPtr<torch::TensorOptions> options);
RcppExport SEXP _torch_cpp_torch_namespace_bartlett_window_window_length_int64_t(SEXP window_lengthSEXP, SEXP optionsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int64_t >::type window_length(window_lengthSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::TensorOptions> >::type options(optionsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_bartlett_window_window_length_int64_t(window_length, options));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_bartlett_window_window_length_int64_t_periodic_bool
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_bartlett_window_window_length_int64_t_periodic_bool(int64_t window_length, bool periodic, Rcpp::XPtr<torch::TensorOptions> options);
RcppExport SEXP _torch_cpp_torch_namespace_bartlett_window_window_length_int64_t_periodic_bool(SEXP window_lengthSEXP, SEXP periodicSEXP, SEXP optionsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int64_t >::type window_length(window_lengthSEXP);
    Rcpp::traits::input_parameter< bool >::type periodic(periodicSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::TensorOptions> >::type options(optionsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_bartlett_window_window_length_int64_t_periodic_bool(window_length, periodic, options));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_batch_norm_input_Tensor_weight_Tensor_bias_Tensor_running_mean_Tensor_running_var_Tensor_training_bool_momentum_double_eps_double_cudnn_enabled_bool
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_batch_norm_input_Tensor_weight_Tensor_bias_Tensor_running_mean_Tensor_running_var_Tensor_training_bool_momentum_double_eps_double_cudnn_enabled_bool(Rcpp::XPtr<torch::Tensor> input, Rcpp::XPtr<torch::Tensor> weight, Rcpp::XPtr<torch::Tensor> bias, Rcpp::XPtr<torch::Tensor> running_mean, Rcpp::XPtr<torch::Tensor> running_var, bool training, double momentum, double eps, bool cudnn_enabled);
RcppExport SEXP _torch_cpp_torch_namespace_batch_norm_input_Tensor_weight_Tensor_bias_Tensor_running_mean_Tensor_running_var_Tensor_training_bool_momentum_double_eps_double_cudnn_enabled_bool(SEXP inputSEXP, SEXP weightSEXP, SEXP biasSEXP, SEXP running_meanSEXP, SEXP running_varSEXP, SEXP trainingSEXP, SEXP momentumSEXP, SEXP epsSEXP, SEXP cudnn_enabledSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type input(inputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type bias(biasSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type running_mean(running_meanSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type running_var(running_varSEXP);
    Rcpp::traits::input_parameter< bool >::type training(trainingSEXP);
    Rcpp::traits::input_parameter< double >::type momentum(momentumSEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< bool >::type cudnn_enabled(cudnn_enabledSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_batch_norm_input_Tensor_weight_Tensor_bias_Tensor_running_mean_Tensor_running_var_Tensor_training_bool_momentum_double_eps_double_cudnn_enabled_bool(input, weight, bias, running_mean, running_var, training, momentum, eps, cudnn_enabled));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__batch_norm_impl_index_input_Tensor_weight_Tensor_bias_Tensor_running_mean_Tensor_running_var_Tensor_training_bool_momentum_double_eps_double_cudnn_enabled_bool
Rcpp::List cpp_torch_namespace__batch_norm_impl_index_input_Tensor_weight_Tensor_bias_Tensor_running_mean_Tensor_running_var_Tensor_training_bool_momentum_double_eps_double_cudnn_enabled_bool(Rcpp::XPtr<torch::Tensor> input, Rcpp::XPtr<torch::Tensor> weight, Rcpp::XPtr<torch::Tensor> bias, Rcpp::XPtr<torch::Tensor> running_mean, Rcpp::XPtr<torch::Tensor> running_var, bool training, double momentum, double eps, bool cudnn_enabled);
RcppExport SEXP _torch_cpp_torch_namespace__batch_norm_impl_index_input_Tensor_weight_Tensor_bias_Tensor_running_mean_Tensor_running_var_Tensor_training_bool_momentum_double_eps_double_cudnn_enabled_bool(SEXP inputSEXP, SEXP weightSEXP, SEXP biasSEXP, SEXP running_meanSEXP, SEXP running_varSEXP, SEXP trainingSEXP, SEXP momentumSEXP, SEXP epsSEXP, SEXP cudnn_enabledSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type input(inputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type bias(biasSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type running_mean(running_meanSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type running_var(running_varSEXP);
    Rcpp::traits::input_parameter< bool >::type training(trainingSEXP);
    Rcpp::traits::input_parameter< double >::type momentum(momentumSEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< bool >::type cudnn_enabled(cudnn_enabledSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__batch_norm_impl_index_input_Tensor_weight_Tensor_bias_Tensor_running_mean_Tensor_running_var_Tensor_training_bool_momentum_double_eps_double_cudnn_enabled_bool(input, weight, bias, running_mean, running_var, training, momentum, eps, cudnn_enabled));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__batch_norm_impl_index_backward_impl_index_int64_t_input_Tensor_grad_output_Tensor_weight_Tensor_running_mean_Tensor_running_var_Tensor_save_mean_Tensor_save_var_transform_Tensor_train_bool_eps_double_output_mask_stdarraybool3_reservedSpace_Tensor
Rcpp::List cpp_torch_namespace__batch_norm_impl_index_backward_impl_index_int64_t_input_Tensor_grad_output_Tensor_weight_Tensor_running_mean_Tensor_running_var_Tensor_save_mean_Tensor_save_var_transform_Tensor_train_bool_eps_double_output_mask_stdarraybool3_reservedSpace_Tensor(int64_t impl_index, Rcpp::XPtr<torch::Tensor> input, Rcpp::XPtr<torch::Tensor> grad_output, Rcpp::XPtr<torch::Tensor> weight, Rcpp::XPtr<torch::Tensor> running_mean, Rcpp::XPtr<torch::Tensor> running_var, Rcpp::XPtr<torch::Tensor> save_mean, Rcpp::XPtr<torch::Tensor> save_var_transform, bool train, double eps, std::vector<bool> output_mask, Rcpp::XPtr<torch::Tensor> reservedSpace);
RcppExport SEXP _torch_cpp_torch_namespace__batch_norm_impl_index_backward_impl_index_int64_t_input_Tensor_grad_output_Tensor_weight_Tensor_running_mean_Tensor_running_var_Tensor_save_mean_Tensor_save_var_transform_Tensor_train_bool_eps_double_output_mask_stdarraybool3_reservedSpace_Tensor(SEXP impl_indexSEXP, SEXP inputSEXP, SEXP grad_outputSEXP, SEXP weightSEXP, SEXP running_meanSEXP, SEXP running_varSEXP, SEXP save_meanSEXP, SEXP save_var_transformSEXP, SEXP trainSEXP, SEXP epsSEXP, SEXP output_maskSEXP, SEXP reservedSpaceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int64_t >::type impl_index(impl_indexSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type input(inputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type running_mean(running_meanSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type running_var(running_varSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type save_mean(save_meanSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type save_var_transform(save_var_transformSEXP);
    Rcpp::traits::input_parameter< bool >::type train(trainSEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< std::vector<bool> >::type output_mask(output_maskSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type reservedSpace(reservedSpaceSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__batch_norm_impl_index_backward_impl_index_int64_t_input_Tensor_grad_output_Tensor_weight_Tensor_running_mean_Tensor_running_var_Tensor_save_mean_Tensor_save_var_transform_Tensor_train_bool_eps_double_output_mask_stdarraybool3_reservedSpace_Tensor(impl_index, input, grad_output, weight, running_mean, running_var, save_mean, save_var_transform, train, eps, output_mask, reservedSpace));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_bernoulli_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_bernoulli_self_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Generator *> generator);
RcppExport SEXP _torch_cpp_torch_namespace_bernoulli_self_Tensor(SEXP selfSEXP, SEXP generatorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Generator *> >::type generator(generatorSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_bernoulli_self_Tensor(self, generator));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_bernoulli_out_out_Tensor_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_bernoulli_out_out_Tensor_self_Tensor(Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Generator *> generator);
RcppExport SEXP _torch_cpp_torch_namespace_bernoulli_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP generatorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type out(outSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Generator *> >::type generator(generatorSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_bernoulli_out_out_Tensor_self_Tensor(out, self, generator));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_bernoulli_self_Tensor_p_double
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_bernoulli_self_Tensor_p_double(Rcpp::XPtr<torch::Tensor> self, double p, Rcpp::XPtr<torch::Generator *> generator);
RcppExport SEXP _torch_cpp_torch_namespace_bernoulli_self_Tensor_p_double(SEXP selfSEXP, SEXP pSEXP, SEXP generatorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< double >::type p(pSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Generator *> >::type generator(generatorSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_bernoulli_self_Tensor_p_double(self, p, generator));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_bilinear_input1_Tensor_input2_Tensor_weight_Tensor_bias_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_bilinear_input1_Tensor_input2_Tensor_weight_Tensor_bias_Tensor(Rcpp::XPtr<torch::Tensor> input1, Rcpp::XPtr<torch::Tensor> input2, Rcpp::XPtr<torch::Tensor> weight, Rcpp::XPtr<torch::Tensor> bias);
RcppExport SEXP _torch_cpp_torch_namespace_bilinear_input1_Tensor_input2_Tensor_weight_Tensor_bias_Tensor(SEXP input1SEXP, SEXP input2SEXP, SEXP weightSEXP, SEXP biasSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type input1(input1SEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type input2(input2SEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type bias(biasSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_bilinear_input1_Tensor_input2_Tensor_weight_Tensor_bias_Tensor(input1, input2, weight, bias));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_binary_cross_entropy_with_logits_self_Tensor_target_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_binary_cross_entropy_with_logits_self_Tensor_target_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> target, Rcpp::XPtr<torch::Tensor> weight, Rcpp::XPtr<torch::Tensor> pos_weight, int64_t reduction);
RcppExport SEXP _torch_cpp_torch_namespace_binary_cross_entropy_with_logits_self_Tensor_target_Tensor(SEXP selfSEXP, SEXP targetSEXP, SEXP weightSEXP, SEXP pos_weightSEXP, SEXP reductionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type target(targetSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type pos_weight(pos_weightSEXP);
    Rcpp::traits::input_parameter< int64_t >::type reduction(reductionSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_binary_cross_entropy_with_logits_self_Tensor_target_Tensor(self, target, weight, pos_weight, reduction));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_binary_cross_entropy_with_logits_backward_grad_output_Tensor_self_Tensor_target_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_binary_cross_entropy_with_logits_backward_grad_output_Tensor_self_Tensor_target_Tensor(Rcpp::XPtr<torch::Tensor> grad_output, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> target, Rcpp::XPtr<torch::Tensor> weight, Rcpp::XPtr<torch::Tensor> pos_weight, int64_t reduction);
RcppExport SEXP _torch_cpp_torch_namespace_binary_cross_entropy_with_logits_backward_grad_output_Tensor_self_Tensor_target_Tensor(SEXP grad_outputSEXP, SEXP selfSEXP, SEXP targetSEXP, SEXP weightSEXP, SEXP pos_weightSEXP, SEXP reductionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type target(targetSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type pos_weight(pos_weightSEXP);
    Rcpp::traits::input_parameter< int64_t >::type reduction(reductionSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_binary_cross_entropy_with_logits_backward_grad_output_Tensor_self_Tensor_target_Tensor(grad_output, self, target, weight, pos_weight, reduction));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_bincount_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_bincount_self_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> weights, int64_t minlength);
RcppExport SEXP _torch_cpp_torch_namespace_bincount_self_Tensor(SEXP selfSEXP, SEXP weightsSEXP, SEXP minlengthSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< int64_t >::type minlength(minlengthSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_bincount_self_Tensor(self, weights, minlength));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_bitwise_not_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_bitwise_not_self_Tensor(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_namespace_bitwise_not_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_bitwise_not_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_bitwise_not_out_out_Tensor_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_bitwise_not_out_out_Tensor_self_Tensor(Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_namespace_bitwise_not_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type out(outSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_bitwise_not_out_out_Tensor_self_Tensor(out, self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_logical_not_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_logical_not_self_Tensor(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_namespace_logical_not_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_logical_not_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_logical_not_out_out_Tensor_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_logical_not_out_out_Tensor_self_Tensor(Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_namespace_logical_not_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type out(outSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_logical_not_out_out_Tensor_self_Tensor(out, self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_logical_xor_self_Tensor_other_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_logical_xor_self_Tensor_other_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> other);
RcppExport SEXP _torch_cpp_torch_namespace_logical_xor_self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_logical_xor_self_Tensor_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_logical_xor_out_out_Tensor_self_Tensor_other_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_logical_xor_out_out_Tensor_self_Tensor_other_Tensor(Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> other);
RcppExport SEXP _torch_cpp_torch_namespace_logical_xor_out_out_Tensor_self_Tensor_other_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type out(outSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_logical_xor_out_out_Tensor_self_Tensor_other_Tensor(out, self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_blackman_window_window_length_int64_t
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_blackman_window_window_length_int64_t(int64_t window_length, Rcpp::XPtr<torch::TensorOptions> options);
RcppExport SEXP _torch_cpp_torch_namespace_blackman_window_window_length_int64_t(SEXP window_lengthSEXP, SEXP optionsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int64_t >::type window_length(window_lengthSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::TensorOptions> >::type options(optionsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_blackman_window_window_length_int64_t(window_length, options));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_blackman_window_window_length_int64_t_periodic_bool
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_blackman_window_window_length_int64_t_periodic_bool(int64_t window_length, bool periodic, Rcpp::XPtr<torch::TensorOptions> options);
RcppExport SEXP _torch_cpp_torch_namespace_blackman_window_window_length_int64_t_periodic_bool(SEXP window_lengthSEXP, SEXP periodicSEXP, SEXP optionsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int64_t >::type window_length(window_lengthSEXP);
    Rcpp::traits::input_parameter< bool >::type periodic(periodicSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::TensorOptions> >::type options(optionsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_blackman_window_window_length_int64_t_periodic_bool(window_length, periodic, options));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_bmm_self_Tensor_mat2_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_bmm_self_Tensor_mat2_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> mat2);
RcppExport SEXP _torch_cpp_torch_namespace_bmm_self_Tensor_mat2_Tensor(SEXP selfSEXP, SEXP mat2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type mat2(mat2SEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_bmm_self_Tensor_mat2_Tensor(self, mat2));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_bmm_out_out_Tensor_self_Tensor_mat2_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_bmm_out_out_Tensor_self_Tensor_mat2_Tensor(Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> mat2);
RcppExport SEXP _torch_cpp_torch_namespace_bmm_out_out_Tensor_self_Tensor_mat2_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP mat2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type out(outSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type mat2(mat2SEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_bmm_out_out_Tensor_self_Tensor_mat2_Tensor(out, self, mat2));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_broadcast_tensors_tensors_TensorList
Rcpp::XPtr<torch::TensorList> cpp_torch_namespace_broadcast_tensors_tensors_TensorList(Rcpp::XPtr<std::vector<torch::Tensor>> tensors);
RcppExport SEXP _torch_cpp_torch_namespace_broadcast_tensors_tensors_TensorList(SEXP tensorsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::vector<torch::Tensor>> >::type tensors(tensorsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_broadcast_tensors_tensors_TensorList(tensors));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_cat_tensors_TensorList
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_cat_tensors_TensorList(Rcpp::XPtr<std::vector<torch::Tensor>> tensors, int64_t dim);
RcppExport SEXP _torch_cpp_torch_namespace_cat_tensors_TensorList(SEXP tensorsSEXP, SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::vector<torch::Tensor>> >::type tensors(tensorsSEXP);
    Rcpp::traits::input_parameter< int64_t >::type dim(dimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_cat_tensors_TensorList(tensors, dim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_cat_out_out_Tensor_tensors_TensorList
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_cat_out_out_Tensor_tensors_TensorList(Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<std::vector<torch::Tensor>> tensors, int64_t dim);
RcppExport SEXP _torch_cpp_torch_namespace_cat_out_out_Tensor_tensors_TensorList(SEXP outSEXP, SEXP tensorsSEXP, SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type out(outSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::vector<torch::Tensor>> >::type tensors(tensorsSEXP);
    Rcpp::traits::input_parameter< int64_t >::type dim(dimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_cat_out_out_Tensor_tensors_TensorList(out, tensors, dim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_cat_tensors_TensorList_dim_Dimname
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_cat_tensors_TensorList_dim_Dimname(Rcpp::XPtr<std::vector<torch::Tensor>> tensors, Rcpp::XPtr<torch::Dimname> dim);
RcppExport SEXP _torch_cpp_torch_namespace_cat_tensors_TensorList_dim_Dimname(SEXP tensorsSEXP, SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::vector<torch::Tensor>> >::type tensors(tensorsSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Dimname> >::type dim(dimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_cat_tensors_TensorList_dim_Dimname(tensors, dim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_cat_out_out_Tensor_tensors_TensorList_dim_Dimname
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_cat_out_out_Tensor_tensors_TensorList_dim_Dimname(Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<std::vector<torch::Tensor>> tensors, Rcpp::XPtr<torch::Dimname> dim);
RcppExport SEXP _torch_cpp_torch_namespace_cat_out_out_Tensor_tensors_TensorList_dim_Dimname(SEXP outSEXP, SEXP tensorsSEXP, SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type out(outSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::vector<torch::Tensor>> >::type tensors(tensorsSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Dimname> >::type dim(dimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_cat_out_out_Tensor_tensors_TensorList_dim_Dimname(out, tensors, dim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_ceil_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_ceil_self_Tensor(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_namespace_ceil_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_ceil_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_ceil__self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_ceil__self_Tensor(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_namespace_ceil__self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_ceil__self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_ceil_out_out_Tensor_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_ceil_out_out_Tensor_self_Tensor(Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_namespace_ceil_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type out(outSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_ceil_out_out_Tensor_self_Tensor(out, self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_chain_matmul_matrices_TensorList
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_chain_matmul_matrices_TensorList(Rcpp::XPtr<std::vector<torch::Tensor>> matrices);
RcppExport SEXP _torch_cpp_torch_namespace_chain_matmul_matrices_TensorList(SEXP matricesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::vector<torch::Tensor>> >::type matrices(matricesSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_chain_matmul_matrices_TensorList(matrices));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_chunk_self_Tensor_chunks_int64_t
Rcpp::XPtr<torch::TensorList> cpp_torch_namespace_chunk_self_Tensor_chunks_int64_t(Rcpp::XPtr<torch::Tensor> self, int64_t chunks, int64_t dim);
RcppExport SEXP _torch_cpp_torch_namespace_chunk_self_Tensor_chunks_int64_t(SEXP selfSEXP, SEXP chunksSEXP, SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< int64_t >::type chunks(chunksSEXP);
    Rcpp::traits::input_parameter< int64_t >::type dim(dimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_chunk_self_Tensor_chunks_int64_t(self, chunks, dim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_clamp_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_clamp_self_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Scalar> min, Rcpp::XPtr<torch::Scalar> max);
RcppExport SEXP _torch_cpp_torch_namespace_clamp_self_Tensor(SEXP selfSEXP, SEXP minSEXP, SEXP maxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type min(minSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type max(maxSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_clamp_self_Tensor(self, min, max));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_clamp__self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_clamp__self_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Scalar> min, Rcpp::XPtr<torch::Scalar> max);
RcppExport SEXP _torch_cpp_torch_namespace_clamp__self_Tensor(SEXP selfSEXP, SEXP minSEXP, SEXP maxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type min(minSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type max(maxSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_clamp__self_Tensor(self, min, max));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_clamp_out_out_Tensor_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_clamp_out_out_Tensor_self_Tensor(Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Scalar> min, Rcpp::XPtr<torch::Scalar> max);
RcppExport SEXP _torch_cpp_torch_namespace_clamp_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP minSEXP, SEXP maxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type out(outSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type min(minSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type max(maxSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_clamp_out_out_Tensor_self_Tensor(out, self, min, max));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_clamp_max_self_Tensor_max_Scalar
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_clamp_max_self_Tensor_max_Scalar(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Scalar> max);
RcppExport SEXP _torch_cpp_torch_namespace_clamp_max_self_Tensor_max_Scalar(SEXP selfSEXP, SEXP maxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type max(maxSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_clamp_max_self_Tensor_max_Scalar(self, max));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_clamp_max__self_Tensor_max_Scalar
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_clamp_max__self_Tensor_max_Scalar(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Scalar> max);
RcppExport SEXP _torch_cpp_torch_namespace_clamp_max__self_Tensor_max_Scalar(SEXP selfSEXP, SEXP maxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type max(maxSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_clamp_max__self_Tensor_max_Scalar(self, max));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_clamp_max_out_out_Tensor_self_Tensor_max_Scalar
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_clamp_max_out_out_Tensor_self_Tensor_max_Scalar(Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Scalar> max);
RcppExport SEXP _torch_cpp_torch_namespace_clamp_max_out_out_Tensor_self_Tensor_max_Scalar(SEXP outSEXP, SEXP selfSEXP, SEXP maxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type out(outSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type max(maxSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_clamp_max_out_out_Tensor_self_Tensor_max_Scalar(out, self, max));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_clamp_min_self_Tensor_min_Scalar
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_clamp_min_self_Tensor_min_Scalar(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Scalar> min);
RcppExport SEXP _torch_cpp_torch_namespace_clamp_min_self_Tensor_min_Scalar(SEXP selfSEXP, SEXP minSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type min(minSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_clamp_min_self_Tensor_min_Scalar(self, min));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_clamp_min__self_Tensor_min_Scalar
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_clamp_min__self_Tensor_min_Scalar(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Scalar> min);
RcppExport SEXP _torch_cpp_torch_namespace_clamp_min__self_Tensor_min_Scalar(SEXP selfSEXP, SEXP minSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type min(minSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_clamp_min__self_Tensor_min_Scalar(self, min));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_clamp_min_out_out_Tensor_self_Tensor_min_Scalar
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_clamp_min_out_out_Tensor_self_Tensor_min_Scalar(Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Scalar> min);
RcppExport SEXP _torch_cpp_torch_namespace_clamp_min_out_out_Tensor_self_Tensor_min_Scalar(SEXP outSEXP, SEXP selfSEXP, SEXP minSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type out(outSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type min(minSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_clamp_min_out_out_Tensor_self_Tensor_min_Scalar(out, self, min));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_cudnn_is_acceptable_self_Tensor
bool cpp_torch_namespace_cudnn_is_acceptable_self_Tensor(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_namespace_cudnn_is_acceptable_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_cudnn_is_acceptable_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_constant_pad_nd_self_Tensor_pad_IntArrayRef
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_constant_pad_nd_self_Tensor_pad_IntArrayRef(Rcpp::XPtr<torch::Tensor> self, std::vector<int64_t> pad, Rcpp::XPtr<torch::Scalar> value);
RcppExport SEXP _torch_cpp_torch_namespace_constant_pad_nd_self_Tensor_pad_IntArrayRef(SEXP selfSEXP, SEXP padSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type pad(padSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_constant_pad_nd_self_Tensor_pad_IntArrayRef(self, pad, value));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_convolution_input_Tensor_weight_Tensor_bias_Tensor_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef_transposed_bool_output_padding_IntArrayRef_groups_int64_t
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_convolution_input_Tensor_weight_Tensor_bias_Tensor_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef_transposed_bool_output_padding_IntArrayRef_groups_int64_t(Rcpp::XPtr<torch::Tensor> input, Rcpp::XPtr<torch::Tensor> weight, Rcpp::XPtr<torch::Tensor> bias, std::vector<int64_t> stride, std::vector<int64_t> padding, std::vector<int64_t> dilation, bool transposed, std::vector<int64_t> output_padding, int64_t groups);
RcppExport SEXP _torch_cpp_torch_namespace_convolution_input_Tensor_weight_Tensor_bias_Tensor_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef_transposed_bool_output_padding_IntArrayRef_groups_int64_t(SEXP inputSEXP, SEXP weightSEXP, SEXP biasSEXP, SEXP strideSEXP, SEXP paddingSEXP, SEXP dilationSEXP, SEXP transposedSEXP, SEXP output_paddingSEXP, SEXP groupsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type input(inputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type bias(biasSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type stride(strideSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type padding(paddingSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type dilation(dilationSEXP);
    Rcpp::traits::input_parameter< bool >::type transposed(transposedSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type output_padding(output_paddingSEXP);
    Rcpp::traits::input_parameter< int64_t >::type groups(groupsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_convolution_input_Tensor_weight_Tensor_bias_Tensor_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef_transposed_bool_output_padding_IntArrayRef_groups_int64_t(input, weight, bias, stride, padding, dilation, transposed, output_padding, groups));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_convolution_overrideable_input_Tensor_weight_Tensor_bias_Tensor_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef_transposed_bool_output_padding_IntArrayRef_groups_int64_t
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_convolution_overrideable_input_Tensor_weight_Tensor_bias_Tensor_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef_transposed_bool_output_padding_IntArrayRef_groups_int64_t(Rcpp::XPtr<torch::Tensor> input, Rcpp::XPtr<torch::Tensor> weight, Rcpp::XPtr<torch::Tensor> bias, std::vector<int64_t> stride, std::vector<int64_t> padding, std::vector<int64_t> dilation, bool transposed, std::vector<int64_t> output_padding, int64_t groups);
RcppExport SEXP _torch_cpp_torch_namespace_convolution_overrideable_input_Tensor_weight_Tensor_bias_Tensor_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef_transposed_bool_output_padding_IntArrayRef_groups_int64_t(SEXP inputSEXP, SEXP weightSEXP, SEXP biasSEXP, SEXP strideSEXP, SEXP paddingSEXP, SEXP dilationSEXP, SEXP transposedSEXP, SEXP output_paddingSEXP, SEXP groupsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type input(inputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type bias(biasSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type stride(strideSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type padding(paddingSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type dilation(dilationSEXP);
    Rcpp::traits::input_parameter< bool >::type transposed(transposedSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type output_padding(output_paddingSEXP);
    Rcpp::traits::input_parameter< int64_t >::type groups(groupsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_convolution_overrideable_input_Tensor_weight_Tensor_bias_Tensor_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef_transposed_bool_output_padding_IntArrayRef_groups_int64_t(input, weight, bias, stride, padding, dilation, transposed, output_padding, groups));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_convolution_backward_overrideable_grad_output_Tensor_input_Tensor_weight_Tensor_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef_transposed_bool_output_padding_IntArrayRef_groups_int64_t_output_mask_stdarraybool3
Rcpp::List cpp_torch_namespace_convolution_backward_overrideable_grad_output_Tensor_input_Tensor_weight_Tensor_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef_transposed_bool_output_padding_IntArrayRef_groups_int64_t_output_mask_stdarraybool3(Rcpp::XPtr<torch::Tensor> grad_output, Rcpp::XPtr<torch::Tensor> input, Rcpp::XPtr<torch::Tensor> weight, std::vector<int64_t> stride, std::vector<int64_t> padding, std::vector<int64_t> dilation, bool transposed, std::vector<int64_t> output_padding, int64_t groups, std::vector<bool> output_mask);
RcppExport SEXP _torch_cpp_torch_namespace_convolution_backward_overrideable_grad_output_Tensor_input_Tensor_weight_Tensor_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef_transposed_bool_output_padding_IntArrayRef_groups_int64_t_output_mask_stdarraybool3(SEXP grad_outputSEXP, SEXP inputSEXP, SEXP weightSEXP, SEXP strideSEXP, SEXP paddingSEXP, SEXP dilationSEXP, SEXP transposedSEXP, SEXP output_paddingSEXP, SEXP groupsSEXP, SEXP output_maskSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type input(inputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type stride(strideSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type padding(paddingSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type dilation(dilationSEXP);
    Rcpp::traits::input_parameter< bool >::type transposed(transposedSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type output_padding(output_paddingSEXP);
    Rcpp::traits::input_parameter< int64_t >::type groups(groupsSEXP);
    Rcpp::traits::input_parameter< std::vector<bool> >::type output_mask(output_maskSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_convolution_backward_overrideable_grad_output_Tensor_input_Tensor_weight_Tensor_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef_transposed_bool_output_padding_IntArrayRef_groups_int64_t_output_mask_stdarraybool3(grad_output, input, weight, stride, padding, dilation, transposed, output_padding, groups, output_mask));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__convolution_input_Tensor_weight_Tensor_bias_Tensor_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef_transposed_bool_output_padding_IntArrayRef_groups_int64_t_benchmark_bool_deterministic_bool_cudnn_enabled_bool
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace__convolution_input_Tensor_weight_Tensor_bias_Tensor_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef_transposed_bool_output_padding_IntArrayRef_groups_int64_t_benchmark_bool_deterministic_bool_cudnn_enabled_bool(Rcpp::XPtr<torch::Tensor> input, Rcpp::XPtr<torch::Tensor> weight, Rcpp::XPtr<torch::Tensor> bias, std::vector<int64_t> stride, std::vector<int64_t> padding, std::vector<int64_t> dilation, bool transposed, std::vector<int64_t> output_padding, int64_t groups, bool benchmark, bool deterministic, bool cudnn_enabled);
RcppExport SEXP _torch_cpp_torch_namespace__convolution_input_Tensor_weight_Tensor_bias_Tensor_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef_transposed_bool_output_padding_IntArrayRef_groups_int64_t_benchmark_bool_deterministic_bool_cudnn_enabled_bool(SEXP inputSEXP, SEXP weightSEXP, SEXP biasSEXP, SEXP strideSEXP, SEXP paddingSEXP, SEXP dilationSEXP, SEXP transposedSEXP, SEXP output_paddingSEXP, SEXP groupsSEXP, SEXP benchmarkSEXP, SEXP deterministicSEXP, SEXP cudnn_enabledSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type input(inputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type bias(biasSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type stride(strideSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type padding(paddingSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type dilation(dilationSEXP);
    Rcpp::traits::input_parameter< bool >::type transposed(transposedSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type output_padding(output_paddingSEXP);
    Rcpp::traits::input_parameter< int64_t >::type groups(groupsSEXP);
    Rcpp::traits::input_parameter< bool >::type benchmark(benchmarkSEXP);
    Rcpp::traits::input_parameter< bool >::type deterministic(deterministicSEXP);
    Rcpp::traits::input_parameter< bool >::type cudnn_enabled(cudnn_enabledSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__convolution_input_Tensor_weight_Tensor_bias_Tensor_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef_transposed_bool_output_padding_IntArrayRef_groups_int64_t_benchmark_bool_deterministic_bool_cudnn_enabled_bool(input, weight, bias, stride, padding, dilation, transposed, output_padding, groups, benchmark, deterministic, cudnn_enabled));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__convolution_nogroup_input_Tensor_weight_Tensor_bias_Tensor_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef_transposed_bool_output_padding_IntArrayRef
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace__convolution_nogroup_input_Tensor_weight_Tensor_bias_Tensor_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef_transposed_bool_output_padding_IntArrayRef(Rcpp::XPtr<torch::Tensor> input, Rcpp::XPtr<torch::Tensor> weight, Rcpp::XPtr<torch::Tensor> bias, std::vector<int64_t> stride, std::vector<int64_t> padding, std::vector<int64_t> dilation, bool transposed, std::vector<int64_t> output_padding);
RcppExport SEXP _torch_cpp_torch_namespace__convolution_nogroup_input_Tensor_weight_Tensor_bias_Tensor_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef_transposed_bool_output_padding_IntArrayRef(SEXP inputSEXP, SEXP weightSEXP, SEXP biasSEXP, SEXP strideSEXP, SEXP paddingSEXP, SEXP dilationSEXP, SEXP transposedSEXP, SEXP output_paddingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type input(inputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type bias(biasSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type stride(strideSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type padding(paddingSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type dilation(dilationSEXP);
    Rcpp::traits::input_parameter< bool >::type transposed(transposedSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type output_padding(output_paddingSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__convolution_nogroup_input_Tensor_weight_Tensor_bias_Tensor_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef_transposed_bool_output_padding_IntArrayRef(input, weight, bias, stride, padding, dilation, transposed, output_padding));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__convolution_double_backward_ggI_Tensor_ggW_Tensor_ggb_Tensor_gO_Tensor_weight_Tensor_self_Tensor_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef_transposed_bool_output_padding_IntArrayRef_groups_int64_t_benchmark_bool_deterministic_bool_cudnn_enabled_bool_output_mask_stdarraybool3
Rcpp::List cpp_torch_namespace__convolution_double_backward_ggI_Tensor_ggW_Tensor_ggb_Tensor_gO_Tensor_weight_Tensor_self_Tensor_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef_transposed_bool_output_padding_IntArrayRef_groups_int64_t_benchmark_bool_deterministic_bool_cudnn_enabled_bool_output_mask_stdarraybool3(Rcpp::XPtr<torch::Tensor> ggI, Rcpp::XPtr<torch::Tensor> ggW, Rcpp::XPtr<torch::Tensor> ggb, Rcpp::XPtr<torch::Tensor> gO, Rcpp::XPtr<torch::Tensor> weight, Rcpp::XPtr<torch::Tensor> self, std::vector<int64_t> stride, std::vector<int64_t> padding, std::vector<int64_t> dilation, bool transposed, std::vector<int64_t> output_padding, int64_t groups, bool benchmark, bool deterministic, bool cudnn_enabled, std::vector<bool> output_mask);
RcppExport SEXP _torch_cpp_torch_namespace__convolution_double_backward_ggI_Tensor_ggW_Tensor_ggb_Tensor_gO_Tensor_weight_Tensor_self_Tensor_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef_transposed_bool_output_padding_IntArrayRef_groups_int64_t_benchmark_bool_deterministic_bool_cudnn_enabled_bool_output_mask_stdarraybool3(SEXP ggISEXP, SEXP ggWSEXP, SEXP ggbSEXP, SEXP gOSEXP, SEXP weightSEXP, SEXP selfSEXP, SEXP strideSEXP, SEXP paddingSEXP, SEXP dilationSEXP, SEXP transposedSEXP, SEXP output_paddingSEXP, SEXP groupsSEXP, SEXP benchmarkSEXP, SEXP deterministicSEXP, SEXP cudnn_enabledSEXP, SEXP output_maskSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type ggI(ggISEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type ggW(ggWSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type ggb(ggbSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type gO(gOSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type stride(strideSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type padding(paddingSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type dilation(dilationSEXP);
    Rcpp::traits::input_parameter< bool >::type transposed(transposedSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type output_padding(output_paddingSEXP);
    Rcpp::traits::input_parameter< int64_t >::type groups(groupsSEXP);
    Rcpp::traits::input_parameter< bool >::type benchmark(benchmarkSEXP);
    Rcpp::traits::input_parameter< bool >::type deterministic(deterministicSEXP);
    Rcpp::traits::input_parameter< bool >::type cudnn_enabled(cudnn_enabledSEXP);
    Rcpp::traits::input_parameter< std::vector<bool> >::type output_mask(output_maskSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__convolution_double_backward_ggI_Tensor_ggW_Tensor_ggb_Tensor_gO_Tensor_weight_Tensor_self_Tensor_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef_transposed_bool_output_padding_IntArrayRef_groups_int64_t_benchmark_bool_deterministic_bool_cudnn_enabled_bool_output_mask_stdarraybool3(ggI, ggW, ggb, gO, weight, self, stride, padding, dilation, transposed, output_padding, groups, benchmark, deterministic, cudnn_enabled, output_mask));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_conv1d_input_Tensor_weight_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_conv1d_input_Tensor_weight_Tensor(Rcpp::XPtr<torch::Tensor> input, Rcpp::XPtr<torch::Tensor> weight, Rcpp::XPtr<torch::Tensor> bias, std::vector<int64_t> stride, std::vector<int64_t> padding, std::vector<int64_t> dilation, int64_t groups);
RcppExport SEXP _torch_cpp_torch_namespace_conv1d_input_Tensor_weight_Tensor(SEXP inputSEXP, SEXP weightSEXP, SEXP biasSEXP, SEXP strideSEXP, SEXP paddingSEXP, SEXP dilationSEXP, SEXP groupsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type input(inputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type bias(biasSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type stride(strideSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type padding(paddingSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type dilation(dilationSEXP);
    Rcpp::traits::input_parameter< int64_t >::type groups(groupsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_conv1d_input_Tensor_weight_Tensor(input, weight, bias, stride, padding, dilation, groups));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_conv2d_input_Tensor_weight_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_conv2d_input_Tensor_weight_Tensor(Rcpp::XPtr<torch::Tensor> input, Rcpp::XPtr<torch::Tensor> weight, Rcpp::XPtr<torch::Tensor> bias, std::vector<int64_t> stride, std::vector<int64_t> padding, std::vector<int64_t> dilation, int64_t groups);
RcppExport SEXP _torch_cpp_torch_namespace_conv2d_input_Tensor_weight_Tensor(SEXP inputSEXP, SEXP weightSEXP, SEXP biasSEXP, SEXP strideSEXP, SEXP paddingSEXP, SEXP dilationSEXP, SEXP groupsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type input(inputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type bias(biasSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type stride(strideSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type padding(paddingSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type dilation(dilationSEXP);
    Rcpp::traits::input_parameter< int64_t >::type groups(groupsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_conv2d_input_Tensor_weight_Tensor(input, weight, bias, stride, padding, dilation, groups));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_conv3d_input_Tensor_weight_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_conv3d_input_Tensor_weight_Tensor(Rcpp::XPtr<torch::Tensor> input, Rcpp::XPtr<torch::Tensor> weight, Rcpp::XPtr<torch::Tensor> bias, std::vector<int64_t> stride, std::vector<int64_t> padding, std::vector<int64_t> dilation, int64_t groups);
RcppExport SEXP _torch_cpp_torch_namespace_conv3d_input_Tensor_weight_Tensor(SEXP inputSEXP, SEXP weightSEXP, SEXP biasSEXP, SEXP strideSEXP, SEXP paddingSEXP, SEXP dilationSEXP, SEXP groupsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type input(inputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type bias(biasSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type stride(strideSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type padding(paddingSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type dilation(dilationSEXP);
    Rcpp::traits::input_parameter< int64_t >::type groups(groupsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_conv3d_input_Tensor_weight_Tensor(input, weight, bias, stride, padding, dilation, groups));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_conv_tbc_self_Tensor_weight_Tensor_bias_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_conv_tbc_self_Tensor_weight_Tensor_bias_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> weight, Rcpp::XPtr<torch::Tensor> bias, int64_t pad);
RcppExport SEXP _torch_cpp_torch_namespace_conv_tbc_self_Tensor_weight_Tensor_bias_Tensor(SEXP selfSEXP, SEXP weightSEXP, SEXP biasSEXP, SEXP padSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type bias(biasSEXP);
    Rcpp::traits::input_parameter< int64_t >::type pad(padSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_conv_tbc_self_Tensor_weight_Tensor_bias_Tensor(self, weight, bias, pad));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_conv_tbc_backward_self_Tensor_input_Tensor_weight_Tensor_bias_Tensor_pad_int64_t
Rcpp::List cpp_torch_namespace_conv_tbc_backward_self_Tensor_input_Tensor_weight_Tensor_bias_Tensor_pad_int64_t(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> input, Rcpp::XPtr<torch::Tensor> weight, Rcpp::XPtr<torch::Tensor> bias, int64_t pad);
RcppExport SEXP _torch_cpp_torch_namespace_conv_tbc_backward_self_Tensor_input_Tensor_weight_Tensor_bias_Tensor_pad_int64_t(SEXP selfSEXP, SEXP inputSEXP, SEXP weightSEXP, SEXP biasSEXP, SEXP padSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type input(inputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type bias(biasSEXP);
    Rcpp::traits::input_parameter< int64_t >::type pad(padSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_conv_tbc_backward_self_Tensor_input_Tensor_weight_Tensor_bias_Tensor_pad_int64_t(self, input, weight, bias, pad));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_conv_transpose1d_input_Tensor_weight_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_conv_transpose1d_input_Tensor_weight_Tensor(Rcpp::XPtr<torch::Tensor> input, Rcpp::XPtr<torch::Tensor> weight, Rcpp::XPtr<torch::Tensor> bias, std::vector<int64_t> stride, std::vector<int64_t> padding, std::vector<int64_t> output_padding, int64_t groups, std::vector<int64_t> dilation);
RcppExport SEXP _torch_cpp_torch_namespace_conv_transpose1d_input_Tensor_weight_Tensor(SEXP inputSEXP, SEXP weightSEXP, SEXP biasSEXP, SEXP strideSEXP, SEXP paddingSEXP, SEXP output_paddingSEXP, SEXP groupsSEXP, SEXP dilationSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type input(inputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type bias(biasSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type stride(strideSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type padding(paddingSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type output_padding(output_paddingSEXP);
    Rcpp::traits::input_parameter< int64_t >::type groups(groupsSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type dilation(dilationSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_conv_transpose1d_input_Tensor_weight_Tensor(input, weight, bias, stride, padding, output_padding, groups, dilation));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_conv_transpose2d_input_Tensor_weight_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_conv_transpose2d_input_Tensor_weight_Tensor(Rcpp::XPtr<torch::Tensor> input, Rcpp::XPtr<torch::Tensor> weight, Rcpp::XPtr<torch::Tensor> bias, std::vector<int64_t> stride, std::vector<int64_t> padding, std::vector<int64_t> output_padding, int64_t groups, std::vector<int64_t> dilation);
RcppExport SEXP _torch_cpp_torch_namespace_conv_transpose2d_input_Tensor_weight_Tensor(SEXP inputSEXP, SEXP weightSEXP, SEXP biasSEXP, SEXP strideSEXP, SEXP paddingSEXP, SEXP output_paddingSEXP, SEXP groupsSEXP, SEXP dilationSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type input(inputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type bias(biasSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type stride(strideSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type padding(paddingSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type output_padding(output_paddingSEXP);
    Rcpp::traits::input_parameter< int64_t >::type groups(groupsSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type dilation(dilationSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_conv_transpose2d_input_Tensor_weight_Tensor(input, weight, bias, stride, padding, output_padding, groups, dilation));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_conv_transpose3d_input_Tensor_weight_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_conv_transpose3d_input_Tensor_weight_Tensor(Rcpp::XPtr<torch::Tensor> input, Rcpp::XPtr<torch::Tensor> weight, Rcpp::XPtr<torch::Tensor> bias, std::vector<int64_t> stride, std::vector<int64_t> padding, std::vector<int64_t> output_padding, int64_t groups, std::vector<int64_t> dilation);
RcppExport SEXP _torch_cpp_torch_namespace_conv_transpose3d_input_Tensor_weight_Tensor(SEXP inputSEXP, SEXP weightSEXP, SEXP biasSEXP, SEXP strideSEXP, SEXP paddingSEXP, SEXP output_paddingSEXP, SEXP groupsSEXP, SEXP dilationSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type input(inputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type bias(biasSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type stride(strideSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type padding(paddingSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type output_padding(output_paddingSEXP);
    Rcpp::traits::input_parameter< int64_t >::type groups(groupsSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type dilation(dilationSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_conv_transpose3d_input_Tensor_weight_Tensor(input, weight, bias, stride, padding, output_padding, groups, dilation));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__copy_from_self_Tensor_dst_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace__copy_from_self_Tensor_dst_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> dst, bool non_blocking);
RcppExport SEXP _torch_cpp_torch_namespace__copy_from_self_Tensor_dst_Tensor(SEXP selfSEXP, SEXP dstSEXP, SEXP non_blockingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type dst(dstSEXP);
    Rcpp::traits::input_parameter< bool >::type non_blocking(non_blockingSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__copy_from_self_Tensor_dst_Tensor(self, dst, non_blocking));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_cos_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_cos_self_Tensor(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_namespace_cos_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_cos_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_cos__self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_cos__self_Tensor(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_namespace_cos__self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_cos__self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_cos_out_out_Tensor_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_cos_out_out_Tensor_self_Tensor(Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_namespace_cos_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type out(outSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_cos_out_out_Tensor_self_Tensor(out, self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_cosh_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_cosh_self_Tensor(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_namespace_cosh_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_cosh_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_cosh__self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_cosh__self_Tensor(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_namespace_cosh__self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_cosh__self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_cosh_out_out_Tensor_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_cosh_out_out_Tensor_self_Tensor(Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_namespace_cosh_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type out(outSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_cosh_out_out_Tensor_self_Tensor(out, self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_cosine_embedding_loss_input1_Tensor_input2_Tensor_target_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_cosine_embedding_loss_input1_Tensor_input2_Tensor_target_Tensor(Rcpp::XPtr<torch::Tensor> input1, Rcpp::XPtr<torch::Tensor> input2, Rcpp::XPtr<torch::Tensor> target, double margin, int64_t reduction);
RcppExport SEXP _torch_cpp_torch_namespace_cosine_embedding_loss_input1_Tensor_input2_Tensor_target_Tensor(SEXP input1SEXP, SEXP input2SEXP, SEXP targetSEXP, SEXP marginSEXP, SEXP reductionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type input1(input1SEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type input2(input2SEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type target(targetSEXP);
    Rcpp::traits::input_parameter< double >::type margin(marginSEXP);
    Rcpp::traits::input_parameter< int64_t >::type reduction(reductionSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_cosine_embedding_loss_input1_Tensor_input2_Tensor_target_Tensor(input1, input2, target, margin, reduction));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_cudnn_affine_grid_generator_theta_Tensor_FALSE_int64_t_C_int64_t_H_int64_t_W_int64_t
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_cudnn_affine_grid_generator_theta_Tensor_FALSE_int64_t_C_int64_t_H_int64_t_W_int64_t(Rcpp::XPtr<torch::Tensor> theta, int64_t False, int64_t C, int64_t H, int64_t W);
RcppExport SEXP _torch_cpp_torch_namespace_cudnn_affine_grid_generator_theta_Tensor_FALSE_int64_t_C_int64_t_H_int64_t_W_int64_t(SEXP thetaSEXP, SEXP FalseSEXP, SEXP CSEXP, SEXP HSEXP, SEXP WSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< int64_t >::type False(FalseSEXP);
    Rcpp::traits::input_parameter< int64_t >::type C(CSEXP);
    Rcpp::traits::input_parameter< int64_t >::type H(HSEXP);
    Rcpp::traits::input_parameter< int64_t >::type W(WSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_cudnn_affine_grid_generator_theta_Tensor_FALSE_int64_t_C_int64_t_H_int64_t_W_int64_t(theta, False, C, H, W));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_cudnn_affine_grid_generator_backward_grad_Tensor_FALSE_int64_t_C_int64_t_H_int64_t_W_int64_t
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_cudnn_affine_grid_generator_backward_grad_Tensor_FALSE_int64_t_C_int64_t_H_int64_t_W_int64_t(Rcpp::XPtr<torch::Tensor> grad, int64_t False, int64_t C, int64_t H, int64_t W);
RcppExport SEXP _torch_cpp_torch_namespace_cudnn_affine_grid_generator_backward_grad_Tensor_FALSE_int64_t_C_int64_t_H_int64_t_W_int64_t(SEXP gradSEXP, SEXP FalseSEXP, SEXP CSEXP, SEXP HSEXP, SEXP WSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type grad(gradSEXP);
    Rcpp::traits::input_parameter< int64_t >::type False(FalseSEXP);
    Rcpp::traits::input_parameter< int64_t >::type C(CSEXP);
    Rcpp::traits::input_parameter< int64_t >::type H(HSEXP);
    Rcpp::traits::input_parameter< int64_t >::type W(WSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_cudnn_affine_grid_generator_backward_grad_Tensor_FALSE_int64_t_C_int64_t_H_int64_t_W_int64_t(grad, False, C, H, W));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_cudnn_batch_norm_input_Tensor_weight_Tensor_bias_Tensor_running_mean_Tensor_running_var_Tensor_training_bool_exponential_average_factor_double_epsilon_double
Rcpp::List cpp_torch_namespace_cudnn_batch_norm_input_Tensor_weight_Tensor_bias_Tensor_running_mean_Tensor_running_var_Tensor_training_bool_exponential_average_factor_double_epsilon_double(Rcpp::XPtr<torch::Tensor> input, Rcpp::XPtr<torch::Tensor> weight, Rcpp::XPtr<torch::Tensor> bias, Rcpp::XPtr<torch::Tensor> running_mean, Rcpp::XPtr<torch::Tensor> running_var, bool training, double exponential_average_factor, double epsilon);
RcppExport SEXP _torch_cpp_torch_namespace_cudnn_batch_norm_input_Tensor_weight_Tensor_bias_Tensor_running_mean_Tensor_running_var_Tensor_training_bool_exponential_average_factor_double_epsilon_double(SEXP inputSEXP, SEXP weightSEXP, SEXP biasSEXP, SEXP running_meanSEXP, SEXP running_varSEXP, SEXP trainingSEXP, SEXP exponential_average_factorSEXP, SEXP epsilonSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type input(inputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type bias(biasSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type running_mean(running_meanSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type running_var(running_varSEXP);
    Rcpp::traits::input_parameter< bool >::type training(trainingSEXP);
    Rcpp::traits::input_parameter< double >::type exponential_average_factor(exponential_average_factorSEXP);
    Rcpp::traits::input_parameter< double >::type epsilon(epsilonSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_cudnn_batch_norm_input_Tensor_weight_Tensor_bias_Tensor_running_mean_Tensor_running_var_Tensor_training_bool_exponential_average_factor_double_epsilon_double(input, weight, bias, running_mean, running_var, training, exponential_average_factor, epsilon));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_cudnn_batch_norm_backward_input_Tensor_grad_output_Tensor_weight_Tensor_running_mean_Tensor_running_var_Tensor_save_mean_Tensor_save_var_Tensor_epsilon_double_reserveSpace_Tensor
Rcpp::List cpp_torch_namespace_cudnn_batch_norm_backward_input_Tensor_grad_output_Tensor_weight_Tensor_running_mean_Tensor_running_var_Tensor_save_mean_Tensor_save_var_Tensor_epsilon_double_reserveSpace_Tensor(Rcpp::XPtr<torch::Tensor> input, Rcpp::XPtr<torch::Tensor> grad_output, Rcpp::XPtr<torch::Tensor> weight, Rcpp::XPtr<torch::Tensor> running_mean, Rcpp::XPtr<torch::Tensor> running_var, Rcpp::XPtr<torch::Tensor> save_mean, Rcpp::XPtr<torch::Tensor> save_var, double epsilon, Rcpp::XPtr<torch::Tensor> reserveSpace);
RcppExport SEXP _torch_cpp_torch_namespace_cudnn_batch_norm_backward_input_Tensor_grad_output_Tensor_weight_Tensor_running_mean_Tensor_running_var_Tensor_save_mean_Tensor_save_var_Tensor_epsilon_double_reserveSpace_Tensor(SEXP inputSEXP, SEXP grad_outputSEXP, SEXP weightSEXP, SEXP running_meanSEXP, SEXP running_varSEXP, SEXP save_meanSEXP, SEXP save_varSEXP, SEXP epsilonSEXP, SEXP reserveSpaceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type input(inputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type running_mean(running_meanSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type running_var(running_varSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type save_mean(save_meanSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type save_var(save_varSEXP);
    Rcpp::traits::input_parameter< double >::type epsilon(epsilonSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type reserveSpace(reserveSpaceSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_cudnn_batch_norm_backward_input_Tensor_grad_output_Tensor_weight_Tensor_running_mean_Tensor_running_var_Tensor_save_mean_Tensor_save_var_Tensor_epsilon_double_reserveSpace_Tensor(input, grad_output, weight, running_mean, running_var, save_mean, save_var, epsilon, reserveSpace));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_cudnn_convolution_self_Tensor_weight_Tensor_bias_Tensor_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_benchmark_bool_deterministic_bool
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_cudnn_convolution_self_Tensor_weight_Tensor_bias_Tensor_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_benchmark_bool_deterministic_bool(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> weight, Rcpp::XPtr<torch::Tensor> bias, std::vector<int64_t> padding, std::vector<int64_t> stride, std::vector<int64_t> dilation, int64_t groups, bool benchmark, bool deterministic);
RcppExport SEXP _torch_cpp_torch_namespace_cudnn_convolution_self_Tensor_weight_Tensor_bias_Tensor_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_benchmark_bool_deterministic_bool(SEXP selfSEXP, SEXP weightSEXP, SEXP biasSEXP, SEXP paddingSEXP, SEXP strideSEXP, SEXP dilationSEXP, SEXP groupsSEXP, SEXP benchmarkSEXP, SEXP deterministicSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type bias(biasSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type padding(paddingSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type stride(strideSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type dilation(dilationSEXP);
    Rcpp::traits::input_parameter< int64_t >::type groups(groupsSEXP);
    Rcpp::traits::input_parameter< bool >::type benchmark(benchmarkSEXP);
    Rcpp::traits::input_parameter< bool >::type deterministic(deterministicSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_cudnn_convolution_self_Tensor_weight_Tensor_bias_Tensor_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_benchmark_bool_deterministic_bool(self, weight, bias, padding, stride, dilation, groups, benchmark, deterministic));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_cudnn_convolution_backward_input_self_size_IntArrayRef_grad_output_Tensor_weight_Tensor_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_benchmark_bool_deterministic_bool
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_cudnn_convolution_backward_input_self_size_IntArrayRef_grad_output_Tensor_weight_Tensor_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_benchmark_bool_deterministic_bool(std::vector<int64_t> self_size, Rcpp::XPtr<torch::Tensor> grad_output, Rcpp::XPtr<torch::Tensor> weight, std::vector<int64_t> padding, std::vector<int64_t> stride, std::vector<int64_t> dilation, int64_t groups, bool benchmark, bool deterministic);
RcppExport SEXP _torch_cpp_torch_namespace_cudnn_convolution_backward_input_self_size_IntArrayRef_grad_output_Tensor_weight_Tensor_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_benchmark_bool_deterministic_bool(SEXP self_sizeSEXP, SEXP grad_outputSEXP, SEXP weightSEXP, SEXP paddingSEXP, SEXP strideSEXP, SEXP dilationSEXP, SEXP groupsSEXP, SEXP benchmarkSEXP, SEXP deterministicSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type self_size(self_sizeSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type padding(paddingSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type stride(strideSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type dilation(dilationSEXP);
    Rcpp::traits::input_parameter< int64_t >::type groups(groupsSEXP);
    Rcpp::traits::input_parameter< bool >::type benchmark(benchmarkSEXP);
    Rcpp::traits::input_parameter< bool >::type deterministic(deterministicSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_cudnn_convolution_backward_input_self_size_IntArrayRef_grad_output_Tensor_weight_Tensor_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_benchmark_bool_deterministic_bool(self_size, grad_output, weight, padding, stride, dilation, groups, benchmark, deterministic));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_cudnn_convolution_backward_self_Tensor_grad_output_Tensor_weight_Tensor_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_benchmark_bool_deterministic_bool_output_mask_stdarraybool3
Rcpp::List cpp_torch_namespace_cudnn_convolution_backward_self_Tensor_grad_output_Tensor_weight_Tensor_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_benchmark_bool_deterministic_bool_output_mask_stdarraybool3(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> grad_output, Rcpp::XPtr<torch::Tensor> weight, std::vector<int64_t> padding, std::vector<int64_t> stride, std::vector<int64_t> dilation, int64_t groups, bool benchmark, bool deterministic, std::vector<bool> output_mask);
RcppExport SEXP _torch_cpp_torch_namespace_cudnn_convolution_backward_self_Tensor_grad_output_Tensor_weight_Tensor_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_benchmark_bool_deterministic_bool_output_mask_stdarraybool3(SEXP selfSEXP, SEXP grad_outputSEXP, SEXP weightSEXP, SEXP paddingSEXP, SEXP strideSEXP, SEXP dilationSEXP, SEXP groupsSEXP, SEXP benchmarkSEXP, SEXP deterministicSEXP, SEXP output_maskSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type padding(paddingSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type stride(strideSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type dilation(dilationSEXP);
    Rcpp::traits::input_parameter< int64_t >::type groups(groupsSEXP);
    Rcpp::traits::input_parameter< bool >::type benchmark(benchmarkSEXP);
    Rcpp::traits::input_parameter< bool >::type deterministic(deterministicSEXP);
    Rcpp::traits::input_parameter< std::vector<bool> >::type output_mask(output_maskSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_cudnn_convolution_backward_self_Tensor_grad_output_Tensor_weight_Tensor_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_benchmark_bool_deterministic_bool_output_mask_stdarraybool3(self, grad_output, weight, padding, stride, dilation, groups, benchmark, deterministic, output_mask));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_cudnn_convolution_backward_bias_grad_output_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_cudnn_convolution_backward_bias_grad_output_Tensor(Rcpp::XPtr<torch::Tensor> grad_output);
RcppExport SEXP _torch_cpp_torch_namespace_cudnn_convolution_backward_bias_grad_output_Tensor(SEXP grad_outputSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type grad_output(grad_outputSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_cudnn_convolution_backward_bias_grad_output_Tensor(grad_output));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_cudnn_convolution_backward_weight_weight_size_IntArrayRef_grad_output_Tensor_self_Tensor_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_benchmark_bool_deterministic_bool
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_cudnn_convolution_backward_weight_weight_size_IntArrayRef_grad_output_Tensor_self_Tensor_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_benchmark_bool_deterministic_bool(std::vector<int64_t> weight_size, Rcpp::XPtr<torch::Tensor> grad_output, Rcpp::XPtr<torch::Tensor> self, std::vector<int64_t> padding, std::vector<int64_t> stride, std::vector<int64_t> dilation, int64_t groups, bool benchmark, bool deterministic);
RcppExport SEXP _torch_cpp_torch_namespace_cudnn_convolution_backward_weight_weight_size_IntArrayRef_grad_output_Tensor_self_Tensor_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_benchmark_bool_deterministic_bool(SEXP weight_sizeSEXP, SEXP grad_outputSEXP, SEXP selfSEXP, SEXP paddingSEXP, SEXP strideSEXP, SEXP dilationSEXP, SEXP groupsSEXP, SEXP benchmarkSEXP, SEXP deterministicSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type weight_size(weight_sizeSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type padding(paddingSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type stride(strideSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type dilation(dilationSEXP);
    Rcpp::traits::input_parameter< int64_t >::type groups(groupsSEXP);
    Rcpp::traits::input_parameter< bool >::type benchmark(benchmarkSEXP);
    Rcpp::traits::input_parameter< bool >::type deterministic(deterministicSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_cudnn_convolution_backward_weight_weight_size_IntArrayRef_grad_output_Tensor_self_Tensor_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_benchmark_bool_deterministic_bool(weight_size, grad_output, self, padding, stride, dilation, groups, benchmark, deterministic));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_cudnn_convolution_transpose_self_Tensor_weight_Tensor_bias_Tensor_padding_IntArrayRef_output_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_benchmark_bool_deterministic_bool
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_cudnn_convolution_transpose_self_Tensor_weight_Tensor_bias_Tensor_padding_IntArrayRef_output_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_benchmark_bool_deterministic_bool(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> weight, Rcpp::XPtr<torch::Tensor> bias, std::vector<int64_t> padding, std::vector<int64_t> output_padding, std::vector<int64_t> stride, std::vector<int64_t> dilation, int64_t groups, bool benchmark, bool deterministic);
RcppExport SEXP _torch_cpp_torch_namespace_cudnn_convolution_transpose_self_Tensor_weight_Tensor_bias_Tensor_padding_IntArrayRef_output_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_benchmark_bool_deterministic_bool(SEXP selfSEXP, SEXP weightSEXP, SEXP biasSEXP, SEXP paddingSEXP, SEXP output_paddingSEXP, SEXP strideSEXP, SEXP dilationSEXP, SEXP groupsSEXP, SEXP benchmarkSEXP, SEXP deterministicSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type bias(biasSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type padding(paddingSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type output_padding(output_paddingSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type stride(strideSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type dilation(dilationSEXP);
    Rcpp::traits::input_parameter< int64_t >::type groups(groupsSEXP);
    Rcpp::traits::input_parameter< bool >::type benchmark(benchmarkSEXP);
    Rcpp::traits::input_parameter< bool >::type deterministic(deterministicSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_cudnn_convolution_transpose_self_Tensor_weight_Tensor_bias_Tensor_padding_IntArrayRef_output_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_benchmark_bool_deterministic_bool(self, weight, bias, padding, output_padding, stride, dilation, groups, benchmark, deterministic));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_cudnn_convolution_transpose_backward_self_Tensor_grad_output_Tensor_weight_Tensor_padding_IntArrayRef_output_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_benchmark_bool_deterministic_bool_output_mask_stdarraybool3
Rcpp::List cpp_torch_namespace_cudnn_convolution_transpose_backward_self_Tensor_grad_output_Tensor_weight_Tensor_padding_IntArrayRef_output_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_benchmark_bool_deterministic_bool_output_mask_stdarraybool3(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> grad_output, Rcpp::XPtr<torch::Tensor> weight, std::vector<int64_t> padding, std::vector<int64_t> output_padding, std::vector<int64_t> stride, std::vector<int64_t> dilation, int64_t groups, bool benchmark, bool deterministic, std::vector<bool> output_mask);
RcppExport SEXP _torch_cpp_torch_namespace_cudnn_convolution_transpose_backward_self_Tensor_grad_output_Tensor_weight_Tensor_padding_IntArrayRef_output_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_benchmark_bool_deterministic_bool_output_mask_stdarraybool3(SEXP selfSEXP, SEXP grad_outputSEXP, SEXP weightSEXP, SEXP paddingSEXP, SEXP output_paddingSEXP, SEXP strideSEXP, SEXP dilationSEXP, SEXP groupsSEXP, SEXP benchmarkSEXP, SEXP deterministicSEXP, SEXP output_maskSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type padding(paddingSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type output_padding(output_paddingSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type stride(strideSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type dilation(dilationSEXP);
    Rcpp::traits::input_parameter< int64_t >::type groups(groupsSEXP);
    Rcpp::traits::input_parameter< bool >::type benchmark(benchmarkSEXP);
    Rcpp::traits::input_parameter< bool >::type deterministic(deterministicSEXP);
    Rcpp::traits::input_parameter< std::vector<bool> >::type output_mask(output_maskSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_cudnn_convolution_transpose_backward_self_Tensor_grad_output_Tensor_weight_Tensor_padding_IntArrayRef_output_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_benchmark_bool_deterministic_bool_output_mask_stdarraybool3(self, grad_output, weight, padding, output_padding, stride, dilation, groups, benchmark, deterministic, output_mask));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_cudnn_convolution_transpose_backward_bias_grad_output_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_cudnn_convolution_transpose_backward_bias_grad_output_Tensor(Rcpp::XPtr<torch::Tensor> grad_output);
RcppExport SEXP _torch_cpp_torch_namespace_cudnn_convolution_transpose_backward_bias_grad_output_Tensor(SEXP grad_outputSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type grad_output(grad_outputSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_cudnn_convolution_transpose_backward_bias_grad_output_Tensor(grad_output));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_cudnn_convolution_transpose_backward_input_grad_output_Tensor_weight_Tensor_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_benchmark_bool_deterministic_bool
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_cudnn_convolution_transpose_backward_input_grad_output_Tensor_weight_Tensor_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_benchmark_bool_deterministic_bool(Rcpp::XPtr<torch::Tensor> grad_output, Rcpp::XPtr<torch::Tensor> weight, std::vector<int64_t> padding, std::vector<int64_t> stride, std::vector<int64_t> dilation, int64_t groups, bool benchmark, bool deterministic);
RcppExport SEXP _torch_cpp_torch_namespace_cudnn_convolution_transpose_backward_input_grad_output_Tensor_weight_Tensor_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_benchmark_bool_deterministic_bool(SEXP grad_outputSEXP, SEXP weightSEXP, SEXP paddingSEXP, SEXP strideSEXP, SEXP dilationSEXP, SEXP groupsSEXP, SEXP benchmarkSEXP, SEXP deterministicSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type padding(paddingSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type stride(strideSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type dilation(dilationSEXP);
    Rcpp::traits::input_parameter< int64_t >::type groups(groupsSEXP);
    Rcpp::traits::input_parameter< bool >::type benchmark(benchmarkSEXP);
    Rcpp::traits::input_parameter< bool >::type deterministic(deterministicSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_cudnn_convolution_transpose_backward_input_grad_output_Tensor_weight_Tensor_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_benchmark_bool_deterministic_bool(grad_output, weight, padding, stride, dilation, groups, benchmark, deterministic));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_cudnn_convolution_transpose_backward_weight_weight_size_IntArrayRef_grad_output_Tensor_self_Tensor_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_benchmark_bool_deterministic_bool
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_cudnn_convolution_transpose_backward_weight_weight_size_IntArrayRef_grad_output_Tensor_self_Tensor_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_benchmark_bool_deterministic_bool(std::vector<int64_t> weight_size, Rcpp::XPtr<torch::Tensor> grad_output, Rcpp::XPtr<torch::Tensor> self, std::vector<int64_t> padding, std::vector<int64_t> stride, std::vector<int64_t> dilation, int64_t groups, bool benchmark, bool deterministic);
RcppExport SEXP _torch_cpp_torch_namespace_cudnn_convolution_transpose_backward_weight_weight_size_IntArrayRef_grad_output_Tensor_self_Tensor_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_benchmark_bool_deterministic_bool(SEXP weight_sizeSEXP, SEXP grad_outputSEXP, SEXP selfSEXP, SEXP paddingSEXP, SEXP strideSEXP, SEXP dilationSEXP, SEXP groupsSEXP, SEXP benchmarkSEXP, SEXP deterministicSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type weight_size(weight_sizeSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type padding(paddingSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type stride(strideSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type dilation(dilationSEXP);
    Rcpp::traits::input_parameter< int64_t >::type groups(groupsSEXP);
    Rcpp::traits::input_parameter< bool >::type benchmark(benchmarkSEXP);
    Rcpp::traits::input_parameter< bool >::type deterministic(deterministicSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_cudnn_convolution_transpose_backward_weight_weight_size_IntArrayRef_grad_output_Tensor_self_Tensor_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_benchmark_bool_deterministic_bool(weight_size, grad_output, self, padding, stride, dilation, groups, benchmark, deterministic));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_cudnn_grid_sampler_self_Tensor_grid_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_cudnn_grid_sampler_self_Tensor_grid_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> grid);
RcppExport SEXP _torch_cpp_torch_namespace_cudnn_grid_sampler_self_Tensor_grid_Tensor(SEXP selfSEXP, SEXP gridSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type grid(gridSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_cudnn_grid_sampler_self_Tensor_grid_Tensor(self, grid));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_cudnn_grid_sampler_backward_self_Tensor_grid_Tensor_grad_output_Tensor
Rcpp::List cpp_torch_namespace_cudnn_grid_sampler_backward_self_Tensor_grid_Tensor_grad_output_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> grid, Rcpp::XPtr<torch::Tensor> grad_output);
RcppExport SEXP _torch_cpp_torch_namespace_cudnn_grid_sampler_backward_self_Tensor_grid_Tensor_grad_output_Tensor(SEXP selfSEXP, SEXP gridSEXP, SEXP grad_outputSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type grid(gridSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type grad_output(grad_outputSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_cudnn_grid_sampler_backward_self_Tensor_grid_Tensor_grad_output_Tensor(self, grid, grad_output));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_cumsum_self_Tensor_dim_int64_t
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_cumsum_self_Tensor_dim_int64_t(Rcpp::XPtr<torch::Tensor> self, int64_t dim, Rcpp::XPtr<torch::Dtype> dtype);
RcppExport SEXP _torch_cpp_torch_namespace_cumsum_self_Tensor_dim_int64_t(SEXP selfSEXP, SEXP dimSEXP, SEXP dtypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Dtype> >::type dtype(dtypeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_cumsum_self_Tensor_dim_int64_t(self, dim, dtype));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_cumsum_out_out_Tensor_self_Tensor_dim_int64_t
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_cumsum_out_out_Tensor_self_Tensor_dim_int64_t(Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, int64_t dim, Rcpp::XPtr<torch::Dtype> dtype);
RcppExport SEXP _torch_cpp_torch_namespace_cumsum_out_out_Tensor_self_Tensor_dim_int64_t(SEXP outSEXP, SEXP selfSEXP, SEXP dimSEXP, SEXP dtypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type out(outSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Dtype> >::type dtype(dtypeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_cumsum_out_out_Tensor_self_Tensor_dim_int64_t(out, self, dim, dtype));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_cumsum_self_Tensor_dim_Dimname
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_cumsum_self_Tensor_dim_Dimname(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Dimname> dim, Rcpp::XPtr<torch::Dtype> dtype);
RcppExport SEXP _torch_cpp_torch_namespace_cumsum_self_Tensor_dim_Dimname(SEXP selfSEXP, SEXP dimSEXP, SEXP dtypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Dimname> >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Dtype> >::type dtype(dtypeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_cumsum_self_Tensor_dim_Dimname(self, dim, dtype));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_cumsum_out_out_Tensor_self_Tensor_dim_Dimname
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_cumsum_out_out_Tensor_self_Tensor_dim_Dimname(Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Dimname> dim, Rcpp::XPtr<torch::Dtype> dtype);
RcppExport SEXP _torch_cpp_torch_namespace_cumsum_out_out_Tensor_self_Tensor_dim_Dimname(SEXP outSEXP, SEXP selfSEXP, SEXP dimSEXP, SEXP dtypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type out(outSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Dimname> >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Dtype> >::type dtype(dtypeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_cumsum_out_out_Tensor_self_Tensor_dim_Dimname(out, self, dim, dtype));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_cumprod_self_Tensor_dim_int64_t
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_cumprod_self_Tensor_dim_int64_t(Rcpp::XPtr<torch::Tensor> self, int64_t dim, Rcpp::XPtr<torch::Dtype> dtype);
RcppExport SEXP _torch_cpp_torch_namespace_cumprod_self_Tensor_dim_int64_t(SEXP selfSEXP, SEXP dimSEXP, SEXP dtypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Dtype> >::type dtype(dtypeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_cumprod_self_Tensor_dim_int64_t(self, dim, dtype));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_cumprod_out_out_Tensor_self_Tensor_dim_int64_t
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_cumprod_out_out_Tensor_self_Tensor_dim_int64_t(Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, int64_t dim, Rcpp::XPtr<torch::Dtype> dtype);
RcppExport SEXP _torch_cpp_torch_namespace_cumprod_out_out_Tensor_self_Tensor_dim_int64_t(SEXP outSEXP, SEXP selfSEXP, SEXP dimSEXP, SEXP dtypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type out(outSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Dtype> >::type dtype(dtypeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_cumprod_out_out_Tensor_self_Tensor_dim_int64_t(out, self, dim, dtype));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_cumprod_self_Tensor_dim_Dimname
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_cumprod_self_Tensor_dim_Dimname(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Dimname> dim, Rcpp::XPtr<torch::Dtype> dtype);
RcppExport SEXP _torch_cpp_torch_namespace_cumprod_self_Tensor_dim_Dimname(SEXP selfSEXP, SEXP dimSEXP, SEXP dtypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Dimname> >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Dtype> >::type dtype(dtypeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_cumprod_self_Tensor_dim_Dimname(self, dim, dtype));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_cumprod_out_out_Tensor_self_Tensor_dim_Dimname
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_cumprod_out_out_Tensor_self_Tensor_dim_Dimname(Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Dimname> dim, Rcpp::XPtr<torch::Dtype> dtype);
RcppExport SEXP _torch_cpp_torch_namespace_cumprod_out_out_Tensor_self_Tensor_dim_Dimname(SEXP outSEXP, SEXP selfSEXP, SEXP dimSEXP, SEXP dtypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type out(outSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Dimname> >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Dtype> >::type dtype(dtypeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_cumprod_out_out_Tensor_self_Tensor_dim_Dimname(out, self, dim, dtype));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_ctc_loss_log_probs_Tensor_targets_Tensor_input_lengths_IntArrayRef_target_lengths_IntArrayRef
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_ctc_loss_log_probs_Tensor_targets_Tensor_input_lengths_IntArrayRef_target_lengths_IntArrayRef(Rcpp::XPtr<torch::Tensor> log_probs, Rcpp::XPtr<torch::Tensor> targets, std::vector<int64_t> input_lengths, std::vector<int64_t> target_lengths, int64_t blank, int64_t reduction, bool zero_infinity);
RcppExport SEXP _torch_cpp_torch_namespace_ctc_loss_log_probs_Tensor_targets_Tensor_input_lengths_IntArrayRef_target_lengths_IntArrayRef(SEXP log_probsSEXP, SEXP targetsSEXP, SEXP input_lengthsSEXP, SEXP target_lengthsSEXP, SEXP blankSEXP, SEXP reductionSEXP, SEXP zero_infinitySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type log_probs(log_probsSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type targets(targetsSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type input_lengths(input_lengthsSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type target_lengths(target_lengthsSEXP);
    Rcpp::traits::input_parameter< int64_t >::type blank(blankSEXP);
    Rcpp::traits::input_parameter< int64_t >::type reduction(reductionSEXP);
    Rcpp::traits::input_parameter< bool >::type zero_infinity(zero_infinitySEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_ctc_loss_log_probs_Tensor_targets_Tensor_input_lengths_IntArrayRef_target_lengths_IntArrayRef(log_probs, targets, input_lengths, target_lengths, blank, reduction, zero_infinity));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_ctc_loss_log_probs_Tensor_targets_Tensor_input_lengths_Tensor_target_lengths_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_ctc_loss_log_probs_Tensor_targets_Tensor_input_lengths_Tensor_target_lengths_Tensor(Rcpp::XPtr<torch::Tensor> log_probs, Rcpp::XPtr<torch::Tensor> targets, Rcpp::XPtr<torch::Tensor> input_lengths, Rcpp::XPtr<torch::Tensor> target_lengths, int64_t blank, int64_t reduction, bool zero_infinity);
RcppExport SEXP _torch_cpp_torch_namespace_ctc_loss_log_probs_Tensor_targets_Tensor_input_lengths_Tensor_target_lengths_Tensor(SEXP log_probsSEXP, SEXP targetsSEXP, SEXP input_lengthsSEXP, SEXP target_lengthsSEXP, SEXP blankSEXP, SEXP reductionSEXP, SEXP zero_infinitySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type log_probs(log_probsSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type targets(targetsSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type input_lengths(input_lengthsSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type target_lengths(target_lengthsSEXP);
    Rcpp::traits::input_parameter< int64_t >::type blank(blankSEXP);
    Rcpp::traits::input_parameter< int64_t >::type reduction(reductionSEXP);
    Rcpp::traits::input_parameter< bool >::type zero_infinity(zero_infinitySEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_ctc_loss_log_probs_Tensor_targets_Tensor_input_lengths_Tensor_target_lengths_Tensor(log_probs, targets, input_lengths, target_lengths, blank, reduction, zero_infinity));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__ctc_loss_log_probs_Tensor_targets_Tensor_input_lengths_IntArrayRef_target_lengths_IntArrayRef
Rcpp::List cpp_torch_namespace__ctc_loss_log_probs_Tensor_targets_Tensor_input_lengths_IntArrayRef_target_lengths_IntArrayRef(Rcpp::XPtr<torch::Tensor> log_probs, Rcpp::XPtr<torch::Tensor> targets, std::vector<int64_t> input_lengths, std::vector<int64_t> target_lengths, int64_t blank, bool zero_infinity);
RcppExport SEXP _torch_cpp_torch_namespace__ctc_loss_log_probs_Tensor_targets_Tensor_input_lengths_IntArrayRef_target_lengths_IntArrayRef(SEXP log_probsSEXP, SEXP targetsSEXP, SEXP input_lengthsSEXP, SEXP target_lengthsSEXP, SEXP blankSEXP, SEXP zero_infinitySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type log_probs(log_probsSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type targets(targetsSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type input_lengths(input_lengthsSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type target_lengths(target_lengthsSEXP);
    Rcpp::traits::input_parameter< int64_t >::type blank(blankSEXP);
    Rcpp::traits::input_parameter< bool >::type zero_infinity(zero_infinitySEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__ctc_loss_log_probs_Tensor_targets_Tensor_input_lengths_IntArrayRef_target_lengths_IntArrayRef(log_probs, targets, input_lengths, target_lengths, blank, zero_infinity));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__ctc_loss_backward_grad_Tensor_log_probs_Tensor_targets_Tensor_input_lengths_IntArrayRef_target_lengths_IntArrayRef_neg_log_likelihood_Tensor_log_alpha_Tensor_blank_int64_t
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace__ctc_loss_backward_grad_Tensor_log_probs_Tensor_targets_Tensor_input_lengths_IntArrayRef_target_lengths_IntArrayRef_neg_log_likelihood_Tensor_log_alpha_Tensor_blank_int64_t(Rcpp::XPtr<torch::Tensor> grad, Rcpp::XPtr<torch::Tensor> log_probs, Rcpp::XPtr<torch::Tensor> targets, std::vector<int64_t> input_lengths, std::vector<int64_t> target_lengths, Rcpp::XPtr<torch::Tensor> neg_log_likelihood, Rcpp::XPtr<torch::Tensor> log_alpha, int64_t blank, bool zero_infinity);
RcppExport SEXP _torch_cpp_torch_namespace__ctc_loss_backward_grad_Tensor_log_probs_Tensor_targets_Tensor_input_lengths_IntArrayRef_target_lengths_IntArrayRef_neg_log_likelihood_Tensor_log_alpha_Tensor_blank_int64_t(SEXP gradSEXP, SEXP log_probsSEXP, SEXP targetsSEXP, SEXP input_lengthsSEXP, SEXP target_lengthsSEXP, SEXP neg_log_likelihoodSEXP, SEXP log_alphaSEXP, SEXP blankSEXP, SEXP zero_infinitySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type grad(gradSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type log_probs(log_probsSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type targets(targetsSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type input_lengths(input_lengthsSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type target_lengths(target_lengthsSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type neg_log_likelihood(neg_log_likelihoodSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type log_alpha(log_alphaSEXP);
    Rcpp::traits::input_parameter< int64_t >::type blank(blankSEXP);
    Rcpp::traits::input_parameter< bool >::type zero_infinity(zero_infinitySEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__ctc_loss_backward_grad_Tensor_log_probs_Tensor_targets_Tensor_input_lengths_IntArrayRef_target_lengths_IntArrayRef_neg_log_likelihood_Tensor_log_alpha_Tensor_blank_int64_t(grad, log_probs, targets, input_lengths, target_lengths, neg_log_likelihood, log_alpha, blank, zero_infinity));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_det_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_det_self_Tensor(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_namespace_det_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_det_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_diag_embed_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_diag_embed_self_Tensor(Rcpp::XPtr<torch::Tensor> self, int64_t offset, int64_t dim1, int64_t dim2);
RcppExport SEXP _torch_cpp_torch_namespace_diag_embed_self_Tensor(SEXP selfSEXP, SEXP offsetSEXP, SEXP dim1SEXP, SEXP dim2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< int64_t >::type offset(offsetSEXP);
    Rcpp::traits::input_parameter< int64_t >::type dim1(dim1SEXP);
    Rcpp::traits::input_parameter< int64_t >::type dim2(dim2SEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_diag_embed_self_Tensor(self, offset, dim1, dim2));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_diagflat_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_diagflat_self_Tensor(Rcpp::XPtr<torch::Tensor> self, int64_t offset);
RcppExport SEXP _torch_cpp_torch_namespace_diagflat_self_Tensor(SEXP selfSEXP, SEXP offsetSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< int64_t >::type offset(offsetSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_diagflat_self_Tensor(self, offset));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_diagonal_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_diagonal_self_Tensor(Rcpp::XPtr<torch::Tensor> self, int64_t offset, int64_t dim1, int64_t dim2);
RcppExport SEXP _torch_cpp_torch_namespace_diagonal_self_Tensor(SEXP selfSEXP, SEXP offsetSEXP, SEXP dim1SEXP, SEXP dim2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< int64_t >::type offset(offsetSEXP);
    Rcpp::traits::input_parameter< int64_t >::type dim1(dim1SEXP);
    Rcpp::traits::input_parameter< int64_t >::type dim2(dim2SEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_diagonal_self_Tensor(self, offset, dim1, dim2));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_div_self_Tensor_other_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_div_self_Tensor_other_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> other);
RcppExport SEXP _torch_cpp_torch_namespace_div_self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_div_self_Tensor_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_div_out_out_Tensor_self_Tensor_other_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_div_out_out_Tensor_self_Tensor_other_Tensor(Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> other);
RcppExport SEXP _torch_cpp_torch_namespace_div_out_out_Tensor_self_Tensor_other_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type out(outSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_div_out_out_Tensor_self_Tensor_other_Tensor(out, self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_div_self_Tensor_other_Scalar
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_div_self_Tensor_other_Scalar(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Scalar> other);
RcppExport SEXP _torch_cpp_torch_namespace_div_self_Tensor_other_Scalar(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_div_self_Tensor_other_Scalar(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_dot_self_Tensor_tensor_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_dot_self_Tensor_tensor_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> tensor);
RcppExport SEXP _torch_cpp_torch_namespace_dot_self_Tensor_tensor_Tensor(SEXP selfSEXP, SEXP tensorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type tensor(tensorSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_dot_self_Tensor_tensor_Tensor(self, tensor));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_dot_out_out_Tensor_self_Tensor_tensor_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_dot_out_out_Tensor_self_Tensor_tensor_Tensor(Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> tensor);
RcppExport SEXP _torch_cpp_torch_namespace_dot_out_out_Tensor_self_Tensor_tensor_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP tensorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type out(outSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type tensor(tensorSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_dot_out_out_Tensor_self_Tensor_tensor_Tensor(out, self, tensor));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_einsum_equation_stdstring_tensors_TensorList
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_einsum_equation_stdstring_tensors_TensorList(std::string equation, Rcpp::XPtr<std::vector<torch::Tensor>> tensors);
RcppExport SEXP _torch_cpp_torch_namespace_einsum_equation_stdstring_tensors_TensorList(SEXP equationSEXP, SEXP tensorsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type equation(equationSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::vector<torch::Tensor>> >::type tensors(tensorsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_einsum_equation_stdstring_tensors_TensorList(equation, tensors));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_embedding_weight_Tensor_indices_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_embedding_weight_Tensor_indices_Tensor(Rcpp::XPtr<torch::Tensor> weight, Rcpp::XPtr<torch::Tensor> indices, int64_t padding_idx, bool scale_grad_by_freq, bool sparse);
RcppExport SEXP _torch_cpp_torch_namespace_embedding_weight_Tensor_indices_Tensor(SEXP weightSEXP, SEXP indicesSEXP, SEXP padding_idxSEXP, SEXP scale_grad_by_freqSEXP, SEXP sparseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type indices(indicesSEXP);
    Rcpp::traits::input_parameter< int64_t >::type padding_idx(padding_idxSEXP);
    Rcpp::traits::input_parameter< bool >::type scale_grad_by_freq(scale_grad_by_freqSEXP);
    Rcpp::traits::input_parameter< bool >::type sparse(sparseSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_embedding_weight_Tensor_indices_Tensor(weight, indices, padding_idx, scale_grad_by_freq, sparse));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_embedding_backward_grad_Tensor_indices_Tensor_num_weights_int64_t_padding_idx_int64_t_scale_grad_by_freq_bool_sparse_bool
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_embedding_backward_grad_Tensor_indices_Tensor_num_weights_int64_t_padding_idx_int64_t_scale_grad_by_freq_bool_sparse_bool(Rcpp::XPtr<torch::Tensor> grad, Rcpp::XPtr<torch::Tensor> indices, int64_t num_weights, int64_t padding_idx, bool scale_grad_by_freq, bool sparse);
RcppExport SEXP _torch_cpp_torch_namespace_embedding_backward_grad_Tensor_indices_Tensor_num_weights_int64_t_padding_idx_int64_t_scale_grad_by_freq_bool_sparse_bool(SEXP gradSEXP, SEXP indicesSEXP, SEXP num_weightsSEXP, SEXP padding_idxSEXP, SEXP scale_grad_by_freqSEXP, SEXP sparseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type grad(gradSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type indices(indicesSEXP);
    Rcpp::traits::input_parameter< int64_t >::type num_weights(num_weightsSEXP);
    Rcpp::traits::input_parameter< int64_t >::type padding_idx(padding_idxSEXP);
    Rcpp::traits::input_parameter< bool >::type scale_grad_by_freq(scale_grad_by_freqSEXP);
    Rcpp::traits::input_parameter< bool >::type sparse(sparseSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_embedding_backward_grad_Tensor_indices_Tensor_num_weights_int64_t_padding_idx_int64_t_scale_grad_by_freq_bool_sparse_bool(grad, indices, num_weights, padding_idx, scale_grad_by_freq, sparse));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_embedding_dense_backward_grad_output_Tensor_indices_Tensor_num_weights_int64_t_padding_idx_int64_t_scale_grad_by_freq_bool
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_embedding_dense_backward_grad_output_Tensor_indices_Tensor_num_weights_int64_t_padding_idx_int64_t_scale_grad_by_freq_bool(Rcpp::XPtr<torch::Tensor> grad_output, Rcpp::XPtr<torch::Tensor> indices, int64_t num_weights, int64_t padding_idx, bool scale_grad_by_freq);
RcppExport SEXP _torch_cpp_torch_namespace_embedding_dense_backward_grad_output_Tensor_indices_Tensor_num_weights_int64_t_padding_idx_int64_t_scale_grad_by_freq_bool(SEXP grad_outputSEXP, SEXP indicesSEXP, SEXP num_weightsSEXP, SEXP padding_idxSEXP, SEXP scale_grad_by_freqSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type indices(indicesSEXP);
    Rcpp::traits::input_parameter< int64_t >::type num_weights(num_weightsSEXP);
    Rcpp::traits::input_parameter< int64_t >::type padding_idx(padding_idxSEXP);
    Rcpp::traits::input_parameter< bool >::type scale_grad_by_freq(scale_grad_by_freqSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_embedding_dense_backward_grad_output_Tensor_indices_Tensor_num_weights_int64_t_padding_idx_int64_t_scale_grad_by_freq_bool(grad_output, indices, num_weights, padding_idx, scale_grad_by_freq));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_embedding_renorm__self_Tensor_indices_Tensor_max_norm_double_norm_type_double
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_embedding_renorm__self_Tensor_indices_Tensor_max_norm_double_norm_type_double(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> indices, double max_norm, double norm_type);
RcppExport SEXP _torch_cpp_torch_namespace_embedding_renorm__self_Tensor_indices_Tensor_max_norm_double_norm_type_double(SEXP selfSEXP, SEXP indicesSEXP, SEXP max_normSEXP, SEXP norm_typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type indices(indicesSEXP);
    Rcpp::traits::input_parameter< double >::type max_norm(max_normSEXP);
    Rcpp::traits::input_parameter< double >::type norm_type(norm_typeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_embedding_renorm__self_Tensor_indices_Tensor_max_norm_double_norm_type_double(self, indices, max_norm, norm_type));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_embedding_sparse_backward_grad_Tensor_indices_Tensor_num_weights_int64_t_padding_idx_int64_t_scale_grad_by_freq_bool
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_embedding_sparse_backward_grad_Tensor_indices_Tensor_num_weights_int64_t_padding_idx_int64_t_scale_grad_by_freq_bool(Rcpp::XPtr<torch::Tensor> grad, Rcpp::XPtr<torch::Tensor> indices, int64_t num_weights, int64_t padding_idx, bool scale_grad_by_freq);
RcppExport SEXP _torch_cpp_torch_namespace_embedding_sparse_backward_grad_Tensor_indices_Tensor_num_weights_int64_t_padding_idx_int64_t_scale_grad_by_freq_bool(SEXP gradSEXP, SEXP indicesSEXP, SEXP num_weightsSEXP, SEXP padding_idxSEXP, SEXP scale_grad_by_freqSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type grad(gradSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type indices(indicesSEXP);
    Rcpp::traits::input_parameter< int64_t >::type num_weights(num_weightsSEXP);
    Rcpp::traits::input_parameter< int64_t >::type padding_idx(padding_idxSEXP);
    Rcpp::traits::input_parameter< bool >::type scale_grad_by_freq(scale_grad_by_freqSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_embedding_sparse_backward_grad_Tensor_indices_Tensor_num_weights_int64_t_padding_idx_int64_t_scale_grad_by_freq_bool(grad, indices, num_weights, padding_idx, scale_grad_by_freq));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_embedding_bag_weight_Tensor_indices_Tensor_offsets_Tensor
Rcpp::List cpp_torch_namespace_embedding_bag_weight_Tensor_indices_Tensor_offsets_Tensor(Rcpp::XPtr<torch::Tensor> weight, Rcpp::XPtr<torch::Tensor> indices, Rcpp::XPtr<torch::Tensor> offsets, bool scale_grad_by_freq, int64_t mode, bool sparse, Rcpp::XPtr<torch::Tensor> per_sample_weights);
RcppExport SEXP _torch_cpp_torch_namespace_embedding_bag_weight_Tensor_indices_Tensor_offsets_Tensor(SEXP weightSEXP, SEXP indicesSEXP, SEXP offsetsSEXP, SEXP scale_grad_by_freqSEXP, SEXP modeSEXP, SEXP sparseSEXP, SEXP per_sample_weightsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type indices(indicesSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type offsets(offsetsSEXP);
    Rcpp::traits::input_parameter< bool >::type scale_grad_by_freq(scale_grad_by_freqSEXP);
    Rcpp::traits::input_parameter< int64_t >::type mode(modeSEXP);
    Rcpp::traits::input_parameter< bool >::type sparse(sparseSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type per_sample_weights(per_sample_weightsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_embedding_bag_weight_Tensor_indices_Tensor_offsets_Tensor(weight, indices, offsets, scale_grad_by_freq, mode, sparse, per_sample_weights));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__embedding_bag_weight_Tensor_indices_Tensor_offsets_Tensor
Rcpp::List cpp_torch_namespace__embedding_bag_weight_Tensor_indices_Tensor_offsets_Tensor(Rcpp::XPtr<torch::Tensor> weight, Rcpp::XPtr<torch::Tensor> indices, Rcpp::XPtr<torch::Tensor> offsets, bool scale_grad_by_freq, int64_t mode, bool sparse, Rcpp::XPtr<torch::Tensor> per_sample_weights);
RcppExport SEXP _torch_cpp_torch_namespace__embedding_bag_weight_Tensor_indices_Tensor_offsets_Tensor(SEXP weightSEXP, SEXP indicesSEXP, SEXP offsetsSEXP, SEXP scale_grad_by_freqSEXP, SEXP modeSEXP, SEXP sparseSEXP, SEXP per_sample_weightsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type indices(indicesSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type offsets(offsetsSEXP);
    Rcpp::traits::input_parameter< bool >::type scale_grad_by_freq(scale_grad_by_freqSEXP);
    Rcpp::traits::input_parameter< int64_t >::type mode(modeSEXP);
    Rcpp::traits::input_parameter< bool >::type sparse(sparseSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type per_sample_weights(per_sample_weightsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__embedding_bag_weight_Tensor_indices_Tensor_offsets_Tensor(weight, indices, offsets, scale_grad_by_freq, mode, sparse, per_sample_weights));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__embedding_bag_backward_grad_Tensor_indices_Tensor_offsets_Tensor_offset2bag_Tensor_bag_size_Tensor_maximum_indices_Tensor_num_weights_int64_t_scale_grad_by_freq_bool_mode_int64_t_sparse_bool_per_sample_weights_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace__embedding_bag_backward_grad_Tensor_indices_Tensor_offsets_Tensor_offset2bag_Tensor_bag_size_Tensor_maximum_indices_Tensor_num_weights_int64_t_scale_grad_by_freq_bool_mode_int64_t_sparse_bool_per_sample_weights_Tensor(Rcpp::XPtr<torch::Tensor> grad, Rcpp::XPtr<torch::Tensor> indices, Rcpp::XPtr<torch::Tensor> offsets, Rcpp::XPtr<torch::Tensor> offset2bag, Rcpp::XPtr<torch::Tensor> bag_size, Rcpp::XPtr<torch::Tensor> maximum_indices, int64_t num_weights, bool scale_grad_by_freq, int64_t mode, bool sparse, Rcpp::XPtr<torch::Tensor> per_sample_weights);
RcppExport SEXP _torch_cpp_torch_namespace__embedding_bag_backward_grad_Tensor_indices_Tensor_offsets_Tensor_offset2bag_Tensor_bag_size_Tensor_maximum_indices_Tensor_num_weights_int64_t_scale_grad_by_freq_bool_mode_int64_t_sparse_bool_per_sample_weights_Tensor(SEXP gradSEXP, SEXP indicesSEXP, SEXP offsetsSEXP, SEXP offset2bagSEXP, SEXP bag_sizeSEXP, SEXP maximum_indicesSEXP, SEXP num_weightsSEXP, SEXP scale_grad_by_freqSEXP, SEXP modeSEXP, SEXP sparseSEXP, SEXP per_sample_weightsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type grad(gradSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type indices(indicesSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type offsets(offsetsSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type offset2bag(offset2bagSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type bag_size(bag_sizeSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type maximum_indices(maximum_indicesSEXP);
    Rcpp::traits::input_parameter< int64_t >::type num_weights(num_weightsSEXP);
    Rcpp::traits::input_parameter< bool >::type scale_grad_by_freq(scale_grad_by_freqSEXP);
    Rcpp::traits::input_parameter< int64_t >::type mode(modeSEXP);
    Rcpp::traits::input_parameter< bool >::type sparse(sparseSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type per_sample_weights(per_sample_weightsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__embedding_bag_backward_grad_Tensor_indices_Tensor_offsets_Tensor_offset2bag_Tensor_bag_size_Tensor_maximum_indices_Tensor_num_weights_int64_t_scale_grad_by_freq_bool_mode_int64_t_sparse_bool_per_sample_weights_Tensor(grad, indices, offsets, offset2bag, bag_size, maximum_indices, num_weights, scale_grad_by_freq, mode, sparse, per_sample_weights));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__embedding_bag_sparse_backward_grad_Tensor_indices_Tensor_offsets_Tensor_offset2bag_Tensor_bag_size_Tensor_num_weights_int64_t_scale_grad_by_freq_bool_mode_int64_t_per_sample_weights_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace__embedding_bag_sparse_backward_grad_Tensor_indices_Tensor_offsets_Tensor_offset2bag_Tensor_bag_size_Tensor_num_weights_int64_t_scale_grad_by_freq_bool_mode_int64_t_per_sample_weights_Tensor(Rcpp::XPtr<torch::Tensor> grad, Rcpp::XPtr<torch::Tensor> indices, Rcpp::XPtr<torch::Tensor> offsets, Rcpp::XPtr<torch::Tensor> offset2bag, Rcpp::XPtr<torch::Tensor> bag_size, int64_t num_weights, bool scale_grad_by_freq, int64_t mode, Rcpp::XPtr<torch::Tensor> per_sample_weights);
RcppExport SEXP _torch_cpp_torch_namespace__embedding_bag_sparse_backward_grad_Tensor_indices_Tensor_offsets_Tensor_offset2bag_Tensor_bag_size_Tensor_num_weights_int64_t_scale_grad_by_freq_bool_mode_int64_t_per_sample_weights_Tensor(SEXP gradSEXP, SEXP indicesSEXP, SEXP offsetsSEXP, SEXP offset2bagSEXP, SEXP bag_sizeSEXP, SEXP num_weightsSEXP, SEXP scale_grad_by_freqSEXP, SEXP modeSEXP, SEXP per_sample_weightsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type grad(gradSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type indices(indicesSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type offsets(offsetsSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type offset2bag(offset2bagSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type bag_size(bag_sizeSEXP);
    Rcpp::traits::input_parameter< int64_t >::type num_weights(num_weightsSEXP);
    Rcpp::traits::input_parameter< bool >::type scale_grad_by_freq(scale_grad_by_freqSEXP);
    Rcpp::traits::input_parameter< int64_t >::type mode(modeSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type per_sample_weights(per_sample_weightsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__embedding_bag_sparse_backward_grad_Tensor_indices_Tensor_offsets_Tensor_offset2bag_Tensor_bag_size_Tensor_num_weights_int64_t_scale_grad_by_freq_bool_mode_int64_t_per_sample_weights_Tensor(grad, indices, offsets, offset2bag, bag_size, num_weights, scale_grad_by_freq, mode, per_sample_weights));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__embedding_bag_dense_backward_grad_Tensor_indices_Tensor_offsets_Tensor_offset2bag_Tensor_bag_size_Tensor_maximum_indices_Tensor_num_weights_int64_t_scale_grad_by_freq_bool_mode_int64_t_per_sample_weights_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace__embedding_bag_dense_backward_grad_Tensor_indices_Tensor_offsets_Tensor_offset2bag_Tensor_bag_size_Tensor_maximum_indices_Tensor_num_weights_int64_t_scale_grad_by_freq_bool_mode_int64_t_per_sample_weights_Tensor(Rcpp::XPtr<torch::Tensor> grad, Rcpp::XPtr<torch::Tensor> indices, Rcpp::XPtr<torch::Tensor> offsets, Rcpp::XPtr<torch::Tensor> offset2bag, Rcpp::XPtr<torch::Tensor> bag_size, Rcpp::XPtr<torch::Tensor> maximum_indices, int64_t num_weights, bool scale_grad_by_freq, int64_t mode, Rcpp::XPtr<torch::Tensor> per_sample_weights);
RcppExport SEXP _torch_cpp_torch_namespace__embedding_bag_dense_backward_grad_Tensor_indices_Tensor_offsets_Tensor_offset2bag_Tensor_bag_size_Tensor_maximum_indices_Tensor_num_weights_int64_t_scale_grad_by_freq_bool_mode_int64_t_per_sample_weights_Tensor(SEXP gradSEXP, SEXP indicesSEXP, SEXP offsetsSEXP, SEXP offset2bagSEXP, SEXP bag_sizeSEXP, SEXP maximum_indicesSEXP, SEXP num_weightsSEXP, SEXP scale_grad_by_freqSEXP, SEXP modeSEXP, SEXP per_sample_weightsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type grad(gradSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type indices(indicesSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type offsets(offsetsSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type offset2bag(offset2bagSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type bag_size(bag_sizeSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type maximum_indices(maximum_indicesSEXP);
    Rcpp::traits::input_parameter< int64_t >::type num_weights(num_weightsSEXP);
    Rcpp::traits::input_parameter< bool >::type scale_grad_by_freq(scale_grad_by_freqSEXP);
    Rcpp::traits::input_parameter< int64_t >::type mode(modeSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type per_sample_weights(per_sample_weightsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__embedding_bag_dense_backward_grad_Tensor_indices_Tensor_offsets_Tensor_offset2bag_Tensor_bag_size_Tensor_maximum_indices_Tensor_num_weights_int64_t_scale_grad_by_freq_bool_mode_int64_t_per_sample_weights_Tensor(grad, indices, offsets, offset2bag, bag_size, maximum_indices, num_weights, scale_grad_by_freq, mode, per_sample_weights));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__embedding_bag_per_sample_weights_backward_grad_Tensor_weight_Tensor_indices_Tensor_offsets_Tensor_offset2bag_Tensor_mode_int64_t
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace__embedding_bag_per_sample_weights_backward_grad_Tensor_weight_Tensor_indices_Tensor_offsets_Tensor_offset2bag_Tensor_mode_int64_t(Rcpp::XPtr<torch::Tensor> grad, Rcpp::XPtr<torch::Tensor> weight, Rcpp::XPtr<torch::Tensor> indices, Rcpp::XPtr<torch::Tensor> offsets, Rcpp::XPtr<torch::Tensor> offset2bag, int64_t mode);
RcppExport SEXP _torch_cpp_torch_namespace__embedding_bag_per_sample_weights_backward_grad_Tensor_weight_Tensor_indices_Tensor_offsets_Tensor_offset2bag_Tensor_mode_int64_t(SEXP gradSEXP, SEXP weightSEXP, SEXP indicesSEXP, SEXP offsetsSEXP, SEXP offset2bagSEXP, SEXP modeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type grad(gradSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type indices(indicesSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type offsets(offsetsSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type offset2bag(offset2bagSEXP);
    Rcpp::traits::input_parameter< int64_t >::type mode(modeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__embedding_bag_per_sample_weights_backward_grad_Tensor_weight_Tensor_indices_Tensor_offsets_Tensor_offset2bag_Tensor_mode_int64_t(grad, weight, indices, offsets, offset2bag, mode));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_empty_size_IntArrayRef_names_DimnameList
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_empty_size_IntArrayRef_names_DimnameList(std::vector<int64_t> size, Rcpp::XPtr<std::vector<torch::Dimname>> names, Rcpp::XPtr<torch::TensorOptions> options, Rcpp::XPtr<c10::optional<torch::MemoryFormat>> memory_format);
RcppExport SEXP _torch_cpp_torch_namespace_empty_size_IntArrayRef_names_DimnameList(SEXP sizeSEXP, SEXP namesSEXP, SEXP optionsSEXP, SEXP memory_formatSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::vector<torch::Dimname>> >::type names(namesSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::TensorOptions> >::type options(optionsSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<c10::optional<torch::MemoryFormat>> >::type memory_format(memory_formatSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_empty_size_IntArrayRef_names_DimnameList(size, names, options, memory_format));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_empty_size_IntArrayRef
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_empty_size_IntArrayRef(std::vector<int64_t> size, Rcpp::XPtr<torch::TensorOptions> options, Rcpp::XPtr<c10::optional<torch::MemoryFormat>> memory_format);
RcppExport SEXP _torch_cpp_torch_namespace_empty_size_IntArrayRef(SEXP sizeSEXP, SEXP optionsSEXP, SEXP memory_formatSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::TensorOptions> >::type options(optionsSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<c10::optional<torch::MemoryFormat>> >::type memory_format(memory_formatSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_empty_size_IntArrayRef(size, options, memory_format));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__empty_affine_quantized_size_IntArrayRef
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace__empty_affine_quantized_size_IntArrayRef(std::vector<int64_t> size, Rcpp::XPtr<torch::TensorOptions> options, double scale, int64_t zero_point, Rcpp::XPtr<c10::optional<torch::MemoryFormat>> memory_format);
RcppExport SEXP _torch_cpp_torch_namespace__empty_affine_quantized_size_IntArrayRef(SEXP sizeSEXP, SEXP optionsSEXP, SEXP scaleSEXP, SEXP zero_pointSEXP, SEXP memory_formatSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::TensorOptions> >::type options(optionsSEXP);
    Rcpp::traits::input_parameter< double >::type scale(scaleSEXP);
    Rcpp::traits::input_parameter< int64_t >::type zero_point(zero_pointSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<c10::optional<torch::MemoryFormat>> >::type memory_format(memory_formatSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__empty_affine_quantized_size_IntArrayRef(size, options, scale, zero_point, memory_format));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__empty_per_channel_affine_quantized_size_IntArrayRef_scales_Tensor_zero_points_Tensor_axis_int64_t
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace__empty_per_channel_affine_quantized_size_IntArrayRef_scales_Tensor_zero_points_Tensor_axis_int64_t(std::vector<int64_t> size, Rcpp::XPtr<torch::Tensor> scales, Rcpp::XPtr<torch::Tensor> zero_points, int64_t axis, Rcpp::XPtr<torch::TensorOptions> options, Rcpp::XPtr<c10::optional<torch::MemoryFormat>> memory_format);
RcppExport SEXP _torch_cpp_torch_namespace__empty_per_channel_affine_quantized_size_IntArrayRef_scales_Tensor_zero_points_Tensor_axis_int64_t(SEXP sizeSEXP, SEXP scalesSEXP, SEXP zero_pointsSEXP, SEXP axisSEXP, SEXP optionsSEXP, SEXP memory_formatSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type scales(scalesSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type zero_points(zero_pointsSEXP);
    Rcpp::traits::input_parameter< int64_t >::type axis(axisSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::TensorOptions> >::type options(optionsSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<c10::optional<torch::MemoryFormat>> >::type memory_format(memory_formatSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__empty_per_channel_affine_quantized_size_IntArrayRef_scales_Tensor_zero_points_Tensor_axis_int64_t(size, scales, zero_points, axis, options, memory_format));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_empty_out_out_Tensor_size_IntArrayRef
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_empty_out_out_Tensor_size_IntArrayRef(Rcpp::XPtr<torch::Tensor> out, std::vector<int64_t> size, Rcpp::XPtr<c10::optional<torch::MemoryFormat>> memory_format);
RcppExport SEXP _torch_cpp_torch_namespace_empty_out_out_Tensor_size_IntArrayRef(SEXP outSEXP, SEXP sizeSEXP, SEXP memory_formatSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type out(outSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<c10::optional<torch::MemoryFormat>> >::type memory_format(memory_formatSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_empty_out_out_Tensor_size_IntArrayRef(out, size, memory_format));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_empty_like_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_empty_like_self_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<c10::optional<torch::MemoryFormat>> memory_format);
RcppExport SEXP _torch_cpp_torch_namespace_empty_like_self_Tensor(SEXP selfSEXP, SEXP memory_formatSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<c10::optional<torch::MemoryFormat>> >::type memory_format(memory_formatSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_empty_like_self_Tensor(self, memory_format));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_empty_like_self_Tensor_options_TensorOptions
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_empty_like_self_Tensor_options_TensorOptions(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::TensorOptions> options, Rcpp::XPtr<c10::optional<torch::MemoryFormat>> memory_format);
RcppExport SEXP _torch_cpp_torch_namespace_empty_like_self_Tensor_options_TensorOptions(SEXP selfSEXP, SEXP optionsSEXP, SEXP memory_formatSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::TensorOptions> >::type options(optionsSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<c10::optional<torch::MemoryFormat>> >::type memory_format(memory_formatSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_empty_like_self_Tensor_options_TensorOptions(self, options, memory_format));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_empty_strided_size_IntArrayRef_stride_IntArrayRef
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_empty_strided_size_IntArrayRef_stride_IntArrayRef(std::vector<int64_t> size, std::vector<int64_t> stride, Rcpp::XPtr<torch::TensorOptions> options);
RcppExport SEXP _torch_cpp_torch_namespace_empty_strided_size_IntArrayRef_stride_IntArrayRef(SEXP sizeSEXP, SEXP strideSEXP, SEXP optionsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type stride(strideSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::TensorOptions> >::type options(optionsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_empty_strided_size_IntArrayRef_stride_IntArrayRef(size, stride, options));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_erf_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_erf_self_Tensor(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_namespace_erf_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_erf_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_erf__self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_erf__self_Tensor(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_namespace_erf__self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_erf__self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_erf_out_out_Tensor_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_erf_out_out_Tensor_self_Tensor(Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_namespace_erf_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type out(outSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_erf_out_out_Tensor_self_Tensor(out, self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_erfc_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_erfc_self_Tensor(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_namespace_erfc_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_erfc_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_erfc__self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_erfc__self_Tensor(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_namespace_erfc__self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_erfc__self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_erfc_out_out_Tensor_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_erfc_out_out_Tensor_self_Tensor(Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_namespace_erfc_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type out(outSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_erfc_out_out_Tensor_self_Tensor(out, self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_exp_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_exp_self_Tensor(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_namespace_exp_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_exp_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_exp__self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_exp__self_Tensor(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_namespace_exp__self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_exp__self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_exp_out_out_Tensor_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_exp_out_out_Tensor_self_Tensor(Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_namespace_exp_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type out(outSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_exp_out_out_Tensor_self_Tensor(out, self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_expm1_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_expm1_self_Tensor(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_namespace_expm1_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_expm1_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_expm1__self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_expm1__self_Tensor(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_namespace_expm1__self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_expm1__self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_expm1_out_out_Tensor_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_expm1_out_out_Tensor_self_Tensor(Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_namespace_expm1_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type out(outSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_expm1_out_out_Tensor_self_Tensor(out, self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_eye_n_int64_t
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_eye_n_int64_t(int64_t n, Rcpp::XPtr<torch::TensorOptions> options);
RcppExport SEXP _torch_cpp_torch_namespace_eye_n_int64_t(SEXP nSEXP, SEXP optionsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int64_t >::type n(nSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::TensorOptions> >::type options(optionsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_eye_n_int64_t(n, options));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_eye_n_int64_t_m_int64_t
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_eye_n_int64_t_m_int64_t(int64_t n, int64_t m, Rcpp::XPtr<torch::TensorOptions> options);
RcppExport SEXP _torch_cpp_torch_namespace_eye_n_int64_t_m_int64_t(SEXP nSEXP, SEXP mSEXP, SEXP optionsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int64_t >::type n(nSEXP);
    Rcpp::traits::input_parameter< int64_t >::type m(mSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::TensorOptions> >::type options(optionsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_eye_n_int64_t_m_int64_t(n, m, options));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_eye_out_out_Tensor_n_int64_t
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_eye_out_out_Tensor_n_int64_t(Rcpp::XPtr<torch::Tensor> out, int64_t n);
RcppExport SEXP _torch_cpp_torch_namespace_eye_out_out_Tensor_n_int64_t(SEXP outSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type out(outSEXP);
    Rcpp::traits::input_parameter< int64_t >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_eye_out_out_Tensor_n_int64_t(out, n));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_eye_out_out_Tensor_n_int64_t_m_int64_t
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_eye_out_out_Tensor_n_int64_t_m_int64_t(Rcpp::XPtr<torch::Tensor> out, int64_t n, int64_t m);
RcppExport SEXP _torch_cpp_torch_namespace_eye_out_out_Tensor_n_int64_t_m_int64_t(SEXP outSEXP, SEXP nSEXP, SEXP mSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type out(outSEXP);
    Rcpp::traits::input_parameter< int64_t >::type n(nSEXP);
    Rcpp::traits::input_parameter< int64_t >::type m(mSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_eye_out_out_Tensor_n_int64_t_m_int64_t(out, n, m));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_flatten_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_flatten_self_Tensor(Rcpp::XPtr<torch::Tensor> self, int64_t start_dim, int64_t end_dim);
RcppExport SEXP _torch_cpp_torch_namespace_flatten_self_Tensor(SEXP selfSEXP, SEXP start_dimSEXP, SEXP end_dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< int64_t >::type start_dim(start_dimSEXP);
    Rcpp::traits::input_parameter< int64_t >::type end_dim(end_dimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_flatten_self_Tensor(self, start_dim, end_dim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_flatten_self_Tensor_start_dim_int64_t_end_dim_int64_t_out_dim_Dimname
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_flatten_self_Tensor_start_dim_int64_t_end_dim_int64_t_out_dim_Dimname(Rcpp::XPtr<torch::Tensor> self, int64_t start_dim, int64_t end_dim, Rcpp::XPtr<torch::Dimname> out_dim);
RcppExport SEXP _torch_cpp_torch_namespace_flatten_self_Tensor_start_dim_int64_t_end_dim_int64_t_out_dim_Dimname(SEXP selfSEXP, SEXP start_dimSEXP, SEXP end_dimSEXP, SEXP out_dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< int64_t >::type start_dim(start_dimSEXP);
    Rcpp::traits::input_parameter< int64_t >::type end_dim(end_dimSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Dimname> >::type out_dim(out_dimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_flatten_self_Tensor_start_dim_int64_t_end_dim_int64_t_out_dim_Dimname(self, start_dim, end_dim, out_dim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_flatten_self_Tensor_start_dim_Dimname_end_dim_Dimname_out_dim_Dimname
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_flatten_self_Tensor_start_dim_Dimname_end_dim_Dimname_out_dim_Dimname(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Dimname> start_dim, Rcpp::XPtr<torch::Dimname> end_dim, Rcpp::XPtr<torch::Dimname> out_dim);
RcppExport SEXP _torch_cpp_torch_namespace_flatten_self_Tensor_start_dim_Dimname_end_dim_Dimname_out_dim_Dimname(SEXP selfSEXP, SEXP start_dimSEXP, SEXP end_dimSEXP, SEXP out_dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Dimname> >::type start_dim(start_dimSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Dimname> >::type end_dim(end_dimSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Dimname> >::type out_dim(out_dimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_flatten_self_Tensor_start_dim_Dimname_end_dim_Dimname_out_dim_Dimname(self, start_dim, end_dim, out_dim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_flatten_self_Tensor_dims_DimnameList_out_dim_Dimname
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_flatten_self_Tensor_dims_DimnameList_out_dim_Dimname(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<std::vector<torch::Dimname>> dims, Rcpp::XPtr<torch::Dimname> out_dim);
RcppExport SEXP _torch_cpp_torch_namespace_flatten_self_Tensor_dims_DimnameList_out_dim_Dimname(SEXP selfSEXP, SEXP dimsSEXP, SEXP out_dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::vector<torch::Dimname>> >::type dims(dimsSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Dimname> >::type out_dim(out_dimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_flatten_self_Tensor_dims_DimnameList_out_dim_Dimname(self, dims, out_dim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_fill__self_Tensor_value_Scalar
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_fill__self_Tensor_value_Scalar(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Scalar> value);
RcppExport SEXP _torch_cpp_torch_namespace_fill__self_Tensor_value_Scalar(SEXP selfSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_fill__self_Tensor_value_Scalar(self, value));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_fill__self_Tensor_value_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_fill__self_Tensor_value_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> value);
RcppExport SEXP _torch_cpp_torch_namespace_fill__self_Tensor_value_Tensor(SEXP selfSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_fill__self_Tensor_value_Tensor(self, value));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_floor_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_floor_self_Tensor(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_namespace_floor_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_floor_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_floor__self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_floor__self_Tensor(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_namespace_floor__self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_floor__self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_floor_out_out_Tensor_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_floor_out_out_Tensor_self_Tensor(Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_namespace_floor_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type out(outSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_floor_out_out_Tensor_self_Tensor(out, self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_frac_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_frac_self_Tensor(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_namespace_frac_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_frac_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_frac__self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_frac__self_Tensor(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_namespace_frac__self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_frac__self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_frac_out_out_Tensor_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_frac_out_out_Tensor_self_Tensor(Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_namespace_frac_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type out(outSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_frac_out_out_Tensor_self_Tensor(out, self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_full_size_IntArrayRef_fill_value_Scalar_names_DimnameList
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_full_size_IntArrayRef_fill_value_Scalar_names_DimnameList(std::vector<int64_t> size, Rcpp::XPtr<torch::Scalar> fill_value, Rcpp::XPtr<std::vector<torch::Dimname>> names, Rcpp::XPtr<torch::TensorOptions> options);
RcppExport SEXP _torch_cpp_torch_namespace_full_size_IntArrayRef_fill_value_Scalar_names_DimnameList(SEXP sizeSEXP, SEXP fill_valueSEXP, SEXP namesSEXP, SEXP optionsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type fill_value(fill_valueSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::vector<torch::Dimname>> >::type names(namesSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::TensorOptions> >::type options(optionsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_full_size_IntArrayRef_fill_value_Scalar_names_DimnameList(size, fill_value, names, options));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_full_size_IntArrayRef_fill_value_Scalar
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_full_size_IntArrayRef_fill_value_Scalar(std::vector<int64_t> size, Rcpp::XPtr<torch::Scalar> fill_value, Rcpp::XPtr<torch::TensorOptions> options);
RcppExport SEXP _torch_cpp_torch_namespace_full_size_IntArrayRef_fill_value_Scalar(SEXP sizeSEXP, SEXP fill_valueSEXP, SEXP optionsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type fill_value(fill_valueSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::TensorOptions> >::type options(optionsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_full_size_IntArrayRef_fill_value_Scalar(size, fill_value, options));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_full_out_out_Tensor_size_IntArrayRef_fill_value_Scalar
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_full_out_out_Tensor_size_IntArrayRef_fill_value_Scalar(Rcpp::XPtr<torch::Tensor> out, std::vector<int64_t> size, Rcpp::XPtr<torch::Scalar> fill_value);
RcppExport SEXP _torch_cpp_torch_namespace_full_out_out_Tensor_size_IntArrayRef_fill_value_Scalar(SEXP outSEXP, SEXP sizeSEXP, SEXP fill_valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type out(outSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type fill_value(fill_valueSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_full_out_out_Tensor_size_IntArrayRef_fill_value_Scalar(out, size, fill_value));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_full_like_self_Tensor_fill_value_Scalar
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_full_like_self_Tensor_fill_value_Scalar(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Scalar> fill_value, Rcpp::XPtr<c10::optional<torch::MemoryFormat>> memory_format);
RcppExport SEXP _torch_cpp_torch_namespace_full_like_self_Tensor_fill_value_Scalar(SEXP selfSEXP, SEXP fill_valueSEXP, SEXP memory_formatSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type fill_value(fill_valueSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<c10::optional<torch::MemoryFormat>> >::type memory_format(memory_formatSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_full_like_self_Tensor_fill_value_Scalar(self, fill_value, memory_format));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_full_like_self_Tensor_fill_value_Scalar_options_TensorOptions
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_full_like_self_Tensor_fill_value_Scalar_options_TensorOptions(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Scalar> fill_value, Rcpp::XPtr<torch::TensorOptions> options, Rcpp::XPtr<c10::optional<torch::MemoryFormat>> memory_format);
RcppExport SEXP _torch_cpp_torch_namespace_full_like_self_Tensor_fill_value_Scalar_options_TensorOptions(SEXP selfSEXP, SEXP fill_valueSEXP, SEXP optionsSEXP, SEXP memory_formatSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type fill_value(fill_valueSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::TensorOptions> >::type options(optionsSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<c10::optional<torch::MemoryFormat>> >::type memory_format(memory_formatSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_full_like_self_Tensor_fill_value_Scalar_options_TensorOptions(self, fill_value, options, memory_format));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_from_file_filename_stdstring
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_from_file_filename_stdstring(std::string filename, bool shared, int64_t size, Rcpp::XPtr<torch::TensorOptions> options);
RcppExport SEXP _torch_cpp_torch_namespace_from_file_filename_stdstring(SEXP filenameSEXP, SEXP sharedSEXP, SEXP sizeSEXP, SEXP optionsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type filename(filenameSEXP);
    Rcpp::traits::input_parameter< bool >::type shared(sharedSEXP);
    Rcpp::traits::input_parameter< int64_t >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::TensorOptions> >::type options(optionsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_from_file_filename_stdstring(filename, shared, size, options));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_grid_sampler_input_Tensor_grid_Tensor_interpolation_mode_int64_t_padding_mode_int64_t_align_corners_bool
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_grid_sampler_input_Tensor_grid_Tensor_interpolation_mode_int64_t_padding_mode_int64_t_align_corners_bool(Rcpp::XPtr<torch::Tensor> input, Rcpp::XPtr<torch::Tensor> grid, int64_t interpolation_mode, int64_t padding_mode, bool align_corners);
RcppExport SEXP _torch_cpp_torch_namespace_grid_sampler_input_Tensor_grid_Tensor_interpolation_mode_int64_t_padding_mode_int64_t_align_corners_bool(SEXP inputSEXP, SEXP gridSEXP, SEXP interpolation_modeSEXP, SEXP padding_modeSEXP, SEXP align_cornersSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type input(inputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type grid(gridSEXP);
    Rcpp::traits::input_parameter< int64_t >::type interpolation_mode(interpolation_modeSEXP);
    Rcpp::traits::input_parameter< int64_t >::type padding_mode(padding_modeSEXP);
    Rcpp::traits::input_parameter< bool >::type align_corners(align_cornersSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_grid_sampler_input_Tensor_grid_Tensor_interpolation_mode_int64_t_padding_mode_int64_t_align_corners_bool(input, grid, interpolation_mode, padding_mode, align_corners));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_grid_sampler_2d_input_Tensor_grid_Tensor_interpolation_mode_int64_t_padding_mode_int64_t_align_corners_bool
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_grid_sampler_2d_input_Tensor_grid_Tensor_interpolation_mode_int64_t_padding_mode_int64_t_align_corners_bool(Rcpp::XPtr<torch::Tensor> input, Rcpp::XPtr<torch::Tensor> grid, int64_t interpolation_mode, int64_t padding_mode, bool align_corners);
RcppExport SEXP _torch_cpp_torch_namespace_grid_sampler_2d_input_Tensor_grid_Tensor_interpolation_mode_int64_t_padding_mode_int64_t_align_corners_bool(SEXP inputSEXP, SEXP gridSEXP, SEXP interpolation_modeSEXP, SEXP padding_modeSEXP, SEXP align_cornersSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type input(inputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type grid(gridSEXP);
    Rcpp::traits::input_parameter< int64_t >::type interpolation_mode(interpolation_modeSEXP);
    Rcpp::traits::input_parameter< int64_t >::type padding_mode(padding_modeSEXP);
    Rcpp::traits::input_parameter< bool >::type align_corners(align_cornersSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_grid_sampler_2d_input_Tensor_grid_Tensor_interpolation_mode_int64_t_padding_mode_int64_t_align_corners_bool(input, grid, interpolation_mode, padding_mode, align_corners));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_grid_sampler_2d_backward_grad_output_Tensor_input_Tensor_grid_Tensor_interpolation_mode_int64_t_padding_mode_int64_t_align_corners_bool
Rcpp::List cpp_torch_namespace_grid_sampler_2d_backward_grad_output_Tensor_input_Tensor_grid_Tensor_interpolation_mode_int64_t_padding_mode_int64_t_align_corners_bool(Rcpp::XPtr<torch::Tensor> grad_output, Rcpp::XPtr<torch::Tensor> input, Rcpp::XPtr<torch::Tensor> grid, int64_t interpolation_mode, int64_t padding_mode, bool align_corners);
RcppExport SEXP _torch_cpp_torch_namespace_grid_sampler_2d_backward_grad_output_Tensor_input_Tensor_grid_Tensor_interpolation_mode_int64_t_padding_mode_int64_t_align_corners_bool(SEXP grad_outputSEXP, SEXP inputSEXP, SEXP gridSEXP, SEXP interpolation_modeSEXP, SEXP padding_modeSEXP, SEXP align_cornersSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type input(inputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type grid(gridSEXP);
    Rcpp::traits::input_parameter< int64_t >::type interpolation_mode(interpolation_modeSEXP);
    Rcpp::traits::input_parameter< int64_t >::type padding_mode(padding_modeSEXP);
    Rcpp::traits::input_parameter< bool >::type align_corners(align_cornersSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_grid_sampler_2d_backward_grad_output_Tensor_input_Tensor_grid_Tensor_interpolation_mode_int64_t_padding_mode_int64_t_align_corners_bool(grad_output, input, grid, interpolation_mode, padding_mode, align_corners));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_grid_sampler_3d_input_Tensor_grid_Tensor_interpolation_mode_int64_t_padding_mode_int64_t_align_corners_bool
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_grid_sampler_3d_input_Tensor_grid_Tensor_interpolation_mode_int64_t_padding_mode_int64_t_align_corners_bool(Rcpp::XPtr<torch::Tensor> input, Rcpp::XPtr<torch::Tensor> grid, int64_t interpolation_mode, int64_t padding_mode, bool align_corners);
RcppExport SEXP _torch_cpp_torch_namespace_grid_sampler_3d_input_Tensor_grid_Tensor_interpolation_mode_int64_t_padding_mode_int64_t_align_corners_bool(SEXP inputSEXP, SEXP gridSEXP, SEXP interpolation_modeSEXP, SEXP padding_modeSEXP, SEXP align_cornersSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type input(inputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type grid(gridSEXP);
    Rcpp::traits::input_parameter< int64_t >::type interpolation_mode(interpolation_modeSEXP);
    Rcpp::traits::input_parameter< int64_t >::type padding_mode(padding_modeSEXP);
    Rcpp::traits::input_parameter< bool >::type align_corners(align_cornersSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_grid_sampler_3d_input_Tensor_grid_Tensor_interpolation_mode_int64_t_padding_mode_int64_t_align_corners_bool(input, grid, interpolation_mode, padding_mode, align_corners));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_grid_sampler_3d_backward_grad_output_Tensor_input_Tensor_grid_Tensor_interpolation_mode_int64_t_padding_mode_int64_t_align_corners_bool
Rcpp::List cpp_torch_namespace_grid_sampler_3d_backward_grad_output_Tensor_input_Tensor_grid_Tensor_interpolation_mode_int64_t_padding_mode_int64_t_align_corners_bool(Rcpp::XPtr<torch::Tensor> grad_output, Rcpp::XPtr<torch::Tensor> input, Rcpp::XPtr<torch::Tensor> grid, int64_t interpolation_mode, int64_t padding_mode, bool align_corners);
RcppExport SEXP _torch_cpp_torch_namespace_grid_sampler_3d_backward_grad_output_Tensor_input_Tensor_grid_Tensor_interpolation_mode_int64_t_padding_mode_int64_t_align_corners_bool(SEXP grad_outputSEXP, SEXP inputSEXP, SEXP gridSEXP, SEXP interpolation_modeSEXP, SEXP padding_modeSEXP, SEXP align_cornersSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type input(inputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type grid(gridSEXP);
    Rcpp::traits::input_parameter< int64_t >::type interpolation_mode(interpolation_modeSEXP);
    Rcpp::traits::input_parameter< int64_t >::type padding_mode(padding_modeSEXP);
    Rcpp::traits::input_parameter< bool >::type align_corners(align_cornersSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_grid_sampler_3d_backward_grad_output_Tensor_input_Tensor_grid_Tensor_interpolation_mode_int64_t_padding_mode_int64_t_align_corners_bool(grad_output, input, grid, interpolation_mode, padding_mode, align_corners));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_hann_window_window_length_int64_t
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_hann_window_window_length_int64_t(int64_t window_length, Rcpp::XPtr<torch::TensorOptions> options);
RcppExport SEXP _torch_cpp_torch_namespace_hann_window_window_length_int64_t(SEXP window_lengthSEXP, SEXP optionsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int64_t >::type window_length(window_lengthSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::TensorOptions> >::type options(optionsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_hann_window_window_length_int64_t(window_length, options));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_hann_window_window_length_int64_t_periodic_bool
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_hann_window_window_length_int64_t_periodic_bool(int64_t window_length, bool periodic, Rcpp::XPtr<torch::TensorOptions> options);
RcppExport SEXP _torch_cpp_torch_namespace_hann_window_window_length_int64_t_periodic_bool(SEXP window_lengthSEXP, SEXP periodicSEXP, SEXP optionsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int64_t >::type window_length(window_lengthSEXP);
    Rcpp::traits::input_parameter< bool >::type periodic(periodicSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::TensorOptions> >::type options(optionsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_hann_window_window_length_int64_t_periodic_bool(window_length, periodic, options));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_hamming_window_window_length_int64_t
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_hamming_window_window_length_int64_t(int64_t window_length, Rcpp::XPtr<torch::TensorOptions> options);
RcppExport SEXP _torch_cpp_torch_namespace_hamming_window_window_length_int64_t(SEXP window_lengthSEXP, SEXP optionsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int64_t >::type window_length(window_lengthSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::TensorOptions> >::type options(optionsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_hamming_window_window_length_int64_t(window_length, options));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_hamming_window_window_length_int64_t_periodic_bool
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_hamming_window_window_length_int64_t_periodic_bool(int64_t window_length, bool periodic, Rcpp::XPtr<torch::TensorOptions> options);
RcppExport SEXP _torch_cpp_torch_namespace_hamming_window_window_length_int64_t_periodic_bool(SEXP window_lengthSEXP, SEXP periodicSEXP, SEXP optionsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int64_t >::type window_length(window_lengthSEXP);
    Rcpp::traits::input_parameter< bool >::type periodic(periodicSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::TensorOptions> >::type options(optionsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_hamming_window_window_length_int64_t_periodic_bool(window_length, periodic, options));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_hamming_window_window_length_int64_t_periodic_bool_alpha_double
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_hamming_window_window_length_int64_t_periodic_bool_alpha_double(int64_t window_length, bool periodic, double alpha, Rcpp::XPtr<torch::TensorOptions> options);
RcppExport SEXP _torch_cpp_torch_namespace_hamming_window_window_length_int64_t_periodic_bool_alpha_double(SEXP window_lengthSEXP, SEXP periodicSEXP, SEXP alphaSEXP, SEXP optionsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int64_t >::type window_length(window_lengthSEXP);
    Rcpp::traits::input_parameter< bool >::type periodic(periodicSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::TensorOptions> >::type options(optionsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_hamming_window_window_length_int64_t_periodic_bool_alpha_double(window_length, periodic, alpha, options));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_hamming_window_window_length_int64_t_periodic_bool_alpha_double_beta_double
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_hamming_window_window_length_int64_t_periodic_bool_alpha_double_beta_double(int64_t window_length, bool periodic, double alpha, double beta, Rcpp::XPtr<torch::TensorOptions> options);
RcppExport SEXP _torch_cpp_torch_namespace_hamming_window_window_length_int64_t_periodic_bool_alpha_double_beta_double(SEXP window_lengthSEXP, SEXP periodicSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP optionsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int64_t >::type window_length(window_lengthSEXP);
    Rcpp::traits::input_parameter< bool >::type periodic(periodicSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::TensorOptions> >::type options(optionsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_hamming_window_window_length_int64_t_periodic_bool_alpha_double_beta_double(window_length, periodic, alpha, beta, options));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_hinge_embedding_loss_self_Tensor_target_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_hinge_embedding_loss_self_Tensor_target_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> target, double margin, int64_t reduction);
RcppExport SEXP _torch_cpp_torch_namespace_hinge_embedding_loss_self_Tensor_target_Tensor(SEXP selfSEXP, SEXP targetSEXP, SEXP marginSEXP, SEXP reductionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type target(targetSEXP);
    Rcpp::traits::input_parameter< double >::type margin(marginSEXP);
    Rcpp::traits::input_parameter< int64_t >::type reduction(reductionSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_hinge_embedding_loss_self_Tensor_target_Tensor(self, target, margin, reduction));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_ger_self_Tensor_vec2_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_ger_self_Tensor_vec2_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> vec2);
RcppExport SEXP _torch_cpp_torch_namespace_ger_self_Tensor_vec2_Tensor(SEXP selfSEXP, SEXP vec2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type vec2(vec2SEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_ger_self_Tensor_vec2_Tensor(self, vec2));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_ger_out_out_Tensor_self_Tensor_vec2_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_ger_out_out_Tensor_self_Tensor_vec2_Tensor(Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> vec2);
RcppExport SEXP _torch_cpp_torch_namespace_ger_out_out_Tensor_self_Tensor_vec2_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP vec2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type out(outSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type vec2(vec2SEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_ger_out_out_Tensor_self_Tensor_vec2_Tensor(out, self, vec2));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_group_norm_input_Tensor_num_groups_int64_t
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_group_norm_input_Tensor_num_groups_int64_t(Rcpp::XPtr<torch::Tensor> input, int64_t num_groups, Rcpp::XPtr<torch::Tensor> weight, Rcpp::XPtr<torch::Tensor> bias, double eps, bool cudnn_enabled);
RcppExport SEXP _torch_cpp_torch_namespace_group_norm_input_Tensor_num_groups_int64_t(SEXP inputSEXP, SEXP num_groupsSEXP, SEXP weightSEXP, SEXP biasSEXP, SEXP epsSEXP, SEXP cudnn_enabledSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type input(inputSEXP);
    Rcpp::traits::input_parameter< int64_t >::type num_groups(num_groupsSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type bias(biasSEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< bool >::type cudnn_enabled(cudnn_enabledSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_group_norm_input_Tensor_num_groups_int64_t(input, num_groups, weight, bias, eps, cudnn_enabled));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_fft_self_Tensor_signal_ndim_int64_t
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_fft_self_Tensor_signal_ndim_int64_t(Rcpp::XPtr<torch::Tensor> self, int64_t signal_ndim, bool normalized);
RcppExport SEXP _torch_cpp_torch_namespace_fft_self_Tensor_signal_ndim_int64_t(SEXP selfSEXP, SEXP signal_ndimSEXP, SEXP normalizedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< int64_t >::type signal_ndim(signal_ndimSEXP);
    Rcpp::traits::input_parameter< bool >::type normalized(normalizedSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_fft_self_Tensor_signal_ndim_int64_t(self, signal_ndim, normalized));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_ifft_self_Tensor_signal_ndim_int64_t
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_ifft_self_Tensor_signal_ndim_int64_t(Rcpp::XPtr<torch::Tensor> self, int64_t signal_ndim, bool normalized);
RcppExport SEXP _torch_cpp_torch_namespace_ifft_self_Tensor_signal_ndim_int64_t(SEXP selfSEXP, SEXP signal_ndimSEXP, SEXP normalizedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< int64_t >::type signal_ndim(signal_ndimSEXP);
    Rcpp::traits::input_parameter< bool >::type normalized(normalizedSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_ifft_self_Tensor_signal_ndim_int64_t(self, signal_ndim, normalized));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_rfft_self_Tensor_signal_ndim_int64_t
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_rfft_self_Tensor_signal_ndim_int64_t(Rcpp::XPtr<torch::Tensor> self, int64_t signal_ndim, bool normalized, bool onesided);
RcppExport SEXP _torch_cpp_torch_namespace_rfft_self_Tensor_signal_ndim_int64_t(SEXP selfSEXP, SEXP signal_ndimSEXP, SEXP normalizedSEXP, SEXP onesidedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< int64_t >::type signal_ndim(signal_ndimSEXP);
    Rcpp::traits::input_parameter< bool >::type normalized(normalizedSEXP);
    Rcpp::traits::input_parameter< bool >::type onesided(onesidedSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_rfft_self_Tensor_signal_ndim_int64_t(self, signal_ndim, normalized, onesided));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_irfft_self_Tensor_signal_ndim_int64_t
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_irfft_self_Tensor_signal_ndim_int64_t(Rcpp::XPtr<torch::Tensor> self, int64_t signal_ndim, bool normalized, bool onesided, std::vector<int64_t> signal_sizes);
RcppExport SEXP _torch_cpp_torch_namespace_irfft_self_Tensor_signal_ndim_int64_t(SEXP selfSEXP, SEXP signal_ndimSEXP, SEXP normalizedSEXP, SEXP onesidedSEXP, SEXP signal_sizesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< int64_t >::type signal_ndim(signal_ndimSEXP);
    Rcpp::traits::input_parameter< bool >::type normalized(normalizedSEXP);
    Rcpp::traits::input_parameter< bool >::type onesided(onesidedSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type signal_sizes(signal_sizesSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_irfft_self_Tensor_signal_ndim_int64_t(self, signal_ndim, normalized, onesided, signal_sizes));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__fft_with_size_self_Tensor_signal_ndim_int64_t_complex_input_bool_complex_output_bool_inverse_bool_checked_signal_sizes_IntArrayRef_normalized_bool_onesided_bool_output_sizes_IntArrayRef
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace__fft_with_size_self_Tensor_signal_ndim_int64_t_complex_input_bool_complex_output_bool_inverse_bool_checked_signal_sizes_IntArrayRef_normalized_bool_onesided_bool_output_sizes_IntArrayRef(Rcpp::XPtr<torch::Tensor> self, int64_t signal_ndim, bool complex_input, bool complex_output, bool inverse, std::vector<int64_t> checked_signal_sizes, bool normalized, bool onesided, std::vector<int64_t> output_sizes);
RcppExport SEXP _torch_cpp_torch_namespace__fft_with_size_self_Tensor_signal_ndim_int64_t_complex_input_bool_complex_output_bool_inverse_bool_checked_signal_sizes_IntArrayRef_normalized_bool_onesided_bool_output_sizes_IntArrayRef(SEXP selfSEXP, SEXP signal_ndimSEXP, SEXP complex_inputSEXP, SEXP complex_outputSEXP, SEXP inverseSEXP, SEXP checked_signal_sizesSEXP, SEXP normalizedSEXP, SEXP onesidedSEXP, SEXP output_sizesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< int64_t >::type signal_ndim(signal_ndimSEXP);
    Rcpp::traits::input_parameter< bool >::type complex_input(complex_inputSEXP);
    Rcpp::traits::input_parameter< bool >::type complex_output(complex_outputSEXP);
    Rcpp::traits::input_parameter< bool >::type inverse(inverseSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type checked_signal_sizes(checked_signal_sizesSEXP);
    Rcpp::traits::input_parameter< bool >::type normalized(normalizedSEXP);
    Rcpp::traits::input_parameter< bool >::type onesided(onesidedSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type output_sizes(output_sizesSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__fft_with_size_self_Tensor_signal_ndim_int64_t_complex_input_bool_complex_output_bool_inverse_bool_checked_signal_sizes_IntArrayRef_normalized_bool_onesided_bool_output_sizes_IntArrayRef(self, signal_ndim, complex_input, complex_output, inverse, checked_signal_sizes, normalized, onesided, output_sizes));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__cufft_get_plan_cache_size_device_index_int64_t
int64_t cpp_torch_namespace__cufft_get_plan_cache_size_device_index_int64_t(int64_t device_index);
RcppExport SEXP _torch_cpp_torch_namespace__cufft_get_plan_cache_size_device_index_int64_t(SEXP device_indexSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int64_t >::type device_index(device_indexSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__cufft_get_plan_cache_size_device_index_int64_t(device_index));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__cufft_get_plan_cache_max_size_device_index_int64_t
int64_t cpp_torch_namespace__cufft_get_plan_cache_max_size_device_index_int64_t(int64_t device_index);
RcppExport SEXP _torch_cpp_torch_namespace__cufft_get_plan_cache_max_size_device_index_int64_t(SEXP device_indexSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int64_t >::type device_index(device_indexSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__cufft_get_plan_cache_max_size_device_index_int64_t(device_index));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__cufft_set_plan_cache_max_size_device_index_int64_t_max_size_int64_t
void cpp_torch_namespace__cufft_set_plan_cache_max_size_device_index_int64_t_max_size_int64_t(int64_t device_index, int64_t max_size);
RcppExport SEXP _torch_cpp_torch_namespace__cufft_set_plan_cache_max_size_device_index_int64_t_max_size_int64_t(SEXP device_indexSEXP, SEXP max_sizeSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int64_t >::type device_index(device_indexSEXP);
    Rcpp::traits::input_parameter< int64_t >::type max_size(max_sizeSEXP);
    cpp_torch_namespace__cufft_set_plan_cache_max_size_device_index_int64_t_max_size_int64_t(device_index, max_size);
    return R_NilValue;
END_RCPP
}
// cpp_torch_namespace__cufft_clear_plan_cache_device_index_int64_t
void cpp_torch_namespace__cufft_clear_plan_cache_device_index_int64_t(int64_t device_index);
RcppExport SEXP _torch_cpp_torch_namespace__cufft_clear_plan_cache_device_index_int64_t(SEXP device_indexSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int64_t >::type device_index(device_indexSEXP);
    cpp_torch_namespace__cufft_clear_plan_cache_device_index_int64_t(device_index);
    return R_NilValue;
END_RCPP
}
// cpp_torch_namespace_index_self_Tensor_indices_TensorList
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_index_self_Tensor_indices_TensorList(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<std::vector<torch::Tensor>> indices);
RcppExport SEXP _torch_cpp_torch_namespace_index_self_Tensor_indices_TensorList(SEXP selfSEXP, SEXP indicesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::vector<torch::Tensor>> >::type indices(indicesSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_index_self_Tensor_indices_TensorList(self, indices));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_index_copy_self_Tensor_dim_int64_t_index_Tensor_source_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_index_copy_self_Tensor_dim_int64_t_index_Tensor_source_Tensor(Rcpp::XPtr<torch::Tensor> self, int64_t dim, Rcpp::XPtr<torch::Tensor> index, Rcpp::XPtr<torch::Tensor> source);
RcppExport SEXP _torch_cpp_torch_namespace_index_copy_self_Tensor_dim_int64_t_index_Tensor_source_Tensor(SEXP selfSEXP, SEXP dimSEXP, SEXP indexSEXP, SEXP sourceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type index(indexSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type source(sourceSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_index_copy_self_Tensor_dim_int64_t_index_Tensor_source_Tensor(self, dim, index, source));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_index_copy_self_Tensor_dim_Dimname_index_Tensor_source_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_index_copy_self_Tensor_dim_Dimname_index_Tensor_source_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Dimname> dim, Rcpp::XPtr<torch::Tensor> index, Rcpp::XPtr<torch::Tensor> source);
RcppExport SEXP _torch_cpp_torch_namespace_index_copy_self_Tensor_dim_Dimname_index_Tensor_source_Tensor(SEXP selfSEXP, SEXP dimSEXP, SEXP indexSEXP, SEXP sourceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Dimname> >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type index(indexSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type source(sourceSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_index_copy_self_Tensor_dim_Dimname_index_Tensor_source_Tensor(self, dim, index, source));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_index_put__self_Tensor_indices_TensorList_values_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_index_put__self_Tensor_indices_TensorList_values_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<std::vector<torch::Tensor>> indices, Rcpp::XPtr<torch::Tensor> values, bool accumulate);
RcppExport SEXP _torch_cpp_torch_namespace_index_put__self_Tensor_indices_TensorList_values_Tensor(SEXP selfSEXP, SEXP indicesSEXP, SEXP valuesSEXP, SEXP accumulateSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::vector<torch::Tensor>> >::type indices(indicesSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type values(valuesSEXP);
    Rcpp::traits::input_parameter< bool >::type accumulate(accumulateSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_index_put__self_Tensor_indices_TensorList_values_Tensor(self, indices, values, accumulate));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_index_put_self_Tensor_indices_TensorList_values_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_index_put_self_Tensor_indices_TensorList_values_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<std::vector<torch::Tensor>> indices, Rcpp::XPtr<torch::Tensor> values, bool accumulate);
RcppExport SEXP _torch_cpp_torch_namespace_index_put_self_Tensor_indices_TensorList_values_Tensor(SEXP selfSEXP, SEXP indicesSEXP, SEXP valuesSEXP, SEXP accumulateSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::vector<torch::Tensor>> >::type indices(indicesSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type values(valuesSEXP);
    Rcpp::traits::input_parameter< bool >::type accumulate(accumulateSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_index_put_self_Tensor_indices_TensorList_values_Tensor(self, indices, values, accumulate));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__index_put_impl__self_Tensor_indices_TensorList_values_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace__index_put_impl__self_Tensor_indices_TensorList_values_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<std::vector<torch::Tensor>> indices, Rcpp::XPtr<torch::Tensor> values, bool accumulate, bool unsafe);
RcppExport SEXP _torch_cpp_torch_namespace__index_put_impl__self_Tensor_indices_TensorList_values_Tensor(SEXP selfSEXP, SEXP indicesSEXP, SEXP valuesSEXP, SEXP accumulateSEXP, SEXP unsafeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::vector<torch::Tensor>> >::type indices(indicesSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type values(valuesSEXP);
    Rcpp::traits::input_parameter< bool >::type accumulate(accumulateSEXP);
    Rcpp::traits::input_parameter< bool >::type unsafe(unsafeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__index_put_impl__self_Tensor_indices_TensorList_values_Tensor(self, indices, values, accumulate, unsafe));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_instance_norm_input_Tensor_weight_Tensor_bias_Tensor_running_mean_Tensor_running_var_Tensor_use_input_stats_bool_momentum_double_eps_double_cudnn_enabled_bool
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_instance_norm_input_Tensor_weight_Tensor_bias_Tensor_running_mean_Tensor_running_var_Tensor_use_input_stats_bool_momentum_double_eps_double_cudnn_enabled_bool(Rcpp::XPtr<torch::Tensor> input, Rcpp::XPtr<torch::Tensor> weight, Rcpp::XPtr<torch::Tensor> bias, Rcpp::XPtr<torch::Tensor> running_mean, Rcpp::XPtr<torch::Tensor> running_var, bool use_input_stats, double momentum, double eps, bool cudnn_enabled);
RcppExport SEXP _torch_cpp_torch_namespace_instance_norm_input_Tensor_weight_Tensor_bias_Tensor_running_mean_Tensor_running_var_Tensor_use_input_stats_bool_momentum_double_eps_double_cudnn_enabled_bool(SEXP inputSEXP, SEXP weightSEXP, SEXP biasSEXP, SEXP running_meanSEXP, SEXP running_varSEXP, SEXP use_input_statsSEXP, SEXP momentumSEXP, SEXP epsSEXP, SEXP cudnn_enabledSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type input(inputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type bias(biasSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type running_mean(running_meanSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type running_var(running_varSEXP);
    Rcpp::traits::input_parameter< bool >::type use_input_stats(use_input_statsSEXP);
    Rcpp::traits::input_parameter< double >::type momentum(momentumSEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< bool >::type cudnn_enabled(cudnn_enabledSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_instance_norm_input_Tensor_weight_Tensor_bias_Tensor_running_mean_Tensor_running_var_Tensor_use_input_stats_bool_momentum_double_eps_double_cudnn_enabled_bool(input, weight, bias, running_mean, running_var, use_input_stats, momentum, eps, cudnn_enabled));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_inverse_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_inverse_self_Tensor(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_namespace_inverse_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_inverse_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_inverse_out_out_Tensor_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_inverse_out_out_Tensor_self_Tensor(Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_namespace_inverse_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type out(outSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_inverse_out_out_Tensor_self_Tensor(out, self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__inverse_helper_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace__inverse_helper_self_Tensor(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_namespace__inverse_helper_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__inverse_helper_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_isclose_self_Tensor_other_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_isclose_self_Tensor_other_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> other, double rtol, double atol, bool equal_nan);
RcppExport SEXP _torch_cpp_torch_namespace_isclose_self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP, SEXP rtolSEXP, SEXP atolSEXP, SEXP equal_nanSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type other(otherSEXP);
    Rcpp::traits::input_parameter< double >::type rtol(rtolSEXP);
    Rcpp::traits::input_parameter< double >::type atol(atolSEXP);
    Rcpp::traits::input_parameter< bool >::type equal_nan(equal_nanSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_isclose_self_Tensor_other_Tensor(self, other, rtol, atol, equal_nan));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_isnan_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_isnan_self_Tensor(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_namespace_isnan_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_isnan_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_is_distributed_self_Tensor
bool cpp_torch_namespace_is_distributed_self_Tensor(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_namespace_is_distributed_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_is_distributed_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_is_floating_point_self_Tensor
bool cpp_torch_namespace_is_floating_point_self_Tensor(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_namespace_is_floating_point_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_is_floating_point_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_is_complex_self_Tensor
bool cpp_torch_namespace_is_complex_self_Tensor(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_namespace_is_complex_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_is_complex_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_is_nonzero_self_Tensor
bool cpp_torch_namespace_is_nonzero_self_Tensor(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_namespace_is_nonzero_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_is_nonzero_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_is_same_size_self_Tensor_other_Tensor
bool cpp_torch_namespace_is_same_size_self_Tensor_other_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> other);
RcppExport SEXP _torch_cpp_torch_namespace_is_same_size_self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_is_same_size_self_Tensor_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_is_signed_self_Tensor
bool cpp_torch_namespace_is_signed_self_Tensor(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_namespace_is_signed_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_is_signed_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_kl_div_self_Tensor_target_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_kl_div_self_Tensor_target_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> target, int64_t reduction);
RcppExport SEXP _torch_cpp_torch_namespace_kl_div_self_Tensor_target_Tensor(SEXP selfSEXP, SEXP targetSEXP, SEXP reductionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type target(targetSEXP);
    Rcpp::traits::input_parameter< int64_t >::type reduction(reductionSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_kl_div_self_Tensor_target_Tensor(self, target, reduction));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_kl_div_backward_grad_output_Tensor_self_Tensor_target_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_kl_div_backward_grad_output_Tensor_self_Tensor_target_Tensor(Rcpp::XPtr<torch::Tensor> grad_output, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> target, int64_t reduction);
RcppExport SEXP _torch_cpp_torch_namespace_kl_div_backward_grad_output_Tensor_self_Tensor_target_Tensor(SEXP grad_outputSEXP, SEXP selfSEXP, SEXP targetSEXP, SEXP reductionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type target(targetSEXP);
    Rcpp::traits::input_parameter< int64_t >::type reduction(reductionSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_kl_div_backward_grad_output_Tensor_self_Tensor_target_Tensor(grad_output, self, target, reduction));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_kthvalue_self_Tensor_k_int64_t
Rcpp::List cpp_torch_namespace_kthvalue_self_Tensor_k_int64_t(Rcpp::XPtr<torch::Tensor> self, int64_t k, int64_t dim, bool keepdim);
RcppExport SEXP _torch_cpp_torch_namespace_kthvalue_self_Tensor_k_int64_t(SEXP selfSEXP, SEXP kSEXP, SEXP dimSEXP, SEXP keepdimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< int64_t >::type k(kSEXP);
    Rcpp::traits::input_parameter< int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< bool >::type keepdim(keepdimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_kthvalue_self_Tensor_k_int64_t(self, k, dim, keepdim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_kthvalue_out_values_Tensor_indices_Tensor_self_Tensor_k_int64_t
Rcpp::List cpp_torch_namespace_kthvalue_out_values_Tensor_indices_Tensor_self_Tensor_k_int64_t(Rcpp::XPtr<torch::Tensor> values, Rcpp::XPtr<torch::Tensor> indices, Rcpp::XPtr<torch::Tensor> self, int64_t k, int64_t dim, bool keepdim);
RcppExport SEXP _torch_cpp_torch_namespace_kthvalue_out_values_Tensor_indices_Tensor_self_Tensor_k_int64_t(SEXP valuesSEXP, SEXP indicesSEXP, SEXP selfSEXP, SEXP kSEXP, SEXP dimSEXP, SEXP keepdimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type values(valuesSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type indices(indicesSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< int64_t >::type k(kSEXP);
    Rcpp::traits::input_parameter< int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< bool >::type keepdim(keepdimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_kthvalue_out_values_Tensor_indices_Tensor_self_Tensor_k_int64_t(values, indices, self, k, dim, keepdim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_kthvalue_self_Tensor_k_int64_t_dim_Dimname
Rcpp::List cpp_torch_namespace_kthvalue_self_Tensor_k_int64_t_dim_Dimname(Rcpp::XPtr<torch::Tensor> self, int64_t k, Rcpp::XPtr<torch::Dimname> dim, bool keepdim);
RcppExport SEXP _torch_cpp_torch_namespace_kthvalue_self_Tensor_k_int64_t_dim_Dimname(SEXP selfSEXP, SEXP kSEXP, SEXP dimSEXP, SEXP keepdimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< int64_t >::type k(kSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Dimname> >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< bool >::type keepdim(keepdimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_kthvalue_self_Tensor_k_int64_t_dim_Dimname(self, k, dim, keepdim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_kthvalue_out_values_Tensor_indices_Tensor_self_Tensor_k_int64_t_dim_Dimname
Rcpp::List cpp_torch_namespace_kthvalue_out_values_Tensor_indices_Tensor_self_Tensor_k_int64_t_dim_Dimname(Rcpp::XPtr<torch::Tensor> values, Rcpp::XPtr<torch::Tensor> indices, Rcpp::XPtr<torch::Tensor> self, int64_t k, Rcpp::XPtr<torch::Dimname> dim, bool keepdim);
RcppExport SEXP _torch_cpp_torch_namespace_kthvalue_out_values_Tensor_indices_Tensor_self_Tensor_k_int64_t_dim_Dimname(SEXP valuesSEXP, SEXP indicesSEXP, SEXP selfSEXP, SEXP kSEXP, SEXP dimSEXP, SEXP keepdimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type values(valuesSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type indices(indicesSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< int64_t >::type k(kSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Dimname> >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< bool >::type keepdim(keepdimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_kthvalue_out_values_Tensor_indices_Tensor_self_Tensor_k_int64_t_dim_Dimname(values, indices, self, k, dim, keepdim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_layer_norm_input_Tensor_normalized_shape_IntArrayRef
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_layer_norm_input_Tensor_normalized_shape_IntArrayRef(Rcpp::XPtr<torch::Tensor> input, std::vector<int64_t> normalized_shape, Rcpp::XPtr<torch::Tensor> weight, Rcpp::XPtr<torch::Tensor> bias, double eps, bool cudnn_enable);
RcppExport SEXP _torch_cpp_torch_namespace_layer_norm_input_Tensor_normalized_shape_IntArrayRef(SEXP inputSEXP, SEXP normalized_shapeSEXP, SEXP weightSEXP, SEXP biasSEXP, SEXP epsSEXP, SEXP cudnn_enableSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type input(inputSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type normalized_shape(normalized_shapeSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type bias(biasSEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< bool >::type cudnn_enable(cudnn_enableSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_layer_norm_input_Tensor_normalized_shape_IntArrayRef(input, normalized_shape, weight, bias, eps, cudnn_enable));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_native_layer_norm_input_Tensor_weight_Tensor_bias_Tensor_M_int64_t_FALSE_int64_t_eps_double
Rcpp::List cpp_torch_namespace_native_layer_norm_input_Tensor_weight_Tensor_bias_Tensor_M_int64_t_FALSE_int64_t_eps_double(Rcpp::XPtr<torch::Tensor> input, Rcpp::XPtr<torch::Tensor> weight, Rcpp::XPtr<torch::Tensor> bias, int64_t M, int64_t False, double eps);
RcppExport SEXP _torch_cpp_torch_namespace_native_layer_norm_input_Tensor_weight_Tensor_bias_Tensor_M_int64_t_FALSE_int64_t_eps_double(SEXP inputSEXP, SEXP weightSEXP, SEXP biasSEXP, SEXP MSEXP, SEXP FalseSEXP, SEXP epsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type input(inputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type bias(biasSEXP);
    Rcpp::traits::input_parameter< int64_t >::type M(MSEXP);
    Rcpp::traits::input_parameter< int64_t >::type False(FalseSEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_native_layer_norm_input_Tensor_weight_Tensor_bias_Tensor_M_int64_t_FALSE_int64_t_eps_double(input, weight, bias, M, False, eps));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_native_layer_norm_backward_grad_out_Tensor_input_Tensor_mean_Tensor_rstd_Tensor_weight_Tensor_M_int64_t_FALSE_int64_t_output_mask_stdarraybool3
Rcpp::List cpp_torch_namespace_native_layer_norm_backward_grad_out_Tensor_input_Tensor_mean_Tensor_rstd_Tensor_weight_Tensor_M_int64_t_FALSE_int64_t_output_mask_stdarraybool3(Rcpp::XPtr<torch::Tensor> grad_out, Rcpp::XPtr<torch::Tensor> input, Rcpp::XPtr<torch::Tensor> mean, Rcpp::XPtr<torch::Tensor> rstd, Rcpp::XPtr<torch::Tensor> weight, int64_t M, int64_t False, std::vector<bool> output_mask);
RcppExport SEXP _torch_cpp_torch_namespace_native_layer_norm_backward_grad_out_Tensor_input_Tensor_mean_Tensor_rstd_Tensor_weight_Tensor_M_int64_t_FALSE_int64_t_output_mask_stdarraybool3(SEXP grad_outSEXP, SEXP inputSEXP, SEXP meanSEXP, SEXP rstdSEXP, SEXP weightSEXP, SEXP MSEXP, SEXP FalseSEXP, SEXP output_maskSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type grad_out(grad_outSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type input(inputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type rstd(rstdSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< int64_t >::type M(MSEXP);
    Rcpp::traits::input_parameter< int64_t >::type False(FalseSEXP);
    Rcpp::traits::input_parameter< std::vector<bool> >::type output_mask(output_maskSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_native_layer_norm_backward_grad_out_Tensor_input_Tensor_mean_Tensor_rstd_Tensor_weight_Tensor_M_int64_t_FALSE_int64_t_output_mask_stdarraybool3(grad_out, input, mean, rstd, weight, M, False, output_mask));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_linear_input_Tensor_weight_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_linear_input_Tensor_weight_Tensor(Rcpp::XPtr<torch::Tensor> input, Rcpp::XPtr<torch::Tensor> weight, Rcpp::XPtr<torch::Tensor> bias);
RcppExport SEXP _torch_cpp_torch_namespace_linear_input_Tensor_weight_Tensor(SEXP inputSEXP, SEXP weightSEXP, SEXP biasSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type input(inputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type bias(biasSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_linear_input_Tensor_weight_Tensor(input, weight, bias));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_mkldnn_linear_input_Tensor_weight_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_mkldnn_linear_input_Tensor_weight_Tensor(Rcpp::XPtr<torch::Tensor> input, Rcpp::XPtr<torch::Tensor> weight, Rcpp::XPtr<torch::Tensor> bias);
RcppExport SEXP _torch_cpp_torch_namespace_mkldnn_linear_input_Tensor_weight_Tensor(SEXP inputSEXP, SEXP weightSEXP, SEXP biasSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type input(inputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type bias(biasSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_mkldnn_linear_input_Tensor_weight_Tensor(input, weight, bias));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_fbgemm_linear_int8_weight_fp32_activation_input_Tensor_weight_Tensor_packed_Tensor_col_offsets_Tensor_weight_scale_Scalar_weight_zero_point_Scalar_bias_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_fbgemm_linear_int8_weight_fp32_activation_input_Tensor_weight_Tensor_packed_Tensor_col_offsets_Tensor_weight_scale_Scalar_weight_zero_point_Scalar_bias_Tensor(Rcpp::XPtr<torch::Tensor> input, Rcpp::XPtr<torch::Tensor> weight, Rcpp::XPtr<torch::Tensor> packed, Rcpp::XPtr<torch::Tensor> col_offsets, Rcpp::XPtr<torch::Scalar> weight_scale, Rcpp::XPtr<torch::Scalar> weight_zero_point, Rcpp::XPtr<torch::Tensor> bias);
RcppExport SEXP _torch_cpp_torch_namespace_fbgemm_linear_int8_weight_fp32_activation_input_Tensor_weight_Tensor_packed_Tensor_col_offsets_Tensor_weight_scale_Scalar_weight_zero_point_Scalar_bias_Tensor(SEXP inputSEXP, SEXP weightSEXP, SEXP packedSEXP, SEXP col_offsetsSEXP, SEXP weight_scaleSEXP, SEXP weight_zero_pointSEXP, SEXP biasSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type input(inputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type packed(packedSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type col_offsets(col_offsetsSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type weight_scale(weight_scaleSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type weight_zero_point(weight_zero_pointSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type bias(biasSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_fbgemm_linear_int8_weight_fp32_activation_input_Tensor_weight_Tensor_packed_Tensor_col_offsets_Tensor_weight_scale_Scalar_weight_zero_point_Scalar_bias_Tensor(input, weight, packed, col_offsets, weight_scale, weight_zero_point, bias));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_fbgemm_linear_int8_weight_input_Tensor_weight_Tensor_packed_Tensor_col_offsets_Tensor_weight_scale_Scalar_weight_zero_point_Scalar_bias_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_fbgemm_linear_int8_weight_input_Tensor_weight_Tensor_packed_Tensor_col_offsets_Tensor_weight_scale_Scalar_weight_zero_point_Scalar_bias_Tensor(Rcpp::XPtr<torch::Tensor> input, Rcpp::XPtr<torch::Tensor> weight, Rcpp::XPtr<torch::Tensor> packed, Rcpp::XPtr<torch::Tensor> col_offsets, Rcpp::XPtr<torch::Scalar> weight_scale, Rcpp::XPtr<torch::Scalar> weight_zero_point, Rcpp::XPtr<torch::Tensor> bias);
RcppExport SEXP _torch_cpp_torch_namespace_fbgemm_linear_int8_weight_input_Tensor_weight_Tensor_packed_Tensor_col_offsets_Tensor_weight_scale_Scalar_weight_zero_point_Scalar_bias_Tensor(SEXP inputSEXP, SEXP weightSEXP, SEXP packedSEXP, SEXP col_offsetsSEXP, SEXP weight_scaleSEXP, SEXP weight_zero_pointSEXP, SEXP biasSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type input(inputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type packed(packedSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type col_offsets(col_offsetsSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type weight_scale(weight_scaleSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type weight_zero_point(weight_zero_pointSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type bias(biasSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_fbgemm_linear_int8_weight_input_Tensor_weight_Tensor_packed_Tensor_col_offsets_Tensor_weight_scale_Scalar_weight_zero_point_Scalar_bias_Tensor(input, weight, packed, col_offsets, weight_scale, weight_zero_point, bias));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_fbgemm_linear_quantize_weight_input_Tensor
Rcpp::List cpp_torch_namespace_fbgemm_linear_quantize_weight_input_Tensor(Rcpp::XPtr<torch::Tensor> input);
RcppExport SEXP _torch_cpp_torch_namespace_fbgemm_linear_quantize_weight_input_Tensor(SEXP inputSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type input(inputSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_fbgemm_linear_quantize_weight_input_Tensor(input));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_fbgemm_pack_gemm_matrix_fp16_input_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_fbgemm_pack_gemm_matrix_fp16_input_Tensor(Rcpp::XPtr<torch::Tensor> input);
RcppExport SEXP _torch_cpp_torch_namespace_fbgemm_pack_gemm_matrix_fp16_input_Tensor(SEXP inputSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type input(inputSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_fbgemm_pack_gemm_matrix_fp16_input_Tensor(input));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_fbgemm_linear_fp16_weight_fp32_activation_input_Tensor_packed_weight_Tensor_bias_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_fbgemm_linear_fp16_weight_fp32_activation_input_Tensor_packed_weight_Tensor_bias_Tensor(Rcpp::XPtr<torch::Tensor> input, Rcpp::XPtr<torch::Tensor> packed_weight, Rcpp::XPtr<torch::Tensor> bias);
RcppExport SEXP _torch_cpp_torch_namespace_fbgemm_linear_fp16_weight_fp32_activation_input_Tensor_packed_weight_Tensor_bias_Tensor(SEXP inputSEXP, SEXP packed_weightSEXP, SEXP biasSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type input(inputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type packed_weight(packed_weightSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type bias(biasSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_fbgemm_linear_fp16_weight_fp32_activation_input_Tensor_packed_weight_Tensor_bias_Tensor(input, packed_weight, bias));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_fbgemm_linear_fp16_weight_input_Tensor_packed_weight_Tensor_bias_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_fbgemm_linear_fp16_weight_input_Tensor_packed_weight_Tensor_bias_Tensor(Rcpp::XPtr<torch::Tensor> input, Rcpp::XPtr<torch::Tensor> packed_weight, Rcpp::XPtr<torch::Tensor> bias);
RcppExport SEXP _torch_cpp_torch_namespace_fbgemm_linear_fp16_weight_input_Tensor_packed_weight_Tensor_bias_Tensor(SEXP inputSEXP, SEXP packed_weightSEXP, SEXP biasSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type input(inputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type packed_weight(packed_weightSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type bias(biasSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_fbgemm_linear_fp16_weight_input_Tensor_packed_weight_Tensor_bias_Tensor(input, packed_weight, bias));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_fbgemm_pack_quantized_matrix_input_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_fbgemm_pack_quantized_matrix_input_Tensor(Rcpp::XPtr<torch::Tensor> input);
RcppExport SEXP _torch_cpp_torch_namespace_fbgemm_pack_quantized_matrix_input_Tensor(SEXP inputSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type input(inputSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_fbgemm_pack_quantized_matrix_input_Tensor(input));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_fbgemm_pack_quantized_matrix_input_Tensor_K_int64_t_FALSE_int64_t
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_fbgemm_pack_quantized_matrix_input_Tensor_K_int64_t_FALSE_int64_t(Rcpp::XPtr<torch::Tensor> input, int64_t K, int64_t False);
RcppExport SEXP _torch_cpp_torch_namespace_fbgemm_pack_quantized_matrix_input_Tensor_K_int64_t_FALSE_int64_t(SEXP inputSEXP, SEXP KSEXP, SEXP FalseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type input(inputSEXP);
    Rcpp::traits::input_parameter< int64_t >::type K(KSEXP);
    Rcpp::traits::input_parameter< int64_t >::type False(FalseSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_fbgemm_pack_quantized_matrix_input_Tensor_K_int64_t_FALSE_int64_t(input, K, False));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_linspace_start_Scalar_end_Scalar
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_linspace_start_Scalar_end_Scalar(Rcpp::XPtr<torch::Scalar> start, Rcpp::XPtr<torch::Scalar> end, int64_t steps, Rcpp::XPtr<torch::TensorOptions> options);
RcppExport SEXP _torch_cpp_torch_namespace_linspace_start_Scalar_end_Scalar(SEXP startSEXP, SEXP endSEXP, SEXP stepsSEXP, SEXP optionsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type start(startSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type end(endSEXP);
    Rcpp::traits::input_parameter< int64_t >::type steps(stepsSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::TensorOptions> >::type options(optionsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_linspace_start_Scalar_end_Scalar(start, end, steps, options));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_linspace_out_out_Tensor_start_Scalar_end_Scalar
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_linspace_out_out_Tensor_start_Scalar_end_Scalar(Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Scalar> start, Rcpp::XPtr<torch::Scalar> end, int64_t steps);
RcppExport SEXP _torch_cpp_torch_namespace_linspace_out_out_Tensor_start_Scalar_end_Scalar(SEXP outSEXP, SEXP startSEXP, SEXP endSEXP, SEXP stepsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type out(outSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type start(startSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type end(endSEXP);
    Rcpp::traits::input_parameter< int64_t >::type steps(stepsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_linspace_out_out_Tensor_start_Scalar_end_Scalar(out, start, end, steps));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_log_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_log_self_Tensor(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_namespace_log_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_log_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_log__self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_log__self_Tensor(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_namespace_log__self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_log__self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_log_out_out_Tensor_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_log_out_out_Tensor_self_Tensor(Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_namespace_log_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type out(outSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_log_out_out_Tensor_self_Tensor(out, self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_log10_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_log10_self_Tensor(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_namespace_log10_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_log10_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_log10__self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_log10__self_Tensor(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_namespace_log10__self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_log10__self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_log10_out_out_Tensor_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_log10_out_out_Tensor_self_Tensor(Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_namespace_log10_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type out(outSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_log10_out_out_Tensor_self_Tensor(out, self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_log1p_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_log1p_self_Tensor(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_namespace_log1p_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_log1p_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_log1p__self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_log1p__self_Tensor(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_namespace_log1p__self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_log1p__self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_log1p_out_out_Tensor_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_log1p_out_out_Tensor_self_Tensor(Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_namespace_log1p_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type out(outSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_log1p_out_out_Tensor_self_Tensor(out, self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_log2_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_log2_self_Tensor(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_namespace_log2_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_log2_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_log2__self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_log2__self_Tensor(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_namespace_log2__self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_log2__self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_log2_out_out_Tensor_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_log2_out_out_Tensor_self_Tensor(Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_namespace_log2_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type out(outSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_log2_out_out_Tensor_self_Tensor(out, self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_logdet_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_logdet_self_Tensor(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_namespace_logdet_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_logdet_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_logspace_start_Scalar_end_Scalar
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_logspace_start_Scalar_end_Scalar(Rcpp::XPtr<torch::Scalar> start, Rcpp::XPtr<torch::Scalar> end, int64_t steps, double base, Rcpp::XPtr<torch::TensorOptions> options);
RcppExport SEXP _torch_cpp_torch_namespace_logspace_start_Scalar_end_Scalar(SEXP startSEXP, SEXP endSEXP, SEXP stepsSEXP, SEXP baseSEXP, SEXP optionsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type start(startSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type end(endSEXP);
    Rcpp::traits::input_parameter< int64_t >::type steps(stepsSEXP);
    Rcpp::traits::input_parameter< double >::type base(baseSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::TensorOptions> >::type options(optionsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_logspace_start_Scalar_end_Scalar(start, end, steps, base, options));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_logspace_out_out_Tensor_start_Scalar_end_Scalar
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_logspace_out_out_Tensor_start_Scalar_end_Scalar(Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Scalar> start, Rcpp::XPtr<torch::Scalar> end, int64_t steps, double base);
RcppExport SEXP _torch_cpp_torch_namespace_logspace_out_out_Tensor_start_Scalar_end_Scalar(SEXP outSEXP, SEXP startSEXP, SEXP endSEXP, SEXP stepsSEXP, SEXP baseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type out(outSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type start(startSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type end(endSEXP);
    Rcpp::traits::input_parameter< int64_t >::type steps(stepsSEXP);
    Rcpp::traits::input_parameter< double >::type base(baseSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_logspace_out_out_Tensor_start_Scalar_end_Scalar(out, start, end, steps, base));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_log_softmax_self_Tensor_dim_int64_t
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_log_softmax_self_Tensor_dim_int64_t(Rcpp::XPtr<torch::Tensor> self, int64_t dim, Rcpp::XPtr<torch::Dtype> dtype);
RcppExport SEXP _torch_cpp_torch_namespace_log_softmax_self_Tensor_dim_int64_t(SEXP selfSEXP, SEXP dimSEXP, SEXP dtypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Dtype> >::type dtype(dtypeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_log_softmax_self_Tensor_dim_int64_t(self, dim, dtype));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_log_softmax_self_Tensor_dim_Dimname
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_log_softmax_self_Tensor_dim_Dimname(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Dimname> dim, Rcpp::XPtr<torch::Dtype> dtype);
RcppExport SEXP _torch_cpp_torch_namespace_log_softmax_self_Tensor_dim_Dimname(SEXP selfSEXP, SEXP dimSEXP, SEXP dtypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Dimname> >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Dtype> >::type dtype(dtypeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_log_softmax_self_Tensor_dim_Dimname(self, dim, dtype));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__log_softmax_self_Tensor_dim_int64_t_half_to_float_bool
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace__log_softmax_self_Tensor_dim_int64_t_half_to_float_bool(Rcpp::XPtr<torch::Tensor> self, int64_t dim, bool half_to_float);
RcppExport SEXP _torch_cpp_torch_namespace__log_softmax_self_Tensor_dim_int64_t_half_to_float_bool(SEXP selfSEXP, SEXP dimSEXP, SEXP half_to_floatSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< bool >::type half_to_float(half_to_floatSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__log_softmax_self_Tensor_dim_int64_t_half_to_float_bool(self, dim, half_to_float));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__log_softmax_backward_data_grad_output_Tensor_output_Tensor_dim_int64_t_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace__log_softmax_backward_data_grad_output_Tensor_output_Tensor_dim_int64_t_self_Tensor(Rcpp::XPtr<torch::Tensor> grad_output, Rcpp::XPtr<torch::Tensor> output, int64_t dim, Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_namespace__log_softmax_backward_data_grad_output_Tensor_output_Tensor_dim_int64_t_self_Tensor(SEXP grad_outputSEXP, SEXP outputSEXP, SEXP dimSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type output(outputSEXP);
    Rcpp::traits::input_parameter< int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__log_softmax_backward_data_grad_output_Tensor_output_Tensor_dim_int64_t_self_Tensor(grad_output, output, dim, self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_logsumexp_self_Tensor_dim_IntArrayRef
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_logsumexp_self_Tensor_dim_IntArrayRef(Rcpp::XPtr<torch::Tensor> self, std::vector<int64_t> dim, bool keepdim);
RcppExport SEXP _torch_cpp_torch_namespace_logsumexp_self_Tensor_dim_IntArrayRef(SEXP selfSEXP, SEXP dimSEXP, SEXP keepdimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< bool >::type keepdim(keepdimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_logsumexp_self_Tensor_dim_IntArrayRef(self, dim, keepdim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_logsumexp_out_out_Tensor_self_Tensor_dim_IntArrayRef
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_logsumexp_out_out_Tensor_self_Tensor_dim_IntArrayRef(Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, std::vector<int64_t> dim, bool keepdim);
RcppExport SEXP _torch_cpp_torch_namespace_logsumexp_out_out_Tensor_self_Tensor_dim_IntArrayRef(SEXP outSEXP, SEXP selfSEXP, SEXP dimSEXP, SEXP keepdimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type out(outSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< bool >::type keepdim(keepdimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_logsumexp_out_out_Tensor_self_Tensor_dim_IntArrayRef(out, self, dim, keepdim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_logsumexp_self_Tensor_dim_DimnameList
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_logsumexp_self_Tensor_dim_DimnameList(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<std::vector<torch::Dimname>> dim, bool keepdim);
RcppExport SEXP _torch_cpp_torch_namespace_logsumexp_self_Tensor_dim_DimnameList(SEXP selfSEXP, SEXP dimSEXP, SEXP keepdimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::vector<torch::Dimname>> >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< bool >::type keepdim(keepdimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_logsumexp_self_Tensor_dim_DimnameList(self, dim, keepdim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_logsumexp_out_out_Tensor_self_Tensor_dim_DimnameList
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_logsumexp_out_out_Tensor_self_Tensor_dim_DimnameList(Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<std::vector<torch::Dimname>> dim, bool keepdim);
RcppExport SEXP _torch_cpp_torch_namespace_logsumexp_out_out_Tensor_self_Tensor_dim_DimnameList(SEXP outSEXP, SEXP selfSEXP, SEXP dimSEXP, SEXP keepdimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type out(outSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::vector<torch::Dimname>> >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< bool >::type keepdim(keepdimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_logsumexp_out_out_Tensor_self_Tensor_dim_DimnameList(out, self, dim, keepdim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_margin_ranking_loss_input1_Tensor_input2_Tensor_target_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_margin_ranking_loss_input1_Tensor_input2_Tensor_target_Tensor(Rcpp::XPtr<torch::Tensor> input1, Rcpp::XPtr<torch::Tensor> input2, Rcpp::XPtr<torch::Tensor> target, double margin, int64_t reduction);
RcppExport SEXP _torch_cpp_torch_namespace_margin_ranking_loss_input1_Tensor_input2_Tensor_target_Tensor(SEXP input1SEXP, SEXP input2SEXP, SEXP targetSEXP, SEXP marginSEXP, SEXP reductionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type input1(input1SEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type input2(input2SEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type target(targetSEXP);
    Rcpp::traits::input_parameter< double >::type margin(marginSEXP);
    Rcpp::traits::input_parameter< int64_t >::type reduction(reductionSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_margin_ranking_loss_input1_Tensor_input2_Tensor_target_Tensor(input1, input2, target, margin, reduction));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_matmul_self_Tensor_other_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_matmul_self_Tensor_other_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> other);
RcppExport SEXP _torch_cpp_torch_namespace_matmul_self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_matmul_self_Tensor_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_matmul_out_out_Tensor_self_Tensor_other_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_matmul_out_out_Tensor_self_Tensor_other_Tensor(Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> other);
RcppExport SEXP _torch_cpp_torch_namespace_matmul_out_out_Tensor_self_Tensor_other_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type out(outSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_matmul_out_out_Tensor_self_Tensor_other_Tensor(out, self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_matrix_rank_self_Tensor_tol_double
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_matrix_rank_self_Tensor_tol_double(Rcpp::XPtr<torch::Tensor> self, double tol, bool symmetric);
RcppExport SEXP _torch_cpp_torch_namespace_matrix_rank_self_Tensor_tol_double(SEXP selfSEXP, SEXP tolSEXP, SEXP symmetricSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< bool >::type symmetric(symmetricSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_matrix_rank_self_Tensor_tol_double(self, tol, symmetric));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_matrix_rank_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_matrix_rank_self_Tensor(Rcpp::XPtr<torch::Tensor> self, bool symmetric);
RcppExport SEXP _torch_cpp_torch_namespace_matrix_rank_self_Tensor(SEXP selfSEXP, SEXP symmetricSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< bool >::type symmetric(symmetricSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_matrix_rank_self_Tensor(self, symmetric));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_matrix_power_self_Tensor_n_int64_t
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_matrix_power_self_Tensor_n_int64_t(Rcpp::XPtr<torch::Tensor> self, int64_t n);
RcppExport SEXP _torch_cpp_torch_namespace_matrix_power_self_Tensor_n_int64_t(SEXP selfSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< int64_t >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_matrix_power_self_Tensor_n_int64_t(self, n));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_max_self_Tensor_dim_int64_t
Rcpp::List cpp_torch_namespace_max_self_Tensor_dim_int64_t(Rcpp::XPtr<torch::Tensor> self, int64_t dim, bool keepdim);
RcppExport SEXP _torch_cpp_torch_namespace_max_self_Tensor_dim_int64_t(SEXP selfSEXP, SEXP dimSEXP, SEXP keepdimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< bool >::type keepdim(keepdimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_max_self_Tensor_dim_int64_t(self, dim, keepdim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_max_out_max_Tensor_max_values_Tensor_self_Tensor_dim_int64_t
Rcpp::List cpp_torch_namespace_max_out_max_Tensor_max_values_Tensor_self_Tensor_dim_int64_t(Rcpp::XPtr<torch::Tensor> max, Rcpp::XPtr<torch::Tensor> max_values, Rcpp::XPtr<torch::Tensor> self, int64_t dim, bool keepdim);
RcppExport SEXP _torch_cpp_torch_namespace_max_out_max_Tensor_max_values_Tensor_self_Tensor_dim_int64_t(SEXP maxSEXP, SEXP max_valuesSEXP, SEXP selfSEXP, SEXP dimSEXP, SEXP keepdimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type max(maxSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type max_values(max_valuesSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< bool >::type keepdim(keepdimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_max_out_max_Tensor_max_values_Tensor_self_Tensor_dim_int64_t(max, max_values, self, dim, keepdim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_max_values_self_Tensor_dim_IntArrayRef
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_max_values_self_Tensor_dim_IntArrayRef(Rcpp::XPtr<torch::Tensor> self, std::vector<int64_t> dim, bool keepdim);
RcppExport SEXP _torch_cpp_torch_namespace_max_values_self_Tensor_dim_IntArrayRef(SEXP selfSEXP, SEXP dimSEXP, SEXP keepdimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< bool >::type keepdim(keepdimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_max_values_self_Tensor_dim_IntArrayRef(self, dim, keepdim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_max_self_Tensor_dim_Dimname
Rcpp::List cpp_torch_namespace_max_self_Tensor_dim_Dimname(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Dimname> dim, bool keepdim);
RcppExport SEXP _torch_cpp_torch_namespace_max_self_Tensor_dim_Dimname(SEXP selfSEXP, SEXP dimSEXP, SEXP keepdimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Dimname> >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< bool >::type keepdim(keepdimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_max_self_Tensor_dim_Dimname(self, dim, keepdim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_max_out_max_Tensor_max_values_Tensor_self_Tensor_dim_Dimname
Rcpp::List cpp_torch_namespace_max_out_max_Tensor_max_values_Tensor_self_Tensor_dim_Dimname(Rcpp::XPtr<torch::Tensor> max, Rcpp::XPtr<torch::Tensor> max_values, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Dimname> dim, bool keepdim);
RcppExport SEXP _torch_cpp_torch_namespace_max_out_max_Tensor_max_values_Tensor_self_Tensor_dim_Dimname(SEXP maxSEXP, SEXP max_valuesSEXP, SEXP selfSEXP, SEXP dimSEXP, SEXP keepdimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type max(maxSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type max_values(max_valuesSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Dimname> >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< bool >::type keepdim(keepdimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_max_out_max_Tensor_max_values_Tensor_self_Tensor_dim_Dimname(max, max_values, self, dim, keepdim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_max_values_self_Tensor_dim_DimnameList
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_max_values_self_Tensor_dim_DimnameList(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<std::vector<torch::Dimname>> dim, bool keepdim);
RcppExport SEXP _torch_cpp_torch_namespace_max_values_self_Tensor_dim_DimnameList(SEXP selfSEXP, SEXP dimSEXP, SEXP keepdimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::vector<torch::Dimname>> >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< bool >::type keepdim(keepdimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_max_values_self_Tensor_dim_DimnameList(self, dim, keepdim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_max_pool1d_with_indices_self_Tensor_kernel_size_IntArrayRef
Rcpp::List cpp_torch_namespace_max_pool1d_with_indices_self_Tensor_kernel_size_IntArrayRef(Rcpp::XPtr<torch::Tensor> self, std::vector<int64_t> kernel_size, std::vector<int64_t> stride, std::vector<int64_t> padding, std::vector<int64_t> dilation, bool ceil_mode);
RcppExport SEXP _torch_cpp_torch_namespace_max_pool1d_with_indices_self_Tensor_kernel_size_IntArrayRef(SEXP selfSEXP, SEXP kernel_sizeSEXP, SEXP strideSEXP, SEXP paddingSEXP, SEXP dilationSEXP, SEXP ceil_modeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type kernel_size(kernel_sizeSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type stride(strideSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type padding(paddingSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type dilation(dilationSEXP);
    Rcpp::traits::input_parameter< bool >::type ceil_mode(ceil_modeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_max_pool1d_with_indices_self_Tensor_kernel_size_IntArrayRef(self, kernel_size, stride, padding, dilation, ceil_mode));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_max_pool1d_self_Tensor_kernel_size_IntArrayRef
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_max_pool1d_self_Tensor_kernel_size_IntArrayRef(Rcpp::XPtr<torch::Tensor> self, std::vector<int64_t> kernel_size, std::vector<int64_t> stride, std::vector<int64_t> padding, std::vector<int64_t> dilation, bool ceil_mode);
RcppExport SEXP _torch_cpp_torch_namespace_max_pool1d_self_Tensor_kernel_size_IntArrayRef(SEXP selfSEXP, SEXP kernel_sizeSEXP, SEXP strideSEXP, SEXP paddingSEXP, SEXP dilationSEXP, SEXP ceil_modeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type kernel_size(kernel_sizeSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type stride(strideSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type padding(paddingSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type dilation(dilationSEXP);
    Rcpp::traits::input_parameter< bool >::type ceil_mode(ceil_modeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_max_pool1d_self_Tensor_kernel_size_IntArrayRef(self, kernel_size, stride, padding, dilation, ceil_mode));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_max_pool2d_self_Tensor_kernel_size_IntArrayRef
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_max_pool2d_self_Tensor_kernel_size_IntArrayRef(Rcpp::XPtr<torch::Tensor> self, std::vector<int64_t> kernel_size, std::vector<int64_t> stride, std::vector<int64_t> padding, std::vector<int64_t> dilation, bool ceil_mode);
RcppExport SEXP _torch_cpp_torch_namespace_max_pool2d_self_Tensor_kernel_size_IntArrayRef(SEXP selfSEXP, SEXP kernel_sizeSEXP, SEXP strideSEXP, SEXP paddingSEXP, SEXP dilationSEXP, SEXP ceil_modeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type kernel_size(kernel_sizeSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type stride(strideSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type padding(paddingSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type dilation(dilationSEXP);
    Rcpp::traits::input_parameter< bool >::type ceil_mode(ceil_modeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_max_pool2d_self_Tensor_kernel_size_IntArrayRef(self, kernel_size, stride, padding, dilation, ceil_mode));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_mkldnn_max_pool2d_self_Tensor_kernel_size_IntArrayRef
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_mkldnn_max_pool2d_self_Tensor_kernel_size_IntArrayRef(Rcpp::XPtr<torch::Tensor> self, std::vector<int64_t> kernel_size, std::vector<int64_t> stride, std::vector<int64_t> padding, std::vector<int64_t> dilation, bool ceil_mode);
RcppExport SEXP _torch_cpp_torch_namespace_mkldnn_max_pool2d_self_Tensor_kernel_size_IntArrayRef(SEXP selfSEXP, SEXP kernel_sizeSEXP, SEXP strideSEXP, SEXP paddingSEXP, SEXP dilationSEXP, SEXP ceil_modeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type kernel_size(kernel_sizeSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type stride(strideSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type padding(paddingSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type dilation(dilationSEXP);
    Rcpp::traits::input_parameter< bool >::type ceil_mode(ceil_modeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_mkldnn_max_pool2d_self_Tensor_kernel_size_IntArrayRef(self, kernel_size, stride, padding, dilation, ceil_mode));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_quantized_max_pool2d_self_Tensor_kernel_size_IntArrayRef
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_quantized_max_pool2d_self_Tensor_kernel_size_IntArrayRef(Rcpp::XPtr<torch::Tensor> self, std::vector<int64_t> kernel_size, std::vector<int64_t> stride, std::vector<int64_t> padding, std::vector<int64_t> dilation, bool ceil_mode);
RcppExport SEXP _torch_cpp_torch_namespace_quantized_max_pool2d_self_Tensor_kernel_size_IntArrayRef(SEXP selfSEXP, SEXP kernel_sizeSEXP, SEXP strideSEXP, SEXP paddingSEXP, SEXP dilationSEXP, SEXP ceil_modeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type kernel_size(kernel_sizeSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type stride(strideSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type padding(paddingSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type dilation(dilationSEXP);
    Rcpp::traits::input_parameter< bool >::type ceil_mode(ceil_modeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_quantized_max_pool2d_self_Tensor_kernel_size_IntArrayRef(self, kernel_size, stride, padding, dilation, ceil_mode));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_max_pool3d_self_Tensor_kernel_size_IntArrayRef
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_max_pool3d_self_Tensor_kernel_size_IntArrayRef(Rcpp::XPtr<torch::Tensor> self, std::vector<int64_t> kernel_size, std::vector<int64_t> stride, std::vector<int64_t> padding, std::vector<int64_t> dilation, bool ceil_mode);
RcppExport SEXP _torch_cpp_torch_namespace_max_pool3d_self_Tensor_kernel_size_IntArrayRef(SEXP selfSEXP, SEXP kernel_sizeSEXP, SEXP strideSEXP, SEXP paddingSEXP, SEXP dilationSEXP, SEXP ceil_modeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type kernel_size(kernel_sizeSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type stride(strideSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type padding(paddingSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type dilation(dilationSEXP);
    Rcpp::traits::input_parameter< bool >::type ceil_mode(ceil_modeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_max_pool3d_self_Tensor_kernel_size_IntArrayRef(self, kernel_size, stride, padding, dilation, ceil_mode));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_mean_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_mean_self_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Dtype> dtype);
RcppExport SEXP _torch_cpp_torch_namespace_mean_self_Tensor(SEXP selfSEXP, SEXP dtypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Dtype> >::type dtype(dtypeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_mean_self_Tensor(self, dtype));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_mean_self_Tensor_dim_IntArrayRef
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_mean_self_Tensor_dim_IntArrayRef(Rcpp::XPtr<torch::Tensor> self, std::vector<int64_t> dim, bool keepdim, Rcpp::XPtr<torch::Dtype> dtype);
RcppExport SEXP _torch_cpp_torch_namespace_mean_self_Tensor_dim_IntArrayRef(SEXP selfSEXP, SEXP dimSEXP, SEXP keepdimSEXP, SEXP dtypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< bool >::type keepdim(keepdimSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Dtype> >::type dtype(dtypeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_mean_self_Tensor_dim_IntArrayRef(self, dim, keepdim, dtype));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_mean_out_out_Tensor_self_Tensor_dim_IntArrayRef
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_mean_out_out_Tensor_self_Tensor_dim_IntArrayRef(Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, std::vector<int64_t> dim, bool keepdim, Rcpp::XPtr<torch::Dtype> dtype);
RcppExport SEXP _torch_cpp_torch_namespace_mean_out_out_Tensor_self_Tensor_dim_IntArrayRef(SEXP outSEXP, SEXP selfSEXP, SEXP dimSEXP, SEXP keepdimSEXP, SEXP dtypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type out(outSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< bool >::type keepdim(keepdimSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Dtype> >::type dtype(dtypeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_mean_out_out_Tensor_self_Tensor_dim_IntArrayRef(out, self, dim, keepdim, dtype));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_mean_self_Tensor_dim_DimnameList
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_mean_self_Tensor_dim_DimnameList(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<std::vector<torch::Dimname>> dim, bool keepdim, Rcpp::XPtr<torch::Dtype> dtype);
RcppExport SEXP _torch_cpp_torch_namespace_mean_self_Tensor_dim_DimnameList(SEXP selfSEXP, SEXP dimSEXP, SEXP keepdimSEXP, SEXP dtypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::vector<torch::Dimname>> >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< bool >::type keepdim(keepdimSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Dtype> >::type dtype(dtypeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_mean_self_Tensor_dim_DimnameList(self, dim, keepdim, dtype));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_mean_out_out_Tensor_self_Tensor_dim_DimnameList
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_mean_out_out_Tensor_self_Tensor_dim_DimnameList(Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<std::vector<torch::Dimname>> dim, bool keepdim, Rcpp::XPtr<torch::Dtype> dtype);
RcppExport SEXP _torch_cpp_torch_namespace_mean_out_out_Tensor_self_Tensor_dim_DimnameList(SEXP outSEXP, SEXP selfSEXP, SEXP dimSEXP, SEXP keepdimSEXP, SEXP dtypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type out(outSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::vector<torch::Dimname>> >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< bool >::type keepdim(keepdimSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Dtype> >::type dtype(dtypeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_mean_out_out_Tensor_self_Tensor_dim_DimnameList(out, self, dim, keepdim, dtype));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_median_self_Tensor_dim_int64_t
Rcpp::List cpp_torch_namespace_median_self_Tensor_dim_int64_t(Rcpp::XPtr<torch::Tensor> self, int64_t dim, bool keepdim);
RcppExport SEXP _torch_cpp_torch_namespace_median_self_Tensor_dim_int64_t(SEXP selfSEXP, SEXP dimSEXP, SEXP keepdimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< bool >::type keepdim(keepdimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_median_self_Tensor_dim_int64_t(self, dim, keepdim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_median_out_values_Tensor_indices_Tensor_self_Tensor_dim_int64_t
Rcpp::List cpp_torch_namespace_median_out_values_Tensor_indices_Tensor_self_Tensor_dim_int64_t(Rcpp::XPtr<torch::Tensor> values, Rcpp::XPtr<torch::Tensor> indices, Rcpp::XPtr<torch::Tensor> self, int64_t dim, bool keepdim);
RcppExport SEXP _torch_cpp_torch_namespace_median_out_values_Tensor_indices_Tensor_self_Tensor_dim_int64_t(SEXP valuesSEXP, SEXP indicesSEXP, SEXP selfSEXP, SEXP dimSEXP, SEXP keepdimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type values(valuesSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type indices(indicesSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< bool >::type keepdim(keepdimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_median_out_values_Tensor_indices_Tensor_self_Tensor_dim_int64_t(values, indices, self, dim, keepdim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_median_self_Tensor_dim_Dimname
Rcpp::List cpp_torch_namespace_median_self_Tensor_dim_Dimname(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Dimname> dim, bool keepdim);
RcppExport SEXP _torch_cpp_torch_namespace_median_self_Tensor_dim_Dimname(SEXP selfSEXP, SEXP dimSEXP, SEXP keepdimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Dimname> >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< bool >::type keepdim(keepdimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_median_self_Tensor_dim_Dimname(self, dim, keepdim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_median_out_values_Tensor_indices_Tensor_self_Tensor_dim_Dimname
Rcpp::List cpp_torch_namespace_median_out_values_Tensor_indices_Tensor_self_Tensor_dim_Dimname(Rcpp::XPtr<torch::Tensor> values, Rcpp::XPtr<torch::Tensor> indices, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Dimname> dim, bool keepdim);
RcppExport SEXP _torch_cpp_torch_namespace_median_out_values_Tensor_indices_Tensor_self_Tensor_dim_Dimname(SEXP valuesSEXP, SEXP indicesSEXP, SEXP selfSEXP, SEXP dimSEXP, SEXP keepdimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type values(valuesSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type indices(indicesSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Dimname> >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< bool >::type keepdim(keepdimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_median_out_values_Tensor_indices_Tensor_self_Tensor_dim_Dimname(values, indices, self, dim, keepdim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_min_self_Tensor_dim_int64_t
Rcpp::List cpp_torch_namespace_min_self_Tensor_dim_int64_t(Rcpp::XPtr<torch::Tensor> self, int64_t dim, bool keepdim);
RcppExport SEXP _torch_cpp_torch_namespace_min_self_Tensor_dim_int64_t(SEXP selfSEXP, SEXP dimSEXP, SEXP keepdimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< bool >::type keepdim(keepdimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_min_self_Tensor_dim_int64_t(self, dim, keepdim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_min_out_min_Tensor_min_indices_Tensor_self_Tensor_dim_int64_t
Rcpp::List cpp_torch_namespace_min_out_min_Tensor_min_indices_Tensor_self_Tensor_dim_int64_t(Rcpp::XPtr<torch::Tensor> min, Rcpp::XPtr<torch::Tensor> min_indices, Rcpp::XPtr<torch::Tensor> self, int64_t dim, bool keepdim);
RcppExport SEXP _torch_cpp_torch_namespace_min_out_min_Tensor_min_indices_Tensor_self_Tensor_dim_int64_t(SEXP minSEXP, SEXP min_indicesSEXP, SEXP selfSEXP, SEXP dimSEXP, SEXP keepdimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type min(minSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type min_indices(min_indicesSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< bool >::type keepdim(keepdimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_min_out_min_Tensor_min_indices_Tensor_self_Tensor_dim_int64_t(min, min_indices, self, dim, keepdim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_min_values_self_Tensor_dim_IntArrayRef
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_min_values_self_Tensor_dim_IntArrayRef(Rcpp::XPtr<torch::Tensor> self, std::vector<int64_t> dim, bool keepdim);
RcppExport SEXP _torch_cpp_torch_namespace_min_values_self_Tensor_dim_IntArrayRef(SEXP selfSEXP, SEXP dimSEXP, SEXP keepdimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< bool >::type keepdim(keepdimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_min_values_self_Tensor_dim_IntArrayRef(self, dim, keepdim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_min_self_Tensor_dim_Dimname
Rcpp::List cpp_torch_namespace_min_self_Tensor_dim_Dimname(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Dimname> dim, bool keepdim);
RcppExport SEXP _torch_cpp_torch_namespace_min_self_Tensor_dim_Dimname(SEXP selfSEXP, SEXP dimSEXP, SEXP keepdimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Dimname> >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< bool >::type keepdim(keepdimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_min_self_Tensor_dim_Dimname(self, dim, keepdim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_min_out_min_Tensor_min_indices_Tensor_self_Tensor_dim_Dimname
Rcpp::List cpp_torch_namespace_min_out_min_Tensor_min_indices_Tensor_self_Tensor_dim_Dimname(Rcpp::XPtr<torch::Tensor> min, Rcpp::XPtr<torch::Tensor> min_indices, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Dimname> dim, bool keepdim);
RcppExport SEXP _torch_cpp_torch_namespace_min_out_min_Tensor_min_indices_Tensor_self_Tensor_dim_Dimname(SEXP minSEXP, SEXP min_indicesSEXP, SEXP selfSEXP, SEXP dimSEXP, SEXP keepdimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type min(minSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type min_indices(min_indicesSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Dimname> >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< bool >::type keepdim(keepdimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_min_out_min_Tensor_min_indices_Tensor_self_Tensor_dim_Dimname(min, min_indices, self, dim, keepdim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_min_values_self_Tensor_dim_DimnameList
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_min_values_self_Tensor_dim_DimnameList(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<std::vector<torch::Dimname>> dim, bool keepdim);
RcppExport SEXP _torch_cpp_torch_namespace_min_values_self_Tensor_dim_DimnameList(SEXP selfSEXP, SEXP dimSEXP, SEXP keepdimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::vector<torch::Dimname>> >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< bool >::type keepdim(keepdimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_min_values_self_Tensor_dim_DimnameList(self, dim, keepdim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_mkldnn_convolution_self_Tensor_weight_Tensor_bias_Tensor_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_mkldnn_convolution_self_Tensor_weight_Tensor_bias_Tensor_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> weight, Rcpp::XPtr<torch::Tensor> bias, std::vector<int64_t> padding, std::vector<int64_t> stride, std::vector<int64_t> dilation, int64_t groups);
RcppExport SEXP _torch_cpp_torch_namespace_mkldnn_convolution_self_Tensor_weight_Tensor_bias_Tensor_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t(SEXP selfSEXP, SEXP weightSEXP, SEXP biasSEXP, SEXP paddingSEXP, SEXP strideSEXP, SEXP dilationSEXP, SEXP groupsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type bias(biasSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type padding(paddingSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type stride(strideSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type dilation(dilationSEXP);
    Rcpp::traits::input_parameter< int64_t >::type groups(groupsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_mkldnn_convolution_self_Tensor_weight_Tensor_bias_Tensor_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t(self, weight, bias, padding, stride, dilation, groups));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_mkldnn_convolution_backward_input_self_size_IntArrayRef_grad_output_Tensor_weight_Tensor_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_bias_defined_bool
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_mkldnn_convolution_backward_input_self_size_IntArrayRef_grad_output_Tensor_weight_Tensor_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_bias_defined_bool(std::vector<int64_t> self_size, Rcpp::XPtr<torch::Tensor> grad_output, Rcpp::XPtr<torch::Tensor> weight, std::vector<int64_t> padding, std::vector<int64_t> stride, std::vector<int64_t> dilation, int64_t groups, bool bias_defined);
RcppExport SEXP _torch_cpp_torch_namespace_mkldnn_convolution_backward_input_self_size_IntArrayRef_grad_output_Tensor_weight_Tensor_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_bias_defined_bool(SEXP self_sizeSEXP, SEXP grad_outputSEXP, SEXP weightSEXP, SEXP paddingSEXP, SEXP strideSEXP, SEXP dilationSEXP, SEXP groupsSEXP, SEXP bias_definedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type self_size(self_sizeSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type padding(paddingSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type stride(strideSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type dilation(dilationSEXP);
    Rcpp::traits::input_parameter< int64_t >::type groups(groupsSEXP);
    Rcpp::traits::input_parameter< bool >::type bias_defined(bias_definedSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_mkldnn_convolution_backward_input_self_size_IntArrayRef_grad_output_Tensor_weight_Tensor_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_bias_defined_bool(self_size, grad_output, weight, padding, stride, dilation, groups, bias_defined));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_mkldnn_convolution_backward_weights_weight_size_IntArrayRef_grad_output_Tensor_self_Tensor_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_bias_defined_bool
Rcpp::List cpp_torch_namespace_mkldnn_convolution_backward_weights_weight_size_IntArrayRef_grad_output_Tensor_self_Tensor_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_bias_defined_bool(std::vector<int64_t> weight_size, Rcpp::XPtr<torch::Tensor> grad_output, Rcpp::XPtr<torch::Tensor> self, std::vector<int64_t> padding, std::vector<int64_t> stride, std::vector<int64_t> dilation, int64_t groups, bool bias_defined);
RcppExport SEXP _torch_cpp_torch_namespace_mkldnn_convolution_backward_weights_weight_size_IntArrayRef_grad_output_Tensor_self_Tensor_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_bias_defined_bool(SEXP weight_sizeSEXP, SEXP grad_outputSEXP, SEXP selfSEXP, SEXP paddingSEXP, SEXP strideSEXP, SEXP dilationSEXP, SEXP groupsSEXP, SEXP bias_definedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type weight_size(weight_sizeSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type padding(paddingSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type stride(strideSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type dilation(dilationSEXP);
    Rcpp::traits::input_parameter< int64_t >::type groups(groupsSEXP);
    Rcpp::traits::input_parameter< bool >::type bias_defined(bias_definedSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_mkldnn_convolution_backward_weights_weight_size_IntArrayRef_grad_output_Tensor_self_Tensor_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_bias_defined_bool(weight_size, grad_output, self, padding, stride, dilation, groups, bias_defined));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_mkldnn_convolution_backward_self_Tensor_grad_output_Tensor_weight_Tensor_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_output_mask_stdarraybool3
Rcpp::List cpp_torch_namespace_mkldnn_convolution_backward_self_Tensor_grad_output_Tensor_weight_Tensor_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_output_mask_stdarraybool3(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> grad_output, Rcpp::XPtr<torch::Tensor> weight, std::vector<int64_t> padding, std::vector<int64_t> stride, std::vector<int64_t> dilation, int64_t groups, std::vector<bool> output_mask);
RcppExport SEXP _torch_cpp_torch_namespace_mkldnn_convolution_backward_self_Tensor_grad_output_Tensor_weight_Tensor_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_output_mask_stdarraybool3(SEXP selfSEXP, SEXP grad_outputSEXP, SEXP weightSEXP, SEXP paddingSEXP, SEXP strideSEXP, SEXP dilationSEXP, SEXP groupsSEXP, SEXP output_maskSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type padding(paddingSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type stride(strideSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type dilation(dilationSEXP);
    Rcpp::traits::input_parameter< int64_t >::type groups(groupsSEXP);
    Rcpp::traits::input_parameter< std::vector<bool> >::type output_mask(output_maskSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_mkldnn_convolution_backward_self_Tensor_grad_output_Tensor_weight_Tensor_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_output_mask_stdarraybool3(self, grad_output, weight, padding, stride, dilation, groups, output_mask));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_miopen_batch_norm_input_Tensor_weight_Tensor_bias_Tensor_running_mean_Tensor_running_var_Tensor_training_bool_exponential_average_factor_double_epsilon_double
Rcpp::List cpp_torch_namespace_miopen_batch_norm_input_Tensor_weight_Tensor_bias_Tensor_running_mean_Tensor_running_var_Tensor_training_bool_exponential_average_factor_double_epsilon_double(Rcpp::XPtr<torch::Tensor> input, Rcpp::XPtr<torch::Tensor> weight, Rcpp::XPtr<torch::Tensor> bias, Rcpp::XPtr<torch::Tensor> running_mean, Rcpp::XPtr<torch::Tensor> running_var, bool training, double exponential_average_factor, double epsilon);
RcppExport SEXP _torch_cpp_torch_namespace_miopen_batch_norm_input_Tensor_weight_Tensor_bias_Tensor_running_mean_Tensor_running_var_Tensor_training_bool_exponential_average_factor_double_epsilon_double(SEXP inputSEXP, SEXP weightSEXP, SEXP biasSEXP, SEXP running_meanSEXP, SEXP running_varSEXP, SEXP trainingSEXP, SEXP exponential_average_factorSEXP, SEXP epsilonSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type input(inputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type bias(biasSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type running_mean(running_meanSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type running_var(running_varSEXP);
    Rcpp::traits::input_parameter< bool >::type training(trainingSEXP);
    Rcpp::traits::input_parameter< double >::type exponential_average_factor(exponential_average_factorSEXP);
    Rcpp::traits::input_parameter< double >::type epsilon(epsilonSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_miopen_batch_norm_input_Tensor_weight_Tensor_bias_Tensor_running_mean_Tensor_running_var_Tensor_training_bool_exponential_average_factor_double_epsilon_double(input, weight, bias, running_mean, running_var, training, exponential_average_factor, epsilon));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_miopen_batch_norm_backward_input_Tensor_grad_output_Tensor_weight_Tensor_running_mean_Tensor_running_var_Tensor_save_mean_Tensor_save_var_Tensor_epsilon_double
Rcpp::List cpp_torch_namespace_miopen_batch_norm_backward_input_Tensor_grad_output_Tensor_weight_Tensor_running_mean_Tensor_running_var_Tensor_save_mean_Tensor_save_var_Tensor_epsilon_double(Rcpp::XPtr<torch::Tensor> input, Rcpp::XPtr<torch::Tensor> grad_output, Rcpp::XPtr<torch::Tensor> weight, Rcpp::XPtr<torch::Tensor> running_mean, Rcpp::XPtr<torch::Tensor> running_var, Rcpp::XPtr<torch::Tensor> save_mean, Rcpp::XPtr<torch::Tensor> save_var, double epsilon);
RcppExport SEXP _torch_cpp_torch_namespace_miopen_batch_norm_backward_input_Tensor_grad_output_Tensor_weight_Tensor_running_mean_Tensor_running_var_Tensor_save_mean_Tensor_save_var_Tensor_epsilon_double(SEXP inputSEXP, SEXP grad_outputSEXP, SEXP weightSEXP, SEXP running_meanSEXP, SEXP running_varSEXP, SEXP save_meanSEXP, SEXP save_varSEXP, SEXP epsilonSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type input(inputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type running_mean(running_meanSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type running_var(running_varSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type save_mean(save_meanSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type save_var(save_varSEXP);
    Rcpp::traits::input_parameter< double >::type epsilon(epsilonSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_miopen_batch_norm_backward_input_Tensor_grad_output_Tensor_weight_Tensor_running_mean_Tensor_running_var_Tensor_save_mean_Tensor_save_var_Tensor_epsilon_double(input, grad_output, weight, running_mean, running_var, save_mean, save_var, epsilon));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_miopen_convolution_self_Tensor_weight_Tensor_bias_Tensor_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_benchmark_bool_deterministic_bool
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_miopen_convolution_self_Tensor_weight_Tensor_bias_Tensor_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_benchmark_bool_deterministic_bool(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> weight, Rcpp::XPtr<torch::Tensor> bias, std::vector<int64_t> padding, std::vector<int64_t> stride, std::vector<int64_t> dilation, int64_t groups, bool benchmark, bool deterministic);
RcppExport SEXP _torch_cpp_torch_namespace_miopen_convolution_self_Tensor_weight_Tensor_bias_Tensor_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_benchmark_bool_deterministic_bool(SEXP selfSEXP, SEXP weightSEXP, SEXP biasSEXP, SEXP paddingSEXP, SEXP strideSEXP, SEXP dilationSEXP, SEXP groupsSEXP, SEXP benchmarkSEXP, SEXP deterministicSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type bias(biasSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type padding(paddingSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type stride(strideSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type dilation(dilationSEXP);
    Rcpp::traits::input_parameter< int64_t >::type groups(groupsSEXP);
    Rcpp::traits::input_parameter< bool >::type benchmark(benchmarkSEXP);
    Rcpp::traits::input_parameter< bool >::type deterministic(deterministicSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_miopen_convolution_self_Tensor_weight_Tensor_bias_Tensor_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_benchmark_bool_deterministic_bool(self, weight, bias, padding, stride, dilation, groups, benchmark, deterministic));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_miopen_convolution_backward_input_self_size_IntArrayRef_grad_output_Tensor_weight_Tensor_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_benchmark_bool_deterministic_bool
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_miopen_convolution_backward_input_self_size_IntArrayRef_grad_output_Tensor_weight_Tensor_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_benchmark_bool_deterministic_bool(std::vector<int64_t> self_size, Rcpp::XPtr<torch::Tensor> grad_output, Rcpp::XPtr<torch::Tensor> weight, std::vector<int64_t> padding, std::vector<int64_t> stride, std::vector<int64_t> dilation, int64_t groups, bool benchmark, bool deterministic);
RcppExport SEXP _torch_cpp_torch_namespace_miopen_convolution_backward_input_self_size_IntArrayRef_grad_output_Tensor_weight_Tensor_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_benchmark_bool_deterministic_bool(SEXP self_sizeSEXP, SEXP grad_outputSEXP, SEXP weightSEXP, SEXP paddingSEXP, SEXP strideSEXP, SEXP dilationSEXP, SEXP groupsSEXP, SEXP benchmarkSEXP, SEXP deterministicSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type self_size(self_sizeSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type padding(paddingSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type stride(strideSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type dilation(dilationSEXP);
    Rcpp::traits::input_parameter< int64_t >::type groups(groupsSEXP);
    Rcpp::traits::input_parameter< bool >::type benchmark(benchmarkSEXP);
    Rcpp::traits::input_parameter< bool >::type deterministic(deterministicSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_miopen_convolution_backward_input_self_size_IntArrayRef_grad_output_Tensor_weight_Tensor_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_benchmark_bool_deterministic_bool(self_size, grad_output, weight, padding, stride, dilation, groups, benchmark, deterministic));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_miopen_convolution_backward_self_Tensor_grad_output_Tensor_weight_Tensor_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_benchmark_bool_deterministic_bool_output_mask_stdarraybool3
Rcpp::List cpp_torch_namespace_miopen_convolution_backward_self_Tensor_grad_output_Tensor_weight_Tensor_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_benchmark_bool_deterministic_bool_output_mask_stdarraybool3(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> grad_output, Rcpp::XPtr<torch::Tensor> weight, std::vector<int64_t> padding, std::vector<int64_t> stride, std::vector<int64_t> dilation, int64_t groups, bool benchmark, bool deterministic, std::vector<bool> output_mask);
RcppExport SEXP _torch_cpp_torch_namespace_miopen_convolution_backward_self_Tensor_grad_output_Tensor_weight_Tensor_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_benchmark_bool_deterministic_bool_output_mask_stdarraybool3(SEXP selfSEXP, SEXP grad_outputSEXP, SEXP weightSEXP, SEXP paddingSEXP, SEXP strideSEXP, SEXP dilationSEXP, SEXP groupsSEXP, SEXP benchmarkSEXP, SEXP deterministicSEXP, SEXP output_maskSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type padding(paddingSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type stride(strideSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type dilation(dilationSEXP);
    Rcpp::traits::input_parameter< int64_t >::type groups(groupsSEXP);
    Rcpp::traits::input_parameter< bool >::type benchmark(benchmarkSEXP);
    Rcpp::traits::input_parameter< bool >::type deterministic(deterministicSEXP);
    Rcpp::traits::input_parameter< std::vector<bool> >::type output_mask(output_maskSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_miopen_convolution_backward_self_Tensor_grad_output_Tensor_weight_Tensor_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_benchmark_bool_deterministic_bool_output_mask_stdarraybool3(self, grad_output, weight, padding, stride, dilation, groups, benchmark, deterministic, output_mask));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_miopen_convolution_backward_bias_grad_output_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_miopen_convolution_backward_bias_grad_output_Tensor(Rcpp::XPtr<torch::Tensor> grad_output);
RcppExport SEXP _torch_cpp_torch_namespace_miopen_convolution_backward_bias_grad_output_Tensor(SEXP grad_outputSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type grad_output(grad_outputSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_miopen_convolution_backward_bias_grad_output_Tensor(grad_output));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_miopen_convolution_backward_weight_weight_size_IntArrayRef_grad_output_Tensor_self_Tensor_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_benchmark_bool_deterministic_bool
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_miopen_convolution_backward_weight_weight_size_IntArrayRef_grad_output_Tensor_self_Tensor_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_benchmark_bool_deterministic_bool(std::vector<int64_t> weight_size, Rcpp::XPtr<torch::Tensor> grad_output, Rcpp::XPtr<torch::Tensor> self, std::vector<int64_t> padding, std::vector<int64_t> stride, std::vector<int64_t> dilation, int64_t groups, bool benchmark, bool deterministic);
RcppExport SEXP _torch_cpp_torch_namespace_miopen_convolution_backward_weight_weight_size_IntArrayRef_grad_output_Tensor_self_Tensor_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_benchmark_bool_deterministic_bool(SEXP weight_sizeSEXP, SEXP grad_outputSEXP, SEXP selfSEXP, SEXP paddingSEXP, SEXP strideSEXP, SEXP dilationSEXP, SEXP groupsSEXP, SEXP benchmarkSEXP, SEXP deterministicSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type weight_size(weight_sizeSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type padding(paddingSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type stride(strideSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type dilation(dilationSEXP);
    Rcpp::traits::input_parameter< int64_t >::type groups(groupsSEXP);
    Rcpp::traits::input_parameter< bool >::type benchmark(benchmarkSEXP);
    Rcpp::traits::input_parameter< bool >::type deterministic(deterministicSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_miopen_convolution_backward_weight_weight_size_IntArrayRef_grad_output_Tensor_self_Tensor_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_benchmark_bool_deterministic_bool(weight_size, grad_output, self, padding, stride, dilation, groups, benchmark, deterministic));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_miopen_convolution_transpose_self_Tensor_weight_Tensor_bias_Tensor_padding_IntArrayRef_output_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_benchmark_bool_deterministic_bool
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_miopen_convolution_transpose_self_Tensor_weight_Tensor_bias_Tensor_padding_IntArrayRef_output_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_benchmark_bool_deterministic_bool(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> weight, Rcpp::XPtr<torch::Tensor> bias, std::vector<int64_t> padding, std::vector<int64_t> output_padding, std::vector<int64_t> stride, std::vector<int64_t> dilation, int64_t groups, bool benchmark, bool deterministic);
RcppExport SEXP _torch_cpp_torch_namespace_miopen_convolution_transpose_self_Tensor_weight_Tensor_bias_Tensor_padding_IntArrayRef_output_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_benchmark_bool_deterministic_bool(SEXP selfSEXP, SEXP weightSEXP, SEXP biasSEXP, SEXP paddingSEXP, SEXP output_paddingSEXP, SEXP strideSEXP, SEXP dilationSEXP, SEXP groupsSEXP, SEXP benchmarkSEXP, SEXP deterministicSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type bias(biasSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type padding(paddingSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type output_padding(output_paddingSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type stride(strideSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type dilation(dilationSEXP);
    Rcpp::traits::input_parameter< int64_t >::type groups(groupsSEXP);
    Rcpp::traits::input_parameter< bool >::type benchmark(benchmarkSEXP);
    Rcpp::traits::input_parameter< bool >::type deterministic(deterministicSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_miopen_convolution_transpose_self_Tensor_weight_Tensor_bias_Tensor_padding_IntArrayRef_output_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_benchmark_bool_deterministic_bool(self, weight, bias, padding, output_padding, stride, dilation, groups, benchmark, deterministic));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_miopen_convolution_transpose_backward_self_Tensor_grad_output_Tensor_weight_Tensor_padding_IntArrayRef_output_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_benchmark_bool_deterministic_bool_output_mask_stdarraybool3
Rcpp::List cpp_torch_namespace_miopen_convolution_transpose_backward_self_Tensor_grad_output_Tensor_weight_Tensor_padding_IntArrayRef_output_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_benchmark_bool_deterministic_bool_output_mask_stdarraybool3(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> grad_output, Rcpp::XPtr<torch::Tensor> weight, std::vector<int64_t> padding, std::vector<int64_t> output_padding, std::vector<int64_t> stride, std::vector<int64_t> dilation, int64_t groups, bool benchmark, bool deterministic, std::vector<bool> output_mask);
RcppExport SEXP _torch_cpp_torch_namespace_miopen_convolution_transpose_backward_self_Tensor_grad_output_Tensor_weight_Tensor_padding_IntArrayRef_output_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_benchmark_bool_deterministic_bool_output_mask_stdarraybool3(SEXP selfSEXP, SEXP grad_outputSEXP, SEXP weightSEXP, SEXP paddingSEXP, SEXP output_paddingSEXP, SEXP strideSEXP, SEXP dilationSEXP, SEXP groupsSEXP, SEXP benchmarkSEXP, SEXP deterministicSEXP, SEXP output_maskSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type padding(paddingSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type output_padding(output_paddingSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type stride(strideSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type dilation(dilationSEXP);
    Rcpp::traits::input_parameter< int64_t >::type groups(groupsSEXP);
    Rcpp::traits::input_parameter< bool >::type benchmark(benchmarkSEXP);
    Rcpp::traits::input_parameter< bool >::type deterministic(deterministicSEXP);
    Rcpp::traits::input_parameter< std::vector<bool> >::type output_mask(output_maskSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_miopen_convolution_transpose_backward_self_Tensor_grad_output_Tensor_weight_Tensor_padding_IntArrayRef_output_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_benchmark_bool_deterministic_bool_output_mask_stdarraybool3(self, grad_output, weight, padding, output_padding, stride, dilation, groups, benchmark, deterministic, output_mask));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_miopen_convolution_transpose_backward_input_grad_output_Tensor_weight_Tensor_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_benchmark_bool_deterministic_bool
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_miopen_convolution_transpose_backward_input_grad_output_Tensor_weight_Tensor_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_benchmark_bool_deterministic_bool(Rcpp::XPtr<torch::Tensor> grad_output, Rcpp::XPtr<torch::Tensor> weight, std::vector<int64_t> padding, std::vector<int64_t> stride, std::vector<int64_t> dilation, int64_t groups, bool benchmark, bool deterministic);
RcppExport SEXP _torch_cpp_torch_namespace_miopen_convolution_transpose_backward_input_grad_output_Tensor_weight_Tensor_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_benchmark_bool_deterministic_bool(SEXP grad_outputSEXP, SEXP weightSEXP, SEXP paddingSEXP, SEXP strideSEXP, SEXP dilationSEXP, SEXP groupsSEXP, SEXP benchmarkSEXP, SEXP deterministicSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type padding(paddingSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type stride(strideSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type dilation(dilationSEXP);
    Rcpp::traits::input_parameter< int64_t >::type groups(groupsSEXP);
    Rcpp::traits::input_parameter< bool >::type benchmark(benchmarkSEXP);
    Rcpp::traits::input_parameter< bool >::type deterministic(deterministicSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_miopen_convolution_transpose_backward_input_grad_output_Tensor_weight_Tensor_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_benchmark_bool_deterministic_bool(grad_output, weight, padding, stride, dilation, groups, benchmark, deterministic));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_miopen_convolution_transpose_backward_weight_weight_size_IntArrayRef_grad_output_Tensor_self_Tensor_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_benchmark_bool_deterministic_bool
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_miopen_convolution_transpose_backward_weight_weight_size_IntArrayRef_grad_output_Tensor_self_Tensor_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_benchmark_bool_deterministic_bool(std::vector<int64_t> weight_size, Rcpp::XPtr<torch::Tensor> grad_output, Rcpp::XPtr<torch::Tensor> self, std::vector<int64_t> padding, std::vector<int64_t> stride, std::vector<int64_t> dilation, int64_t groups, bool benchmark, bool deterministic);
RcppExport SEXP _torch_cpp_torch_namespace_miopen_convolution_transpose_backward_weight_weight_size_IntArrayRef_grad_output_Tensor_self_Tensor_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_benchmark_bool_deterministic_bool(SEXP weight_sizeSEXP, SEXP grad_outputSEXP, SEXP selfSEXP, SEXP paddingSEXP, SEXP strideSEXP, SEXP dilationSEXP, SEXP groupsSEXP, SEXP benchmarkSEXP, SEXP deterministicSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type weight_size(weight_sizeSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type padding(paddingSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type stride(strideSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type dilation(dilationSEXP);
    Rcpp::traits::input_parameter< int64_t >::type groups(groupsSEXP);
    Rcpp::traits::input_parameter< bool >::type benchmark(benchmarkSEXP);
    Rcpp::traits::input_parameter< bool >::type deterministic(deterministicSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_miopen_convolution_transpose_backward_weight_weight_size_IntArrayRef_grad_output_Tensor_self_Tensor_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_benchmark_bool_deterministic_bool(weight_size, grad_output, self, padding, stride, dilation, groups, benchmark, deterministic));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_miopen_depthwise_convolution_self_Tensor_weight_Tensor_bias_Tensor_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_benchmark_bool_deterministic_bool
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_miopen_depthwise_convolution_self_Tensor_weight_Tensor_bias_Tensor_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_benchmark_bool_deterministic_bool(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> weight, Rcpp::XPtr<torch::Tensor> bias, std::vector<int64_t> padding, std::vector<int64_t> stride, std::vector<int64_t> dilation, int64_t groups, bool benchmark, bool deterministic);
RcppExport SEXP _torch_cpp_torch_namespace_miopen_depthwise_convolution_self_Tensor_weight_Tensor_bias_Tensor_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_benchmark_bool_deterministic_bool(SEXP selfSEXP, SEXP weightSEXP, SEXP biasSEXP, SEXP paddingSEXP, SEXP strideSEXP, SEXP dilationSEXP, SEXP groupsSEXP, SEXP benchmarkSEXP, SEXP deterministicSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type bias(biasSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type padding(paddingSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type stride(strideSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type dilation(dilationSEXP);
    Rcpp::traits::input_parameter< int64_t >::type groups(groupsSEXP);
    Rcpp::traits::input_parameter< bool >::type benchmark(benchmarkSEXP);
    Rcpp::traits::input_parameter< bool >::type deterministic(deterministicSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_miopen_depthwise_convolution_self_Tensor_weight_Tensor_bias_Tensor_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_benchmark_bool_deterministic_bool(self, weight, bias, padding, stride, dilation, groups, benchmark, deterministic));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_miopen_depthwise_convolution_backward_input_self_size_IntArrayRef_grad_output_Tensor_weight_Tensor_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_benchmark_bool_deterministic_bool
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_miopen_depthwise_convolution_backward_input_self_size_IntArrayRef_grad_output_Tensor_weight_Tensor_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_benchmark_bool_deterministic_bool(std::vector<int64_t> self_size, Rcpp::XPtr<torch::Tensor> grad_output, Rcpp::XPtr<torch::Tensor> weight, std::vector<int64_t> padding, std::vector<int64_t> stride, std::vector<int64_t> dilation, int64_t groups, bool benchmark, bool deterministic);
RcppExport SEXP _torch_cpp_torch_namespace_miopen_depthwise_convolution_backward_input_self_size_IntArrayRef_grad_output_Tensor_weight_Tensor_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_benchmark_bool_deterministic_bool(SEXP self_sizeSEXP, SEXP grad_outputSEXP, SEXP weightSEXP, SEXP paddingSEXP, SEXP strideSEXP, SEXP dilationSEXP, SEXP groupsSEXP, SEXP benchmarkSEXP, SEXP deterministicSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type self_size(self_sizeSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type padding(paddingSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type stride(strideSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type dilation(dilationSEXP);
    Rcpp::traits::input_parameter< int64_t >::type groups(groupsSEXP);
    Rcpp::traits::input_parameter< bool >::type benchmark(benchmarkSEXP);
    Rcpp::traits::input_parameter< bool >::type deterministic(deterministicSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_miopen_depthwise_convolution_backward_input_self_size_IntArrayRef_grad_output_Tensor_weight_Tensor_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_benchmark_bool_deterministic_bool(self_size, grad_output, weight, padding, stride, dilation, groups, benchmark, deterministic));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_miopen_depthwise_convolution_backward_self_Tensor_grad_output_Tensor_weight_Tensor_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_benchmark_bool_deterministic_bool_output_mask_stdarraybool3
Rcpp::List cpp_torch_namespace_miopen_depthwise_convolution_backward_self_Tensor_grad_output_Tensor_weight_Tensor_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_benchmark_bool_deterministic_bool_output_mask_stdarraybool3(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> grad_output, Rcpp::XPtr<torch::Tensor> weight, std::vector<int64_t> padding, std::vector<int64_t> stride, std::vector<int64_t> dilation, int64_t groups, bool benchmark, bool deterministic, std::vector<bool> output_mask);
RcppExport SEXP _torch_cpp_torch_namespace_miopen_depthwise_convolution_backward_self_Tensor_grad_output_Tensor_weight_Tensor_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_benchmark_bool_deterministic_bool_output_mask_stdarraybool3(SEXP selfSEXP, SEXP grad_outputSEXP, SEXP weightSEXP, SEXP paddingSEXP, SEXP strideSEXP, SEXP dilationSEXP, SEXP groupsSEXP, SEXP benchmarkSEXP, SEXP deterministicSEXP, SEXP output_maskSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type padding(paddingSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type stride(strideSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type dilation(dilationSEXP);
    Rcpp::traits::input_parameter< int64_t >::type groups(groupsSEXP);
    Rcpp::traits::input_parameter< bool >::type benchmark(benchmarkSEXP);
    Rcpp::traits::input_parameter< bool >::type deterministic(deterministicSEXP);
    Rcpp::traits::input_parameter< std::vector<bool> >::type output_mask(output_maskSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_miopen_depthwise_convolution_backward_self_Tensor_grad_output_Tensor_weight_Tensor_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_benchmark_bool_deterministic_bool_output_mask_stdarraybool3(self, grad_output, weight, padding, stride, dilation, groups, benchmark, deterministic, output_mask));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_miopen_depthwise_convolution_backward_weight_weight_size_IntArrayRef_grad_output_Tensor_self_Tensor_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_benchmark_bool_deterministic_bool
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_miopen_depthwise_convolution_backward_weight_weight_size_IntArrayRef_grad_output_Tensor_self_Tensor_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_benchmark_bool_deterministic_bool(std::vector<int64_t> weight_size, Rcpp::XPtr<torch::Tensor> grad_output, Rcpp::XPtr<torch::Tensor> self, std::vector<int64_t> padding, std::vector<int64_t> stride, std::vector<int64_t> dilation, int64_t groups, bool benchmark, bool deterministic);
RcppExport SEXP _torch_cpp_torch_namespace_miopen_depthwise_convolution_backward_weight_weight_size_IntArrayRef_grad_output_Tensor_self_Tensor_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_benchmark_bool_deterministic_bool(SEXP weight_sizeSEXP, SEXP grad_outputSEXP, SEXP selfSEXP, SEXP paddingSEXP, SEXP strideSEXP, SEXP dilationSEXP, SEXP groupsSEXP, SEXP benchmarkSEXP, SEXP deterministicSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type weight_size(weight_sizeSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type padding(paddingSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type stride(strideSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type dilation(dilationSEXP);
    Rcpp::traits::input_parameter< int64_t >::type groups(groupsSEXP);
    Rcpp::traits::input_parameter< bool >::type benchmark(benchmarkSEXP);
    Rcpp::traits::input_parameter< bool >::type deterministic(deterministicSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_miopen_depthwise_convolution_backward_weight_weight_size_IntArrayRef_grad_output_Tensor_self_Tensor_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_benchmark_bool_deterministic_bool(weight_size, grad_output, self, padding, stride, dilation, groups, benchmark, deterministic));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_miopen_rnn_input_Tensor_weight_TensorList_weight_stride0_int64_t_hx_Tensor_cx_Tensor_mode_int64_t_hidden_size_int64_t_num_layers_int64_t_batch_first_bool_dropout_double_train_bool_bidirectional_bool_batch_sizes_IntArrayRef_dropout_state_Tensor
Rcpp::List cpp_torch_namespace_miopen_rnn_input_Tensor_weight_TensorList_weight_stride0_int64_t_hx_Tensor_cx_Tensor_mode_int64_t_hidden_size_int64_t_num_layers_int64_t_batch_first_bool_dropout_double_train_bool_bidirectional_bool_batch_sizes_IntArrayRef_dropout_state_Tensor(Rcpp::XPtr<torch::Tensor> input, Rcpp::XPtr<std::vector<torch::Tensor>> weight, int64_t weight_stride0, Rcpp::XPtr<torch::Tensor> hx, Rcpp::XPtr<torch::Tensor> cx, int64_t mode, int64_t hidden_size, int64_t num_layers, bool batch_first, double dropout, bool train, bool bidirectional, std::vector<int64_t> batch_sizes, Rcpp::XPtr<torch::Tensor> dropout_state);
RcppExport SEXP _torch_cpp_torch_namespace_miopen_rnn_input_Tensor_weight_TensorList_weight_stride0_int64_t_hx_Tensor_cx_Tensor_mode_int64_t_hidden_size_int64_t_num_layers_int64_t_batch_first_bool_dropout_double_train_bool_bidirectional_bool_batch_sizes_IntArrayRef_dropout_state_Tensor(SEXP inputSEXP, SEXP weightSEXP, SEXP weight_stride0SEXP, SEXP hxSEXP, SEXP cxSEXP, SEXP modeSEXP, SEXP hidden_sizeSEXP, SEXP num_layersSEXP, SEXP batch_firstSEXP, SEXP dropoutSEXP, SEXP trainSEXP, SEXP bidirectionalSEXP, SEXP batch_sizesSEXP, SEXP dropout_stateSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type input(inputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::vector<torch::Tensor>> >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< int64_t >::type weight_stride0(weight_stride0SEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type hx(hxSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type cx(cxSEXP);
    Rcpp::traits::input_parameter< int64_t >::type mode(modeSEXP);
    Rcpp::traits::input_parameter< int64_t >::type hidden_size(hidden_sizeSEXP);
    Rcpp::traits::input_parameter< int64_t >::type num_layers(num_layersSEXP);
    Rcpp::traits::input_parameter< bool >::type batch_first(batch_firstSEXP);
    Rcpp::traits::input_parameter< double >::type dropout(dropoutSEXP);
    Rcpp::traits::input_parameter< bool >::type train(trainSEXP);
    Rcpp::traits::input_parameter< bool >::type bidirectional(bidirectionalSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type batch_sizes(batch_sizesSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type dropout_state(dropout_stateSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_miopen_rnn_input_Tensor_weight_TensorList_weight_stride0_int64_t_hx_Tensor_cx_Tensor_mode_int64_t_hidden_size_int64_t_num_layers_int64_t_batch_first_bool_dropout_double_train_bool_bidirectional_bool_batch_sizes_IntArrayRef_dropout_state_Tensor(input, weight, weight_stride0, hx, cx, mode, hidden_size, num_layers, batch_first, dropout, train, bidirectional, batch_sizes, dropout_state));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_miopen_rnn_backward_input_Tensor_weight_TensorList_weight_stride0_int64_t_weight_buf_Tensor_hx_Tensor_cx_Tensor_output_Tensor_grad_output_Tensor_grad_hy_Tensor_grad_cy_Tensor_mode_int64_t_hidden_size_int64_t_num_layers_int64_t_batch_first_bool_dropout_double_train_bool_bidirectional_bool_batch_sizes_IntArrayRef_dropout_state_Tensor_reserve_Tensor_output_mask_stdarraybool4
Rcpp::List cpp_torch_namespace_miopen_rnn_backward_input_Tensor_weight_TensorList_weight_stride0_int64_t_weight_buf_Tensor_hx_Tensor_cx_Tensor_output_Tensor_grad_output_Tensor_grad_hy_Tensor_grad_cy_Tensor_mode_int64_t_hidden_size_int64_t_num_layers_int64_t_batch_first_bool_dropout_double_train_bool_bidirectional_bool_batch_sizes_IntArrayRef_dropout_state_Tensor_reserve_Tensor_output_mask_stdarraybool4(Rcpp::XPtr<torch::Tensor> input, Rcpp::XPtr<std::vector<torch::Tensor>> weight, int64_t weight_stride0, Rcpp::XPtr<torch::Tensor> weight_buf, Rcpp::XPtr<torch::Tensor> hx, Rcpp::XPtr<torch::Tensor> cx, Rcpp::XPtr<torch::Tensor> output, Rcpp::XPtr<torch::Tensor> grad_output, Rcpp::XPtr<torch::Tensor> grad_hy, Rcpp::XPtr<torch::Tensor> grad_cy, int64_t mode, int64_t hidden_size, int64_t num_layers, bool batch_first, double dropout, bool train, bool bidirectional, std::vector<int64_t> batch_sizes, Rcpp::XPtr<torch::Tensor> dropout_state, Rcpp::XPtr<torch::Tensor> reserve, std::vector<bool> output_mask);
RcppExport SEXP _torch_cpp_torch_namespace_miopen_rnn_backward_input_Tensor_weight_TensorList_weight_stride0_int64_t_weight_buf_Tensor_hx_Tensor_cx_Tensor_output_Tensor_grad_output_Tensor_grad_hy_Tensor_grad_cy_Tensor_mode_int64_t_hidden_size_int64_t_num_layers_int64_t_batch_first_bool_dropout_double_train_bool_bidirectional_bool_batch_sizes_IntArrayRef_dropout_state_Tensor_reserve_Tensor_output_mask_stdarraybool4(SEXP inputSEXP, SEXP weightSEXP, SEXP weight_stride0SEXP, SEXP weight_bufSEXP, SEXP hxSEXP, SEXP cxSEXP, SEXP outputSEXP, SEXP grad_outputSEXP, SEXP grad_hySEXP, SEXP grad_cySEXP, SEXP modeSEXP, SEXP hidden_sizeSEXP, SEXP num_layersSEXP, SEXP batch_firstSEXP, SEXP dropoutSEXP, SEXP trainSEXP, SEXP bidirectionalSEXP, SEXP batch_sizesSEXP, SEXP dropout_stateSEXP, SEXP reserveSEXP, SEXP output_maskSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type input(inputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::vector<torch::Tensor>> >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< int64_t >::type weight_stride0(weight_stride0SEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type weight_buf(weight_bufSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type hx(hxSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type cx(cxSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type output(outputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type grad_hy(grad_hySEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type grad_cy(grad_cySEXP);
    Rcpp::traits::input_parameter< int64_t >::type mode(modeSEXP);
    Rcpp::traits::input_parameter< int64_t >::type hidden_size(hidden_sizeSEXP);
    Rcpp::traits::input_parameter< int64_t >::type num_layers(num_layersSEXP);
    Rcpp::traits::input_parameter< bool >::type batch_first(batch_firstSEXP);
    Rcpp::traits::input_parameter< double >::type dropout(dropoutSEXP);
    Rcpp::traits::input_parameter< bool >::type train(trainSEXP);
    Rcpp::traits::input_parameter< bool >::type bidirectional(bidirectionalSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type batch_sizes(batch_sizesSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type dropout_state(dropout_stateSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type reserve(reserveSEXP);
    Rcpp::traits::input_parameter< std::vector<bool> >::type output_mask(output_maskSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_miopen_rnn_backward_input_Tensor_weight_TensorList_weight_stride0_int64_t_weight_buf_Tensor_hx_Tensor_cx_Tensor_output_Tensor_grad_output_Tensor_grad_hy_Tensor_grad_cy_Tensor_mode_int64_t_hidden_size_int64_t_num_layers_int64_t_batch_first_bool_dropout_double_train_bool_bidirectional_bool_batch_sizes_IntArrayRef_dropout_state_Tensor_reserve_Tensor_output_mask_stdarraybool4(input, weight, weight_stride0, weight_buf, hx, cx, output, grad_output, grad_hy, grad_cy, mode, hidden_size, num_layers, batch_first, dropout, train, bidirectional, batch_sizes, dropout_state, reserve, output_mask));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_mm_self_Tensor_mat2_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_mm_self_Tensor_mat2_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> mat2);
RcppExport SEXP _torch_cpp_torch_namespace_mm_self_Tensor_mat2_Tensor(SEXP selfSEXP, SEXP mat2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type mat2(mat2SEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_mm_self_Tensor_mat2_Tensor(self, mat2));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_mm_out_out_Tensor_self_Tensor_mat2_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_mm_out_out_Tensor_self_Tensor_mat2_Tensor(Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> mat2);
RcppExport SEXP _torch_cpp_torch_namespace_mm_out_out_Tensor_self_Tensor_mat2_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP mat2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type out(outSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type mat2(mat2SEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_mm_out_out_Tensor_self_Tensor_mat2_Tensor(out, self, mat2));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__sparse_mm_sparse_Tensor_dense_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace__sparse_mm_sparse_Tensor_dense_Tensor(Rcpp::XPtr<torch::Tensor> sparse, Rcpp::XPtr<torch::Tensor> dense);
RcppExport SEXP _torch_cpp_torch_namespace__sparse_mm_sparse_Tensor_dense_Tensor(SEXP sparseSEXP, SEXP denseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type sparse(sparseSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type dense(denseSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__sparse_mm_sparse_Tensor_dense_Tensor(sparse, dense));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_mode_self_Tensor
Rcpp::List cpp_torch_namespace_mode_self_Tensor(Rcpp::XPtr<torch::Tensor> self, int64_t dim, bool keepdim);
RcppExport SEXP _torch_cpp_torch_namespace_mode_self_Tensor(SEXP selfSEXP, SEXP dimSEXP, SEXP keepdimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< bool >::type keepdim(keepdimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_mode_self_Tensor(self, dim, keepdim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_mode_out_values_Tensor_indices_Tensor_self_Tensor
Rcpp::List cpp_torch_namespace_mode_out_values_Tensor_indices_Tensor_self_Tensor(Rcpp::XPtr<torch::Tensor> values, Rcpp::XPtr<torch::Tensor> indices, Rcpp::XPtr<torch::Tensor> self, int64_t dim, bool keepdim);
RcppExport SEXP _torch_cpp_torch_namespace_mode_out_values_Tensor_indices_Tensor_self_Tensor(SEXP valuesSEXP, SEXP indicesSEXP, SEXP selfSEXP, SEXP dimSEXP, SEXP keepdimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type values(valuesSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type indices(indicesSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< bool >::type keepdim(keepdimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_mode_out_values_Tensor_indices_Tensor_self_Tensor(values, indices, self, dim, keepdim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_mode_self_Tensor_dim_Dimname
Rcpp::List cpp_torch_namespace_mode_self_Tensor_dim_Dimname(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Dimname> dim, bool keepdim);
RcppExport SEXP _torch_cpp_torch_namespace_mode_self_Tensor_dim_Dimname(SEXP selfSEXP, SEXP dimSEXP, SEXP keepdimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Dimname> >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< bool >::type keepdim(keepdimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_mode_self_Tensor_dim_Dimname(self, dim, keepdim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_mode_out_values_Tensor_indices_Tensor_self_Tensor_dim_Dimname
Rcpp::List cpp_torch_namespace_mode_out_values_Tensor_indices_Tensor_self_Tensor_dim_Dimname(Rcpp::XPtr<torch::Tensor> values, Rcpp::XPtr<torch::Tensor> indices, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Dimname> dim, bool keepdim);
RcppExport SEXP _torch_cpp_torch_namespace_mode_out_values_Tensor_indices_Tensor_self_Tensor_dim_Dimname(SEXP valuesSEXP, SEXP indicesSEXP, SEXP selfSEXP, SEXP dimSEXP, SEXP keepdimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type values(valuesSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type indices(indicesSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Dimname> >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< bool >::type keepdim(keepdimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_mode_out_values_Tensor_indices_Tensor_self_Tensor_dim_Dimname(values, indices, self, dim, keepdim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_mul_self_Tensor_other_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_mul_self_Tensor_other_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> other);
RcppExport SEXP _torch_cpp_torch_namespace_mul_self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_mul_self_Tensor_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_mul_out_out_Tensor_self_Tensor_other_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_mul_out_out_Tensor_self_Tensor_other_Tensor(Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> other);
RcppExport SEXP _torch_cpp_torch_namespace_mul_out_out_Tensor_self_Tensor_other_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type out(outSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_mul_out_out_Tensor_self_Tensor_other_Tensor(out, self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_mul_self_Tensor_other_Scalar
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_mul_self_Tensor_other_Scalar(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Scalar> other);
RcppExport SEXP _torch_cpp_torch_namespace_mul_self_Tensor_other_Scalar(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_mul_self_Tensor_other_Scalar(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_mv_self_Tensor_vec_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_mv_self_Tensor_vec_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> vec);
RcppExport SEXP _torch_cpp_torch_namespace_mv_self_Tensor_vec_Tensor(SEXP selfSEXP, SEXP vecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type vec(vecSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_mv_self_Tensor_vec_Tensor(self, vec));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_mv_out_out_Tensor_self_Tensor_vec_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_mv_out_out_Tensor_self_Tensor_vec_Tensor(Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> vec);
RcppExport SEXP _torch_cpp_torch_namespace_mv_out_out_Tensor_self_Tensor_vec_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP vecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type out(outSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type vec(vecSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_mv_out_out_Tensor_self_Tensor_vec_Tensor(out, self, vec));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_mvlgamma_self_Tensor_p_int64_t
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_mvlgamma_self_Tensor_p_int64_t(Rcpp::XPtr<torch::Tensor> self, int64_t p);
RcppExport SEXP _torch_cpp_torch_namespace_mvlgamma_self_Tensor_p_int64_t(SEXP selfSEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< int64_t >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_mvlgamma_self_Tensor_p_int64_t(self, p));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_narrow_self_Tensor_dim_int64_t_start_int64_t_length_int64_t
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_narrow_self_Tensor_dim_int64_t_start_int64_t_length_int64_t(Rcpp::XPtr<torch::Tensor> self, int64_t dim, int64_t start, int64_t length);
RcppExport SEXP _torch_cpp_torch_namespace_narrow_self_Tensor_dim_int64_t_start_int64_t_length_int64_t(SEXP selfSEXP, SEXP dimSEXP, SEXP startSEXP, SEXP lengthSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< int64_t >::type start(startSEXP);
    Rcpp::traits::input_parameter< int64_t >::type length(lengthSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_narrow_self_Tensor_dim_int64_t_start_int64_t_length_int64_t(self, dim, start, length));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_native_batch_norm_input_Tensor_weight_Tensor_bias_Tensor_running_mean_Tensor_running_var_Tensor_training_bool_momentum_double_eps_double
Rcpp::List cpp_torch_namespace_native_batch_norm_input_Tensor_weight_Tensor_bias_Tensor_running_mean_Tensor_running_var_Tensor_training_bool_momentum_double_eps_double(Rcpp::XPtr<torch::Tensor> input, Rcpp::XPtr<torch::Tensor> weight, Rcpp::XPtr<torch::Tensor> bias, Rcpp::XPtr<torch::Tensor> running_mean, Rcpp::XPtr<torch::Tensor> running_var, bool training, double momentum, double eps);
RcppExport SEXP _torch_cpp_torch_namespace_native_batch_norm_input_Tensor_weight_Tensor_bias_Tensor_running_mean_Tensor_running_var_Tensor_training_bool_momentum_double_eps_double(SEXP inputSEXP, SEXP weightSEXP, SEXP biasSEXP, SEXP running_meanSEXP, SEXP running_varSEXP, SEXP trainingSEXP, SEXP momentumSEXP, SEXP epsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type input(inputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type bias(biasSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type running_mean(running_meanSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type running_var(running_varSEXP);
    Rcpp::traits::input_parameter< bool >::type training(trainingSEXP);
    Rcpp::traits::input_parameter< double >::type momentum(momentumSEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_native_batch_norm_input_Tensor_weight_Tensor_bias_Tensor_running_mean_Tensor_running_var_Tensor_training_bool_momentum_double_eps_double(input, weight, bias, running_mean, running_var, training, momentum, eps));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_batch_norm_stats_input_Tensor_eps_double
Rcpp::List cpp_torch_namespace_batch_norm_stats_input_Tensor_eps_double(Rcpp::XPtr<torch::Tensor> input, double eps);
RcppExport SEXP _torch_cpp_torch_namespace_batch_norm_stats_input_Tensor_eps_double(SEXP inputSEXP, SEXP epsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type input(inputSEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_batch_norm_stats_input_Tensor_eps_double(input, eps));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_batch_norm_elemt_input_Tensor_weight_Tensor_bias_Tensor_mean_Tensor_invstd_Tensor_eps_double
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_batch_norm_elemt_input_Tensor_weight_Tensor_bias_Tensor_mean_Tensor_invstd_Tensor_eps_double(Rcpp::XPtr<torch::Tensor> input, Rcpp::XPtr<torch::Tensor> weight, Rcpp::XPtr<torch::Tensor> bias, Rcpp::XPtr<torch::Tensor> mean, Rcpp::XPtr<torch::Tensor> invstd, double eps);
RcppExport SEXP _torch_cpp_torch_namespace_batch_norm_elemt_input_Tensor_weight_Tensor_bias_Tensor_mean_Tensor_invstd_Tensor_eps_double(SEXP inputSEXP, SEXP weightSEXP, SEXP biasSEXP, SEXP meanSEXP, SEXP invstdSEXP, SEXP epsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type input(inputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type bias(biasSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type invstd(invstdSEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_batch_norm_elemt_input_Tensor_weight_Tensor_bias_Tensor_mean_Tensor_invstd_Tensor_eps_double(input, weight, bias, mean, invstd, eps));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_batch_norm_elemt_out_out_Tensor_input_Tensor_weight_Tensor_bias_Tensor_mean_Tensor_invstd_Tensor_eps_double
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_batch_norm_elemt_out_out_Tensor_input_Tensor_weight_Tensor_bias_Tensor_mean_Tensor_invstd_Tensor_eps_double(Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> input, Rcpp::XPtr<torch::Tensor> weight, Rcpp::XPtr<torch::Tensor> bias, Rcpp::XPtr<torch::Tensor> mean, Rcpp::XPtr<torch::Tensor> invstd, double eps);
RcppExport SEXP _torch_cpp_torch_namespace_batch_norm_elemt_out_out_Tensor_input_Tensor_weight_Tensor_bias_Tensor_mean_Tensor_invstd_Tensor_eps_double(SEXP outSEXP, SEXP inputSEXP, SEXP weightSEXP, SEXP biasSEXP, SEXP meanSEXP, SEXP invstdSEXP, SEXP epsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type out(outSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type input(inputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type bias(biasSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type invstd(invstdSEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_batch_norm_elemt_out_out_Tensor_input_Tensor_weight_Tensor_bias_Tensor_mean_Tensor_invstd_Tensor_eps_double(out, input, weight, bias, mean, invstd, eps));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_batch_norm_gather_stats_input_Tensor_mean_Tensor_invstd_Tensor_running_mean_Tensor_running_var_Tensor_momentum_double_eps_double_count_int64_t
Rcpp::List cpp_torch_namespace_batch_norm_gather_stats_input_Tensor_mean_Tensor_invstd_Tensor_running_mean_Tensor_running_var_Tensor_momentum_double_eps_double_count_int64_t(Rcpp::XPtr<torch::Tensor> input, Rcpp::XPtr<torch::Tensor> mean, Rcpp::XPtr<torch::Tensor> invstd, Rcpp::XPtr<torch::Tensor> running_mean, Rcpp::XPtr<torch::Tensor> running_var, double momentum, double eps, int64_t count);
RcppExport SEXP _torch_cpp_torch_namespace_batch_norm_gather_stats_input_Tensor_mean_Tensor_invstd_Tensor_running_mean_Tensor_running_var_Tensor_momentum_double_eps_double_count_int64_t(SEXP inputSEXP, SEXP meanSEXP, SEXP invstdSEXP, SEXP running_meanSEXP, SEXP running_varSEXP, SEXP momentumSEXP, SEXP epsSEXP, SEXP countSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type input(inputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type invstd(invstdSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type running_mean(running_meanSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type running_var(running_varSEXP);
    Rcpp::traits::input_parameter< double >::type momentum(momentumSEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< int64_t >::type count(countSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_batch_norm_gather_stats_input_Tensor_mean_Tensor_invstd_Tensor_running_mean_Tensor_running_var_Tensor_momentum_double_eps_double_count_int64_t(input, mean, invstd, running_mean, running_var, momentum, eps, count));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_batch_norm_gather_stats_with_counts_input_Tensor_mean_Tensor_invstd_Tensor_running_mean_Tensor_running_var_Tensor_momentum_double_eps_double_counts_IntArrayRef
Rcpp::List cpp_torch_namespace_batch_norm_gather_stats_with_counts_input_Tensor_mean_Tensor_invstd_Tensor_running_mean_Tensor_running_var_Tensor_momentum_double_eps_double_counts_IntArrayRef(Rcpp::XPtr<torch::Tensor> input, Rcpp::XPtr<torch::Tensor> mean, Rcpp::XPtr<torch::Tensor> invstd, Rcpp::XPtr<torch::Tensor> running_mean, Rcpp::XPtr<torch::Tensor> running_var, double momentum, double eps, std::vector<int64_t> counts);
RcppExport SEXP _torch_cpp_torch_namespace_batch_norm_gather_stats_with_counts_input_Tensor_mean_Tensor_invstd_Tensor_running_mean_Tensor_running_var_Tensor_momentum_double_eps_double_counts_IntArrayRef(SEXP inputSEXP, SEXP meanSEXP, SEXP invstdSEXP, SEXP running_meanSEXP, SEXP running_varSEXP, SEXP momentumSEXP, SEXP epsSEXP, SEXP countsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type input(inputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type invstd(invstdSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type running_mean(running_meanSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type running_var(running_varSEXP);
    Rcpp::traits::input_parameter< double >::type momentum(momentumSEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type counts(countsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_batch_norm_gather_stats_with_counts_input_Tensor_mean_Tensor_invstd_Tensor_running_mean_Tensor_running_var_Tensor_momentum_double_eps_double_counts_IntArrayRef(input, mean, invstd, running_mean, running_var, momentum, eps, counts));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_native_batch_norm_backward_grad_out_Tensor_input_Tensor_weight_Tensor_running_mean_Tensor_running_var_Tensor_save_mean_Tensor_save_invstd_Tensor_train_bool_eps_double_output_mask_stdarraybool3
Rcpp::List cpp_torch_namespace_native_batch_norm_backward_grad_out_Tensor_input_Tensor_weight_Tensor_running_mean_Tensor_running_var_Tensor_save_mean_Tensor_save_invstd_Tensor_train_bool_eps_double_output_mask_stdarraybool3(Rcpp::XPtr<torch::Tensor> grad_out, Rcpp::XPtr<torch::Tensor> input, Rcpp::XPtr<torch::Tensor> weight, Rcpp::XPtr<torch::Tensor> running_mean, Rcpp::XPtr<torch::Tensor> running_var, Rcpp::XPtr<torch::Tensor> save_mean, Rcpp::XPtr<torch::Tensor> save_invstd, bool train, double eps, std::vector<bool> output_mask);
RcppExport SEXP _torch_cpp_torch_namespace_native_batch_norm_backward_grad_out_Tensor_input_Tensor_weight_Tensor_running_mean_Tensor_running_var_Tensor_save_mean_Tensor_save_invstd_Tensor_train_bool_eps_double_output_mask_stdarraybool3(SEXP grad_outSEXP, SEXP inputSEXP, SEXP weightSEXP, SEXP running_meanSEXP, SEXP running_varSEXP, SEXP save_meanSEXP, SEXP save_invstdSEXP, SEXP trainSEXP, SEXP epsSEXP, SEXP output_maskSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type grad_out(grad_outSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type input(inputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type running_mean(running_meanSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type running_var(running_varSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type save_mean(save_meanSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type save_invstd(save_invstdSEXP);
    Rcpp::traits::input_parameter< bool >::type train(trainSEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< std::vector<bool> >::type output_mask(output_maskSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_native_batch_norm_backward_grad_out_Tensor_input_Tensor_weight_Tensor_running_mean_Tensor_running_var_Tensor_save_mean_Tensor_save_invstd_Tensor_train_bool_eps_double_output_mask_stdarraybool3(grad_out, input, weight, running_mean, running_var, save_mean, save_invstd, train, eps, output_mask));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_batch_norm_backward_reduce_grad_out_Tensor_input_Tensor_mean_Tensor_invstd_Tensor_weight_Tensor_input_g_bool_weight_g_bool_bias_g_bool
Rcpp::List cpp_torch_namespace_batch_norm_backward_reduce_grad_out_Tensor_input_Tensor_mean_Tensor_invstd_Tensor_weight_Tensor_input_g_bool_weight_g_bool_bias_g_bool(Rcpp::XPtr<torch::Tensor> grad_out, Rcpp::XPtr<torch::Tensor> input, Rcpp::XPtr<torch::Tensor> mean, Rcpp::XPtr<torch::Tensor> invstd, Rcpp::XPtr<torch::Tensor> weight, bool input_g, bool weight_g, bool bias_g);
RcppExport SEXP _torch_cpp_torch_namespace_batch_norm_backward_reduce_grad_out_Tensor_input_Tensor_mean_Tensor_invstd_Tensor_weight_Tensor_input_g_bool_weight_g_bool_bias_g_bool(SEXP grad_outSEXP, SEXP inputSEXP, SEXP meanSEXP, SEXP invstdSEXP, SEXP weightSEXP, SEXP input_gSEXP, SEXP weight_gSEXP, SEXP bias_gSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type grad_out(grad_outSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type input(inputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type invstd(invstdSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< bool >::type input_g(input_gSEXP);
    Rcpp::traits::input_parameter< bool >::type weight_g(weight_gSEXP);
    Rcpp::traits::input_parameter< bool >::type bias_g(bias_gSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_batch_norm_backward_reduce_grad_out_Tensor_input_Tensor_mean_Tensor_invstd_Tensor_weight_Tensor_input_g_bool_weight_g_bool_bias_g_bool(grad_out, input, mean, invstd, weight, input_g, weight_g, bias_g));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_batch_norm_backward_elemt_grad_out_Tensor_input_Tensor_mean_Tensor_invstd_Tensor_weight_Tensor_mean_dy_Tensor_mean_dy_xmu_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_batch_norm_backward_elemt_grad_out_Tensor_input_Tensor_mean_Tensor_invstd_Tensor_weight_Tensor_mean_dy_Tensor_mean_dy_xmu_Tensor(Rcpp::XPtr<torch::Tensor> grad_out, Rcpp::XPtr<torch::Tensor> input, Rcpp::XPtr<torch::Tensor> mean, Rcpp::XPtr<torch::Tensor> invstd, Rcpp::XPtr<torch::Tensor> weight, Rcpp::XPtr<torch::Tensor> mean_dy, Rcpp::XPtr<torch::Tensor> mean_dy_xmu);
RcppExport SEXP _torch_cpp_torch_namespace_batch_norm_backward_elemt_grad_out_Tensor_input_Tensor_mean_Tensor_invstd_Tensor_weight_Tensor_mean_dy_Tensor_mean_dy_xmu_Tensor(SEXP grad_outSEXP, SEXP inputSEXP, SEXP meanSEXP, SEXP invstdSEXP, SEXP weightSEXP, SEXP mean_dySEXP, SEXP mean_dy_xmuSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type grad_out(grad_outSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type input(inputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type invstd(invstdSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type mean_dy(mean_dySEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type mean_dy_xmu(mean_dy_xmuSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_batch_norm_backward_elemt_grad_out_Tensor_input_Tensor_mean_Tensor_invstd_Tensor_weight_Tensor_mean_dy_Tensor_mean_dy_xmu_Tensor(grad_out, input, mean, invstd, weight, mean_dy, mean_dy_xmu));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_batch_norm_update_stats_input_Tensor_running_mean_Tensor_running_var_Tensor_momentum_double
Rcpp::List cpp_torch_namespace_batch_norm_update_stats_input_Tensor_running_mean_Tensor_running_var_Tensor_momentum_double(Rcpp::XPtr<torch::Tensor> input, Rcpp::XPtr<torch::Tensor> running_mean, Rcpp::XPtr<torch::Tensor> running_var, double momentum);
RcppExport SEXP _torch_cpp_torch_namespace_batch_norm_update_stats_input_Tensor_running_mean_Tensor_running_var_Tensor_momentum_double(SEXP inputSEXP, SEXP running_meanSEXP, SEXP running_varSEXP, SEXP momentumSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type input(inputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type running_mean(running_meanSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type running_var(running_varSEXP);
    Rcpp::traits::input_parameter< double >::type momentum(momentumSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_batch_norm_update_stats_input_Tensor_running_mean_Tensor_running_var_Tensor_momentum_double(input, running_mean, running_var, momentum));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__nnpack_available_
bool cpp_torch_namespace__nnpack_available_();
RcppExport SEXP _torch_cpp_torch_namespace__nnpack_available_() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__nnpack_available_());
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__nnpack_spatial_convolution_input_Tensor_weight_Tensor_bias_Tensor_padding_IntArrayRef
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace__nnpack_spatial_convolution_input_Tensor_weight_Tensor_bias_Tensor_padding_IntArrayRef(Rcpp::XPtr<torch::Tensor> input, Rcpp::XPtr<torch::Tensor> weight, Rcpp::XPtr<torch::Tensor> bias, std::vector<int64_t> padding, std::vector<int64_t> stride);
RcppExport SEXP _torch_cpp_torch_namespace__nnpack_spatial_convolution_input_Tensor_weight_Tensor_bias_Tensor_padding_IntArrayRef(SEXP inputSEXP, SEXP weightSEXP, SEXP biasSEXP, SEXP paddingSEXP, SEXP strideSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type input(inputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type bias(biasSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type padding(paddingSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type stride(strideSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__nnpack_spatial_convolution_input_Tensor_weight_Tensor_bias_Tensor_padding_IntArrayRef(input, weight, bias, padding, stride));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__nnpack_spatial_convolution_backward_input_Tensor_grad_output_Tensor_weight_Tensor_padding_IntArrayRef_output_mask_stdarraybool3
Rcpp::List cpp_torch_namespace__nnpack_spatial_convolution_backward_input_Tensor_grad_output_Tensor_weight_Tensor_padding_IntArrayRef_output_mask_stdarraybool3(Rcpp::XPtr<torch::Tensor> input, Rcpp::XPtr<torch::Tensor> grad_output, Rcpp::XPtr<torch::Tensor> weight, std::vector<int64_t> padding, std::vector<bool> output_mask);
RcppExport SEXP _torch_cpp_torch_namespace__nnpack_spatial_convolution_backward_input_Tensor_grad_output_Tensor_weight_Tensor_padding_IntArrayRef_output_mask_stdarraybool3(SEXP inputSEXP, SEXP grad_outputSEXP, SEXP weightSEXP, SEXP paddingSEXP, SEXP output_maskSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type input(inputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type padding(paddingSEXP);
    Rcpp::traits::input_parameter< std::vector<bool> >::type output_mask(output_maskSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__nnpack_spatial_convolution_backward_input_Tensor_grad_output_Tensor_weight_Tensor_padding_IntArrayRef_output_mask_stdarraybool3(input, grad_output, weight, padding, output_mask));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__nnpack_spatial_convolution_backward_input_input_Tensor_grad_output_Tensor_weight_Tensor_padding_IntArrayRef
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace__nnpack_spatial_convolution_backward_input_input_Tensor_grad_output_Tensor_weight_Tensor_padding_IntArrayRef(Rcpp::XPtr<torch::Tensor> input, Rcpp::XPtr<torch::Tensor> grad_output, Rcpp::XPtr<torch::Tensor> weight, std::vector<int64_t> padding);
RcppExport SEXP _torch_cpp_torch_namespace__nnpack_spatial_convolution_backward_input_input_Tensor_grad_output_Tensor_weight_Tensor_padding_IntArrayRef(SEXP inputSEXP, SEXP grad_outputSEXP, SEXP weightSEXP, SEXP paddingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type input(inputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type padding(paddingSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__nnpack_spatial_convolution_backward_input_input_Tensor_grad_output_Tensor_weight_Tensor_padding_IntArrayRef(input, grad_output, weight, padding));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__nnpack_spatial_convolution_backward_weight_input_Tensor_weightsize_IntArrayRef_grad_output_Tensor_padding_IntArrayRef
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace__nnpack_spatial_convolution_backward_weight_input_Tensor_weightsize_IntArrayRef_grad_output_Tensor_padding_IntArrayRef(Rcpp::XPtr<torch::Tensor> input, std::vector<int64_t> weightsize, Rcpp::XPtr<torch::Tensor> grad_output, std::vector<int64_t> padding);
RcppExport SEXP _torch_cpp_torch_namespace__nnpack_spatial_convolution_backward_weight_input_Tensor_weightsize_IntArrayRef_grad_output_Tensor_padding_IntArrayRef(SEXP inputSEXP, SEXP weightsizeSEXP, SEXP grad_outputSEXP, SEXP paddingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type input(inputSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type weightsize(weightsizeSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type padding(paddingSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__nnpack_spatial_convolution_backward_weight_input_Tensor_weightsize_IntArrayRef_grad_output_Tensor_padding_IntArrayRef(input, weightsize, grad_output, padding));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_ones_size_IntArrayRef_names_DimnameList
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_ones_size_IntArrayRef_names_DimnameList(std::vector<int64_t> size, Rcpp::XPtr<std::vector<torch::Dimname>> names, Rcpp::XPtr<torch::TensorOptions> options);
RcppExport SEXP _torch_cpp_torch_namespace_ones_size_IntArrayRef_names_DimnameList(SEXP sizeSEXP, SEXP namesSEXP, SEXP optionsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::vector<torch::Dimname>> >::type names(namesSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::TensorOptions> >::type options(optionsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_ones_size_IntArrayRef_names_DimnameList(size, names, options));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_ones_size_IntArrayRef
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_ones_size_IntArrayRef(std::vector<int64_t> size, Rcpp::XPtr<torch::TensorOptions> options);
RcppExport SEXP _torch_cpp_torch_namespace_ones_size_IntArrayRef(SEXP sizeSEXP, SEXP optionsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::TensorOptions> >::type options(optionsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_ones_size_IntArrayRef(size, options));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_ones_out_out_Tensor_size_IntArrayRef
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_ones_out_out_Tensor_size_IntArrayRef(Rcpp::XPtr<torch::Tensor> out, std::vector<int64_t> size);
RcppExport SEXP _torch_cpp_torch_namespace_ones_out_out_Tensor_size_IntArrayRef(SEXP outSEXP, SEXP sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type out(outSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type size(sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_ones_out_out_Tensor_size_IntArrayRef(out, size));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_ones_like_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_ones_like_self_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<c10::optional<torch::MemoryFormat>> memory_format);
RcppExport SEXP _torch_cpp_torch_namespace_ones_like_self_Tensor(SEXP selfSEXP, SEXP memory_formatSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<c10::optional<torch::MemoryFormat>> >::type memory_format(memory_formatSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_ones_like_self_Tensor(self, memory_format));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_ones_like_self_Tensor_options_TensorOptions
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_ones_like_self_Tensor_options_TensorOptions(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::TensorOptions> options, Rcpp::XPtr<c10::optional<torch::MemoryFormat>> memory_format);
RcppExport SEXP _torch_cpp_torch_namespace_ones_like_self_Tensor_options_TensorOptions(SEXP selfSEXP, SEXP optionsSEXP, SEXP memory_formatSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::TensorOptions> >::type options(optionsSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<c10::optional<torch::MemoryFormat>> >::type memory_format(memory_formatSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_ones_like_self_Tensor_options_TensorOptions(self, options, memory_format));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_pairwise_distance_x1_Tensor_x2_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_pairwise_distance_x1_Tensor_x2_Tensor(Rcpp::XPtr<torch::Tensor> x1, Rcpp::XPtr<torch::Tensor> x2, double p, double eps, bool keepdim);
RcppExport SEXP _torch_cpp_torch_namespace_pairwise_distance_x1_Tensor_x2_Tensor(SEXP x1SEXP, SEXP x2SEXP, SEXP pSEXP, SEXP epsSEXP, SEXP keepdimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x1(x1SEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x2(x2SEXP);
    Rcpp::traits::input_parameter< double >::type p(pSEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< bool >::type keepdim(keepdimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_pairwise_distance_x1_Tensor_x2_Tensor(x1, x2, p, eps, keepdim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_cdist_x1_Tensor_x2_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_cdist_x1_Tensor_x2_Tensor(Rcpp::XPtr<torch::Tensor> x1, Rcpp::XPtr<torch::Tensor> x2, double p, int64_t compute_mode);
RcppExport SEXP _torch_cpp_torch_namespace_cdist_x1_Tensor_x2_Tensor(SEXP x1SEXP, SEXP x2SEXP, SEXP pSEXP, SEXP compute_modeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x1(x1SEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x2(x2SEXP);
    Rcpp::traits::input_parameter< double >::type p(pSEXP);
    Rcpp::traits::input_parameter< int64_t >::type compute_mode(compute_modeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_cdist_x1_Tensor_x2_Tensor(x1, x2, p, compute_mode));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__cdist_backward_grad_Tensor_x1_Tensor_x2_Tensor_p_double_cdist_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace__cdist_backward_grad_Tensor_x1_Tensor_x2_Tensor_p_double_cdist_Tensor(Rcpp::XPtr<torch::Tensor> grad, Rcpp::XPtr<torch::Tensor> x1, Rcpp::XPtr<torch::Tensor> x2, double p, Rcpp::XPtr<torch::Tensor> cdist);
RcppExport SEXP _torch_cpp_torch_namespace__cdist_backward_grad_Tensor_x1_Tensor_x2_Tensor_p_double_cdist_Tensor(SEXP gradSEXP, SEXP x1SEXP, SEXP x2SEXP, SEXP pSEXP, SEXP cdistSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type grad(gradSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x1(x1SEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x2(x2SEXP);
    Rcpp::traits::input_parameter< double >::type p(pSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type cdist(cdistSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__cdist_backward_grad_Tensor_x1_Tensor_x2_Tensor_p_double_cdist_Tensor(grad, x1, x2, p, cdist));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_pdist_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_pdist_self_Tensor(Rcpp::XPtr<torch::Tensor> self, double p);
RcppExport SEXP _torch_cpp_torch_namespace_pdist_self_Tensor(SEXP selfSEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< double >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_pdist_self_Tensor(self, p));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__pdist_forward_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace__pdist_forward_self_Tensor(Rcpp::XPtr<torch::Tensor> self, double p);
RcppExport SEXP _torch_cpp_torch_namespace__pdist_forward_self_Tensor(SEXP selfSEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< double >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__pdist_forward_self_Tensor(self, p));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__pdist_backward_grad_Tensor_self_Tensor_p_double_pdist_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace__pdist_backward_grad_Tensor_self_Tensor_p_double_pdist_Tensor(Rcpp::XPtr<torch::Tensor> grad, Rcpp::XPtr<torch::Tensor> self, double p, Rcpp::XPtr<torch::Tensor> pdist);
RcppExport SEXP _torch_cpp_torch_namespace__pdist_backward_grad_Tensor_self_Tensor_p_double_pdist_Tensor(SEXP gradSEXP, SEXP selfSEXP, SEXP pSEXP, SEXP pdistSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type grad(gradSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< double >::type p(pSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type pdist(pdistSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__pdist_backward_grad_Tensor_self_Tensor_p_double_pdist_Tensor(grad, self, p, pdist));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_cosine_similarity_x1_Tensor_x2_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_cosine_similarity_x1_Tensor_x2_Tensor(Rcpp::XPtr<torch::Tensor> x1, Rcpp::XPtr<torch::Tensor> x2, int64_t dim, double eps);
RcppExport SEXP _torch_cpp_torch_namespace_cosine_similarity_x1_Tensor_x2_Tensor(SEXP x1SEXP, SEXP x2SEXP, SEXP dimSEXP, SEXP epsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x1(x1SEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x2(x2SEXP);
    Rcpp::traits::input_parameter< int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_cosine_similarity_x1_Tensor_x2_Tensor(x1, x2, dim, eps));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_pixel_shuffle_self_Tensor_upscale_factor_int64_t
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_pixel_shuffle_self_Tensor_upscale_factor_int64_t(Rcpp::XPtr<torch::Tensor> self, int64_t upscale_factor);
RcppExport SEXP _torch_cpp_torch_namespace_pixel_shuffle_self_Tensor_upscale_factor_int64_t(SEXP selfSEXP, SEXP upscale_factorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< int64_t >::type upscale_factor(upscale_factorSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_pixel_shuffle_self_Tensor_upscale_factor_int64_t(self, upscale_factor));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_pinverse_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_pinverse_self_Tensor(Rcpp::XPtr<torch::Tensor> self, double rcond);
RcppExport SEXP _torch_cpp_torch_namespace_pinverse_self_Tensor(SEXP selfSEXP, SEXP rcondSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< double >::type rcond(rcondSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_pinverse_self_Tensor(self, rcond));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_poisson_nll_loss_input_Tensor_target_Tensor_log_input_bool_full_bool_eps_double_reduction_int64_t
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_poisson_nll_loss_input_Tensor_target_Tensor_log_input_bool_full_bool_eps_double_reduction_int64_t(Rcpp::XPtr<torch::Tensor> input, Rcpp::XPtr<torch::Tensor> target, bool log_input, bool full, double eps, int64_t reduction);
RcppExport SEXP _torch_cpp_torch_namespace_poisson_nll_loss_input_Tensor_target_Tensor_log_input_bool_full_bool_eps_double_reduction_int64_t(SEXP inputSEXP, SEXP targetSEXP, SEXP log_inputSEXP, SEXP fullSEXP, SEXP epsSEXP, SEXP reductionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type input(inputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type target(targetSEXP);
    Rcpp::traits::input_parameter< bool >::type log_input(log_inputSEXP);
    Rcpp::traits::input_parameter< bool >::type full(fullSEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< int64_t >::type reduction(reductionSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_poisson_nll_loss_input_Tensor_target_Tensor_log_input_bool_full_bool_eps_double_reduction_int64_t(input, target, log_input, full, eps, reduction));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_scalar_tensor_s_Scalar
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_scalar_tensor_s_Scalar(Rcpp::XPtr<torch::Scalar> s, Rcpp::XPtr<torch::TensorOptions> options);
RcppExport SEXP _torch_cpp_torch_namespace_scalar_tensor_s_Scalar(SEXP sSEXP, SEXP optionsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type s(sSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::TensorOptions> >::type options(optionsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_scalar_tensor_s_Scalar(s, options));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_rand_size_IntArrayRef_names_DimnameList
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_rand_size_IntArrayRef_names_DimnameList(std::vector<int64_t> size, Rcpp::XPtr<std::vector<torch::Dimname>> names, Rcpp::XPtr<torch::TensorOptions> options);
RcppExport SEXP _torch_cpp_torch_namespace_rand_size_IntArrayRef_names_DimnameList(SEXP sizeSEXP, SEXP namesSEXP, SEXP optionsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::vector<torch::Dimname>> >::type names(namesSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::TensorOptions> >::type options(optionsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_rand_size_IntArrayRef_names_DimnameList(size, names, options));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_rand_size_IntArrayRef_generator_Generator_names_DimnameList
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_rand_size_IntArrayRef_generator_Generator_names_DimnameList(std::vector<int64_t> size, Rcpp::XPtr<torch::Generator *> generator, Rcpp::XPtr<std::vector<torch::Dimname>> names, Rcpp::XPtr<torch::TensorOptions> options);
RcppExport SEXP _torch_cpp_torch_namespace_rand_size_IntArrayRef_generator_Generator_names_DimnameList(SEXP sizeSEXP, SEXP generatorSEXP, SEXP namesSEXP, SEXP optionsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Generator *> >::type generator(generatorSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::vector<torch::Dimname>> >::type names(namesSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::TensorOptions> >::type options(optionsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_rand_size_IntArrayRef_generator_Generator_names_DimnameList(size, generator, names, options));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_rand_size_IntArrayRef
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_rand_size_IntArrayRef(std::vector<int64_t> size, Rcpp::XPtr<torch::TensorOptions> options);
RcppExport SEXP _torch_cpp_torch_namespace_rand_size_IntArrayRef(SEXP sizeSEXP, SEXP optionsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::TensorOptions> >::type options(optionsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_rand_size_IntArrayRef(size, options));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_rand_size_IntArrayRef_generator_Generator
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_rand_size_IntArrayRef_generator_Generator(std::vector<int64_t> size, Rcpp::XPtr<torch::Generator *> generator, Rcpp::XPtr<torch::TensorOptions> options);
RcppExport SEXP _torch_cpp_torch_namespace_rand_size_IntArrayRef_generator_Generator(SEXP sizeSEXP, SEXP generatorSEXP, SEXP optionsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Generator *> >::type generator(generatorSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::TensorOptions> >::type options(optionsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_rand_size_IntArrayRef_generator_Generator(size, generator, options));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_rand_out_out_Tensor_size_IntArrayRef
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_rand_out_out_Tensor_size_IntArrayRef(Rcpp::XPtr<torch::Tensor> out, std::vector<int64_t> size);
RcppExport SEXP _torch_cpp_torch_namespace_rand_out_out_Tensor_size_IntArrayRef(SEXP outSEXP, SEXP sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type out(outSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type size(sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_rand_out_out_Tensor_size_IntArrayRef(out, size));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_rand_out_out_Tensor_size_IntArrayRef_generator_Generator
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_rand_out_out_Tensor_size_IntArrayRef_generator_Generator(Rcpp::XPtr<torch::Tensor> out, std::vector<int64_t> size, Rcpp::XPtr<torch::Generator *> generator);
RcppExport SEXP _torch_cpp_torch_namespace_rand_out_out_Tensor_size_IntArrayRef_generator_Generator(SEXP outSEXP, SEXP sizeSEXP, SEXP generatorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type out(outSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Generator *> >::type generator(generatorSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_rand_out_out_Tensor_size_IntArrayRef_generator_Generator(out, size, generator));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_rand_like_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_rand_like_self_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<c10::optional<torch::MemoryFormat>> memory_format);
RcppExport SEXP _torch_cpp_torch_namespace_rand_like_self_Tensor(SEXP selfSEXP, SEXP memory_formatSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<c10::optional<torch::MemoryFormat>> >::type memory_format(memory_formatSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_rand_like_self_Tensor(self, memory_format));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_rand_like_self_Tensor_options_TensorOptions
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_rand_like_self_Tensor_options_TensorOptions(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::TensorOptions> options, Rcpp::XPtr<c10::optional<torch::MemoryFormat>> memory_format);
RcppExport SEXP _torch_cpp_torch_namespace_rand_like_self_Tensor_options_TensorOptions(SEXP selfSEXP, SEXP optionsSEXP, SEXP memory_formatSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::TensorOptions> >::type options(optionsSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<c10::optional<torch::MemoryFormat>> >::type memory_format(memory_formatSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_rand_like_self_Tensor_options_TensorOptions(self, options, memory_format));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_randint_high_int64_t_size_IntArrayRef
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_randint_high_int64_t_size_IntArrayRef(int64_t high, std::vector<int64_t> size, Rcpp::XPtr<torch::TensorOptions> options);
RcppExport SEXP _torch_cpp_torch_namespace_randint_high_int64_t_size_IntArrayRef(SEXP highSEXP, SEXP sizeSEXP, SEXP optionsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int64_t >::type high(highSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::TensorOptions> >::type options(optionsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_randint_high_int64_t_size_IntArrayRef(high, size, options));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_randint_high_int64_t_size_IntArrayRef_generator_Generator
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_randint_high_int64_t_size_IntArrayRef_generator_Generator(int64_t high, std::vector<int64_t> size, Rcpp::XPtr<torch::Generator *> generator, Rcpp::XPtr<torch::TensorOptions> options);
RcppExport SEXP _torch_cpp_torch_namespace_randint_high_int64_t_size_IntArrayRef_generator_Generator(SEXP highSEXP, SEXP sizeSEXP, SEXP generatorSEXP, SEXP optionsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int64_t >::type high(highSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Generator *> >::type generator(generatorSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::TensorOptions> >::type options(optionsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_randint_high_int64_t_size_IntArrayRef_generator_Generator(high, size, generator, options));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_randint_low_int64_t_high_int64_t_size_IntArrayRef
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_randint_low_int64_t_high_int64_t_size_IntArrayRef(int64_t low, int64_t high, std::vector<int64_t> size, Rcpp::XPtr<torch::TensorOptions> options);
RcppExport SEXP _torch_cpp_torch_namespace_randint_low_int64_t_high_int64_t_size_IntArrayRef(SEXP lowSEXP, SEXP highSEXP, SEXP sizeSEXP, SEXP optionsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int64_t >::type low(lowSEXP);
    Rcpp::traits::input_parameter< int64_t >::type high(highSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::TensorOptions> >::type options(optionsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_randint_low_int64_t_high_int64_t_size_IntArrayRef(low, high, size, options));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_randint_low_int64_t_high_int64_t_size_IntArrayRef_generator_Generator
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_randint_low_int64_t_high_int64_t_size_IntArrayRef_generator_Generator(int64_t low, int64_t high, std::vector<int64_t> size, Rcpp::XPtr<torch::Generator *> generator, Rcpp::XPtr<torch::TensorOptions> options);
RcppExport SEXP _torch_cpp_torch_namespace_randint_low_int64_t_high_int64_t_size_IntArrayRef_generator_Generator(SEXP lowSEXP, SEXP highSEXP, SEXP sizeSEXP, SEXP generatorSEXP, SEXP optionsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int64_t >::type low(lowSEXP);
    Rcpp::traits::input_parameter< int64_t >::type high(highSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Generator *> >::type generator(generatorSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::TensorOptions> >::type options(optionsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_randint_low_int64_t_high_int64_t_size_IntArrayRef_generator_Generator(low, high, size, generator, options));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_randint_out_out_Tensor_high_int64_t_size_IntArrayRef
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_randint_out_out_Tensor_high_int64_t_size_IntArrayRef(Rcpp::XPtr<torch::Tensor> out, int64_t high, std::vector<int64_t> size);
RcppExport SEXP _torch_cpp_torch_namespace_randint_out_out_Tensor_high_int64_t_size_IntArrayRef(SEXP outSEXP, SEXP highSEXP, SEXP sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type out(outSEXP);
    Rcpp::traits::input_parameter< int64_t >::type high(highSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type size(sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_randint_out_out_Tensor_high_int64_t_size_IntArrayRef(out, high, size));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_randint_out_out_Tensor_high_int64_t_size_IntArrayRef_generator_Generator
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_randint_out_out_Tensor_high_int64_t_size_IntArrayRef_generator_Generator(Rcpp::XPtr<torch::Tensor> out, int64_t high, std::vector<int64_t> size, Rcpp::XPtr<torch::Generator *> generator);
RcppExport SEXP _torch_cpp_torch_namespace_randint_out_out_Tensor_high_int64_t_size_IntArrayRef_generator_Generator(SEXP outSEXP, SEXP highSEXP, SEXP sizeSEXP, SEXP generatorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type out(outSEXP);
    Rcpp::traits::input_parameter< int64_t >::type high(highSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Generator *> >::type generator(generatorSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_randint_out_out_Tensor_high_int64_t_size_IntArrayRef_generator_Generator(out, high, size, generator));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_randint_out_out_Tensor_low_int64_t_high_int64_t_size_IntArrayRef
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_randint_out_out_Tensor_low_int64_t_high_int64_t_size_IntArrayRef(Rcpp::XPtr<torch::Tensor> out, int64_t low, int64_t high, std::vector<int64_t> size);
RcppExport SEXP _torch_cpp_torch_namespace_randint_out_out_Tensor_low_int64_t_high_int64_t_size_IntArrayRef(SEXP outSEXP, SEXP lowSEXP, SEXP highSEXP, SEXP sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type out(outSEXP);
    Rcpp::traits::input_parameter< int64_t >::type low(lowSEXP);
    Rcpp::traits::input_parameter< int64_t >::type high(highSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type size(sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_randint_out_out_Tensor_low_int64_t_high_int64_t_size_IntArrayRef(out, low, high, size));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_randint_out_out_Tensor_low_int64_t_high_int64_t_size_IntArrayRef_generator_Generator
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_randint_out_out_Tensor_low_int64_t_high_int64_t_size_IntArrayRef_generator_Generator(Rcpp::XPtr<torch::Tensor> out, int64_t low, int64_t high, std::vector<int64_t> size, Rcpp::XPtr<torch::Generator *> generator);
RcppExport SEXP _torch_cpp_torch_namespace_randint_out_out_Tensor_low_int64_t_high_int64_t_size_IntArrayRef_generator_Generator(SEXP outSEXP, SEXP lowSEXP, SEXP highSEXP, SEXP sizeSEXP, SEXP generatorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type out(outSEXP);
    Rcpp::traits::input_parameter< int64_t >::type low(lowSEXP);
    Rcpp::traits::input_parameter< int64_t >::type high(highSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Generator *> >::type generator(generatorSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_randint_out_out_Tensor_low_int64_t_high_int64_t_size_IntArrayRef_generator_Generator(out, low, high, size, generator));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_randint_like_self_Tensor_high_int64_t
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_randint_like_self_Tensor_high_int64_t(Rcpp::XPtr<torch::Tensor> self, int64_t high, Rcpp::XPtr<c10::optional<torch::MemoryFormat>> memory_format);
RcppExport SEXP _torch_cpp_torch_namespace_randint_like_self_Tensor_high_int64_t(SEXP selfSEXP, SEXP highSEXP, SEXP memory_formatSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< int64_t >::type high(highSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<c10::optional<torch::MemoryFormat>> >::type memory_format(memory_formatSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_randint_like_self_Tensor_high_int64_t(self, high, memory_format));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_randint_like_self_Tensor_low_int64_t_high_int64_t
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_randint_like_self_Tensor_low_int64_t_high_int64_t(Rcpp::XPtr<torch::Tensor> self, int64_t low, int64_t high, Rcpp::XPtr<c10::optional<torch::MemoryFormat>> memory_format);
RcppExport SEXP _torch_cpp_torch_namespace_randint_like_self_Tensor_low_int64_t_high_int64_t(SEXP selfSEXP, SEXP lowSEXP, SEXP highSEXP, SEXP memory_formatSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< int64_t >::type low(lowSEXP);
    Rcpp::traits::input_parameter< int64_t >::type high(highSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<c10::optional<torch::MemoryFormat>> >::type memory_format(memory_formatSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_randint_like_self_Tensor_low_int64_t_high_int64_t(self, low, high, memory_format));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_randint_like_self_Tensor_high_int64_t_options_TensorOptions
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_randint_like_self_Tensor_high_int64_t_options_TensorOptions(Rcpp::XPtr<torch::Tensor> self, int64_t high, Rcpp::XPtr<torch::TensorOptions> options, Rcpp::XPtr<c10::optional<torch::MemoryFormat>> memory_format);
RcppExport SEXP _torch_cpp_torch_namespace_randint_like_self_Tensor_high_int64_t_options_TensorOptions(SEXP selfSEXP, SEXP highSEXP, SEXP optionsSEXP, SEXP memory_formatSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< int64_t >::type high(highSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::TensorOptions> >::type options(optionsSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<c10::optional<torch::MemoryFormat>> >::type memory_format(memory_formatSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_randint_like_self_Tensor_high_int64_t_options_TensorOptions(self, high, options, memory_format));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_randint_like_self_Tensor_low_int64_t_high_int64_t_options_TensorOptions
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_randint_like_self_Tensor_low_int64_t_high_int64_t_options_TensorOptions(Rcpp::XPtr<torch::Tensor> self, int64_t low, int64_t high, Rcpp::XPtr<torch::TensorOptions> options, Rcpp::XPtr<c10::optional<torch::MemoryFormat>> memory_format);
RcppExport SEXP _torch_cpp_torch_namespace_randint_like_self_Tensor_low_int64_t_high_int64_t_options_TensorOptions(SEXP selfSEXP, SEXP lowSEXP, SEXP highSEXP, SEXP optionsSEXP, SEXP memory_formatSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< int64_t >::type low(lowSEXP);
    Rcpp::traits::input_parameter< int64_t >::type high(highSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::TensorOptions> >::type options(optionsSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<c10::optional<torch::MemoryFormat>> >::type memory_format(memory_formatSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_randint_like_self_Tensor_low_int64_t_high_int64_t_options_TensorOptions(self, low, high, options, memory_format));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_randn_size_IntArrayRef
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_randn_size_IntArrayRef(std::vector<int64_t> size, Rcpp::XPtr<torch::TensorOptions> options);
RcppExport SEXP _torch_cpp_torch_namespace_randn_size_IntArrayRef(SEXP sizeSEXP, SEXP optionsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::TensorOptions> >::type options(optionsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_randn_size_IntArrayRef(size, options));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_randn_size_IntArrayRef_generator_Generator
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_randn_size_IntArrayRef_generator_Generator(std::vector<int64_t> size, Rcpp::XPtr<torch::Generator *> generator, Rcpp::XPtr<torch::TensorOptions> options);
RcppExport SEXP _torch_cpp_torch_namespace_randn_size_IntArrayRef_generator_Generator(SEXP sizeSEXP, SEXP generatorSEXP, SEXP optionsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Generator *> >::type generator(generatorSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::TensorOptions> >::type options(optionsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_randn_size_IntArrayRef_generator_Generator(size, generator, options));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_randn_size_IntArrayRef_names_DimnameList
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_randn_size_IntArrayRef_names_DimnameList(std::vector<int64_t> size, Rcpp::XPtr<std::vector<torch::Dimname>> names, Rcpp::XPtr<torch::TensorOptions> options);
RcppExport SEXP _torch_cpp_torch_namespace_randn_size_IntArrayRef_names_DimnameList(SEXP sizeSEXP, SEXP namesSEXP, SEXP optionsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::vector<torch::Dimname>> >::type names(namesSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::TensorOptions> >::type options(optionsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_randn_size_IntArrayRef_names_DimnameList(size, names, options));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_randn_size_IntArrayRef_generator_Generator_names_DimnameList
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_randn_size_IntArrayRef_generator_Generator_names_DimnameList(std::vector<int64_t> size, Rcpp::XPtr<torch::Generator *> generator, Rcpp::XPtr<std::vector<torch::Dimname>> names, Rcpp::XPtr<torch::TensorOptions> options);
RcppExport SEXP _torch_cpp_torch_namespace_randn_size_IntArrayRef_generator_Generator_names_DimnameList(SEXP sizeSEXP, SEXP generatorSEXP, SEXP namesSEXP, SEXP optionsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Generator *> >::type generator(generatorSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::vector<torch::Dimname>> >::type names(namesSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::TensorOptions> >::type options(optionsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_randn_size_IntArrayRef_generator_Generator_names_DimnameList(size, generator, names, options));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_randn_out_out_Tensor_size_IntArrayRef
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_randn_out_out_Tensor_size_IntArrayRef(Rcpp::XPtr<torch::Tensor> out, std::vector<int64_t> size);
RcppExport SEXP _torch_cpp_torch_namespace_randn_out_out_Tensor_size_IntArrayRef(SEXP outSEXP, SEXP sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type out(outSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type size(sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_randn_out_out_Tensor_size_IntArrayRef(out, size));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_randn_out_out_Tensor_size_IntArrayRef_generator_Generator
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_randn_out_out_Tensor_size_IntArrayRef_generator_Generator(Rcpp::XPtr<torch::Tensor> out, std::vector<int64_t> size, Rcpp::XPtr<torch::Generator *> generator);
RcppExport SEXP _torch_cpp_torch_namespace_randn_out_out_Tensor_size_IntArrayRef_generator_Generator(SEXP outSEXP, SEXP sizeSEXP, SEXP generatorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type out(outSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Generator *> >::type generator(generatorSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_randn_out_out_Tensor_size_IntArrayRef_generator_Generator(out, size, generator));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_randn_like_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_randn_like_self_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<c10::optional<torch::MemoryFormat>> memory_format);
RcppExport SEXP _torch_cpp_torch_namespace_randn_like_self_Tensor(SEXP selfSEXP, SEXP memory_formatSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<c10::optional<torch::MemoryFormat>> >::type memory_format(memory_formatSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_randn_like_self_Tensor(self, memory_format));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_randn_like_self_Tensor_options_TensorOptions
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_randn_like_self_Tensor_options_TensorOptions(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::TensorOptions> options, Rcpp::XPtr<c10::optional<torch::MemoryFormat>> memory_format);
RcppExport SEXP _torch_cpp_torch_namespace_randn_like_self_Tensor_options_TensorOptions(SEXP selfSEXP, SEXP optionsSEXP, SEXP memory_formatSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::TensorOptions> >::type options(optionsSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<c10::optional<torch::MemoryFormat>> >::type memory_format(memory_formatSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_randn_like_self_Tensor_options_TensorOptions(self, options, memory_format));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_randperm_n_int64_t
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_randperm_n_int64_t(int64_t n, Rcpp::XPtr<torch::TensorOptions> options);
RcppExport SEXP _torch_cpp_torch_namespace_randperm_n_int64_t(SEXP nSEXP, SEXP optionsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int64_t >::type n(nSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::TensorOptions> >::type options(optionsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_randperm_n_int64_t(n, options));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_randperm_n_int64_t_generator_Generator
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_randperm_n_int64_t_generator_Generator(int64_t n, Rcpp::XPtr<torch::Generator *> generator, Rcpp::XPtr<torch::TensorOptions> options);
RcppExport SEXP _torch_cpp_torch_namespace_randperm_n_int64_t_generator_Generator(SEXP nSEXP, SEXP generatorSEXP, SEXP optionsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int64_t >::type n(nSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Generator *> >::type generator(generatorSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::TensorOptions> >::type options(optionsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_randperm_n_int64_t_generator_Generator(n, generator, options));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_randperm_out_out_Tensor_n_int64_t
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_randperm_out_out_Tensor_n_int64_t(Rcpp::XPtr<torch::Tensor> out, int64_t n);
RcppExport SEXP _torch_cpp_torch_namespace_randperm_out_out_Tensor_n_int64_t(SEXP outSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type out(outSEXP);
    Rcpp::traits::input_parameter< int64_t >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_randperm_out_out_Tensor_n_int64_t(out, n));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_randperm_out_out_Tensor_n_int64_t_generator_Generator
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_randperm_out_out_Tensor_n_int64_t_generator_Generator(Rcpp::XPtr<torch::Tensor> out, int64_t n, Rcpp::XPtr<torch::Generator *> generator);
RcppExport SEXP _torch_cpp_torch_namespace_randperm_out_out_Tensor_n_int64_t_generator_Generator(SEXP outSEXP, SEXP nSEXP, SEXP generatorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type out(outSEXP);
    Rcpp::traits::input_parameter< int64_t >::type n(nSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Generator *> >::type generator(generatorSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_randperm_out_out_Tensor_n_int64_t_generator_Generator(out, n, generator));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_range_start_Scalar_end_Scalar
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_range_start_Scalar_end_Scalar(Rcpp::XPtr<torch::Scalar> start, Rcpp::XPtr<torch::Scalar> end, Rcpp::XPtr<torch::Scalar> step, Rcpp::XPtr<torch::TensorOptions> options);
RcppExport SEXP _torch_cpp_torch_namespace_range_start_Scalar_end_Scalar(SEXP startSEXP, SEXP endSEXP, SEXP stepSEXP, SEXP optionsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type start(startSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type end(endSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type step(stepSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::TensorOptions> >::type options(optionsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_range_start_Scalar_end_Scalar(start, end, step, options));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_range_out_out_Tensor_start_Scalar_end_Scalar
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_range_out_out_Tensor_start_Scalar_end_Scalar(Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Scalar> start, Rcpp::XPtr<torch::Scalar> end, Rcpp::XPtr<torch::Scalar> step);
RcppExport SEXP _torch_cpp_torch_namespace_range_out_out_Tensor_start_Scalar_end_Scalar(SEXP outSEXP, SEXP startSEXP, SEXP endSEXP, SEXP stepSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type out(outSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type start(startSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type end(endSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type step(stepSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_range_out_out_Tensor_start_Scalar_end_Scalar(out, start, end, step));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_reciprocal_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_reciprocal_self_Tensor(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_namespace_reciprocal_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_reciprocal_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_reciprocal__self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_reciprocal__self_Tensor(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_namespace_reciprocal__self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_reciprocal__self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_reciprocal_out_out_Tensor_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_reciprocal_out_out_Tensor_self_Tensor(Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_namespace_reciprocal_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type out(outSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_reciprocal_out_out_Tensor_self_Tensor(out, self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_neg_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_neg_self_Tensor(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_namespace_neg_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_neg_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_neg__self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_neg__self_Tensor(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_namespace_neg__self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_neg__self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_neg_out_out_Tensor_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_neg_out_out_Tensor_self_Tensor(Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_namespace_neg_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type out(outSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_neg_out_out_Tensor_self_Tensor(out, self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_repeat_interleave_repeats_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_repeat_interleave_repeats_Tensor(Rcpp::XPtr<torch::Tensor> repeats);
RcppExport SEXP _torch_cpp_torch_namespace_repeat_interleave_repeats_Tensor(SEXP repeatsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type repeats(repeatsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_repeat_interleave_repeats_Tensor(repeats));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_repeat_interleave_self_Tensor_repeats_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_repeat_interleave_self_Tensor_repeats_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> repeats, int64_t dim);
RcppExport SEXP _torch_cpp_torch_namespace_repeat_interleave_self_Tensor_repeats_Tensor(SEXP selfSEXP, SEXP repeatsSEXP, SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type repeats(repeatsSEXP);
    Rcpp::traits::input_parameter< int64_t >::type dim(dimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_repeat_interleave_self_Tensor_repeats_Tensor(self, repeats, dim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_repeat_interleave_self_Tensor_repeats_int64_t
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_repeat_interleave_self_Tensor_repeats_int64_t(Rcpp::XPtr<torch::Tensor> self, int64_t repeats, int64_t dim);
RcppExport SEXP _torch_cpp_torch_namespace_repeat_interleave_self_Tensor_repeats_int64_t(SEXP selfSEXP, SEXP repeatsSEXP, SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< int64_t >::type repeats(repeatsSEXP);
    Rcpp::traits::input_parameter< int64_t >::type dim(dimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_repeat_interleave_self_Tensor_repeats_int64_t(self, repeats, dim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_reshape_self_Tensor_shape_IntArrayRef
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_reshape_self_Tensor_shape_IntArrayRef(Rcpp::XPtr<torch::Tensor> self, std::vector<int64_t> shape);
RcppExport SEXP _torch_cpp_torch_namespace_reshape_self_Tensor_shape_IntArrayRef(SEXP selfSEXP, SEXP shapeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type shape(shapeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_reshape_self_Tensor_shape_IntArrayRef(self, shape));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__mkldnn_reshape_self_Tensor_shape_IntArrayRef
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace__mkldnn_reshape_self_Tensor_shape_IntArrayRef(Rcpp::XPtr<torch::Tensor> self, std::vector<int64_t> shape);
RcppExport SEXP _torch_cpp_torch_namespace__mkldnn_reshape_self_Tensor_shape_IntArrayRef(SEXP selfSEXP, SEXP shapeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type shape(shapeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__mkldnn_reshape_self_Tensor_shape_IntArrayRef(self, shape));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_round_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_round_self_Tensor(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_namespace_round_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_round_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_round__self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_round__self_Tensor(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_namespace_round__self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_round__self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_round_out_out_Tensor_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_round_out_out_Tensor_self_Tensor(Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_namespace_round_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type out(outSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_round_out_out_Tensor_self_Tensor(out, self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_rrelu_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_rrelu_self_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Scalar> lower, Rcpp::XPtr<torch::Scalar> upper, bool training, Rcpp::XPtr<torch::Generator *> generator);
RcppExport SEXP _torch_cpp_torch_namespace_rrelu_self_Tensor(SEXP selfSEXP, SEXP lowerSEXP, SEXP upperSEXP, SEXP trainingSEXP, SEXP generatorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type lower(lowerSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type upper(upperSEXP);
    Rcpp::traits::input_parameter< bool >::type training(trainingSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Generator *> >::type generator(generatorSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_rrelu_self_Tensor(self, lower, upper, training, generator));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_rrelu__self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_rrelu__self_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Scalar> lower, Rcpp::XPtr<torch::Scalar> upper, bool training, Rcpp::XPtr<torch::Generator *> generator);
RcppExport SEXP _torch_cpp_torch_namespace_rrelu__self_Tensor(SEXP selfSEXP, SEXP lowerSEXP, SEXP upperSEXP, SEXP trainingSEXP, SEXP generatorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type lower(lowerSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type upper(upperSEXP);
    Rcpp::traits::input_parameter< bool >::type training(trainingSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Generator *> >::type generator(generatorSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_rrelu__self_Tensor(self, lower, upper, training, generator));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_relu_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_relu_self_Tensor(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_namespace_relu_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_relu_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_relu__self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_relu__self_Tensor(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_namespace_relu__self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_relu__self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_prelu_self_Tensor_weight_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_prelu_self_Tensor_weight_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> weight);
RcppExport SEXP _torch_cpp_torch_namespace_prelu_self_Tensor_weight_Tensor(SEXP selfSEXP, SEXP weightSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type weight(weightSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_prelu_self_Tensor_weight_Tensor(self, weight));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_prelu_backward_grad_output_Tensor_self_Tensor_weight_Tensor
Rcpp::List cpp_torch_namespace_prelu_backward_grad_output_Tensor_self_Tensor_weight_Tensor(Rcpp::XPtr<torch::Tensor> grad_output, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> weight);
RcppExport SEXP _torch_cpp_torch_namespace_prelu_backward_grad_output_Tensor_self_Tensor_weight_Tensor(SEXP grad_outputSEXP, SEXP selfSEXP, SEXP weightSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type weight(weightSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_prelu_backward_grad_output_Tensor_self_Tensor_weight_Tensor(grad_output, self, weight));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_gelu_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_gelu_self_Tensor(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_namespace_gelu_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_gelu_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_gelu_backward_grad_Tensor_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_gelu_backward_grad_Tensor_self_Tensor(Rcpp::XPtr<torch::Tensor> grad, Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_namespace_gelu_backward_grad_Tensor_self_Tensor(SEXP gradSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type grad(gradSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_gelu_backward_grad_Tensor_self_Tensor(grad, self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_hardshrink_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_hardshrink_self_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Scalar> lambd);
RcppExport SEXP _torch_cpp_torch_namespace_hardshrink_self_Tensor(SEXP selfSEXP, SEXP lambdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type lambd(lambdSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_hardshrink_self_Tensor(self, lambd));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_hardshrink_backward_grad_out_Tensor_self_Tensor_lambd_Scalar
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_hardshrink_backward_grad_out_Tensor_self_Tensor_lambd_Scalar(Rcpp::XPtr<torch::Tensor> grad_out, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Scalar> lambd);
RcppExport SEXP _torch_cpp_torch_namespace_hardshrink_backward_grad_out_Tensor_self_Tensor_lambd_Scalar(SEXP grad_outSEXP, SEXP selfSEXP, SEXP lambdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type grad_out(grad_outSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type lambd(lambdSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_hardshrink_backward_grad_out_Tensor_self_Tensor_lambd_Scalar(grad_out, self, lambd));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_rsqrt_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_rsqrt_self_Tensor(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_namespace_rsqrt_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_rsqrt_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_rsqrt__self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_rsqrt__self_Tensor(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_namespace_rsqrt__self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_rsqrt__self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_rsqrt_out_out_Tensor_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_rsqrt_out_out_Tensor_self_Tensor(Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_namespace_rsqrt_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type out(outSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_rsqrt_out_out_Tensor_self_Tensor(out, self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_select_self_Tensor_dim_Dimname_index_int64_t
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_select_self_Tensor_dim_Dimname_index_int64_t(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Dimname> dim, int64_t index);
RcppExport SEXP _torch_cpp_torch_namespace_select_self_Tensor_dim_Dimname_index_int64_t(SEXP selfSEXP, SEXP dimSEXP, SEXP indexSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Dimname> >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< int64_t >::type index(indexSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_select_self_Tensor_dim_Dimname_index_int64_t(self, dim, index));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_select_self_Tensor_dim_int64_t_index_int64_t
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_select_self_Tensor_dim_int64_t_index_int64_t(Rcpp::XPtr<torch::Tensor> self, int64_t dim, int64_t index);
RcppExport SEXP _torch_cpp_torch_namespace_select_self_Tensor_dim_int64_t_index_int64_t(SEXP selfSEXP, SEXP dimSEXP, SEXP indexSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< int64_t >::type index(indexSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_select_self_Tensor_dim_int64_t_index_int64_t(self, dim, index));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_selu_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_selu_self_Tensor(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_namespace_selu_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_selu_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_selu__self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_selu__self_Tensor(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_namespace_selu__self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_selu__self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_celu_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_celu_self_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Scalar> alpha);
RcppExport SEXP _torch_cpp_torch_namespace_celu_self_Tensor(SEXP selfSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_celu_self_Tensor(self, alpha));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_celu__self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_celu__self_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Scalar> alpha);
RcppExport SEXP _torch_cpp_torch_namespace_celu__self_Tensor(SEXP selfSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_celu__self_Tensor(self, alpha));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_sigmoid_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_sigmoid_self_Tensor(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_namespace_sigmoid_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_sigmoid_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_sigmoid__self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_sigmoid__self_Tensor(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_namespace_sigmoid__self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_sigmoid__self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_sigmoid_out_out_Tensor_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_sigmoid_out_out_Tensor_self_Tensor(Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_namespace_sigmoid_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type out(outSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_sigmoid_out_out_Tensor_self_Tensor(out, self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_sin_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_sin_self_Tensor(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_namespace_sin_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_sin_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_sin__self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_sin__self_Tensor(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_namespace_sin__self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_sin__self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_sin_out_out_Tensor_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_sin_out_out_Tensor_self_Tensor(Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_namespace_sin_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type out(outSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_sin_out_out_Tensor_self_Tensor(out, self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_sinh_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_sinh_self_Tensor(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_namespace_sinh_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_sinh_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_sinh__self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_sinh__self_Tensor(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_namespace_sinh__self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_sinh__self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_sinh_out_out_Tensor_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_sinh_out_out_Tensor_self_Tensor(Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_namespace_sinh_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type out(outSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_sinh_out_out_Tensor_self_Tensor(out, self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_detach_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_detach_self_Tensor(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_namespace_detach_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_detach_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_detach__self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_detach__self_Tensor(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_namespace_detach__self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_detach__self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_size_self_Tensor_dim_int64_t
int64_t cpp_torch_namespace_size_self_Tensor_dim_int64_t(Rcpp::XPtr<torch::Tensor> self, int64_t dim);
RcppExport SEXP _torch_cpp_torch_namespace_size_self_Tensor_dim_int64_t(SEXP selfSEXP, SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< int64_t >::type dim(dimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_size_self_Tensor_dim_int64_t(self, dim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_size_self_Tensor_dim_Dimname
int64_t cpp_torch_namespace_size_self_Tensor_dim_Dimname(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Dimname> dim);
RcppExport SEXP _torch_cpp_torch_namespace_size_self_Tensor_dim_Dimname(SEXP selfSEXP, SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Dimname> >::type dim(dimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_size_self_Tensor_dim_Dimname(self, dim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_slice_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_slice_self_Tensor(Rcpp::XPtr<torch::Tensor> self, int64_t dim, int64_t start, int64_t end, int64_t step);
RcppExport SEXP _torch_cpp_torch_namespace_slice_self_Tensor(SEXP selfSEXP, SEXP dimSEXP, SEXP startSEXP, SEXP endSEXP, SEXP stepSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< int64_t >::type start(startSEXP);
    Rcpp::traits::input_parameter< int64_t >::type end(endSEXP);
    Rcpp::traits::input_parameter< int64_t >::type step(stepSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_slice_self_Tensor(self, dim, start, end, step));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_slogdet_self_Tensor
Rcpp::List cpp_torch_namespace_slogdet_self_Tensor(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_namespace_slogdet_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_slogdet_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_smm_self_Tensor_mat2_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_smm_self_Tensor_mat2_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> mat2);
RcppExport SEXP _torch_cpp_torch_namespace_smm_self_Tensor_mat2_Tensor(SEXP selfSEXP, SEXP mat2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type mat2(mat2SEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_smm_self_Tensor_mat2_Tensor(self, mat2));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_softmax_self_Tensor_dim_int64_t
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_softmax_self_Tensor_dim_int64_t(Rcpp::XPtr<torch::Tensor> self, int64_t dim, Rcpp::XPtr<torch::Dtype> dtype);
RcppExport SEXP _torch_cpp_torch_namespace_softmax_self_Tensor_dim_int64_t(SEXP selfSEXP, SEXP dimSEXP, SEXP dtypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Dtype> >::type dtype(dtypeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_softmax_self_Tensor_dim_int64_t(self, dim, dtype));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_softmax_self_Tensor_dim_Dimname
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_softmax_self_Tensor_dim_Dimname(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Dimname> dim, Rcpp::XPtr<torch::Dtype> dtype);
RcppExport SEXP _torch_cpp_torch_namespace_softmax_self_Tensor_dim_Dimname(SEXP selfSEXP, SEXP dimSEXP, SEXP dtypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Dimname> >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Dtype> >::type dtype(dtypeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_softmax_self_Tensor_dim_Dimname(self, dim, dtype));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__softmax_self_Tensor_dim_int64_t_half_to_float_bool
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace__softmax_self_Tensor_dim_int64_t_half_to_float_bool(Rcpp::XPtr<torch::Tensor> self, int64_t dim, bool half_to_float);
RcppExport SEXP _torch_cpp_torch_namespace__softmax_self_Tensor_dim_int64_t_half_to_float_bool(SEXP selfSEXP, SEXP dimSEXP, SEXP half_to_floatSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< bool >::type half_to_float(half_to_floatSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__softmax_self_Tensor_dim_int64_t_half_to_float_bool(self, dim, half_to_float));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__softmax_backward_data_grad_output_Tensor_output_Tensor_dim_int64_t_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace__softmax_backward_data_grad_output_Tensor_output_Tensor_dim_int64_t_self_Tensor(Rcpp::XPtr<torch::Tensor> grad_output, Rcpp::XPtr<torch::Tensor> output, int64_t dim, Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_namespace__softmax_backward_data_grad_output_Tensor_output_Tensor_dim_int64_t_self_Tensor(SEXP grad_outputSEXP, SEXP outputSEXP, SEXP dimSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type output(outputSEXP);
    Rcpp::traits::input_parameter< int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__softmax_backward_data_grad_output_Tensor_output_Tensor_dim_int64_t_self_Tensor(grad_output, output, dim, self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_split_self_Tensor_split_size_int64_t
Rcpp::XPtr<torch::TensorList> cpp_torch_namespace_split_self_Tensor_split_size_int64_t(Rcpp::XPtr<torch::Tensor> self, int64_t split_size, int64_t dim);
RcppExport SEXP _torch_cpp_torch_namespace_split_self_Tensor_split_size_int64_t(SEXP selfSEXP, SEXP split_sizeSEXP, SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< int64_t >::type split_size(split_sizeSEXP);
    Rcpp::traits::input_parameter< int64_t >::type dim(dimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_split_self_Tensor_split_size_int64_t(self, split_size, dim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_split_with_sizes_self_Tensor_split_sizes_IntArrayRef
Rcpp::XPtr<torch::TensorList> cpp_torch_namespace_split_with_sizes_self_Tensor_split_sizes_IntArrayRef(Rcpp::XPtr<torch::Tensor> self, std::vector<int64_t> split_sizes, int64_t dim);
RcppExport SEXP _torch_cpp_torch_namespace_split_with_sizes_self_Tensor_split_sizes_IntArrayRef(SEXP selfSEXP, SEXP split_sizesSEXP, SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type split_sizes(split_sizesSEXP);
    Rcpp::traits::input_parameter< int64_t >::type dim(dimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_split_with_sizes_self_Tensor_split_sizes_IntArrayRef(self, split_sizes, dim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_squeeze_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_squeeze_self_Tensor(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_namespace_squeeze_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_squeeze_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_squeeze_self_Tensor_dim_int64_t
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_squeeze_self_Tensor_dim_int64_t(Rcpp::XPtr<torch::Tensor> self, int64_t dim);
RcppExport SEXP _torch_cpp_torch_namespace_squeeze_self_Tensor_dim_int64_t(SEXP selfSEXP, SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< int64_t >::type dim(dimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_squeeze_self_Tensor_dim_int64_t(self, dim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_squeeze_self_Tensor_dim_Dimname
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_squeeze_self_Tensor_dim_Dimname(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Dimname> dim);
RcppExport SEXP _torch_cpp_torch_namespace_squeeze_self_Tensor_dim_Dimname(SEXP selfSEXP, SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Dimname> >::type dim(dimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_squeeze_self_Tensor_dim_Dimname(self, dim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_sspaddmm_self_Tensor_mat1_Tensor_mat2_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_sspaddmm_self_Tensor_mat1_Tensor_mat2_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> mat1, Rcpp::XPtr<torch::Tensor> mat2, Rcpp::XPtr<torch::Scalar> beta, Rcpp::XPtr<torch::Scalar> alpha);
RcppExport SEXP _torch_cpp_torch_namespace_sspaddmm_self_Tensor_mat1_Tensor_mat2_Tensor(SEXP selfSEXP, SEXP mat1SEXP, SEXP mat2SEXP, SEXP betaSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type mat1(mat1SEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type mat2(mat2SEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_sspaddmm_self_Tensor_mat1_Tensor_mat2_Tensor(self, mat1, mat2, beta, alpha));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_sspaddmm_out_out_Tensor_self_Tensor_mat1_Tensor_mat2_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_sspaddmm_out_out_Tensor_self_Tensor_mat1_Tensor_mat2_Tensor(Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> mat1, Rcpp::XPtr<torch::Tensor> mat2, Rcpp::XPtr<torch::Scalar> beta, Rcpp::XPtr<torch::Scalar> alpha);
RcppExport SEXP _torch_cpp_torch_namespace_sspaddmm_out_out_Tensor_self_Tensor_mat1_Tensor_mat2_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP mat1SEXP, SEXP mat2SEXP, SEXP betaSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type out(outSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type mat1(mat1SEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type mat2(mat2SEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_sspaddmm_out_out_Tensor_self_Tensor_mat1_Tensor_mat2_Tensor(out, self, mat1, mat2, beta, alpha));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_stack_tensors_TensorList
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_stack_tensors_TensorList(Rcpp::XPtr<std::vector<torch::Tensor>> tensors, int64_t dim);
RcppExport SEXP _torch_cpp_torch_namespace_stack_tensors_TensorList(SEXP tensorsSEXP, SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::vector<torch::Tensor>> >::type tensors(tensorsSEXP);
    Rcpp::traits::input_parameter< int64_t >::type dim(dimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_stack_tensors_TensorList(tensors, dim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_stack_out_out_Tensor_tensors_TensorList
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_stack_out_out_Tensor_tensors_TensorList(Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<std::vector<torch::Tensor>> tensors, int64_t dim);
RcppExport SEXP _torch_cpp_torch_namespace_stack_out_out_Tensor_tensors_TensorList(SEXP outSEXP, SEXP tensorsSEXP, SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type out(outSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::vector<torch::Tensor>> >::type tensors(tensorsSEXP);
    Rcpp::traits::input_parameter< int64_t >::type dim(dimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_stack_out_out_Tensor_tensors_TensorList(out, tensors, dim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_stft_self_Tensor_n_fft_int64_t
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_stft_self_Tensor_n_fft_int64_t(Rcpp::XPtr<torch::Tensor> self, int64_t n_fft, int64_t hop_length, int64_t win_length, Rcpp::XPtr<torch::Tensor> window, bool normalized, bool onesided);
RcppExport SEXP _torch_cpp_torch_namespace_stft_self_Tensor_n_fft_int64_t(SEXP selfSEXP, SEXP n_fftSEXP, SEXP hop_lengthSEXP, SEXP win_lengthSEXP, SEXP windowSEXP, SEXP normalizedSEXP, SEXP onesidedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< int64_t >::type n_fft(n_fftSEXP);
    Rcpp::traits::input_parameter< int64_t >::type hop_length(hop_lengthSEXP);
    Rcpp::traits::input_parameter< int64_t >::type win_length(win_lengthSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type window(windowSEXP);
    Rcpp::traits::input_parameter< bool >::type normalized(normalizedSEXP);
    Rcpp::traits::input_parameter< bool >::type onesided(onesidedSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_stft_self_Tensor_n_fft_int64_t(self, n_fft, hop_length, win_length, window, normalized, onesided));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_stride_self_Tensor_dim_int64_t
int64_t cpp_torch_namespace_stride_self_Tensor_dim_int64_t(Rcpp::XPtr<torch::Tensor> self, int64_t dim);
RcppExport SEXP _torch_cpp_torch_namespace_stride_self_Tensor_dim_int64_t(SEXP selfSEXP, SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< int64_t >::type dim(dimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_stride_self_Tensor_dim_int64_t(self, dim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_stride_self_Tensor_dim_Dimname
int64_t cpp_torch_namespace_stride_self_Tensor_dim_Dimname(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Dimname> dim);
RcppExport SEXP _torch_cpp_torch_namespace_stride_self_Tensor_dim_Dimname(SEXP selfSEXP, SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Dimname> >::type dim(dimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_stride_self_Tensor_dim_Dimname(self, dim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_sum_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_sum_self_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Dtype> dtype);
RcppExport SEXP _torch_cpp_torch_namespace_sum_self_Tensor(SEXP selfSEXP, SEXP dtypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Dtype> >::type dtype(dtypeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_sum_self_Tensor(self, dtype));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_sum_self_Tensor_dim_IntArrayRef
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_sum_self_Tensor_dim_IntArrayRef(Rcpp::XPtr<torch::Tensor> self, std::vector<int64_t> dim, bool keepdim, Rcpp::XPtr<torch::Dtype> dtype);
RcppExport SEXP _torch_cpp_torch_namespace_sum_self_Tensor_dim_IntArrayRef(SEXP selfSEXP, SEXP dimSEXP, SEXP keepdimSEXP, SEXP dtypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< bool >::type keepdim(keepdimSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Dtype> >::type dtype(dtypeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_sum_self_Tensor_dim_IntArrayRef(self, dim, keepdim, dtype));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_sum_self_Tensor_dim_DimnameList
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_sum_self_Tensor_dim_DimnameList(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<std::vector<torch::Dimname>> dim, bool keepdim, Rcpp::XPtr<torch::Dtype> dtype);
RcppExport SEXP _torch_cpp_torch_namespace_sum_self_Tensor_dim_DimnameList(SEXP selfSEXP, SEXP dimSEXP, SEXP keepdimSEXP, SEXP dtypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::vector<torch::Dimname>> >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< bool >::type keepdim(keepdimSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Dtype> >::type dtype(dtypeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_sum_self_Tensor_dim_DimnameList(self, dim, keepdim, dtype));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_sum_out_out_Tensor_self_Tensor_dim_IntArrayRef
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_sum_out_out_Tensor_self_Tensor_dim_IntArrayRef(Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, std::vector<int64_t> dim, bool keepdim, Rcpp::XPtr<torch::Dtype> dtype);
RcppExport SEXP _torch_cpp_torch_namespace_sum_out_out_Tensor_self_Tensor_dim_IntArrayRef(SEXP outSEXP, SEXP selfSEXP, SEXP dimSEXP, SEXP keepdimSEXP, SEXP dtypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type out(outSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< bool >::type keepdim(keepdimSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Dtype> >::type dtype(dtypeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_sum_out_out_Tensor_self_Tensor_dim_IntArrayRef(out, self, dim, keepdim, dtype));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_sum_out_out_Tensor_self_Tensor_dim_DimnameList
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_sum_out_out_Tensor_self_Tensor_dim_DimnameList(Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<std::vector<torch::Dimname>> dim, bool keepdim, Rcpp::XPtr<torch::Dtype> dtype);
RcppExport SEXP _torch_cpp_torch_namespace_sum_out_out_Tensor_self_Tensor_dim_DimnameList(SEXP outSEXP, SEXP selfSEXP, SEXP dimSEXP, SEXP keepdimSEXP, SEXP dtypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type out(outSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::vector<torch::Dimname>> >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< bool >::type keepdim(keepdimSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Dtype> >::type dtype(dtypeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_sum_out_out_Tensor_self_Tensor_dim_DimnameList(out, self, dim, keepdim, dtype));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_sqrt_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_sqrt_self_Tensor(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_namespace_sqrt_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_sqrt_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_sqrt__self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_sqrt__self_Tensor(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_namespace_sqrt__self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_sqrt__self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_sqrt_out_out_Tensor_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_sqrt_out_out_Tensor_self_Tensor(Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_namespace_sqrt_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type out(outSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_sqrt_out_out_Tensor_self_Tensor(out, self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_std_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_std_self_Tensor(Rcpp::XPtr<torch::Tensor> self, bool unbiased);
RcppExport SEXP _torch_cpp_torch_namespace_std_self_Tensor(SEXP selfSEXP, SEXP unbiasedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< bool >::type unbiased(unbiasedSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_std_self_Tensor(self, unbiased));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_std_self_Tensor_dim_IntArrayRef
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_std_self_Tensor_dim_IntArrayRef(Rcpp::XPtr<torch::Tensor> self, std::vector<int64_t> dim, bool unbiased, bool keepdim);
RcppExport SEXP _torch_cpp_torch_namespace_std_self_Tensor_dim_IntArrayRef(SEXP selfSEXP, SEXP dimSEXP, SEXP unbiasedSEXP, SEXP keepdimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< bool >::type unbiased(unbiasedSEXP);
    Rcpp::traits::input_parameter< bool >::type keepdim(keepdimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_std_self_Tensor_dim_IntArrayRef(self, dim, unbiased, keepdim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_std_mean_self_Tensor
Rcpp::List cpp_torch_namespace_std_mean_self_Tensor(Rcpp::XPtr<torch::Tensor> self, bool unbiased);
RcppExport SEXP _torch_cpp_torch_namespace_std_mean_self_Tensor(SEXP selfSEXP, SEXP unbiasedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< bool >::type unbiased(unbiasedSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_std_mean_self_Tensor(self, unbiased));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_std_mean_self_Tensor_dim_IntArrayRef
Rcpp::List cpp_torch_namespace_std_mean_self_Tensor_dim_IntArrayRef(Rcpp::XPtr<torch::Tensor> self, std::vector<int64_t> dim, bool unbiased, bool keepdim);
RcppExport SEXP _torch_cpp_torch_namespace_std_mean_self_Tensor_dim_IntArrayRef(SEXP selfSEXP, SEXP dimSEXP, SEXP unbiasedSEXP, SEXP keepdimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< bool >::type unbiased(unbiasedSEXP);
    Rcpp::traits::input_parameter< bool >::type keepdim(keepdimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_std_mean_self_Tensor_dim_IntArrayRef(self, dim, unbiased, keepdim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_std_mean_self_Tensor_dim_DimnameList
Rcpp::List cpp_torch_namespace_std_mean_self_Tensor_dim_DimnameList(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<std::vector<torch::Dimname>> dim, bool unbiased, bool keepdim);
RcppExport SEXP _torch_cpp_torch_namespace_std_mean_self_Tensor_dim_DimnameList(SEXP selfSEXP, SEXP dimSEXP, SEXP unbiasedSEXP, SEXP keepdimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::vector<torch::Dimname>> >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< bool >::type unbiased(unbiasedSEXP);
    Rcpp::traits::input_parameter< bool >::type keepdim(keepdimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_std_mean_self_Tensor_dim_DimnameList(self, dim, unbiased, keepdim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_std_out_out_Tensor_self_Tensor_dim_IntArrayRef
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_std_out_out_Tensor_self_Tensor_dim_IntArrayRef(Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, std::vector<int64_t> dim, bool unbiased, bool keepdim);
RcppExport SEXP _torch_cpp_torch_namespace_std_out_out_Tensor_self_Tensor_dim_IntArrayRef(SEXP outSEXP, SEXP selfSEXP, SEXP dimSEXP, SEXP unbiasedSEXP, SEXP keepdimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type out(outSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< bool >::type unbiased(unbiasedSEXP);
    Rcpp::traits::input_parameter< bool >::type keepdim(keepdimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_std_out_out_Tensor_self_Tensor_dim_IntArrayRef(out, self, dim, unbiased, keepdim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_std_self_Tensor_dim_DimnameList
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_std_self_Tensor_dim_DimnameList(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<std::vector<torch::Dimname>> dim, bool unbiased, bool keepdim);
RcppExport SEXP _torch_cpp_torch_namespace_std_self_Tensor_dim_DimnameList(SEXP selfSEXP, SEXP dimSEXP, SEXP unbiasedSEXP, SEXP keepdimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::vector<torch::Dimname>> >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< bool >::type unbiased(unbiasedSEXP);
    Rcpp::traits::input_parameter< bool >::type keepdim(keepdimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_std_self_Tensor_dim_DimnameList(self, dim, unbiased, keepdim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_std_out_out_Tensor_self_Tensor_dim_DimnameList
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_std_out_out_Tensor_self_Tensor_dim_DimnameList(Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<std::vector<torch::Dimname>> dim, bool unbiased, bool keepdim);
RcppExport SEXP _torch_cpp_torch_namespace_std_out_out_Tensor_self_Tensor_dim_DimnameList(SEXP outSEXP, SEXP selfSEXP, SEXP dimSEXP, SEXP unbiasedSEXP, SEXP keepdimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type out(outSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::vector<torch::Dimname>> >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< bool >::type unbiased(unbiasedSEXP);
    Rcpp::traits::input_parameter< bool >::type keepdim(keepdimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_std_out_out_Tensor_self_Tensor_dim_DimnameList(out, self, dim, unbiased, keepdim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_prod_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_prod_self_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Dtype> dtype);
RcppExport SEXP _torch_cpp_torch_namespace_prod_self_Tensor(SEXP selfSEXP, SEXP dtypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Dtype> >::type dtype(dtypeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_prod_self_Tensor(self, dtype));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_prod_self_Tensor_dim_int64_t
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_prod_self_Tensor_dim_int64_t(Rcpp::XPtr<torch::Tensor> self, int64_t dim, bool keepdim, Rcpp::XPtr<torch::Dtype> dtype);
RcppExport SEXP _torch_cpp_torch_namespace_prod_self_Tensor_dim_int64_t(SEXP selfSEXP, SEXP dimSEXP, SEXP keepdimSEXP, SEXP dtypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< bool >::type keepdim(keepdimSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Dtype> >::type dtype(dtypeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_prod_self_Tensor_dim_int64_t(self, dim, keepdim, dtype));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_prod_out_out_Tensor_self_Tensor_dim_int64_t
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_prod_out_out_Tensor_self_Tensor_dim_int64_t(Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, int64_t dim, bool keepdim, Rcpp::XPtr<torch::Dtype> dtype);
RcppExport SEXP _torch_cpp_torch_namespace_prod_out_out_Tensor_self_Tensor_dim_int64_t(SEXP outSEXP, SEXP selfSEXP, SEXP dimSEXP, SEXP keepdimSEXP, SEXP dtypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type out(outSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< bool >::type keepdim(keepdimSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Dtype> >::type dtype(dtypeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_prod_out_out_Tensor_self_Tensor_dim_int64_t(out, self, dim, keepdim, dtype));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_prod_self_Tensor_dim_Dimname
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_prod_self_Tensor_dim_Dimname(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Dimname> dim, bool keepdim, Rcpp::XPtr<torch::Dtype> dtype);
RcppExport SEXP _torch_cpp_torch_namespace_prod_self_Tensor_dim_Dimname(SEXP selfSEXP, SEXP dimSEXP, SEXP keepdimSEXP, SEXP dtypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Dimname> >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< bool >::type keepdim(keepdimSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Dtype> >::type dtype(dtypeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_prod_self_Tensor_dim_Dimname(self, dim, keepdim, dtype));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_prod_out_out_Tensor_self_Tensor_dim_Dimname
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_prod_out_out_Tensor_self_Tensor_dim_Dimname(Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Dimname> dim, bool keepdim, Rcpp::XPtr<torch::Dtype> dtype);
RcppExport SEXP _torch_cpp_torch_namespace_prod_out_out_Tensor_self_Tensor_dim_Dimname(SEXP outSEXP, SEXP selfSEXP, SEXP dimSEXP, SEXP keepdimSEXP, SEXP dtypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type out(outSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Dimname> >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< bool >::type keepdim(keepdimSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Dtype> >::type dtype(dtypeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_prod_out_out_Tensor_self_Tensor_dim_Dimname(out, self, dim, keepdim, dtype));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_t_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_t_self_Tensor(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_namespace_t_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_t_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_tan_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_tan_self_Tensor(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_namespace_tan_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_tan_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_tan__self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_tan__self_Tensor(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_namespace_tan__self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_tan__self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_tan_out_out_Tensor_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_tan_out_out_Tensor_self_Tensor(Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_namespace_tan_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type out(outSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_tan_out_out_Tensor_self_Tensor(out, self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_tanh_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_tanh_self_Tensor(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_namespace_tanh_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_tanh_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_tanh__self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_tanh__self_Tensor(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_namespace_tanh__self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_tanh__self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_tanh_out_out_Tensor_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_tanh_out_out_Tensor_self_Tensor(Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_namespace_tanh_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type out(outSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_tanh_out_out_Tensor_self_Tensor(out, self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_tensordot_self_Tensor_other_Tensor_dims_self_IntArrayRef_dims_other_IntArrayRef
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_tensordot_self_Tensor_other_Tensor_dims_self_IntArrayRef_dims_other_IntArrayRef(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> other, std::vector<int64_t> dims_self, std::vector<int64_t> dims_other);
RcppExport SEXP _torch_cpp_torch_namespace_tensordot_self_Tensor_other_Tensor_dims_self_IntArrayRef_dims_other_IntArrayRef(SEXP selfSEXP, SEXP otherSEXP, SEXP dims_selfSEXP, SEXP dims_otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type other(otherSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type dims_self(dims_selfSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type dims_other(dims_otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_tensordot_self_Tensor_other_Tensor_dims_self_IntArrayRef_dims_other_IntArrayRef(self, other, dims_self, dims_other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_threshold_self_Tensor_threshold_Scalar_value_Scalar
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_threshold_self_Tensor_threshold_Scalar_value_Scalar(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Scalar> threshold, Rcpp::XPtr<torch::Scalar> value);
RcppExport SEXP _torch_cpp_torch_namespace_threshold_self_Tensor_threshold_Scalar_value_Scalar(SEXP selfSEXP, SEXP thresholdSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type threshold(thresholdSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_threshold_self_Tensor_threshold_Scalar_value_Scalar(self, threshold, value));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_threshold__self_Tensor_threshold_Scalar_value_Scalar
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_threshold__self_Tensor_threshold_Scalar_value_Scalar(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Scalar> threshold, Rcpp::XPtr<torch::Scalar> value);
RcppExport SEXP _torch_cpp_torch_namespace_threshold__self_Tensor_threshold_Scalar_value_Scalar(SEXP selfSEXP, SEXP thresholdSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type threshold(thresholdSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_threshold__self_Tensor_threshold_Scalar_value_Scalar(self, threshold, value));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_threshold_out_out_Tensor_self_Tensor_threshold_Scalar_value_Scalar
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_threshold_out_out_Tensor_self_Tensor_threshold_Scalar_value_Scalar(Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Scalar> threshold, Rcpp::XPtr<torch::Scalar> value);
RcppExport SEXP _torch_cpp_torch_namespace_threshold_out_out_Tensor_self_Tensor_threshold_Scalar_value_Scalar(SEXP outSEXP, SEXP selfSEXP, SEXP thresholdSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type out(outSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type threshold(thresholdSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_threshold_out_out_Tensor_self_Tensor_threshold_Scalar_value_Scalar(out, self, threshold, value));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_threshold_backward_grad_output_Tensor_self_Tensor_threshold_Scalar
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_threshold_backward_grad_output_Tensor_self_Tensor_threshold_Scalar(Rcpp::XPtr<torch::Tensor> grad_output, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Scalar> threshold);
RcppExport SEXP _torch_cpp_torch_namespace_threshold_backward_grad_output_Tensor_self_Tensor_threshold_Scalar(SEXP grad_outputSEXP, SEXP selfSEXP, SEXP thresholdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type threshold(thresholdSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_threshold_backward_grad_output_Tensor_self_Tensor_threshold_Scalar(grad_output, self, threshold));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_transpose_self_Tensor_dim0_int64_t_dim1_int64_t
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_transpose_self_Tensor_dim0_int64_t_dim1_int64_t(Rcpp::XPtr<torch::Tensor> self, int64_t dim0, int64_t dim1);
RcppExport SEXP _torch_cpp_torch_namespace_transpose_self_Tensor_dim0_int64_t_dim1_int64_t(SEXP selfSEXP, SEXP dim0SEXP, SEXP dim1SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< int64_t >::type dim0(dim0SEXP);
    Rcpp::traits::input_parameter< int64_t >::type dim1(dim1SEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_transpose_self_Tensor_dim0_int64_t_dim1_int64_t(self, dim0, dim1));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_transpose_self_Tensor_dim0_Dimname_dim1_Dimname
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_transpose_self_Tensor_dim0_Dimname_dim1_Dimname(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Dimname> dim0, Rcpp::XPtr<torch::Dimname> dim1);
RcppExport SEXP _torch_cpp_torch_namespace_transpose_self_Tensor_dim0_Dimname_dim1_Dimname(SEXP selfSEXP, SEXP dim0SEXP, SEXP dim1SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Dimname> >::type dim0(dim0SEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Dimname> >::type dim1(dim1SEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_transpose_self_Tensor_dim0_Dimname_dim1_Dimname(self, dim0, dim1));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__mkldnn_transpose_self_Tensor_dim0_int64_t_dim1_int64_t
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace__mkldnn_transpose_self_Tensor_dim0_int64_t_dim1_int64_t(Rcpp::XPtr<torch::Tensor> self, int64_t dim0, int64_t dim1);
RcppExport SEXP _torch_cpp_torch_namespace__mkldnn_transpose_self_Tensor_dim0_int64_t_dim1_int64_t(SEXP selfSEXP, SEXP dim0SEXP, SEXP dim1SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< int64_t >::type dim0(dim0SEXP);
    Rcpp::traits::input_parameter< int64_t >::type dim1(dim1SEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__mkldnn_transpose_self_Tensor_dim0_int64_t_dim1_int64_t(self, dim0, dim1));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__mkldnn_transpose__self_Tensor_dim0_int64_t_dim1_int64_t
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace__mkldnn_transpose__self_Tensor_dim0_int64_t_dim1_int64_t(Rcpp::XPtr<torch::Tensor> self, int64_t dim0, int64_t dim1);
RcppExport SEXP _torch_cpp_torch_namespace__mkldnn_transpose__self_Tensor_dim0_int64_t_dim1_int64_t(SEXP selfSEXP, SEXP dim0SEXP, SEXP dim1SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< int64_t >::type dim0(dim0SEXP);
    Rcpp::traits::input_parameter< int64_t >::type dim1(dim1SEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__mkldnn_transpose__self_Tensor_dim0_int64_t_dim1_int64_t(self, dim0, dim1));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_one_hot_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_one_hot_self_Tensor(Rcpp::XPtr<torch::Tensor> self, int64_t num_classes);
RcppExport SEXP _torch_cpp_torch_namespace_one_hot_self_Tensor(SEXP selfSEXP, SEXP num_classesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< int64_t >::type num_classes(num_classesSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_one_hot_self_Tensor(self, num_classes));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_flip_self_Tensor_dims_IntArrayRef
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_flip_self_Tensor_dims_IntArrayRef(Rcpp::XPtr<torch::Tensor> self, std::vector<int64_t> dims);
RcppExport SEXP _torch_cpp_torch_namespace_flip_self_Tensor_dims_IntArrayRef(SEXP selfSEXP, SEXP dimsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type dims(dimsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_flip_self_Tensor_dims_IntArrayRef(self, dims));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_roll_self_Tensor_shifts_IntArrayRef
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_roll_self_Tensor_shifts_IntArrayRef(Rcpp::XPtr<torch::Tensor> self, std::vector<int64_t> shifts, std::vector<int64_t> dims);
RcppExport SEXP _torch_cpp_torch_namespace_roll_self_Tensor_shifts_IntArrayRef(SEXP selfSEXP, SEXP shiftsSEXP, SEXP dimsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type shifts(shiftsSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type dims(dimsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_roll_self_Tensor_shifts_IntArrayRef(self, shifts, dims));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_rot90_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_rot90_self_Tensor(Rcpp::XPtr<torch::Tensor> self, int64_t k, std::vector<int64_t> dims);
RcppExport SEXP _torch_cpp_torch_namespace_rot90_self_Tensor(SEXP selfSEXP, SEXP kSEXP, SEXP dimsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< int64_t >::type k(kSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type dims(dimsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_rot90_self_Tensor(self, k, dims));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_trapz_y_Tensor_x_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_trapz_y_Tensor_x_Tensor(Rcpp::XPtr<torch::Tensor> y, Rcpp::XPtr<torch::Tensor> x, int64_t dim);
RcppExport SEXP _torch_cpp_torch_namespace_trapz_y_Tensor_x_Tensor(SEXP ySEXP, SEXP xSEXP, SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type y(ySEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    Rcpp::traits::input_parameter< int64_t >::type dim(dimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_trapz_y_Tensor_x_Tensor(y, x, dim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_trapz_y_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_trapz_y_Tensor(Rcpp::XPtr<torch::Tensor> y, double dx, int64_t dim);
RcppExport SEXP _torch_cpp_torch_namespace_trapz_y_Tensor(SEXP ySEXP, SEXP dxSEXP, SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type y(ySEXP);
    Rcpp::traits::input_parameter< double >::type dx(dxSEXP);
    Rcpp::traits::input_parameter< int64_t >::type dim(dimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_trapz_y_Tensor(y, dx, dim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__trilinear_i1_Tensor_i2_Tensor_i3_Tensor_expand1_IntArrayRef_expand2_IntArrayRef_expand3_IntArrayRef_sumdim_IntArrayRef
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace__trilinear_i1_Tensor_i2_Tensor_i3_Tensor_expand1_IntArrayRef_expand2_IntArrayRef_expand3_IntArrayRef_sumdim_IntArrayRef(Rcpp::XPtr<torch::Tensor> i1, Rcpp::XPtr<torch::Tensor> i2, Rcpp::XPtr<torch::Tensor> i3, std::vector<int64_t> expand1, std::vector<int64_t> expand2, std::vector<int64_t> expand3, std::vector<int64_t> sumdim, int64_t unroll_dim);
RcppExport SEXP _torch_cpp_torch_namespace__trilinear_i1_Tensor_i2_Tensor_i3_Tensor_expand1_IntArrayRef_expand2_IntArrayRef_expand3_IntArrayRef_sumdim_IntArrayRef(SEXP i1SEXP, SEXP i2SEXP, SEXP i3SEXP, SEXP expand1SEXP, SEXP expand2SEXP, SEXP expand3SEXP, SEXP sumdimSEXP, SEXP unroll_dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type i1(i1SEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type i2(i2SEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type i3(i3SEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type expand1(expand1SEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type expand2(expand2SEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type expand3(expand3SEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type sumdim(sumdimSEXP);
    Rcpp::traits::input_parameter< int64_t >::type unroll_dim(unroll_dimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__trilinear_i1_Tensor_i2_Tensor_i3_Tensor_expand1_IntArrayRef_expand2_IntArrayRef_expand3_IntArrayRef_sumdim_IntArrayRef(i1, i2, i3, expand1, expand2, expand3, sumdim, unroll_dim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_triplet_margin_loss_anchor_Tensor_positive_Tensor_negative_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_triplet_margin_loss_anchor_Tensor_positive_Tensor_negative_Tensor(Rcpp::XPtr<torch::Tensor> anchor, Rcpp::XPtr<torch::Tensor> positive, Rcpp::XPtr<torch::Tensor> negative, double margin, double p, double eps, bool swap, int64_t reduction);
RcppExport SEXP _torch_cpp_torch_namespace_triplet_margin_loss_anchor_Tensor_positive_Tensor_negative_Tensor(SEXP anchorSEXP, SEXP positiveSEXP, SEXP negativeSEXP, SEXP marginSEXP, SEXP pSEXP, SEXP epsSEXP, SEXP swapSEXP, SEXP reductionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type anchor(anchorSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type positive(positiveSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type negative(negativeSEXP);
    Rcpp::traits::input_parameter< double >::type margin(marginSEXP);
    Rcpp::traits::input_parameter< double >::type p(pSEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< bool >::type swap(swapSEXP);
    Rcpp::traits::input_parameter< int64_t >::type reduction(reductionSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_triplet_margin_loss_anchor_Tensor_positive_Tensor_negative_Tensor(anchor, positive, negative, margin, p, eps, swap, reduction));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_trunc_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_trunc_self_Tensor(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_namespace_trunc_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_trunc_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_trunc__self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_trunc__self_Tensor(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_namespace_trunc__self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_trunc__self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_trunc_out_out_Tensor_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_trunc_out_out_Tensor_self_Tensor(Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_namespace_trunc_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type out(outSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_trunc_out_out_Tensor_self_Tensor(out, self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__has_compatible_shallow_copy_type_self_Tensor_from_Tensor
bool cpp_torch_namespace__has_compatible_shallow_copy_type_self_Tensor_from_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> from);
RcppExport SEXP _torch_cpp_torch_namespace__has_compatible_shallow_copy_type_self_Tensor_from_Tensor(SEXP selfSEXP, SEXP fromSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type from(fromSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__has_compatible_shallow_copy_type_self_Tensor_from_Tensor(self, from));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__unique_self_Tensor
Rcpp::List cpp_torch_namespace__unique_self_Tensor(Rcpp::XPtr<torch::Tensor> self, bool sorted, bool return_inverse);
RcppExport SEXP _torch_cpp_torch_namespace__unique_self_Tensor(SEXP selfSEXP, SEXP sortedSEXP, SEXP return_inverseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< bool >::type sorted(sortedSEXP);
    Rcpp::traits::input_parameter< bool >::type return_inverse(return_inverseSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__unique_self_Tensor(self, sorted, return_inverse));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_unique_dim_self_Tensor_dim_int64_t
Rcpp::List cpp_torch_namespace_unique_dim_self_Tensor_dim_int64_t(Rcpp::XPtr<torch::Tensor> self, int64_t dim, bool sorted, bool return_inverse, bool return_counts);
RcppExport SEXP _torch_cpp_torch_namespace_unique_dim_self_Tensor_dim_int64_t(SEXP selfSEXP, SEXP dimSEXP, SEXP sortedSEXP, SEXP return_inverseSEXP, SEXP return_countsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< bool >::type sorted(sortedSEXP);
    Rcpp::traits::input_parameter< bool >::type return_inverse(return_inverseSEXP);
    Rcpp::traits::input_parameter< bool >::type return_counts(return_countsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_unique_dim_self_Tensor_dim_int64_t(self, dim, sorted, return_inverse, return_counts));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_unique_consecutive_self_Tensor
Rcpp::List cpp_torch_namespace_unique_consecutive_self_Tensor(Rcpp::XPtr<torch::Tensor> self, bool return_inverse, bool return_counts, int64_t dim);
RcppExport SEXP _torch_cpp_torch_namespace_unique_consecutive_self_Tensor(SEXP selfSEXP, SEXP return_inverseSEXP, SEXP return_countsSEXP, SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< bool >::type return_inverse(return_inverseSEXP);
    Rcpp::traits::input_parameter< bool >::type return_counts(return_countsSEXP);
    Rcpp::traits::input_parameter< int64_t >::type dim(dimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_unique_consecutive_self_Tensor(self, return_inverse, return_counts, dim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_unique_dim_consecutive_self_Tensor_dim_int64_t
Rcpp::List cpp_torch_namespace_unique_dim_consecutive_self_Tensor_dim_int64_t(Rcpp::XPtr<torch::Tensor> self, int64_t dim, bool return_inverse, bool return_counts);
RcppExport SEXP _torch_cpp_torch_namespace_unique_dim_consecutive_self_Tensor_dim_int64_t(SEXP selfSEXP, SEXP dimSEXP, SEXP return_inverseSEXP, SEXP return_countsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< bool >::type return_inverse(return_inverseSEXP);
    Rcpp::traits::input_parameter< bool >::type return_counts(return_countsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_unique_dim_consecutive_self_Tensor_dim_int64_t(self, dim, return_inverse, return_counts));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__unique2_self_Tensor
Rcpp::List cpp_torch_namespace__unique2_self_Tensor(Rcpp::XPtr<torch::Tensor> self, bool sorted, bool return_inverse, bool return_counts);
RcppExport SEXP _torch_cpp_torch_namespace__unique2_self_Tensor(SEXP selfSEXP, SEXP sortedSEXP, SEXP return_inverseSEXP, SEXP return_countsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< bool >::type sorted(sortedSEXP);
    Rcpp::traits::input_parameter< bool >::type return_inverse(return_inverseSEXP);
    Rcpp::traits::input_parameter< bool >::type return_counts(return_countsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__unique2_self_Tensor(self, sorted, return_inverse, return_counts));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__unsafe_view_self_Tensor_size_IntArrayRef
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace__unsafe_view_self_Tensor_size_IntArrayRef(Rcpp::XPtr<torch::Tensor> self, std::vector<int64_t> size);
RcppExport SEXP _torch_cpp_torch_namespace__unsafe_view_self_Tensor_size_IntArrayRef(SEXP selfSEXP, SEXP sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type size(sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__unsafe_view_self_Tensor_size_IntArrayRef(self, size));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_unsqueeze_self_Tensor_dim_int64_t
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_unsqueeze_self_Tensor_dim_int64_t(Rcpp::XPtr<torch::Tensor> self, int64_t dim);
RcppExport SEXP _torch_cpp_torch_namespace_unsqueeze_self_Tensor_dim_int64_t(SEXP selfSEXP, SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< int64_t >::type dim(dimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_unsqueeze_self_Tensor_dim_int64_t(self, dim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_var_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_var_self_Tensor(Rcpp::XPtr<torch::Tensor> self, bool unbiased);
RcppExport SEXP _torch_cpp_torch_namespace_var_self_Tensor(SEXP selfSEXP, SEXP unbiasedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< bool >::type unbiased(unbiasedSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_var_self_Tensor(self, unbiased));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_var_self_Tensor_dim_IntArrayRef
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_var_self_Tensor_dim_IntArrayRef(Rcpp::XPtr<torch::Tensor> self, std::vector<int64_t> dim, bool unbiased, bool keepdim);
RcppExport SEXP _torch_cpp_torch_namespace_var_self_Tensor_dim_IntArrayRef(SEXP selfSEXP, SEXP dimSEXP, SEXP unbiasedSEXP, SEXP keepdimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< bool >::type unbiased(unbiasedSEXP);
    Rcpp::traits::input_parameter< bool >::type keepdim(keepdimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_var_self_Tensor_dim_IntArrayRef(self, dim, unbiased, keepdim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_var_out_out_Tensor_self_Tensor_dim_IntArrayRef
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_var_out_out_Tensor_self_Tensor_dim_IntArrayRef(Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, std::vector<int64_t> dim, bool unbiased, bool keepdim);
RcppExport SEXP _torch_cpp_torch_namespace_var_out_out_Tensor_self_Tensor_dim_IntArrayRef(SEXP outSEXP, SEXP selfSEXP, SEXP dimSEXP, SEXP unbiasedSEXP, SEXP keepdimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type out(outSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< bool >::type unbiased(unbiasedSEXP);
    Rcpp::traits::input_parameter< bool >::type keepdim(keepdimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_var_out_out_Tensor_self_Tensor_dim_IntArrayRef(out, self, dim, unbiased, keepdim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_var_self_Tensor_dim_DimnameList
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_var_self_Tensor_dim_DimnameList(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<std::vector<torch::Dimname>> dim, bool unbiased, bool keepdim);
RcppExport SEXP _torch_cpp_torch_namespace_var_self_Tensor_dim_DimnameList(SEXP selfSEXP, SEXP dimSEXP, SEXP unbiasedSEXP, SEXP keepdimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::vector<torch::Dimname>> >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< bool >::type unbiased(unbiasedSEXP);
    Rcpp::traits::input_parameter< bool >::type keepdim(keepdimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_var_self_Tensor_dim_DimnameList(self, dim, unbiased, keepdim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_var_out_out_Tensor_self_Tensor_dim_DimnameList
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_var_out_out_Tensor_self_Tensor_dim_DimnameList(Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<std::vector<torch::Dimname>> dim, bool unbiased, bool keepdim);
RcppExport SEXP _torch_cpp_torch_namespace_var_out_out_Tensor_self_Tensor_dim_DimnameList(SEXP outSEXP, SEXP selfSEXP, SEXP dimSEXP, SEXP unbiasedSEXP, SEXP keepdimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type out(outSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::vector<torch::Dimname>> >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< bool >::type unbiased(unbiasedSEXP);
    Rcpp::traits::input_parameter< bool >::type keepdim(keepdimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_var_out_out_Tensor_self_Tensor_dim_DimnameList(out, self, dim, unbiased, keepdim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_var_mean_self_Tensor
Rcpp::List cpp_torch_namespace_var_mean_self_Tensor(Rcpp::XPtr<torch::Tensor> self, bool unbiased);
RcppExport SEXP _torch_cpp_torch_namespace_var_mean_self_Tensor(SEXP selfSEXP, SEXP unbiasedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< bool >::type unbiased(unbiasedSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_var_mean_self_Tensor(self, unbiased));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_var_mean_self_Tensor_dim_IntArrayRef
Rcpp::List cpp_torch_namespace_var_mean_self_Tensor_dim_IntArrayRef(Rcpp::XPtr<torch::Tensor> self, std::vector<int64_t> dim, bool unbiased, bool keepdim);
RcppExport SEXP _torch_cpp_torch_namespace_var_mean_self_Tensor_dim_IntArrayRef(SEXP selfSEXP, SEXP dimSEXP, SEXP unbiasedSEXP, SEXP keepdimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< bool >::type unbiased(unbiasedSEXP);
    Rcpp::traits::input_parameter< bool >::type keepdim(keepdimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_var_mean_self_Tensor_dim_IntArrayRef(self, dim, unbiased, keepdim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_var_mean_self_Tensor_dim_DimnameList
Rcpp::List cpp_torch_namespace_var_mean_self_Tensor_dim_DimnameList(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<std::vector<torch::Dimname>> dim, bool unbiased, bool keepdim);
RcppExport SEXP _torch_cpp_torch_namespace_var_mean_self_Tensor_dim_DimnameList(SEXP selfSEXP, SEXP dimSEXP, SEXP unbiasedSEXP, SEXP keepdimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::vector<torch::Dimname>> >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< bool >::type unbiased(unbiasedSEXP);
    Rcpp::traits::input_parameter< bool >::type keepdim(keepdimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_var_mean_self_Tensor_dim_DimnameList(self, dim, unbiased, keepdim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_where_condition_Tensor_self_Tensor_other_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_where_condition_Tensor_self_Tensor_other_Tensor(Rcpp::XPtr<torch::Tensor> condition, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> other);
RcppExport SEXP _torch_cpp_torch_namespace_where_condition_Tensor_self_Tensor_other_Tensor(SEXP conditionSEXP, SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type condition(conditionSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_where_condition_Tensor_self_Tensor_other_Tensor(condition, self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_where_condition_Tensor
Rcpp::XPtr<torch::TensorList> cpp_torch_namespace_where_condition_Tensor(Rcpp::XPtr<torch::Tensor> condition);
RcppExport SEXP _torch_cpp_torch_namespace_where_condition_Tensor(SEXP conditionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type condition(conditionSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_where_condition_Tensor(condition));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__s_where_condition_Tensor_self_Tensor_other_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace__s_where_condition_Tensor_self_Tensor_other_Tensor(Rcpp::XPtr<torch::Tensor> condition, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> other);
RcppExport SEXP _torch_cpp_torch_namespace__s_where_condition_Tensor_self_Tensor_other_Tensor(SEXP conditionSEXP, SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type condition(conditionSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__s_where_condition_Tensor_self_Tensor_other_Tensor(condition, self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_norm_except_dim_v_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_norm_except_dim_v_Tensor(Rcpp::XPtr<torch::Tensor> v, int64_t pow, int64_t dim);
RcppExport SEXP _torch_cpp_torch_namespace_norm_except_dim_v_Tensor(SEXP vSEXP, SEXP powSEXP, SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type v(vSEXP);
    Rcpp::traits::input_parameter< int64_t >::type pow(powSEXP);
    Rcpp::traits::input_parameter< int64_t >::type dim(dimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_norm_except_dim_v_Tensor(v, pow, dim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__weight_norm_v_Tensor_g_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace__weight_norm_v_Tensor_g_Tensor(Rcpp::XPtr<torch::Tensor> v, Rcpp::XPtr<torch::Tensor> g, int64_t dim);
RcppExport SEXP _torch_cpp_torch_namespace__weight_norm_v_Tensor_g_Tensor(SEXP vSEXP, SEXP gSEXP, SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type v(vSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type g(gSEXP);
    Rcpp::traits::input_parameter< int64_t >::type dim(dimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__weight_norm_v_Tensor_g_Tensor(v, g, dim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__weight_norm_cuda_interface_v_Tensor_g_Tensor
Rcpp::List cpp_torch_namespace__weight_norm_cuda_interface_v_Tensor_g_Tensor(Rcpp::XPtr<torch::Tensor> v, Rcpp::XPtr<torch::Tensor> g, int64_t dim);
RcppExport SEXP _torch_cpp_torch_namespace__weight_norm_cuda_interface_v_Tensor_g_Tensor(SEXP vSEXP, SEXP gSEXP, SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type v(vSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type g(gSEXP);
    Rcpp::traits::input_parameter< int64_t >::type dim(dimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__weight_norm_cuda_interface_v_Tensor_g_Tensor(v, g, dim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__weight_norm_cuda_interface_backward_grad_w_Tensor_saved_v_Tensor_saved_g_Tensor_saved_norms_Tensor_dim_int64_t
Rcpp::List cpp_torch_namespace__weight_norm_cuda_interface_backward_grad_w_Tensor_saved_v_Tensor_saved_g_Tensor_saved_norms_Tensor_dim_int64_t(Rcpp::XPtr<torch::Tensor> grad_w, Rcpp::XPtr<torch::Tensor> saved_v, Rcpp::XPtr<torch::Tensor> saved_g, Rcpp::XPtr<torch::Tensor> saved_norms, int64_t dim);
RcppExport SEXP _torch_cpp_torch_namespace__weight_norm_cuda_interface_backward_grad_w_Tensor_saved_v_Tensor_saved_g_Tensor_saved_norms_Tensor_dim_int64_t(SEXP grad_wSEXP, SEXP saved_vSEXP, SEXP saved_gSEXP, SEXP saved_normsSEXP, SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type grad_w(grad_wSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type saved_v(saved_vSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type saved_g(saved_gSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type saved_norms(saved_normsSEXP);
    Rcpp::traits::input_parameter< int64_t >::type dim(dimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__weight_norm_cuda_interface_backward_grad_w_Tensor_saved_v_Tensor_saved_g_Tensor_saved_norms_Tensor_dim_int64_t(grad_w, saved_v, saved_g, saved_norms, dim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__weight_norm_differentiable_backward_grad_w_Tensor_saved_v_Tensor_saved_g_Tensor_saved_norms_Tensor_dim_int64_t
Rcpp::List cpp_torch_namespace__weight_norm_differentiable_backward_grad_w_Tensor_saved_v_Tensor_saved_g_Tensor_saved_norms_Tensor_dim_int64_t(Rcpp::XPtr<torch::Tensor> grad_w, Rcpp::XPtr<torch::Tensor> saved_v, Rcpp::XPtr<torch::Tensor> saved_g, Rcpp::XPtr<torch::Tensor> saved_norms, int64_t dim);
RcppExport SEXP _torch_cpp_torch_namespace__weight_norm_differentiable_backward_grad_w_Tensor_saved_v_Tensor_saved_g_Tensor_saved_norms_Tensor_dim_int64_t(SEXP grad_wSEXP, SEXP saved_vSEXP, SEXP saved_gSEXP, SEXP saved_normsSEXP, SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type grad_w(grad_wSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type saved_v(saved_vSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type saved_g(saved_gSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type saved_norms(saved_normsSEXP);
    Rcpp::traits::input_parameter< int64_t >::type dim(dimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__weight_norm_differentiable_backward_grad_w_Tensor_saved_v_Tensor_saved_g_Tensor_saved_norms_Tensor_dim_int64_t(grad_w, saved_v, saved_g, saved_norms, dim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_zeros_size_IntArrayRef_names_DimnameList
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_zeros_size_IntArrayRef_names_DimnameList(std::vector<int64_t> size, Rcpp::XPtr<std::vector<torch::Dimname>> names, Rcpp::XPtr<torch::TensorOptions> options);
RcppExport SEXP _torch_cpp_torch_namespace_zeros_size_IntArrayRef_names_DimnameList(SEXP sizeSEXP, SEXP namesSEXP, SEXP optionsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::vector<torch::Dimname>> >::type names(namesSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::TensorOptions> >::type options(optionsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_zeros_size_IntArrayRef_names_DimnameList(size, names, options));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_zeros_size_IntArrayRef
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_zeros_size_IntArrayRef(std::vector<int64_t> size, Rcpp::XPtr<torch::TensorOptions> options);
RcppExport SEXP _torch_cpp_torch_namespace_zeros_size_IntArrayRef(SEXP sizeSEXP, SEXP optionsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::TensorOptions> >::type options(optionsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_zeros_size_IntArrayRef(size, options));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_zeros_out_out_Tensor_size_IntArrayRef
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_zeros_out_out_Tensor_size_IntArrayRef(Rcpp::XPtr<torch::Tensor> out, std::vector<int64_t> size);
RcppExport SEXP _torch_cpp_torch_namespace_zeros_out_out_Tensor_size_IntArrayRef(SEXP outSEXP, SEXP sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type out(outSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type size(sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_zeros_out_out_Tensor_size_IntArrayRef(out, size));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_zeros_like_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_zeros_like_self_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<c10::optional<torch::MemoryFormat>> memory_format);
RcppExport SEXP _torch_cpp_torch_namespace_zeros_like_self_Tensor(SEXP selfSEXP, SEXP memory_formatSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<c10::optional<torch::MemoryFormat>> >::type memory_format(memory_formatSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_zeros_like_self_Tensor(self, memory_format));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_zeros_like_self_Tensor_options_TensorOptions
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_zeros_like_self_Tensor_options_TensorOptions(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::TensorOptions> options, Rcpp::XPtr<c10::optional<torch::MemoryFormat>> memory_format);
RcppExport SEXP _torch_cpp_torch_namespace_zeros_like_self_Tensor_options_TensorOptions(SEXP selfSEXP, SEXP optionsSEXP, SEXP memory_formatSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::TensorOptions> >::type options(optionsSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<c10::optional<torch::MemoryFormat>> >::type memory_format(memory_formatSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_zeros_like_self_Tensor_options_TensorOptions(self, options, memory_format));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__standard_gamma_grad_self_Tensor_output_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace__standard_gamma_grad_self_Tensor_output_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> output);
RcppExport SEXP _torch_cpp_torch_namespace__standard_gamma_grad_self_Tensor_output_Tensor(SEXP selfSEXP, SEXP outputSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type output(outputSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__standard_gamma_grad_self_Tensor_output_Tensor(self, output));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__standard_gamma_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace__standard_gamma_self_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Generator *> generator);
RcppExport SEXP _torch_cpp_torch_namespace__standard_gamma_self_Tensor(SEXP selfSEXP, SEXP generatorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Generator *> >::type generator(generatorSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__standard_gamma_self_Tensor(self, generator));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__dirichlet_grad_x_Tensor_alpha_Tensor_total_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace__dirichlet_grad_x_Tensor_alpha_Tensor_total_Tensor(Rcpp::XPtr<torch::Tensor> x, Rcpp::XPtr<torch::Tensor> alpha, Rcpp::XPtr<torch::Tensor> total);
RcppExport SEXP _torch_cpp_torch_namespace__dirichlet_grad_x_Tensor_alpha_Tensor_total_Tensor(SEXP xSEXP, SEXP alphaSEXP, SEXP totalSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type total(totalSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__dirichlet_grad_x_Tensor_alpha_Tensor_total_Tensor(x, alpha, total));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__sample_dirichlet_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace__sample_dirichlet_self_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Generator *> generator);
RcppExport SEXP _torch_cpp_torch_namespace__sample_dirichlet_self_Tensor(SEXP selfSEXP, SEXP generatorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Generator *> >::type generator(generatorSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__sample_dirichlet_self_Tensor(self, generator));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_poisson_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_poisson_self_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Generator *> generator);
RcppExport SEXP _torch_cpp_torch_namespace_poisson_self_Tensor(SEXP selfSEXP, SEXP generatorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Generator *> >::type generator(generatorSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_poisson_self_Tensor(self, generator));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_native_norm_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_native_norm_self_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Scalar> p);
RcppExport SEXP _torch_cpp_torch_namespace_native_norm_self_Tensor(SEXP selfSEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_native_norm_self_Tensor(self, p));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__sparse_sum_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace__sparse_sum_self_Tensor(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_namespace__sparse_sum_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__sparse_sum_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__sparse_sum_self_Tensor_dtype_ScalarType
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace__sparse_sum_self_Tensor_dtype_ScalarType(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Dtype> dtype);
RcppExport SEXP _torch_cpp_torch_namespace__sparse_sum_self_Tensor_dtype_ScalarType(SEXP selfSEXP, SEXP dtypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Dtype> >::type dtype(dtypeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__sparse_sum_self_Tensor_dtype_ScalarType(self, dtype));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__sparse_sum_self_Tensor_dim_IntArrayRef
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace__sparse_sum_self_Tensor_dim_IntArrayRef(Rcpp::XPtr<torch::Tensor> self, std::vector<int64_t> dim);
RcppExport SEXP _torch_cpp_torch_namespace__sparse_sum_self_Tensor_dim_IntArrayRef(SEXP selfSEXP, SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type dim(dimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__sparse_sum_self_Tensor_dim_IntArrayRef(self, dim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__sparse_sum_self_Tensor_dim_IntArrayRef_dtype_ScalarType
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace__sparse_sum_self_Tensor_dim_IntArrayRef_dtype_ScalarType(Rcpp::XPtr<torch::Tensor> self, std::vector<int64_t> dim, Rcpp::XPtr<torch::Dtype> dtype);
RcppExport SEXP _torch_cpp_torch_namespace__sparse_sum_self_Tensor_dim_IntArrayRef_dtype_ScalarType(SEXP selfSEXP, SEXP dimSEXP, SEXP dtypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Dtype> >::type dtype(dtypeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__sparse_sum_self_Tensor_dim_IntArrayRef_dtype_ScalarType(self, dim, dtype));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__sparse_sum_backward_grad_Tensor_self_Tensor_dim_IntArrayRef
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace__sparse_sum_backward_grad_Tensor_self_Tensor_dim_IntArrayRef(Rcpp::XPtr<torch::Tensor> grad, Rcpp::XPtr<torch::Tensor> self, std::vector<int64_t> dim);
RcppExport SEXP _torch_cpp_torch_namespace__sparse_sum_backward_grad_Tensor_self_Tensor_dim_IntArrayRef(SEXP gradSEXP, SEXP selfSEXP, SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type grad(gradSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type dim(dimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__sparse_sum_backward_grad_Tensor_self_Tensor_dim_IntArrayRef(grad, self, dim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_norm_self_Tensor_p_Scalar_dtype_ScalarType
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_norm_self_Tensor_p_Scalar_dtype_ScalarType(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Scalar> p, Rcpp::XPtr<torch::Dtype> dtype);
RcppExport SEXP _torch_cpp_torch_namespace_norm_self_Tensor_p_Scalar_dtype_ScalarType(SEXP selfSEXP, SEXP pSEXP, SEXP dtypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type p(pSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Dtype> >::type dtype(dtypeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_norm_self_Tensor_p_Scalar_dtype_ScalarType(self, p, dtype));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_norm_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_norm_self_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Scalar> p);
RcppExport SEXP _torch_cpp_torch_namespace_norm_self_Tensor(SEXP selfSEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_norm_self_Tensor(self, p));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_norm_self_Tensor_p_Scalar_dim_IntArrayRef_keepdim_bool_dtype_ScalarType
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_norm_self_Tensor_p_Scalar_dim_IntArrayRef_keepdim_bool_dtype_ScalarType(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Scalar> p, std::vector<int64_t> dim, bool keepdim, Rcpp::XPtr<torch::Dtype> dtype);
RcppExport SEXP _torch_cpp_torch_namespace_norm_self_Tensor_p_Scalar_dim_IntArrayRef_keepdim_bool_dtype_ScalarType(SEXP selfSEXP, SEXP pSEXP, SEXP dimSEXP, SEXP keepdimSEXP, SEXP dtypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type p(pSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< bool >::type keepdim(keepdimSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Dtype> >::type dtype(dtypeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_norm_self_Tensor_p_Scalar_dim_IntArrayRef_keepdim_bool_dtype_ScalarType(self, p, dim, keepdim, dtype));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_norm_self_Tensor_p_Scalar_dim_IntArrayRef
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_norm_self_Tensor_p_Scalar_dim_IntArrayRef(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Scalar> p, std::vector<int64_t> dim, bool keepdim);
RcppExport SEXP _torch_cpp_torch_namespace_norm_self_Tensor_p_Scalar_dim_IntArrayRef(SEXP selfSEXP, SEXP pSEXP, SEXP dimSEXP, SEXP keepdimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type p(pSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< bool >::type keepdim(keepdimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_norm_self_Tensor_p_Scalar_dim_IntArrayRef(self, p, dim, keepdim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_norm_out_out_Tensor_self_Tensor_p_Scalar_dim_IntArrayRef_keepdim_bool_dtype_ScalarType
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_norm_out_out_Tensor_self_Tensor_p_Scalar_dim_IntArrayRef_keepdim_bool_dtype_ScalarType(Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Scalar> p, std::vector<int64_t> dim, bool keepdim, Rcpp::XPtr<torch::Dtype> dtype);
RcppExport SEXP _torch_cpp_torch_namespace_norm_out_out_Tensor_self_Tensor_p_Scalar_dim_IntArrayRef_keepdim_bool_dtype_ScalarType(SEXP outSEXP, SEXP selfSEXP, SEXP pSEXP, SEXP dimSEXP, SEXP keepdimSEXP, SEXP dtypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type out(outSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type p(pSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< bool >::type keepdim(keepdimSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Dtype> >::type dtype(dtypeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_norm_out_out_Tensor_self_Tensor_p_Scalar_dim_IntArrayRef_keepdim_bool_dtype_ScalarType(out, self, p, dim, keepdim, dtype));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_norm_out_out_Tensor_self_Tensor_p_Scalar_dim_IntArrayRef
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_norm_out_out_Tensor_self_Tensor_p_Scalar_dim_IntArrayRef(Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Scalar> p, std::vector<int64_t> dim, bool keepdim);
RcppExport SEXP _torch_cpp_torch_namespace_norm_out_out_Tensor_self_Tensor_p_Scalar_dim_IntArrayRef(SEXP outSEXP, SEXP selfSEXP, SEXP pSEXP, SEXP dimSEXP, SEXP keepdimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type out(outSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type p(pSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< bool >::type keepdim(keepdimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_norm_out_out_Tensor_self_Tensor_p_Scalar_dim_IntArrayRef(out, self, p, dim, keepdim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_norm_self_Tensor_p_Scalar_dim_DimnameList_keepdim_bool_dtype_ScalarType
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_norm_self_Tensor_p_Scalar_dim_DimnameList_keepdim_bool_dtype_ScalarType(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Scalar> p, Rcpp::XPtr<std::vector<torch::Dimname>> dim, bool keepdim, Rcpp::XPtr<torch::Dtype> dtype);
RcppExport SEXP _torch_cpp_torch_namespace_norm_self_Tensor_p_Scalar_dim_DimnameList_keepdim_bool_dtype_ScalarType(SEXP selfSEXP, SEXP pSEXP, SEXP dimSEXP, SEXP keepdimSEXP, SEXP dtypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type p(pSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::vector<torch::Dimname>> >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< bool >::type keepdim(keepdimSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Dtype> >::type dtype(dtypeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_norm_self_Tensor_p_Scalar_dim_DimnameList_keepdim_bool_dtype_ScalarType(self, p, dim, keepdim, dtype));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_norm_self_Tensor_p_Scalar_dim_DimnameList
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_norm_self_Tensor_p_Scalar_dim_DimnameList(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Scalar> p, Rcpp::XPtr<std::vector<torch::Dimname>> dim, bool keepdim);
RcppExport SEXP _torch_cpp_torch_namespace_norm_self_Tensor_p_Scalar_dim_DimnameList(SEXP selfSEXP, SEXP pSEXP, SEXP dimSEXP, SEXP keepdimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type p(pSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::vector<torch::Dimname>> >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< bool >::type keepdim(keepdimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_norm_self_Tensor_p_Scalar_dim_DimnameList(self, p, dim, keepdim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_norm_out_out_Tensor_self_Tensor_p_Scalar_dim_DimnameList_keepdim_bool_dtype_ScalarType
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_norm_out_out_Tensor_self_Tensor_p_Scalar_dim_DimnameList_keepdim_bool_dtype_ScalarType(Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Scalar> p, Rcpp::XPtr<std::vector<torch::Dimname>> dim, bool keepdim, Rcpp::XPtr<torch::Dtype> dtype);
RcppExport SEXP _torch_cpp_torch_namespace_norm_out_out_Tensor_self_Tensor_p_Scalar_dim_DimnameList_keepdim_bool_dtype_ScalarType(SEXP outSEXP, SEXP selfSEXP, SEXP pSEXP, SEXP dimSEXP, SEXP keepdimSEXP, SEXP dtypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type out(outSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type p(pSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::vector<torch::Dimname>> >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< bool >::type keepdim(keepdimSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Dtype> >::type dtype(dtypeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_norm_out_out_Tensor_self_Tensor_p_Scalar_dim_DimnameList_keepdim_bool_dtype_ScalarType(out, self, p, dim, keepdim, dtype));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_norm_out_out_Tensor_self_Tensor_p_Scalar_dim_DimnameList
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_norm_out_out_Tensor_self_Tensor_p_Scalar_dim_DimnameList(Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Scalar> p, Rcpp::XPtr<std::vector<torch::Dimname>> dim, bool keepdim);
RcppExport SEXP _torch_cpp_torch_namespace_norm_out_out_Tensor_self_Tensor_p_Scalar_dim_DimnameList(SEXP outSEXP, SEXP selfSEXP, SEXP pSEXP, SEXP dimSEXP, SEXP keepdimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type out(outSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type p(pSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::vector<torch::Dimname>> >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< bool >::type keepdim(keepdimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_norm_out_out_Tensor_self_Tensor_p_Scalar_dim_DimnameList(out, self, p, dim, keepdim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_frobenius_norm_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_frobenius_norm_self_Tensor(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_namespace_frobenius_norm_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_frobenius_norm_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_frobenius_norm_self_Tensor_dim_IntArrayRef
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_frobenius_norm_self_Tensor_dim_IntArrayRef(Rcpp::XPtr<torch::Tensor> self, std::vector<int64_t> dim, bool keepdim);
RcppExport SEXP _torch_cpp_torch_namespace_frobenius_norm_self_Tensor_dim_IntArrayRef(SEXP selfSEXP, SEXP dimSEXP, SEXP keepdimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< bool >::type keepdim(keepdimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_frobenius_norm_self_Tensor_dim_IntArrayRef(self, dim, keepdim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_frobenius_norm_out_out_Tensor_self_Tensor_dim_IntArrayRef
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_frobenius_norm_out_out_Tensor_self_Tensor_dim_IntArrayRef(Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, std::vector<int64_t> dim, bool keepdim);
RcppExport SEXP _torch_cpp_torch_namespace_frobenius_norm_out_out_Tensor_self_Tensor_dim_IntArrayRef(SEXP outSEXP, SEXP selfSEXP, SEXP dimSEXP, SEXP keepdimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type out(outSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< bool >::type keepdim(keepdimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_frobenius_norm_out_out_Tensor_self_Tensor_dim_IntArrayRef(out, self, dim, keepdim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_nuclear_norm_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_nuclear_norm_self_Tensor(Rcpp::XPtr<torch::Tensor> self, bool keepdim);
RcppExport SEXP _torch_cpp_torch_namespace_nuclear_norm_self_Tensor(SEXP selfSEXP, SEXP keepdimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< bool >::type keepdim(keepdimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_nuclear_norm_self_Tensor(self, keepdim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_nuclear_norm_out_out_Tensor_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_nuclear_norm_out_out_Tensor_self_Tensor(Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, bool keepdim);
RcppExport SEXP _torch_cpp_torch_namespace_nuclear_norm_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP keepdimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type out(outSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< bool >::type keepdim(keepdimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_nuclear_norm_out_out_Tensor_self_Tensor(out, self, keepdim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_nuclear_norm_self_Tensor_dim_IntArrayRef
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_nuclear_norm_self_Tensor_dim_IntArrayRef(Rcpp::XPtr<torch::Tensor> self, std::vector<int64_t> dim, bool keepdim);
RcppExport SEXP _torch_cpp_torch_namespace_nuclear_norm_self_Tensor_dim_IntArrayRef(SEXP selfSEXP, SEXP dimSEXP, SEXP keepdimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< bool >::type keepdim(keepdimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_nuclear_norm_self_Tensor_dim_IntArrayRef(self, dim, keepdim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_nuclear_norm_out_out_Tensor_self_Tensor_dim_IntArrayRef
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_nuclear_norm_out_out_Tensor_self_Tensor_dim_IntArrayRef(Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, std::vector<int64_t> dim, bool keepdim);
RcppExport SEXP _torch_cpp_torch_namespace_nuclear_norm_out_out_Tensor_self_Tensor_dim_IntArrayRef(SEXP outSEXP, SEXP selfSEXP, SEXP dimSEXP, SEXP keepdimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type out(outSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< bool >::type keepdim(keepdimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_nuclear_norm_out_out_Tensor_self_Tensor_dim_IntArrayRef(out, self, dim, keepdim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_clone_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_clone_self_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<c10::optional<torch::MemoryFormat>> memory_format);
RcppExport SEXP _torch_cpp_torch_namespace_clone_self_Tensor(SEXP selfSEXP, SEXP memory_formatSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<c10::optional<torch::MemoryFormat>> >::type memory_format(memory_formatSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_clone_self_Tensor(self, memory_format));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_resize_as__self_Tensor_the_template_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_resize_as__self_Tensor_the_template_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> the_template, Rcpp::XPtr<c10::optional<torch::MemoryFormat>> memory_format);
RcppExport SEXP _torch_cpp_torch_namespace_resize_as__self_Tensor_the_template_Tensor(SEXP selfSEXP, SEXP the_templateSEXP, SEXP memory_formatSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type the_template(the_templateSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<c10::optional<torch::MemoryFormat>> >::type memory_format(memory_formatSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_resize_as__self_Tensor_the_template_Tensor(self, the_template, memory_format));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_pow_out_out_Tensor_self_Tensor_exponent_Scalar
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_pow_out_out_Tensor_self_Tensor_exponent_Scalar(Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Scalar> exponent);
RcppExport SEXP _torch_cpp_torch_namespace_pow_out_out_Tensor_self_Tensor_exponent_Scalar(SEXP outSEXP, SEXP selfSEXP, SEXP exponentSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type out(outSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type exponent(exponentSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_pow_out_out_Tensor_self_Tensor_exponent_Scalar(out, self, exponent));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_pow_self_Tensor_exponent_Scalar
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_pow_self_Tensor_exponent_Scalar(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Scalar> exponent);
RcppExport SEXP _torch_cpp_torch_namespace_pow_self_Tensor_exponent_Scalar(SEXP selfSEXP, SEXP exponentSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type exponent(exponentSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_pow_self_Tensor_exponent_Scalar(self, exponent));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_zero__self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_zero__self_Tensor(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_namespace_zero__self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_zero__self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_sub_out_out_Tensor_self_Tensor_other_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_sub_out_out_Tensor_self_Tensor_other_Tensor(Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> other, Rcpp::XPtr<torch::Scalar> alpha);
RcppExport SEXP _torch_cpp_torch_namespace_sub_out_out_Tensor_self_Tensor_other_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP otherSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type out(outSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type other(otherSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_sub_out_out_Tensor_self_Tensor_other_Tensor(out, self, other, alpha));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_sub_self_Tensor_other_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_sub_self_Tensor_other_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> other, Rcpp::XPtr<torch::Scalar> alpha);
RcppExport SEXP _torch_cpp_torch_namespace_sub_self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type other(otherSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_sub_self_Tensor_other_Tensor(self, other, alpha));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_sub_self_Tensor_other_Scalar
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_sub_self_Tensor_other_Scalar(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Scalar> other, Rcpp::XPtr<torch::Scalar> alpha);
RcppExport SEXP _torch_cpp_torch_namespace_sub_self_Tensor_other_Scalar(SEXP selfSEXP, SEXP otherSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type other(otherSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_sub_self_Tensor_other_Scalar(self, other, alpha));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_rsub_self_Tensor_other_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_rsub_self_Tensor_other_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> other, Rcpp::XPtr<torch::Scalar> alpha);
RcppExport SEXP _torch_cpp_torch_namespace_rsub_self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type other(otherSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_rsub_self_Tensor_other_Tensor(self, other, alpha));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_rsub_self_Tensor_other_Scalar
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_rsub_self_Tensor_other_Scalar(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Scalar> other, Rcpp::XPtr<torch::Scalar> alpha);
RcppExport SEXP _torch_cpp_torch_namespace_rsub_self_Tensor_other_Scalar(SEXP selfSEXP, SEXP otherSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type other(otherSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_rsub_self_Tensor_other_Scalar(self, other, alpha));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__sparse_addmm_self_Tensor_sparse_Tensor_dense_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace__sparse_addmm_self_Tensor_sparse_Tensor_dense_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> sparse, Rcpp::XPtr<torch::Tensor> dense, Rcpp::XPtr<torch::Scalar> beta, Rcpp::XPtr<torch::Scalar> alpha);
RcppExport SEXP _torch_cpp_torch_namespace__sparse_addmm_self_Tensor_sparse_Tensor_dense_Tensor(SEXP selfSEXP, SEXP sparseSEXP, SEXP denseSEXP, SEXP betaSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type sparse(sparseSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type dense(denseSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__sparse_addmm_self_Tensor_sparse_Tensor_dense_Tensor(self, sparse, dense, beta, alpha));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_addmm_out_out_Tensor_self_Tensor_mat1_Tensor_mat2_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_addmm_out_out_Tensor_self_Tensor_mat1_Tensor_mat2_Tensor(Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> mat1, Rcpp::XPtr<torch::Tensor> mat2, Rcpp::XPtr<torch::Scalar> beta, Rcpp::XPtr<torch::Scalar> alpha);
RcppExport SEXP _torch_cpp_torch_namespace_addmm_out_out_Tensor_self_Tensor_mat1_Tensor_mat2_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP mat1SEXP, SEXP mat2SEXP, SEXP betaSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type out(outSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type mat1(mat1SEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type mat2(mat2SEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_addmm_out_out_Tensor_self_Tensor_mat1_Tensor_mat2_Tensor(out, self, mat1, mat2, beta, alpha));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_addmm_self_Tensor_mat1_Tensor_mat2_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_addmm_self_Tensor_mat1_Tensor_mat2_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> mat1, Rcpp::XPtr<torch::Tensor> mat2, Rcpp::XPtr<torch::Scalar> beta, Rcpp::XPtr<torch::Scalar> alpha);
RcppExport SEXP _torch_cpp_torch_namespace_addmm_self_Tensor_mat1_Tensor_mat2_Tensor(SEXP selfSEXP, SEXP mat1SEXP, SEXP mat2SEXP, SEXP betaSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type mat1(mat1SEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type mat2(mat2SEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_addmm_self_Tensor_mat1_Tensor_mat2_Tensor(self, mat1, mat2, beta, alpha));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_sparse_coo_tensor_size_IntArrayRef_options_TensorOptions
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_sparse_coo_tensor_size_IntArrayRef_options_TensorOptions(std::vector<int64_t> size, Rcpp::XPtr<torch::TensorOptions> options);
RcppExport SEXP _torch_cpp_torch_namespace_sparse_coo_tensor_size_IntArrayRef_options_TensorOptions(SEXP sizeSEXP, SEXP optionsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::TensorOptions> >::type options(optionsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_sparse_coo_tensor_size_IntArrayRef_options_TensorOptions(size, options));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_sparse_coo_tensor_indices_Tensor_values_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_sparse_coo_tensor_indices_Tensor_values_Tensor(Rcpp::XPtr<torch::Tensor> indices, Rcpp::XPtr<torch::Tensor> values, Rcpp::XPtr<torch::TensorOptions> options);
RcppExport SEXP _torch_cpp_torch_namespace_sparse_coo_tensor_indices_Tensor_values_Tensor(SEXP indicesSEXP, SEXP valuesSEXP, SEXP optionsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type indices(indicesSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type values(valuesSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::TensorOptions> >::type options(optionsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_sparse_coo_tensor_indices_Tensor_values_Tensor(indices, values, options));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_sparse_coo_tensor_indices_Tensor_values_Tensor_size_IntArrayRef
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_sparse_coo_tensor_indices_Tensor_values_Tensor_size_IntArrayRef(Rcpp::XPtr<torch::Tensor> indices, Rcpp::XPtr<torch::Tensor> values, std::vector<int64_t> size, Rcpp::XPtr<torch::TensorOptions> options);
RcppExport SEXP _torch_cpp_torch_namespace_sparse_coo_tensor_indices_Tensor_values_Tensor_size_IntArrayRef(SEXP indicesSEXP, SEXP valuesSEXP, SEXP sizeSEXP, SEXP optionsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type indices(indicesSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type values(valuesSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::TensorOptions> >::type options(optionsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_sparse_coo_tensor_indices_Tensor_values_Tensor_size_IntArrayRef(indices, values, size, options));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__sparse_coo_tensor_unsafe_indices_Tensor_values_Tensor_size_IntArrayRef
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace__sparse_coo_tensor_unsafe_indices_Tensor_values_Tensor_size_IntArrayRef(Rcpp::XPtr<torch::Tensor> indices, Rcpp::XPtr<torch::Tensor> values, std::vector<int64_t> size, Rcpp::XPtr<torch::TensorOptions> options);
RcppExport SEXP _torch_cpp_torch_namespace__sparse_coo_tensor_unsafe_indices_Tensor_values_Tensor_size_IntArrayRef(SEXP indicesSEXP, SEXP valuesSEXP, SEXP sizeSEXP, SEXP optionsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type indices(indicesSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type values(valuesSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::TensorOptions> >::type options(optionsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__sparse_coo_tensor_unsafe_indices_Tensor_values_Tensor_size_IntArrayRef(indices, values, size, options));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__sparse_coo_tensor_with_dims_sparse_dim_int64_t_dense_dim_int64_t_size_IntArrayRef_options_TensorOptions
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace__sparse_coo_tensor_with_dims_sparse_dim_int64_t_dense_dim_int64_t_size_IntArrayRef_options_TensorOptions(int64_t sparse_dim, int64_t dense_dim, std::vector<int64_t> size, Rcpp::XPtr<torch::TensorOptions> options);
RcppExport SEXP _torch_cpp_torch_namespace__sparse_coo_tensor_with_dims_sparse_dim_int64_t_dense_dim_int64_t_size_IntArrayRef_options_TensorOptions(SEXP sparse_dimSEXP, SEXP dense_dimSEXP, SEXP sizeSEXP, SEXP optionsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int64_t >::type sparse_dim(sparse_dimSEXP);
    Rcpp::traits::input_parameter< int64_t >::type dense_dim(dense_dimSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::TensorOptions> >::type options(optionsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__sparse_coo_tensor_with_dims_sparse_dim_int64_t_dense_dim_int64_t_size_IntArrayRef_options_TensorOptions(sparse_dim, dense_dim, size, options));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__sparse_coo_tensor_with_dims_and_tensors_sparse_dim_int64_t_dense_dim_int64_t_size_IntArrayRef_indices_Tensor_values_Tensor_options_TensorOptions
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace__sparse_coo_tensor_with_dims_and_tensors_sparse_dim_int64_t_dense_dim_int64_t_size_IntArrayRef_indices_Tensor_values_Tensor_options_TensorOptions(int64_t sparse_dim, int64_t dense_dim, std::vector<int64_t> size, Rcpp::XPtr<torch::Tensor> indices, Rcpp::XPtr<torch::Tensor> values, Rcpp::XPtr<torch::TensorOptions> options);
RcppExport SEXP _torch_cpp_torch_namespace__sparse_coo_tensor_with_dims_and_tensors_sparse_dim_int64_t_dense_dim_int64_t_size_IntArrayRef_indices_Tensor_values_Tensor_options_TensorOptions(SEXP sparse_dimSEXP, SEXP dense_dimSEXP, SEXP sizeSEXP, SEXP indicesSEXP, SEXP valuesSEXP, SEXP optionsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int64_t >::type sparse_dim(sparse_dimSEXP);
    Rcpp::traits::input_parameter< int64_t >::type dense_dim(dense_dimSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type indices(indicesSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type values(valuesSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::TensorOptions> >::type options(optionsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__sparse_coo_tensor_with_dims_and_tensors_sparse_dim_int64_t_dense_dim_int64_t_size_IntArrayRef_indices_Tensor_values_Tensor_options_TensorOptions(sparse_dim, dense_dim, size, indices, values, options));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_to_dense_backward_grad_Tensor_input_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_to_dense_backward_grad_Tensor_input_Tensor(Rcpp::XPtr<torch::Tensor> grad, Rcpp::XPtr<torch::Tensor> input);
RcppExport SEXP _torch_cpp_torch_namespace_to_dense_backward_grad_Tensor_input_Tensor(SEXP gradSEXP, SEXP inputSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type grad(gradSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type input(inputSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_to_dense_backward_grad_Tensor_input_Tensor(grad, input));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_hspmm_out_out_Tensor_mat1_Tensor_mat2_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_hspmm_out_out_Tensor_mat1_Tensor_mat2_Tensor(Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> mat1, Rcpp::XPtr<torch::Tensor> mat2);
RcppExport SEXP _torch_cpp_torch_namespace_hspmm_out_out_Tensor_mat1_Tensor_mat2_Tensor(SEXP outSEXP, SEXP mat1SEXP, SEXP mat2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type out(outSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type mat1(mat1SEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type mat2(mat2SEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_hspmm_out_out_Tensor_mat1_Tensor_mat2_Tensor(out, mat1, mat2));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_hspmm_mat1_Tensor_mat2_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_hspmm_mat1_Tensor_mat2_Tensor(Rcpp::XPtr<torch::Tensor> mat1, Rcpp::XPtr<torch::Tensor> mat2);
RcppExport SEXP _torch_cpp_torch_namespace_hspmm_mat1_Tensor_mat2_Tensor(SEXP mat1SEXP, SEXP mat2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type mat1(mat1SEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type mat2(mat2SEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_hspmm_mat1_Tensor_mat2_Tensor(mat1, mat2));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_copy_sparse_to_sparse__self_Tensor_src_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_copy_sparse_to_sparse__self_Tensor_src_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> src, bool non_blocking);
RcppExport SEXP _torch_cpp_torch_namespace_copy_sparse_to_sparse__self_Tensor_src_Tensor(SEXP selfSEXP, SEXP srcSEXP, SEXP non_blockingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type src(srcSEXP);
    Rcpp::traits::input_parameter< bool >::type non_blocking(non_blockingSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_copy_sparse_to_sparse__self_Tensor_src_Tensor(self, src, non_blocking));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_unbind_self_Tensor
Rcpp::XPtr<torch::TensorList> cpp_torch_namespace_unbind_self_Tensor(Rcpp::XPtr<torch::Tensor> self, int64_t dim);
RcppExport SEXP _torch_cpp_torch_namespace_unbind_self_Tensor(SEXP selfSEXP, SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< int64_t >::type dim(dimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_unbind_self_Tensor(self, dim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_unbind_self_Tensor_dim_Dimname
Rcpp::XPtr<torch::TensorList> cpp_torch_namespace_unbind_self_Tensor_dim_Dimname(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Dimname> dim);
RcppExport SEXP _torch_cpp_torch_namespace_unbind_self_Tensor_dim_Dimname(SEXP selfSEXP, SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Dimname> >::type dim(dimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_unbind_self_Tensor_dim_Dimname(self, dim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_mkldnn_reorder_conv2d_weight_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_mkldnn_reorder_conv2d_weight_self_Tensor(Rcpp::XPtr<torch::Tensor> self, std::vector<int64_t> padding, std::vector<int64_t> stride, std::vector<int64_t> dilation, int64_t groups);
RcppExport SEXP _torch_cpp_torch_namespace_mkldnn_reorder_conv2d_weight_self_Tensor(SEXP selfSEXP, SEXP paddingSEXP, SEXP strideSEXP, SEXP dilationSEXP, SEXP groupsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type padding(paddingSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type stride(strideSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type dilation(dilationSEXP);
    Rcpp::traits::input_parameter< int64_t >::type groups(groupsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_mkldnn_reorder_conv2d_weight_self_Tensor(self, padding, stride, dilation, groups));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_to_mkldnn_backward_grad_Tensor_input_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_to_mkldnn_backward_grad_Tensor_input_Tensor(Rcpp::XPtr<torch::Tensor> grad, Rcpp::XPtr<torch::Tensor> input);
RcppExport SEXP _torch_cpp_torch_namespace_to_mkldnn_backward_grad_Tensor_input_Tensor(SEXP gradSEXP, SEXP inputSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type grad(gradSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type input(inputSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_to_mkldnn_backward_grad_Tensor_input_Tensor(grad, input));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_quantize_per_tensor_self_Tensor_scale_double_zero_point_int64_t_dtype_ScalarType
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_quantize_per_tensor_self_Tensor_scale_double_zero_point_int64_t_dtype_ScalarType(Rcpp::XPtr<torch::Tensor> self, double scale, int64_t zero_point, Rcpp::XPtr<torch::Dtype> dtype);
RcppExport SEXP _torch_cpp_torch_namespace_quantize_per_tensor_self_Tensor_scale_double_zero_point_int64_t_dtype_ScalarType(SEXP selfSEXP, SEXP scaleSEXP, SEXP zero_pointSEXP, SEXP dtypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< double >::type scale(scaleSEXP);
    Rcpp::traits::input_parameter< int64_t >::type zero_point(zero_pointSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Dtype> >::type dtype(dtypeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_quantize_per_tensor_self_Tensor_scale_double_zero_point_int64_t_dtype_ScalarType(self, scale, zero_point, dtype));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_quantize_per_channel_self_Tensor_scales_Tensor_zero_points_Tensor_axis_int64_t_dtype_ScalarType
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_quantize_per_channel_self_Tensor_scales_Tensor_zero_points_Tensor_axis_int64_t_dtype_ScalarType(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> scales, Rcpp::XPtr<torch::Tensor> zero_points, int64_t axis, Rcpp::XPtr<torch::Dtype> dtype);
RcppExport SEXP _torch_cpp_torch_namespace_quantize_per_channel_self_Tensor_scales_Tensor_zero_points_Tensor_axis_int64_t_dtype_ScalarType(SEXP selfSEXP, SEXP scalesSEXP, SEXP zero_pointsSEXP, SEXP axisSEXP, SEXP dtypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type scales(scalesSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type zero_points(zero_pointsSEXP);
    Rcpp::traits::input_parameter< int64_t >::type axis(axisSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Dtype> >::type dtype(dtypeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_quantize_per_channel_self_Tensor_scales_Tensor_zero_points_Tensor_axis_int64_t_dtype_ScalarType(self, scales, zero_points, axis, dtype));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_dequantize_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_dequantize_self_Tensor(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_namespace_dequantize_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_dequantize_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_q_scale_self_Tensor
double cpp_torch_namespace_q_scale_self_Tensor(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_namespace_q_scale_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_q_scale_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_q_zero_point_self_Tensor
int64_t cpp_torch_namespace_q_zero_point_self_Tensor(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_namespace_q_zero_point_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_q_zero_point_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_q_per_channel_scales_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_q_per_channel_scales_self_Tensor(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_namespace_q_per_channel_scales_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_q_per_channel_scales_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_q_per_channel_zero_points_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_q_per_channel_zero_points_self_Tensor(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_namespace_q_per_channel_zero_points_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_q_per_channel_zero_points_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_q_per_channel_axis_self_Tensor
int64_t cpp_torch_namespace_q_per_channel_axis_self_Tensor(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_namespace_q_per_channel_axis_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_q_per_channel_axis_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_int_repr_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_int_repr_self_Tensor(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_namespace_int_repr_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_int_repr_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__make_per_tensor_quantized_tensor_self_Tensor_scale_double_zero_point_int64_t
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace__make_per_tensor_quantized_tensor_self_Tensor_scale_double_zero_point_int64_t(Rcpp::XPtr<torch::Tensor> self, double scale, int64_t zero_point);
RcppExport SEXP _torch_cpp_torch_namespace__make_per_tensor_quantized_tensor_self_Tensor_scale_double_zero_point_int64_t(SEXP selfSEXP, SEXP scaleSEXP, SEXP zero_pointSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< double >::type scale(scaleSEXP);
    Rcpp::traits::input_parameter< int64_t >::type zero_point(zero_pointSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__make_per_tensor_quantized_tensor_self_Tensor_scale_double_zero_point_int64_t(self, scale, zero_point));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__make_per_channel_quantized_tensor_self_Tensor_scale_Tensor_zero_point_Tensor_axis_int64_t
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace__make_per_channel_quantized_tensor_self_Tensor_scale_Tensor_zero_point_Tensor_axis_int64_t(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> scale, Rcpp::XPtr<torch::Tensor> zero_point, int64_t axis);
RcppExport SEXP _torch_cpp_torch_namespace__make_per_channel_quantized_tensor_self_Tensor_scale_Tensor_zero_point_Tensor_axis_int64_t(SEXP selfSEXP, SEXP scaleSEXP, SEXP zero_pointSEXP, SEXP axisSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type scale(scaleSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type zero_point(zero_pointSEXP);
    Rcpp::traits::input_parameter< int64_t >::type axis(axisSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__make_per_channel_quantized_tensor_self_Tensor_scale_Tensor_zero_point_Tensor_axis_int64_t(self, scale, zero_point, axis));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_fake_quantize_per_tensor_affine_self_Tensor_scale_double_zero_point_int64_t_quant_min_int64_t_quant_max_int64_t
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_fake_quantize_per_tensor_affine_self_Tensor_scale_double_zero_point_int64_t_quant_min_int64_t_quant_max_int64_t(Rcpp::XPtr<torch::Tensor> self, double scale, int64_t zero_point, int64_t quant_min, int64_t quant_max);
RcppExport SEXP _torch_cpp_torch_namespace_fake_quantize_per_tensor_affine_self_Tensor_scale_double_zero_point_int64_t_quant_min_int64_t_quant_max_int64_t(SEXP selfSEXP, SEXP scaleSEXP, SEXP zero_pointSEXP, SEXP quant_minSEXP, SEXP quant_maxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< double >::type scale(scaleSEXP);
    Rcpp::traits::input_parameter< int64_t >::type zero_point(zero_pointSEXP);
    Rcpp::traits::input_parameter< int64_t >::type quant_min(quant_minSEXP);
    Rcpp::traits::input_parameter< int64_t >::type quant_max(quant_maxSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_fake_quantize_per_tensor_affine_self_Tensor_scale_double_zero_point_int64_t_quant_min_int64_t_quant_max_int64_t(self, scale, zero_point, quant_min, quant_max));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_fake_quantize_per_tensor_affine_backward_grad_Tensor_self_Tensor_scale_double_zero_point_int64_t_quant_min_int64_t_quant_max_int64_t
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_fake_quantize_per_tensor_affine_backward_grad_Tensor_self_Tensor_scale_double_zero_point_int64_t_quant_min_int64_t_quant_max_int64_t(Rcpp::XPtr<torch::Tensor> grad, Rcpp::XPtr<torch::Tensor> self, double scale, int64_t zero_point, int64_t quant_min, int64_t quant_max);
RcppExport SEXP _torch_cpp_torch_namespace_fake_quantize_per_tensor_affine_backward_grad_Tensor_self_Tensor_scale_double_zero_point_int64_t_quant_min_int64_t_quant_max_int64_t(SEXP gradSEXP, SEXP selfSEXP, SEXP scaleSEXP, SEXP zero_pointSEXP, SEXP quant_minSEXP, SEXP quant_maxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type grad(gradSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< double >::type scale(scaleSEXP);
    Rcpp::traits::input_parameter< int64_t >::type zero_point(zero_pointSEXP);
    Rcpp::traits::input_parameter< int64_t >::type quant_min(quant_minSEXP);
    Rcpp::traits::input_parameter< int64_t >::type quant_max(quant_maxSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_fake_quantize_per_tensor_affine_backward_grad_Tensor_self_Tensor_scale_double_zero_point_int64_t_quant_min_int64_t_quant_max_int64_t(grad, self, scale, zero_point, quant_min, quant_max));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_fake_quantize_per_channel_affine_self_Tensor_scale_Tensor_zero_point_Tensor_axis_int64_t_quant_min_int64_t_quant_max_int64_t
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_fake_quantize_per_channel_affine_self_Tensor_scale_Tensor_zero_point_Tensor_axis_int64_t_quant_min_int64_t_quant_max_int64_t(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> scale, Rcpp::XPtr<torch::Tensor> zero_point, int64_t axis, int64_t quant_min, int64_t quant_max);
RcppExport SEXP _torch_cpp_torch_namespace_fake_quantize_per_channel_affine_self_Tensor_scale_Tensor_zero_point_Tensor_axis_int64_t_quant_min_int64_t_quant_max_int64_t(SEXP selfSEXP, SEXP scaleSEXP, SEXP zero_pointSEXP, SEXP axisSEXP, SEXP quant_minSEXP, SEXP quant_maxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type scale(scaleSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type zero_point(zero_pointSEXP);
    Rcpp::traits::input_parameter< int64_t >::type axis(axisSEXP);
    Rcpp::traits::input_parameter< int64_t >::type quant_min(quant_minSEXP);
    Rcpp::traits::input_parameter< int64_t >::type quant_max(quant_maxSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_fake_quantize_per_channel_affine_self_Tensor_scale_Tensor_zero_point_Tensor_axis_int64_t_quant_min_int64_t_quant_max_int64_t(self, scale, zero_point, axis, quant_min, quant_max));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_fake_quantize_per_channel_affine_backward_grad_Tensor_self_Tensor_scale_Tensor_zero_point_Tensor_axis_int64_t_quant_min_int64_t_quant_max_int64_t
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_fake_quantize_per_channel_affine_backward_grad_Tensor_self_Tensor_scale_Tensor_zero_point_Tensor_axis_int64_t_quant_min_int64_t_quant_max_int64_t(Rcpp::XPtr<torch::Tensor> grad, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> scale, Rcpp::XPtr<torch::Tensor> zero_point, int64_t axis, int64_t quant_min, int64_t quant_max);
RcppExport SEXP _torch_cpp_torch_namespace_fake_quantize_per_channel_affine_backward_grad_Tensor_self_Tensor_scale_Tensor_zero_point_Tensor_axis_int64_t_quant_min_int64_t_quant_max_int64_t(SEXP gradSEXP, SEXP selfSEXP, SEXP scaleSEXP, SEXP zero_pointSEXP, SEXP axisSEXP, SEXP quant_minSEXP, SEXP quant_maxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type grad(gradSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type scale(scaleSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type zero_point(zero_pointSEXP);
    Rcpp::traits::input_parameter< int64_t >::type axis(axisSEXP);
    Rcpp::traits::input_parameter< int64_t >::type quant_min(quant_minSEXP);
    Rcpp::traits::input_parameter< int64_t >::type quant_max(quant_maxSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_fake_quantize_per_channel_affine_backward_grad_Tensor_self_Tensor_scale_Tensor_zero_point_Tensor_axis_int64_t_quant_min_int64_t_quant_max_int64_t(grad, self, scale, zero_point, axis, quant_min, quant_max));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_meshgrid_tensors_TensorList
Rcpp::XPtr<torch::TensorList> cpp_torch_namespace_meshgrid_tensors_TensorList(Rcpp::XPtr<std::vector<torch::Tensor>> tensors);
RcppExport SEXP _torch_cpp_torch_namespace_meshgrid_tensors_TensorList(SEXP tensorsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::vector<torch::Tensor>> >::type tensors(tensorsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_meshgrid_tensors_TensorList(tensors));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_cartesian_prod_tensors_TensorList
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_cartesian_prod_tensors_TensorList(Rcpp::XPtr<std::vector<torch::Tensor>> tensors);
RcppExport SEXP _torch_cpp_torch_namespace_cartesian_prod_tensors_TensorList(SEXP tensorsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::vector<torch::Tensor>> >::type tensors(tensorsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_cartesian_prod_tensors_TensorList(tensors));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_combinations_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_combinations_self_Tensor(Rcpp::XPtr<torch::Tensor> self, int64_t r, bool with_replacement);
RcppExport SEXP _torch_cpp_torch_namespace_combinations_self_Tensor(SEXP selfSEXP, SEXP rSEXP, SEXP with_replacementSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< int64_t >::type r(rSEXP);
    Rcpp::traits::input_parameter< bool >::type with_replacement(with_replacementSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_combinations_self_Tensor(self, r, with_replacement));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_result_type_tensor_Tensor_other_Tensor
Rcpp::XPtr<torch::Dtype> cpp_torch_namespace_result_type_tensor_Tensor_other_Tensor(Rcpp::XPtr<torch::Tensor> tensor, Rcpp::XPtr<torch::Tensor> other);
RcppExport SEXP _torch_cpp_torch_namespace_result_type_tensor_Tensor_other_Tensor(SEXP tensorSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type tensor(tensorSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_result_type_tensor_Tensor_other_Tensor(tensor, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_result_type_tensor_Tensor_other_Scalar
Rcpp::XPtr<torch::Dtype> cpp_torch_namespace_result_type_tensor_Tensor_other_Scalar(Rcpp::XPtr<torch::Tensor> tensor, Rcpp::XPtr<torch::Scalar> other);
RcppExport SEXP _torch_cpp_torch_namespace_result_type_tensor_Tensor_other_Scalar(SEXP tensorSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type tensor(tensorSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_result_type_tensor_Tensor_other_Scalar(tensor, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_result_type_scalar_Scalar_tensor_Tensor
Rcpp::XPtr<torch::Dtype> cpp_torch_namespace_result_type_scalar_Scalar_tensor_Tensor(Rcpp::XPtr<torch::Scalar> scalar, Rcpp::XPtr<torch::Tensor> tensor);
RcppExport SEXP _torch_cpp_torch_namespace_result_type_scalar_Scalar_tensor_Tensor(SEXP scalarSEXP, SEXP tensorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type scalar(scalarSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type tensor(tensorSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_result_type_scalar_Scalar_tensor_Tensor(scalar, tensor));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_result_type_scalar1_Scalar_scalar2_Scalar
Rcpp::XPtr<torch::Dtype> cpp_torch_namespace_result_type_scalar1_Scalar_scalar2_Scalar(Rcpp::XPtr<torch::Scalar> scalar1, Rcpp::XPtr<torch::Scalar> scalar2);
RcppExport SEXP _torch_cpp_torch_namespace_result_type_scalar1_Scalar_scalar2_Scalar(SEXP scalar1SEXP, SEXP scalar2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type scalar1(scalar1SEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type scalar2(scalar2SEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_result_type_scalar1_Scalar_scalar2_Scalar(scalar1, scalar2));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_can_cast_from_ScalarType_to_ScalarType
bool cpp_torch_namespace_can_cast_from_ScalarType_to_ScalarType(Rcpp::XPtr<torch::Dtype> from, Rcpp::XPtr<torch::Dtype> to);
RcppExport SEXP _torch_cpp_torch_namespace_can_cast_from_ScalarType_to_ScalarType(SEXP fromSEXP, SEXP toSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Dtype> >::type from(fromSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Dtype> >::type to(toSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_can_cast_from_ScalarType_to_ScalarType(from, to));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_promote_types_type1_ScalarType_type2_ScalarType
Rcpp::XPtr<torch::Dtype> cpp_torch_namespace_promote_types_type1_ScalarType_type2_ScalarType(Rcpp::XPtr<torch::Dtype> type1, Rcpp::XPtr<torch::Dtype> type2);
RcppExport SEXP _torch_cpp_torch_namespace_promote_types_type1_ScalarType_type2_ScalarType(SEXP type1SEXP, SEXP type2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Dtype> >::type type1(type1SEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Dtype> >::type type2(type2SEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_promote_types_type1_ScalarType_type2_ScalarType(type1, type2));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__local_scalar_dense_self_Tensor
Rcpp::XPtr<torch::Scalar> cpp_torch_namespace__local_scalar_dense_self_Tensor(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_namespace__local_scalar_dense_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__local_scalar_dense_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__thnn_fused_lstm_cell_input_gates_Tensor_hidden_gates_Tensor_cx_Tensor
Rcpp::List cpp_torch_namespace__thnn_fused_lstm_cell_input_gates_Tensor_hidden_gates_Tensor_cx_Tensor(Rcpp::XPtr<torch::Tensor> input_gates, Rcpp::XPtr<torch::Tensor> hidden_gates, Rcpp::XPtr<torch::Tensor> cx, Rcpp::XPtr<torch::Tensor> input_bias, Rcpp::XPtr<torch::Tensor> hidden_bias);
RcppExport SEXP _torch_cpp_torch_namespace__thnn_fused_lstm_cell_input_gates_Tensor_hidden_gates_Tensor_cx_Tensor(SEXP input_gatesSEXP, SEXP hidden_gatesSEXP, SEXP cxSEXP, SEXP input_biasSEXP, SEXP hidden_biasSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type input_gates(input_gatesSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type hidden_gates(hidden_gatesSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type cx(cxSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type input_bias(input_biasSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type hidden_bias(hidden_biasSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__thnn_fused_lstm_cell_input_gates_Tensor_hidden_gates_Tensor_cx_Tensor(input_gates, hidden_gates, cx, input_bias, hidden_bias));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__thnn_fused_lstm_cell_backward_grad_hy_Tensor_grad_cy_Tensor_cx_Tensor_cy_Tensor_workspace_Tensor_has_bias_bool
Rcpp::List cpp_torch_namespace__thnn_fused_lstm_cell_backward_grad_hy_Tensor_grad_cy_Tensor_cx_Tensor_cy_Tensor_workspace_Tensor_has_bias_bool(Rcpp::XPtr<torch::Tensor> grad_hy, Rcpp::XPtr<torch::Tensor> grad_cy, Rcpp::XPtr<torch::Tensor> cx, Rcpp::XPtr<torch::Tensor> cy, Rcpp::XPtr<torch::Tensor> workspace, bool has_bias);
RcppExport SEXP _torch_cpp_torch_namespace__thnn_fused_lstm_cell_backward_grad_hy_Tensor_grad_cy_Tensor_cx_Tensor_cy_Tensor_workspace_Tensor_has_bias_bool(SEXP grad_hySEXP, SEXP grad_cySEXP, SEXP cxSEXP, SEXP cySEXP, SEXP workspaceSEXP, SEXP has_biasSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type grad_hy(grad_hySEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type grad_cy(grad_cySEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type cx(cxSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type cy(cySEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type workspace(workspaceSEXP);
    Rcpp::traits::input_parameter< bool >::type has_bias(has_biasSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__thnn_fused_lstm_cell_backward_grad_hy_Tensor_grad_cy_Tensor_cx_Tensor_cy_Tensor_workspace_Tensor_has_bias_bool(grad_hy, grad_cy, cx, cy, workspace, has_bias));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__thnn_differentiable_lstm_cell_backward_grad_hy_Tensor_grad_cy_Tensor_input_gates_Tensor_hidden_gates_Tensor_input_bias_Tensor_hidden_bias_Tensor_cx_Tensor_cy_Tensor
Rcpp::List cpp_torch_namespace__thnn_differentiable_lstm_cell_backward_grad_hy_Tensor_grad_cy_Tensor_input_gates_Tensor_hidden_gates_Tensor_input_bias_Tensor_hidden_bias_Tensor_cx_Tensor_cy_Tensor(Rcpp::XPtr<torch::Tensor> grad_hy, Rcpp::XPtr<torch::Tensor> grad_cy, Rcpp::XPtr<torch::Tensor> input_gates, Rcpp::XPtr<torch::Tensor> hidden_gates, Rcpp::XPtr<torch::Tensor> input_bias, Rcpp::XPtr<torch::Tensor> hidden_bias, Rcpp::XPtr<torch::Tensor> cx, Rcpp::XPtr<torch::Tensor> cy);
RcppExport SEXP _torch_cpp_torch_namespace__thnn_differentiable_lstm_cell_backward_grad_hy_Tensor_grad_cy_Tensor_input_gates_Tensor_hidden_gates_Tensor_input_bias_Tensor_hidden_bias_Tensor_cx_Tensor_cy_Tensor(SEXP grad_hySEXP, SEXP grad_cySEXP, SEXP input_gatesSEXP, SEXP hidden_gatesSEXP, SEXP input_biasSEXP, SEXP hidden_biasSEXP, SEXP cxSEXP, SEXP cySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type grad_hy(grad_hySEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type grad_cy(grad_cySEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type input_gates(input_gatesSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type hidden_gates(hidden_gatesSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type input_bias(input_biasSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type hidden_bias(hidden_biasSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type cx(cxSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type cy(cySEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__thnn_differentiable_lstm_cell_backward_grad_hy_Tensor_grad_cy_Tensor_input_gates_Tensor_hidden_gates_Tensor_input_bias_Tensor_hidden_bias_Tensor_cx_Tensor_cy_Tensor(grad_hy, grad_cy, input_gates, hidden_gates, input_bias, hidden_bias, cx, cy));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__thnn_fused_gru_cell_input_gates_Tensor_hidden_gates_Tensor_hx_Tensor
Rcpp::List cpp_torch_namespace__thnn_fused_gru_cell_input_gates_Tensor_hidden_gates_Tensor_hx_Tensor(Rcpp::XPtr<torch::Tensor> input_gates, Rcpp::XPtr<torch::Tensor> hidden_gates, Rcpp::XPtr<torch::Tensor> hx, Rcpp::XPtr<torch::Tensor> input_bias, Rcpp::XPtr<torch::Tensor> hidden_bias);
RcppExport SEXP _torch_cpp_torch_namespace__thnn_fused_gru_cell_input_gates_Tensor_hidden_gates_Tensor_hx_Tensor(SEXP input_gatesSEXP, SEXP hidden_gatesSEXP, SEXP hxSEXP, SEXP input_biasSEXP, SEXP hidden_biasSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type input_gates(input_gatesSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type hidden_gates(hidden_gatesSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type hx(hxSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type input_bias(input_biasSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type hidden_bias(hidden_biasSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__thnn_fused_gru_cell_input_gates_Tensor_hidden_gates_Tensor_hx_Tensor(input_gates, hidden_gates, hx, input_bias, hidden_bias));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__thnn_fused_gru_cell_backward_grad_hy_Tensor_workspace_Tensor_has_bias_bool
Rcpp::List cpp_torch_namespace__thnn_fused_gru_cell_backward_grad_hy_Tensor_workspace_Tensor_has_bias_bool(Rcpp::XPtr<torch::Tensor> grad_hy, Rcpp::XPtr<torch::Tensor> workspace, bool has_bias);
RcppExport SEXP _torch_cpp_torch_namespace__thnn_fused_gru_cell_backward_grad_hy_Tensor_workspace_Tensor_has_bias_bool(SEXP grad_hySEXP, SEXP workspaceSEXP, SEXP has_biasSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type grad_hy(grad_hySEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type workspace(workspaceSEXP);
    Rcpp::traits::input_parameter< bool >::type has_bias(has_biasSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__thnn_fused_gru_cell_backward_grad_hy_Tensor_workspace_Tensor_has_bias_bool(grad_hy, workspace, has_bias));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__thnn_differentiable_gru_cell_backward_grad_hy_Tensor_input_gates_Tensor_hidden_gates_Tensor_hx_Tensor_input_bias_Tensor_hidden_bias_Tensor
Rcpp::List cpp_torch_namespace__thnn_differentiable_gru_cell_backward_grad_hy_Tensor_input_gates_Tensor_hidden_gates_Tensor_hx_Tensor_input_bias_Tensor_hidden_bias_Tensor(Rcpp::XPtr<torch::Tensor> grad_hy, Rcpp::XPtr<torch::Tensor> input_gates, Rcpp::XPtr<torch::Tensor> hidden_gates, Rcpp::XPtr<torch::Tensor> hx, Rcpp::XPtr<torch::Tensor> input_bias, Rcpp::XPtr<torch::Tensor> hidden_bias);
RcppExport SEXP _torch_cpp_torch_namespace__thnn_differentiable_gru_cell_backward_grad_hy_Tensor_input_gates_Tensor_hidden_gates_Tensor_hx_Tensor_input_bias_Tensor_hidden_bias_Tensor(SEXP grad_hySEXP, SEXP input_gatesSEXP, SEXP hidden_gatesSEXP, SEXP hxSEXP, SEXP input_biasSEXP, SEXP hidden_biasSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type grad_hy(grad_hySEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type input_gates(input_gatesSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type hidden_gates(hidden_gatesSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type hx(hxSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type input_bias(input_biasSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type hidden_bias(hidden_biasSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__thnn_differentiable_gru_cell_backward_grad_hy_Tensor_input_gates_Tensor_hidden_gates_Tensor_hx_Tensor_input_bias_Tensor_hidden_bias_Tensor(grad_hy, input_gates, hidden_gates, hx, input_bias, hidden_bias));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_lstm_input_Tensor_hx_TensorList_params_TensorList_has_biases_bool_num_layers_int64_t_dropout_double_train_bool_bidirectional_bool_batch_first_bool
Rcpp::List cpp_torch_namespace_lstm_input_Tensor_hx_TensorList_params_TensorList_has_biases_bool_num_layers_int64_t_dropout_double_train_bool_bidirectional_bool_batch_first_bool(Rcpp::XPtr<torch::Tensor> input, Rcpp::XPtr<std::vector<torch::Tensor>> hx, Rcpp::XPtr<std::vector<torch::Tensor>> params, bool has_biases, int64_t num_layers, double dropout, bool train, bool bidirectional, bool batch_first);
RcppExport SEXP _torch_cpp_torch_namespace_lstm_input_Tensor_hx_TensorList_params_TensorList_has_biases_bool_num_layers_int64_t_dropout_double_train_bool_bidirectional_bool_batch_first_bool(SEXP inputSEXP, SEXP hxSEXP, SEXP paramsSEXP, SEXP has_biasesSEXP, SEXP num_layersSEXP, SEXP dropoutSEXP, SEXP trainSEXP, SEXP bidirectionalSEXP, SEXP batch_firstSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type input(inputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::vector<torch::Tensor>> >::type hx(hxSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::vector<torch::Tensor>> >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< bool >::type has_biases(has_biasesSEXP);
    Rcpp::traits::input_parameter< int64_t >::type num_layers(num_layersSEXP);
    Rcpp::traits::input_parameter< double >::type dropout(dropoutSEXP);
    Rcpp::traits::input_parameter< bool >::type train(trainSEXP);
    Rcpp::traits::input_parameter< bool >::type bidirectional(bidirectionalSEXP);
    Rcpp::traits::input_parameter< bool >::type batch_first(batch_firstSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_lstm_input_Tensor_hx_TensorList_params_TensorList_has_biases_bool_num_layers_int64_t_dropout_double_train_bool_bidirectional_bool_batch_first_bool(input, hx, params, has_biases, num_layers, dropout, train, bidirectional, batch_first));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_lstm_data_Tensor_batch_sizes_Tensor_hx_TensorList_params_TensorList_has_biases_bool_num_layers_int64_t_dropout_double_train_bool_bidirectional_bool
Rcpp::List cpp_torch_namespace_lstm_data_Tensor_batch_sizes_Tensor_hx_TensorList_params_TensorList_has_biases_bool_num_layers_int64_t_dropout_double_train_bool_bidirectional_bool(Rcpp::XPtr<torch::Tensor> data, Rcpp::XPtr<torch::Tensor> batch_sizes, Rcpp::XPtr<std::vector<torch::Tensor>> hx, Rcpp::XPtr<std::vector<torch::Tensor>> params, bool has_biases, int64_t num_layers, double dropout, bool train, bool bidirectional);
RcppExport SEXP _torch_cpp_torch_namespace_lstm_data_Tensor_batch_sizes_Tensor_hx_TensorList_params_TensorList_has_biases_bool_num_layers_int64_t_dropout_double_train_bool_bidirectional_bool(SEXP dataSEXP, SEXP batch_sizesSEXP, SEXP hxSEXP, SEXP paramsSEXP, SEXP has_biasesSEXP, SEXP num_layersSEXP, SEXP dropoutSEXP, SEXP trainSEXP, SEXP bidirectionalSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type data(dataSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type batch_sizes(batch_sizesSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::vector<torch::Tensor>> >::type hx(hxSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::vector<torch::Tensor>> >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< bool >::type has_biases(has_biasesSEXP);
    Rcpp::traits::input_parameter< int64_t >::type num_layers(num_layersSEXP);
    Rcpp::traits::input_parameter< double >::type dropout(dropoutSEXP);
    Rcpp::traits::input_parameter< bool >::type train(trainSEXP);
    Rcpp::traits::input_parameter< bool >::type bidirectional(bidirectionalSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_lstm_data_Tensor_batch_sizes_Tensor_hx_TensorList_params_TensorList_has_biases_bool_num_layers_int64_t_dropout_double_train_bool_bidirectional_bool(data, batch_sizes, hx, params, has_biases, num_layers, dropout, train, bidirectional));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_gru_input_Tensor_hx_Tensor_params_TensorList_has_biases_bool_num_layers_int64_t_dropout_double_train_bool_bidirectional_bool_batch_first_bool
Rcpp::List cpp_torch_namespace_gru_input_Tensor_hx_Tensor_params_TensorList_has_biases_bool_num_layers_int64_t_dropout_double_train_bool_bidirectional_bool_batch_first_bool(Rcpp::XPtr<torch::Tensor> input, Rcpp::XPtr<torch::Tensor> hx, Rcpp::XPtr<std::vector<torch::Tensor>> params, bool has_biases, int64_t num_layers, double dropout, bool train, bool bidirectional, bool batch_first);
RcppExport SEXP _torch_cpp_torch_namespace_gru_input_Tensor_hx_Tensor_params_TensorList_has_biases_bool_num_layers_int64_t_dropout_double_train_bool_bidirectional_bool_batch_first_bool(SEXP inputSEXP, SEXP hxSEXP, SEXP paramsSEXP, SEXP has_biasesSEXP, SEXP num_layersSEXP, SEXP dropoutSEXP, SEXP trainSEXP, SEXP bidirectionalSEXP, SEXP batch_firstSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type input(inputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type hx(hxSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::vector<torch::Tensor>> >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< bool >::type has_biases(has_biasesSEXP);
    Rcpp::traits::input_parameter< int64_t >::type num_layers(num_layersSEXP);
    Rcpp::traits::input_parameter< double >::type dropout(dropoutSEXP);
    Rcpp::traits::input_parameter< bool >::type train(trainSEXP);
    Rcpp::traits::input_parameter< bool >::type bidirectional(bidirectionalSEXP);
    Rcpp::traits::input_parameter< bool >::type batch_first(batch_firstSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_gru_input_Tensor_hx_Tensor_params_TensorList_has_biases_bool_num_layers_int64_t_dropout_double_train_bool_bidirectional_bool_batch_first_bool(input, hx, params, has_biases, num_layers, dropout, train, bidirectional, batch_first));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_gru_data_Tensor_batch_sizes_Tensor_hx_Tensor_params_TensorList_has_biases_bool_num_layers_int64_t_dropout_double_train_bool_bidirectional_bool
Rcpp::List cpp_torch_namespace_gru_data_Tensor_batch_sizes_Tensor_hx_Tensor_params_TensorList_has_biases_bool_num_layers_int64_t_dropout_double_train_bool_bidirectional_bool(Rcpp::XPtr<torch::Tensor> data, Rcpp::XPtr<torch::Tensor> batch_sizes, Rcpp::XPtr<torch::Tensor> hx, Rcpp::XPtr<std::vector<torch::Tensor>> params, bool has_biases, int64_t num_layers, double dropout, bool train, bool bidirectional);
RcppExport SEXP _torch_cpp_torch_namespace_gru_data_Tensor_batch_sizes_Tensor_hx_Tensor_params_TensorList_has_biases_bool_num_layers_int64_t_dropout_double_train_bool_bidirectional_bool(SEXP dataSEXP, SEXP batch_sizesSEXP, SEXP hxSEXP, SEXP paramsSEXP, SEXP has_biasesSEXP, SEXP num_layersSEXP, SEXP dropoutSEXP, SEXP trainSEXP, SEXP bidirectionalSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type data(dataSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type batch_sizes(batch_sizesSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type hx(hxSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::vector<torch::Tensor>> >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< bool >::type has_biases(has_biasesSEXP);
    Rcpp::traits::input_parameter< int64_t >::type num_layers(num_layersSEXP);
    Rcpp::traits::input_parameter< double >::type dropout(dropoutSEXP);
    Rcpp::traits::input_parameter< bool >::type train(trainSEXP);
    Rcpp::traits::input_parameter< bool >::type bidirectional(bidirectionalSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_gru_data_Tensor_batch_sizes_Tensor_hx_Tensor_params_TensorList_has_biases_bool_num_layers_int64_t_dropout_double_train_bool_bidirectional_bool(data, batch_sizes, hx, params, has_biases, num_layers, dropout, train, bidirectional));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_rnn_tanh_input_Tensor_hx_Tensor_params_TensorList_has_biases_bool_num_layers_int64_t_dropout_double_train_bool_bidirectional_bool_batch_first_bool
Rcpp::List cpp_torch_namespace_rnn_tanh_input_Tensor_hx_Tensor_params_TensorList_has_biases_bool_num_layers_int64_t_dropout_double_train_bool_bidirectional_bool_batch_first_bool(Rcpp::XPtr<torch::Tensor> input, Rcpp::XPtr<torch::Tensor> hx, Rcpp::XPtr<std::vector<torch::Tensor>> params, bool has_biases, int64_t num_layers, double dropout, bool train, bool bidirectional, bool batch_first);
RcppExport SEXP _torch_cpp_torch_namespace_rnn_tanh_input_Tensor_hx_Tensor_params_TensorList_has_biases_bool_num_layers_int64_t_dropout_double_train_bool_bidirectional_bool_batch_first_bool(SEXP inputSEXP, SEXP hxSEXP, SEXP paramsSEXP, SEXP has_biasesSEXP, SEXP num_layersSEXP, SEXP dropoutSEXP, SEXP trainSEXP, SEXP bidirectionalSEXP, SEXP batch_firstSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type input(inputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type hx(hxSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::vector<torch::Tensor>> >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< bool >::type has_biases(has_biasesSEXP);
    Rcpp::traits::input_parameter< int64_t >::type num_layers(num_layersSEXP);
    Rcpp::traits::input_parameter< double >::type dropout(dropoutSEXP);
    Rcpp::traits::input_parameter< bool >::type train(trainSEXP);
    Rcpp::traits::input_parameter< bool >::type bidirectional(bidirectionalSEXP);
    Rcpp::traits::input_parameter< bool >::type batch_first(batch_firstSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_rnn_tanh_input_Tensor_hx_Tensor_params_TensorList_has_biases_bool_num_layers_int64_t_dropout_double_train_bool_bidirectional_bool_batch_first_bool(input, hx, params, has_biases, num_layers, dropout, train, bidirectional, batch_first));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_rnn_tanh_data_Tensor_batch_sizes_Tensor_hx_Tensor_params_TensorList_has_biases_bool_num_layers_int64_t_dropout_double_train_bool_bidirectional_bool
Rcpp::List cpp_torch_namespace_rnn_tanh_data_Tensor_batch_sizes_Tensor_hx_Tensor_params_TensorList_has_biases_bool_num_layers_int64_t_dropout_double_train_bool_bidirectional_bool(Rcpp::XPtr<torch::Tensor> data, Rcpp::XPtr<torch::Tensor> batch_sizes, Rcpp::XPtr<torch::Tensor> hx, Rcpp::XPtr<std::vector<torch::Tensor>> params, bool has_biases, int64_t num_layers, double dropout, bool train, bool bidirectional);
RcppExport SEXP _torch_cpp_torch_namespace_rnn_tanh_data_Tensor_batch_sizes_Tensor_hx_Tensor_params_TensorList_has_biases_bool_num_layers_int64_t_dropout_double_train_bool_bidirectional_bool(SEXP dataSEXP, SEXP batch_sizesSEXP, SEXP hxSEXP, SEXP paramsSEXP, SEXP has_biasesSEXP, SEXP num_layersSEXP, SEXP dropoutSEXP, SEXP trainSEXP, SEXP bidirectionalSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type data(dataSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type batch_sizes(batch_sizesSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type hx(hxSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::vector<torch::Tensor>> >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< bool >::type has_biases(has_biasesSEXP);
    Rcpp::traits::input_parameter< int64_t >::type num_layers(num_layersSEXP);
    Rcpp::traits::input_parameter< double >::type dropout(dropoutSEXP);
    Rcpp::traits::input_parameter< bool >::type train(trainSEXP);
    Rcpp::traits::input_parameter< bool >::type bidirectional(bidirectionalSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_rnn_tanh_data_Tensor_batch_sizes_Tensor_hx_Tensor_params_TensorList_has_biases_bool_num_layers_int64_t_dropout_double_train_bool_bidirectional_bool(data, batch_sizes, hx, params, has_biases, num_layers, dropout, train, bidirectional));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_rnn_relu_input_Tensor_hx_Tensor_params_TensorList_has_biases_bool_num_layers_int64_t_dropout_double_train_bool_bidirectional_bool_batch_first_bool
Rcpp::List cpp_torch_namespace_rnn_relu_input_Tensor_hx_Tensor_params_TensorList_has_biases_bool_num_layers_int64_t_dropout_double_train_bool_bidirectional_bool_batch_first_bool(Rcpp::XPtr<torch::Tensor> input, Rcpp::XPtr<torch::Tensor> hx, Rcpp::XPtr<std::vector<torch::Tensor>> params, bool has_biases, int64_t num_layers, double dropout, bool train, bool bidirectional, bool batch_first);
RcppExport SEXP _torch_cpp_torch_namespace_rnn_relu_input_Tensor_hx_Tensor_params_TensorList_has_biases_bool_num_layers_int64_t_dropout_double_train_bool_bidirectional_bool_batch_first_bool(SEXP inputSEXP, SEXP hxSEXP, SEXP paramsSEXP, SEXP has_biasesSEXP, SEXP num_layersSEXP, SEXP dropoutSEXP, SEXP trainSEXP, SEXP bidirectionalSEXP, SEXP batch_firstSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type input(inputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type hx(hxSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::vector<torch::Tensor>> >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< bool >::type has_biases(has_biasesSEXP);
    Rcpp::traits::input_parameter< int64_t >::type num_layers(num_layersSEXP);
    Rcpp::traits::input_parameter< double >::type dropout(dropoutSEXP);
    Rcpp::traits::input_parameter< bool >::type train(trainSEXP);
    Rcpp::traits::input_parameter< bool >::type bidirectional(bidirectionalSEXP);
    Rcpp::traits::input_parameter< bool >::type batch_first(batch_firstSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_rnn_relu_input_Tensor_hx_Tensor_params_TensorList_has_biases_bool_num_layers_int64_t_dropout_double_train_bool_bidirectional_bool_batch_first_bool(input, hx, params, has_biases, num_layers, dropout, train, bidirectional, batch_first));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_rnn_relu_data_Tensor_batch_sizes_Tensor_hx_Tensor_params_TensorList_has_biases_bool_num_layers_int64_t_dropout_double_train_bool_bidirectional_bool
Rcpp::List cpp_torch_namespace_rnn_relu_data_Tensor_batch_sizes_Tensor_hx_Tensor_params_TensorList_has_biases_bool_num_layers_int64_t_dropout_double_train_bool_bidirectional_bool(Rcpp::XPtr<torch::Tensor> data, Rcpp::XPtr<torch::Tensor> batch_sizes, Rcpp::XPtr<torch::Tensor> hx, Rcpp::XPtr<std::vector<torch::Tensor>> params, bool has_biases, int64_t num_layers, double dropout, bool train, bool bidirectional);
RcppExport SEXP _torch_cpp_torch_namespace_rnn_relu_data_Tensor_batch_sizes_Tensor_hx_Tensor_params_TensorList_has_biases_bool_num_layers_int64_t_dropout_double_train_bool_bidirectional_bool(SEXP dataSEXP, SEXP batch_sizesSEXP, SEXP hxSEXP, SEXP paramsSEXP, SEXP has_biasesSEXP, SEXP num_layersSEXP, SEXP dropoutSEXP, SEXP trainSEXP, SEXP bidirectionalSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type data(dataSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type batch_sizes(batch_sizesSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type hx(hxSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::vector<torch::Tensor>> >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< bool >::type has_biases(has_biasesSEXP);
    Rcpp::traits::input_parameter< int64_t >::type num_layers(num_layersSEXP);
    Rcpp::traits::input_parameter< double >::type dropout(dropoutSEXP);
    Rcpp::traits::input_parameter< bool >::type train(trainSEXP);
    Rcpp::traits::input_parameter< bool >::type bidirectional(bidirectionalSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_rnn_relu_data_Tensor_batch_sizes_Tensor_hx_Tensor_params_TensorList_has_biases_bool_num_layers_int64_t_dropout_double_train_bool_bidirectional_bool(data, batch_sizes, hx, params, has_biases, num_layers, dropout, train, bidirectional));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_lstm_cell_input_Tensor_hx_TensorList_w_ih_Tensor_w_hh_Tensor
Rcpp::List cpp_torch_namespace_lstm_cell_input_Tensor_hx_TensorList_w_ih_Tensor_w_hh_Tensor(Rcpp::XPtr<torch::Tensor> input, Rcpp::XPtr<std::vector<torch::Tensor>> hx, Rcpp::XPtr<torch::Tensor> w_ih, Rcpp::XPtr<torch::Tensor> w_hh, Rcpp::XPtr<torch::Tensor> b_ih, Rcpp::XPtr<torch::Tensor> b_hh);
RcppExport SEXP _torch_cpp_torch_namespace_lstm_cell_input_Tensor_hx_TensorList_w_ih_Tensor_w_hh_Tensor(SEXP inputSEXP, SEXP hxSEXP, SEXP w_ihSEXP, SEXP w_hhSEXP, SEXP b_ihSEXP, SEXP b_hhSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type input(inputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::vector<torch::Tensor>> >::type hx(hxSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type w_ih(w_ihSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type w_hh(w_hhSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type b_ih(b_ihSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type b_hh(b_hhSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_lstm_cell_input_Tensor_hx_TensorList_w_ih_Tensor_w_hh_Tensor(input, hx, w_ih, w_hh, b_ih, b_hh));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_gru_cell_input_Tensor_hx_Tensor_w_ih_Tensor_w_hh_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_gru_cell_input_Tensor_hx_Tensor_w_ih_Tensor_w_hh_Tensor(Rcpp::XPtr<torch::Tensor> input, Rcpp::XPtr<torch::Tensor> hx, Rcpp::XPtr<torch::Tensor> w_ih, Rcpp::XPtr<torch::Tensor> w_hh, Rcpp::XPtr<torch::Tensor> b_ih, Rcpp::XPtr<torch::Tensor> b_hh);
RcppExport SEXP _torch_cpp_torch_namespace_gru_cell_input_Tensor_hx_Tensor_w_ih_Tensor_w_hh_Tensor(SEXP inputSEXP, SEXP hxSEXP, SEXP w_ihSEXP, SEXP w_hhSEXP, SEXP b_ihSEXP, SEXP b_hhSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type input(inputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type hx(hxSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type w_ih(w_ihSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type w_hh(w_hhSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type b_ih(b_ihSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type b_hh(b_hhSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_gru_cell_input_Tensor_hx_Tensor_w_ih_Tensor_w_hh_Tensor(input, hx, w_ih, w_hh, b_ih, b_hh));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_rnn_tanh_cell_input_Tensor_hx_Tensor_w_ih_Tensor_w_hh_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_rnn_tanh_cell_input_Tensor_hx_Tensor_w_ih_Tensor_w_hh_Tensor(Rcpp::XPtr<torch::Tensor> input, Rcpp::XPtr<torch::Tensor> hx, Rcpp::XPtr<torch::Tensor> w_ih, Rcpp::XPtr<torch::Tensor> w_hh, Rcpp::XPtr<torch::Tensor> b_ih, Rcpp::XPtr<torch::Tensor> b_hh);
RcppExport SEXP _torch_cpp_torch_namespace_rnn_tanh_cell_input_Tensor_hx_Tensor_w_ih_Tensor_w_hh_Tensor(SEXP inputSEXP, SEXP hxSEXP, SEXP w_ihSEXP, SEXP w_hhSEXP, SEXP b_ihSEXP, SEXP b_hhSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type input(inputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type hx(hxSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type w_ih(w_ihSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type w_hh(w_hhSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type b_ih(b_ihSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type b_hh(b_hhSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_rnn_tanh_cell_input_Tensor_hx_Tensor_w_ih_Tensor_w_hh_Tensor(input, hx, w_ih, w_hh, b_ih, b_hh));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_rnn_relu_cell_input_Tensor_hx_Tensor_w_ih_Tensor_w_hh_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_rnn_relu_cell_input_Tensor_hx_Tensor_w_ih_Tensor_w_hh_Tensor(Rcpp::XPtr<torch::Tensor> input, Rcpp::XPtr<torch::Tensor> hx, Rcpp::XPtr<torch::Tensor> w_ih, Rcpp::XPtr<torch::Tensor> w_hh, Rcpp::XPtr<torch::Tensor> b_ih, Rcpp::XPtr<torch::Tensor> b_hh);
RcppExport SEXP _torch_cpp_torch_namespace_rnn_relu_cell_input_Tensor_hx_Tensor_w_ih_Tensor_w_hh_Tensor(SEXP inputSEXP, SEXP hxSEXP, SEXP w_ihSEXP, SEXP w_hhSEXP, SEXP b_ihSEXP, SEXP b_hhSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type input(inputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type hx(hxSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type w_ih(w_ihSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type w_hh(w_hhSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type b_ih(b_ihSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type b_hh(b_hhSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_rnn_relu_cell_input_Tensor_hx_Tensor_w_ih_Tensor_w_hh_Tensor(input, hx, w_ih, w_hh, b_ih, b_hh));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_quantized_lstm_input_Tensor_hx_TensorList_params_TensorList_has_biases_bool_num_layers_int64_t_dropout_double_train_bool_bidirectional_bool_batch_first_bool
Rcpp::List cpp_torch_namespace_quantized_lstm_input_Tensor_hx_TensorList_params_TensorList_has_biases_bool_num_layers_int64_t_dropout_double_train_bool_bidirectional_bool_batch_first_bool(Rcpp::XPtr<torch::Tensor> input, Rcpp::XPtr<std::vector<torch::Tensor>> hx, Rcpp::XPtr<std::vector<torch::Tensor>> params, bool has_biases, int64_t num_layers, double dropout, bool train, bool bidirectional, bool batch_first, Rcpp::XPtr<torch::Dtype> dtype, bool use_dynamic);
RcppExport SEXP _torch_cpp_torch_namespace_quantized_lstm_input_Tensor_hx_TensorList_params_TensorList_has_biases_bool_num_layers_int64_t_dropout_double_train_bool_bidirectional_bool_batch_first_bool(SEXP inputSEXP, SEXP hxSEXP, SEXP paramsSEXP, SEXP has_biasesSEXP, SEXP num_layersSEXP, SEXP dropoutSEXP, SEXP trainSEXP, SEXP bidirectionalSEXP, SEXP batch_firstSEXP, SEXP dtypeSEXP, SEXP use_dynamicSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type input(inputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::vector<torch::Tensor>> >::type hx(hxSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::vector<torch::Tensor>> >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< bool >::type has_biases(has_biasesSEXP);
    Rcpp::traits::input_parameter< int64_t >::type num_layers(num_layersSEXP);
    Rcpp::traits::input_parameter< double >::type dropout(dropoutSEXP);
    Rcpp::traits::input_parameter< bool >::type train(trainSEXP);
    Rcpp::traits::input_parameter< bool >::type bidirectional(bidirectionalSEXP);
    Rcpp::traits::input_parameter< bool >::type batch_first(batch_firstSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Dtype> >::type dtype(dtypeSEXP);
    Rcpp::traits::input_parameter< bool >::type use_dynamic(use_dynamicSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_quantized_lstm_input_Tensor_hx_TensorList_params_TensorList_has_biases_bool_num_layers_int64_t_dropout_double_train_bool_bidirectional_bool_batch_first_bool(input, hx, params, has_biases, num_layers, dropout, train, bidirectional, batch_first, dtype, use_dynamic));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_quantized_lstm_data_Tensor_batch_sizes_Tensor_hx_TensorList_params_TensorList_has_biases_bool_num_layers_int64_t_dropout_double_train_bool_bidirectional_bool
Rcpp::List cpp_torch_namespace_quantized_lstm_data_Tensor_batch_sizes_Tensor_hx_TensorList_params_TensorList_has_biases_bool_num_layers_int64_t_dropout_double_train_bool_bidirectional_bool(Rcpp::XPtr<torch::Tensor> data, Rcpp::XPtr<torch::Tensor> batch_sizes, Rcpp::XPtr<std::vector<torch::Tensor>> hx, Rcpp::XPtr<std::vector<torch::Tensor>> params, bool has_biases, int64_t num_layers, double dropout, bool train, bool bidirectional, Rcpp::XPtr<torch::Dtype> dtype, bool use_dynamic);
RcppExport SEXP _torch_cpp_torch_namespace_quantized_lstm_data_Tensor_batch_sizes_Tensor_hx_TensorList_params_TensorList_has_biases_bool_num_layers_int64_t_dropout_double_train_bool_bidirectional_bool(SEXP dataSEXP, SEXP batch_sizesSEXP, SEXP hxSEXP, SEXP paramsSEXP, SEXP has_biasesSEXP, SEXP num_layersSEXP, SEXP dropoutSEXP, SEXP trainSEXP, SEXP bidirectionalSEXP, SEXP dtypeSEXP, SEXP use_dynamicSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type data(dataSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type batch_sizes(batch_sizesSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::vector<torch::Tensor>> >::type hx(hxSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::vector<torch::Tensor>> >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< bool >::type has_biases(has_biasesSEXP);
    Rcpp::traits::input_parameter< int64_t >::type num_layers(num_layersSEXP);
    Rcpp::traits::input_parameter< double >::type dropout(dropoutSEXP);
    Rcpp::traits::input_parameter< bool >::type train(trainSEXP);
    Rcpp::traits::input_parameter< bool >::type bidirectional(bidirectionalSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Dtype> >::type dtype(dtypeSEXP);
    Rcpp::traits::input_parameter< bool >::type use_dynamic(use_dynamicSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_quantized_lstm_data_Tensor_batch_sizes_Tensor_hx_TensorList_params_TensorList_has_biases_bool_num_layers_int64_t_dropout_double_train_bool_bidirectional_bool(data, batch_sizes, hx, params, has_biases, num_layers, dropout, train, bidirectional, dtype, use_dynamic));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_quantized_gru_input_Tensor_hx_Tensor_params_TensorList_has_biases_bool_num_layers_int64_t_dropout_double_train_bool_bidirectional_bool_batch_first_bool
Rcpp::List cpp_torch_namespace_quantized_gru_input_Tensor_hx_Tensor_params_TensorList_has_biases_bool_num_layers_int64_t_dropout_double_train_bool_bidirectional_bool_batch_first_bool(Rcpp::XPtr<torch::Tensor> input, Rcpp::XPtr<torch::Tensor> hx, Rcpp::XPtr<std::vector<torch::Tensor>> params, bool has_biases, int64_t num_layers, double dropout, bool train, bool bidirectional, bool batch_first);
RcppExport SEXP _torch_cpp_torch_namespace_quantized_gru_input_Tensor_hx_Tensor_params_TensorList_has_biases_bool_num_layers_int64_t_dropout_double_train_bool_bidirectional_bool_batch_first_bool(SEXP inputSEXP, SEXP hxSEXP, SEXP paramsSEXP, SEXP has_biasesSEXP, SEXP num_layersSEXP, SEXP dropoutSEXP, SEXP trainSEXP, SEXP bidirectionalSEXP, SEXP batch_firstSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type input(inputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type hx(hxSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::vector<torch::Tensor>> >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< bool >::type has_biases(has_biasesSEXP);
    Rcpp::traits::input_parameter< int64_t >::type num_layers(num_layersSEXP);
    Rcpp::traits::input_parameter< double >::type dropout(dropoutSEXP);
    Rcpp::traits::input_parameter< bool >::type train(trainSEXP);
    Rcpp::traits::input_parameter< bool >::type bidirectional(bidirectionalSEXP);
    Rcpp::traits::input_parameter< bool >::type batch_first(batch_firstSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_quantized_gru_input_Tensor_hx_Tensor_params_TensorList_has_biases_bool_num_layers_int64_t_dropout_double_train_bool_bidirectional_bool_batch_first_bool(input, hx, params, has_biases, num_layers, dropout, train, bidirectional, batch_first));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_quantized_gru_data_Tensor_batch_sizes_Tensor_hx_Tensor_params_TensorList_has_biases_bool_num_layers_int64_t_dropout_double_train_bool_bidirectional_bool
Rcpp::List cpp_torch_namespace_quantized_gru_data_Tensor_batch_sizes_Tensor_hx_Tensor_params_TensorList_has_biases_bool_num_layers_int64_t_dropout_double_train_bool_bidirectional_bool(Rcpp::XPtr<torch::Tensor> data, Rcpp::XPtr<torch::Tensor> batch_sizes, Rcpp::XPtr<torch::Tensor> hx, Rcpp::XPtr<std::vector<torch::Tensor>> params, bool has_biases, int64_t num_layers, double dropout, bool train, bool bidirectional);
RcppExport SEXP _torch_cpp_torch_namespace_quantized_gru_data_Tensor_batch_sizes_Tensor_hx_Tensor_params_TensorList_has_biases_bool_num_layers_int64_t_dropout_double_train_bool_bidirectional_bool(SEXP dataSEXP, SEXP batch_sizesSEXP, SEXP hxSEXP, SEXP paramsSEXP, SEXP has_biasesSEXP, SEXP num_layersSEXP, SEXP dropoutSEXP, SEXP trainSEXP, SEXP bidirectionalSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type data(dataSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type batch_sizes(batch_sizesSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type hx(hxSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::vector<torch::Tensor>> >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< bool >::type has_biases(has_biasesSEXP);
    Rcpp::traits::input_parameter< int64_t >::type num_layers(num_layersSEXP);
    Rcpp::traits::input_parameter< double >::type dropout(dropoutSEXP);
    Rcpp::traits::input_parameter< bool >::type train(trainSEXP);
    Rcpp::traits::input_parameter< bool >::type bidirectional(bidirectionalSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_quantized_gru_data_Tensor_batch_sizes_Tensor_hx_Tensor_params_TensorList_has_biases_bool_num_layers_int64_t_dropout_double_train_bool_bidirectional_bool(data, batch_sizes, hx, params, has_biases, num_layers, dropout, train, bidirectional));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_quantized_lstm_cell_input_Tensor_hx_TensorList_w_ih_Tensor_w_hh_Tensor_b_ih_Tensor_b_hh_Tensor_packed_ih_Tensor_packed_hh_Tensor_col_offsets_ih_Tensor_col_offsets_hh_Tensor_scale_ih_Scalar_scale_hh_Scalar_zero_point_ih_Scalar_zero_point_hh_Scalar
Rcpp::List cpp_torch_namespace_quantized_lstm_cell_input_Tensor_hx_TensorList_w_ih_Tensor_w_hh_Tensor_b_ih_Tensor_b_hh_Tensor_packed_ih_Tensor_packed_hh_Tensor_col_offsets_ih_Tensor_col_offsets_hh_Tensor_scale_ih_Scalar_scale_hh_Scalar_zero_point_ih_Scalar_zero_point_hh_Scalar(Rcpp::XPtr<torch::Tensor> input, Rcpp::XPtr<std::vector<torch::Tensor>> hx, Rcpp::XPtr<torch::Tensor> w_ih, Rcpp::XPtr<torch::Tensor> w_hh, Rcpp::XPtr<torch::Tensor> b_ih, Rcpp::XPtr<torch::Tensor> b_hh, Rcpp::XPtr<torch::Tensor> packed_ih, Rcpp::XPtr<torch::Tensor> packed_hh, Rcpp::XPtr<torch::Tensor> col_offsets_ih, Rcpp::XPtr<torch::Tensor> col_offsets_hh, Rcpp::XPtr<torch::Scalar> scale_ih, Rcpp::XPtr<torch::Scalar> scale_hh, Rcpp::XPtr<torch::Scalar> zero_point_ih, Rcpp::XPtr<torch::Scalar> zero_point_hh);
RcppExport SEXP _torch_cpp_torch_namespace_quantized_lstm_cell_input_Tensor_hx_TensorList_w_ih_Tensor_w_hh_Tensor_b_ih_Tensor_b_hh_Tensor_packed_ih_Tensor_packed_hh_Tensor_col_offsets_ih_Tensor_col_offsets_hh_Tensor_scale_ih_Scalar_scale_hh_Scalar_zero_point_ih_Scalar_zero_point_hh_Scalar(SEXP inputSEXP, SEXP hxSEXP, SEXP w_ihSEXP, SEXP w_hhSEXP, SEXP b_ihSEXP, SEXP b_hhSEXP, SEXP packed_ihSEXP, SEXP packed_hhSEXP, SEXP col_offsets_ihSEXP, SEXP col_offsets_hhSEXP, SEXP scale_ihSEXP, SEXP scale_hhSEXP, SEXP zero_point_ihSEXP, SEXP zero_point_hhSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type input(inputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::vector<torch::Tensor>> >::type hx(hxSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type w_ih(w_ihSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type w_hh(w_hhSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type b_ih(b_ihSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type b_hh(b_hhSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type packed_ih(packed_ihSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type packed_hh(packed_hhSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type col_offsets_ih(col_offsets_ihSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type col_offsets_hh(col_offsets_hhSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type scale_ih(scale_ihSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type scale_hh(scale_hhSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type zero_point_ih(zero_point_ihSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type zero_point_hh(zero_point_hhSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_quantized_lstm_cell_input_Tensor_hx_TensorList_w_ih_Tensor_w_hh_Tensor_b_ih_Tensor_b_hh_Tensor_packed_ih_Tensor_packed_hh_Tensor_col_offsets_ih_Tensor_col_offsets_hh_Tensor_scale_ih_Scalar_scale_hh_Scalar_zero_point_ih_Scalar_zero_point_hh_Scalar(input, hx, w_ih, w_hh, b_ih, b_hh, packed_ih, packed_hh, col_offsets_ih, col_offsets_hh, scale_ih, scale_hh, zero_point_ih, zero_point_hh));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_quantized_gru_cell_input_Tensor_hx_Tensor_w_ih_Tensor_w_hh_Tensor_b_ih_Tensor_b_hh_Tensor_packed_ih_Tensor_packed_hh_Tensor_col_offsets_ih_Tensor_col_offsets_hh_Tensor_scale_ih_Scalar_scale_hh_Scalar_zero_point_ih_Scalar_zero_point_hh_Scalar
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_quantized_gru_cell_input_Tensor_hx_Tensor_w_ih_Tensor_w_hh_Tensor_b_ih_Tensor_b_hh_Tensor_packed_ih_Tensor_packed_hh_Tensor_col_offsets_ih_Tensor_col_offsets_hh_Tensor_scale_ih_Scalar_scale_hh_Scalar_zero_point_ih_Scalar_zero_point_hh_Scalar(Rcpp::XPtr<torch::Tensor> input, Rcpp::XPtr<torch::Tensor> hx, Rcpp::XPtr<torch::Tensor> w_ih, Rcpp::XPtr<torch::Tensor> w_hh, Rcpp::XPtr<torch::Tensor> b_ih, Rcpp::XPtr<torch::Tensor> b_hh, Rcpp::XPtr<torch::Tensor> packed_ih, Rcpp::XPtr<torch::Tensor> packed_hh, Rcpp::XPtr<torch::Tensor> col_offsets_ih, Rcpp::XPtr<torch::Tensor> col_offsets_hh, Rcpp::XPtr<torch::Scalar> scale_ih, Rcpp::XPtr<torch::Scalar> scale_hh, Rcpp::XPtr<torch::Scalar> zero_point_ih, Rcpp::XPtr<torch::Scalar> zero_point_hh);
RcppExport SEXP _torch_cpp_torch_namespace_quantized_gru_cell_input_Tensor_hx_Tensor_w_ih_Tensor_w_hh_Tensor_b_ih_Tensor_b_hh_Tensor_packed_ih_Tensor_packed_hh_Tensor_col_offsets_ih_Tensor_col_offsets_hh_Tensor_scale_ih_Scalar_scale_hh_Scalar_zero_point_ih_Scalar_zero_point_hh_Scalar(SEXP inputSEXP, SEXP hxSEXP, SEXP w_ihSEXP, SEXP w_hhSEXP, SEXP b_ihSEXP, SEXP b_hhSEXP, SEXP packed_ihSEXP, SEXP packed_hhSEXP, SEXP col_offsets_ihSEXP, SEXP col_offsets_hhSEXP, SEXP scale_ihSEXP, SEXP scale_hhSEXP, SEXP zero_point_ihSEXP, SEXP zero_point_hhSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type input(inputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type hx(hxSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type w_ih(w_ihSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type w_hh(w_hhSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type b_ih(b_ihSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type b_hh(b_hhSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type packed_ih(packed_ihSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type packed_hh(packed_hhSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type col_offsets_ih(col_offsets_ihSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type col_offsets_hh(col_offsets_hhSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type scale_ih(scale_ihSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type scale_hh(scale_hhSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type zero_point_ih(zero_point_ihSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type zero_point_hh(zero_point_hhSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_quantized_gru_cell_input_Tensor_hx_Tensor_w_ih_Tensor_w_hh_Tensor_b_ih_Tensor_b_hh_Tensor_packed_ih_Tensor_packed_hh_Tensor_col_offsets_ih_Tensor_col_offsets_hh_Tensor_scale_ih_Scalar_scale_hh_Scalar_zero_point_ih_Scalar_zero_point_hh_Scalar(input, hx, w_ih, w_hh, b_ih, b_hh, packed_ih, packed_hh, col_offsets_ih, col_offsets_hh, scale_ih, scale_hh, zero_point_ih, zero_point_hh));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_quantized_rnn_relu_cell_input_Tensor_hx_Tensor_w_ih_Tensor_w_hh_Tensor_b_ih_Tensor_b_hh_Tensor_packed_ih_Tensor_packed_hh_Tensor_col_offsets_ih_Tensor_col_offsets_hh_Tensor_scale_ih_Scalar_scale_hh_Scalar_zero_point_ih_Scalar_zero_point_hh_Scalar
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_quantized_rnn_relu_cell_input_Tensor_hx_Tensor_w_ih_Tensor_w_hh_Tensor_b_ih_Tensor_b_hh_Tensor_packed_ih_Tensor_packed_hh_Tensor_col_offsets_ih_Tensor_col_offsets_hh_Tensor_scale_ih_Scalar_scale_hh_Scalar_zero_point_ih_Scalar_zero_point_hh_Scalar(Rcpp::XPtr<torch::Tensor> input, Rcpp::XPtr<torch::Tensor> hx, Rcpp::XPtr<torch::Tensor> w_ih, Rcpp::XPtr<torch::Tensor> w_hh, Rcpp::XPtr<torch::Tensor> b_ih, Rcpp::XPtr<torch::Tensor> b_hh, Rcpp::XPtr<torch::Tensor> packed_ih, Rcpp::XPtr<torch::Tensor> packed_hh, Rcpp::XPtr<torch::Tensor> col_offsets_ih, Rcpp::XPtr<torch::Tensor> col_offsets_hh, Rcpp::XPtr<torch::Scalar> scale_ih, Rcpp::XPtr<torch::Scalar> scale_hh, Rcpp::XPtr<torch::Scalar> zero_point_ih, Rcpp::XPtr<torch::Scalar> zero_point_hh);
RcppExport SEXP _torch_cpp_torch_namespace_quantized_rnn_relu_cell_input_Tensor_hx_Tensor_w_ih_Tensor_w_hh_Tensor_b_ih_Tensor_b_hh_Tensor_packed_ih_Tensor_packed_hh_Tensor_col_offsets_ih_Tensor_col_offsets_hh_Tensor_scale_ih_Scalar_scale_hh_Scalar_zero_point_ih_Scalar_zero_point_hh_Scalar(SEXP inputSEXP, SEXP hxSEXP, SEXP w_ihSEXP, SEXP w_hhSEXP, SEXP b_ihSEXP, SEXP b_hhSEXP, SEXP packed_ihSEXP, SEXP packed_hhSEXP, SEXP col_offsets_ihSEXP, SEXP col_offsets_hhSEXP, SEXP scale_ihSEXP, SEXP scale_hhSEXP, SEXP zero_point_ihSEXP, SEXP zero_point_hhSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type input(inputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type hx(hxSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type w_ih(w_ihSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type w_hh(w_hhSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type b_ih(b_ihSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type b_hh(b_hhSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type packed_ih(packed_ihSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type packed_hh(packed_hhSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type col_offsets_ih(col_offsets_ihSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type col_offsets_hh(col_offsets_hhSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type scale_ih(scale_ihSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type scale_hh(scale_hhSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type zero_point_ih(zero_point_ihSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type zero_point_hh(zero_point_hhSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_quantized_rnn_relu_cell_input_Tensor_hx_Tensor_w_ih_Tensor_w_hh_Tensor_b_ih_Tensor_b_hh_Tensor_packed_ih_Tensor_packed_hh_Tensor_col_offsets_ih_Tensor_col_offsets_hh_Tensor_scale_ih_Scalar_scale_hh_Scalar_zero_point_ih_Scalar_zero_point_hh_Scalar(input, hx, w_ih, w_hh, b_ih, b_hh, packed_ih, packed_hh, col_offsets_ih, col_offsets_hh, scale_ih, scale_hh, zero_point_ih, zero_point_hh));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_quantized_rnn_tanh_cell_input_Tensor_hx_Tensor_w_ih_Tensor_w_hh_Tensor_b_ih_Tensor_b_hh_Tensor_packed_ih_Tensor_packed_hh_Tensor_col_offsets_ih_Tensor_col_offsets_hh_Tensor_scale_ih_Scalar_scale_hh_Scalar_zero_point_ih_Scalar_zero_point_hh_Scalar
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_quantized_rnn_tanh_cell_input_Tensor_hx_Tensor_w_ih_Tensor_w_hh_Tensor_b_ih_Tensor_b_hh_Tensor_packed_ih_Tensor_packed_hh_Tensor_col_offsets_ih_Tensor_col_offsets_hh_Tensor_scale_ih_Scalar_scale_hh_Scalar_zero_point_ih_Scalar_zero_point_hh_Scalar(Rcpp::XPtr<torch::Tensor> input, Rcpp::XPtr<torch::Tensor> hx, Rcpp::XPtr<torch::Tensor> w_ih, Rcpp::XPtr<torch::Tensor> w_hh, Rcpp::XPtr<torch::Tensor> b_ih, Rcpp::XPtr<torch::Tensor> b_hh, Rcpp::XPtr<torch::Tensor> packed_ih, Rcpp::XPtr<torch::Tensor> packed_hh, Rcpp::XPtr<torch::Tensor> col_offsets_ih, Rcpp::XPtr<torch::Tensor> col_offsets_hh, Rcpp::XPtr<torch::Scalar> scale_ih, Rcpp::XPtr<torch::Scalar> scale_hh, Rcpp::XPtr<torch::Scalar> zero_point_ih, Rcpp::XPtr<torch::Scalar> zero_point_hh);
RcppExport SEXP _torch_cpp_torch_namespace_quantized_rnn_tanh_cell_input_Tensor_hx_Tensor_w_ih_Tensor_w_hh_Tensor_b_ih_Tensor_b_hh_Tensor_packed_ih_Tensor_packed_hh_Tensor_col_offsets_ih_Tensor_col_offsets_hh_Tensor_scale_ih_Scalar_scale_hh_Scalar_zero_point_ih_Scalar_zero_point_hh_Scalar(SEXP inputSEXP, SEXP hxSEXP, SEXP w_ihSEXP, SEXP w_hhSEXP, SEXP b_ihSEXP, SEXP b_hhSEXP, SEXP packed_ihSEXP, SEXP packed_hhSEXP, SEXP col_offsets_ihSEXP, SEXP col_offsets_hhSEXP, SEXP scale_ihSEXP, SEXP scale_hhSEXP, SEXP zero_point_ihSEXP, SEXP zero_point_hhSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type input(inputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type hx(hxSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type w_ih(w_ihSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type w_hh(w_hhSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type b_ih(b_ihSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type b_hh(b_hhSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type packed_ih(packed_ihSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type packed_hh(packed_hhSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type col_offsets_ih(col_offsets_ihSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type col_offsets_hh(col_offsets_hhSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type scale_ih(scale_ihSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type scale_hh(scale_hhSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type zero_point_ih(zero_point_ihSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type zero_point_hh(zero_point_hhSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_quantized_rnn_tanh_cell_input_Tensor_hx_Tensor_w_ih_Tensor_w_hh_Tensor_b_ih_Tensor_b_hh_Tensor_packed_ih_Tensor_packed_hh_Tensor_col_offsets_ih_Tensor_col_offsets_hh_Tensor_scale_ih_Scalar_scale_hh_Scalar_zero_point_ih_Scalar_zero_point_hh_Scalar(input, hx, w_ih, w_hh, b_ih, b_hh, packed_ih, packed_hh, col_offsets_ih, col_offsets_hh, scale_ih, scale_hh, zero_point_ih, zero_point_hh));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__pack_padded_sequence_input_Tensor_lengths_Tensor_batch_first_bool
Rcpp::List cpp_torch_namespace__pack_padded_sequence_input_Tensor_lengths_Tensor_batch_first_bool(Rcpp::XPtr<torch::Tensor> input, Rcpp::XPtr<torch::Tensor> lengths, bool batch_first);
RcppExport SEXP _torch_cpp_torch_namespace__pack_padded_sequence_input_Tensor_lengths_Tensor_batch_first_bool(SEXP inputSEXP, SEXP lengthsSEXP, SEXP batch_firstSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type input(inputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type lengths(lengthsSEXP);
    Rcpp::traits::input_parameter< bool >::type batch_first(batch_firstSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__pack_padded_sequence_input_Tensor_lengths_Tensor_batch_first_bool(input, lengths, batch_first));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__pack_padded_sequence_backward_grad_Tensor_input_size_IntArrayRef_batch_sizes_Tensor_batch_first_bool
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace__pack_padded_sequence_backward_grad_Tensor_input_size_IntArrayRef_batch_sizes_Tensor_batch_first_bool(Rcpp::XPtr<torch::Tensor> grad, std::vector<int64_t> input_size, Rcpp::XPtr<torch::Tensor> batch_sizes, bool batch_first);
RcppExport SEXP _torch_cpp_torch_namespace__pack_padded_sequence_backward_grad_Tensor_input_size_IntArrayRef_batch_sizes_Tensor_batch_first_bool(SEXP gradSEXP, SEXP input_sizeSEXP, SEXP batch_sizesSEXP, SEXP batch_firstSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type grad(gradSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type input_size(input_sizeSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type batch_sizes(batch_sizesSEXP);
    Rcpp::traits::input_parameter< bool >::type batch_first(batch_firstSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__pack_padded_sequence_backward_grad_Tensor_input_size_IntArrayRef_batch_sizes_Tensor_batch_first_bool(grad, input_size, batch_sizes, batch_first));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__pad_packed_sequence_data_Tensor_batch_sizes_Tensor_batch_first_bool_padding_value_Scalar_total_length_int64_t
Rcpp::List cpp_torch_namespace__pad_packed_sequence_data_Tensor_batch_sizes_Tensor_batch_first_bool_padding_value_Scalar_total_length_int64_t(Rcpp::XPtr<torch::Tensor> data, Rcpp::XPtr<torch::Tensor> batch_sizes, bool batch_first, Rcpp::XPtr<torch::Scalar> padding_value, int64_t total_length);
RcppExport SEXP _torch_cpp_torch_namespace__pad_packed_sequence_data_Tensor_batch_sizes_Tensor_batch_first_bool_padding_value_Scalar_total_length_int64_t(SEXP dataSEXP, SEXP batch_sizesSEXP, SEXP batch_firstSEXP, SEXP padding_valueSEXP, SEXP total_lengthSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type data(dataSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type batch_sizes(batch_sizesSEXP);
    Rcpp::traits::input_parameter< bool >::type batch_first(batch_firstSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type padding_value(padding_valueSEXP);
    Rcpp::traits::input_parameter< int64_t >::type total_length(total_lengthSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__pad_packed_sequence_data_Tensor_batch_sizes_Tensor_batch_first_bool_padding_value_Scalar_total_length_int64_t(data, batch_sizes, batch_first, padding_value, total_length));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_masked_fill_self_Tensor_mask_Tensor_value_Scalar
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_masked_fill_self_Tensor_mask_Tensor_value_Scalar(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> mask, Rcpp::XPtr<torch::Scalar> value);
RcppExport SEXP _torch_cpp_torch_namespace_masked_fill_self_Tensor_mask_Tensor_value_Scalar(SEXP selfSEXP, SEXP maskSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type mask(maskSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_masked_fill_self_Tensor_mask_Tensor_value_Scalar(self, mask, value));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_masked_fill_self_Tensor_mask_Tensor_value_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_masked_fill_self_Tensor_mask_Tensor_value_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> mask, Rcpp::XPtr<torch::Tensor> value);
RcppExport SEXP _torch_cpp_torch_namespace_masked_fill_self_Tensor_mask_Tensor_value_Tensor(SEXP selfSEXP, SEXP maskSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type mask(maskSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_masked_fill_self_Tensor_mask_Tensor_value_Tensor(self, mask, value));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_masked_scatter_self_Tensor_mask_Tensor_source_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_masked_scatter_self_Tensor_mask_Tensor_source_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> mask, Rcpp::XPtr<torch::Tensor> source);
RcppExport SEXP _torch_cpp_torch_namespace_masked_scatter_self_Tensor_mask_Tensor_source_Tensor(SEXP selfSEXP, SEXP maskSEXP, SEXP sourceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type mask(maskSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type source(sourceSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_masked_scatter_self_Tensor_mask_Tensor_source_Tensor(self, mask, source));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_index_add_self_Tensor_dim_int64_t_index_Tensor_source_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_index_add_self_Tensor_dim_int64_t_index_Tensor_source_Tensor(Rcpp::XPtr<torch::Tensor> self, int64_t dim, Rcpp::XPtr<torch::Tensor> index, Rcpp::XPtr<torch::Tensor> source);
RcppExport SEXP _torch_cpp_torch_namespace_index_add_self_Tensor_dim_int64_t_index_Tensor_source_Tensor(SEXP selfSEXP, SEXP dimSEXP, SEXP indexSEXP, SEXP sourceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type index(indexSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type source(sourceSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_index_add_self_Tensor_dim_int64_t_index_Tensor_source_Tensor(self, dim, index, source));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_index_add_self_Tensor_dim_Dimname_index_Tensor_source_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_index_add_self_Tensor_dim_Dimname_index_Tensor_source_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Dimname> dim, Rcpp::XPtr<torch::Tensor> index, Rcpp::XPtr<torch::Tensor> source);
RcppExport SEXP _torch_cpp_torch_namespace_index_add_self_Tensor_dim_Dimname_index_Tensor_source_Tensor(SEXP selfSEXP, SEXP dimSEXP, SEXP indexSEXP, SEXP sourceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Dimname> >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type index(indexSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type source(sourceSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_index_add_self_Tensor_dim_Dimname_index_Tensor_source_Tensor(self, dim, index, source));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_index_fill_self_Tensor_dim_int64_t_index_Tensor_value_Scalar
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_index_fill_self_Tensor_dim_int64_t_index_Tensor_value_Scalar(Rcpp::XPtr<torch::Tensor> self, int64_t dim, Rcpp::XPtr<torch::Tensor> index, Rcpp::XPtr<torch::Scalar> value);
RcppExport SEXP _torch_cpp_torch_namespace_index_fill_self_Tensor_dim_int64_t_index_Tensor_value_Scalar(SEXP selfSEXP, SEXP dimSEXP, SEXP indexSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type index(indexSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_index_fill_self_Tensor_dim_int64_t_index_Tensor_value_Scalar(self, dim, index, value));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_index_fill_self_Tensor_dim_int64_t_index_Tensor_value_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_index_fill_self_Tensor_dim_int64_t_index_Tensor_value_Tensor(Rcpp::XPtr<torch::Tensor> self, int64_t dim, Rcpp::XPtr<torch::Tensor> index, Rcpp::XPtr<torch::Tensor> value);
RcppExport SEXP _torch_cpp_torch_namespace_index_fill_self_Tensor_dim_int64_t_index_Tensor_value_Tensor(SEXP selfSEXP, SEXP dimSEXP, SEXP indexSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type index(indexSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_index_fill_self_Tensor_dim_int64_t_index_Tensor_value_Tensor(self, dim, index, value));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_index_fill_self_Tensor_dim_Dimname_index_Tensor_value_Scalar
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_index_fill_self_Tensor_dim_Dimname_index_Tensor_value_Scalar(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Dimname> dim, Rcpp::XPtr<torch::Tensor> index, Rcpp::XPtr<torch::Scalar> value);
RcppExport SEXP _torch_cpp_torch_namespace_index_fill_self_Tensor_dim_Dimname_index_Tensor_value_Scalar(SEXP selfSEXP, SEXP dimSEXP, SEXP indexSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Dimname> >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type index(indexSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_index_fill_self_Tensor_dim_Dimname_index_Tensor_value_Scalar(self, dim, index, value));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_index_fill_self_Tensor_dim_Dimname_index_Tensor_value_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_index_fill_self_Tensor_dim_Dimname_index_Tensor_value_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Dimname> dim, Rcpp::XPtr<torch::Tensor> index, Rcpp::XPtr<torch::Tensor> value);
RcppExport SEXP _torch_cpp_torch_namespace_index_fill_self_Tensor_dim_Dimname_index_Tensor_value_Tensor(SEXP selfSEXP, SEXP dimSEXP, SEXP indexSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Dimname> >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type index(indexSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_index_fill_self_Tensor_dim_Dimname_index_Tensor_value_Tensor(self, dim, index, value));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_scatter_self_Tensor_dim_int64_t_index_Tensor_src_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_scatter_self_Tensor_dim_int64_t_index_Tensor_src_Tensor(Rcpp::XPtr<torch::Tensor> self, int64_t dim, Rcpp::XPtr<torch::Tensor> index, Rcpp::XPtr<torch::Tensor> src);
RcppExport SEXP _torch_cpp_torch_namespace_scatter_self_Tensor_dim_int64_t_index_Tensor_src_Tensor(SEXP selfSEXP, SEXP dimSEXP, SEXP indexSEXP, SEXP srcSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type index(indexSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type src(srcSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_scatter_self_Tensor_dim_int64_t_index_Tensor_src_Tensor(self, dim, index, src));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_scatter_self_Tensor_dim_int64_t_index_Tensor_value_Scalar
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_scatter_self_Tensor_dim_int64_t_index_Tensor_value_Scalar(Rcpp::XPtr<torch::Tensor> self, int64_t dim, Rcpp::XPtr<torch::Tensor> index, Rcpp::XPtr<torch::Scalar> value);
RcppExport SEXP _torch_cpp_torch_namespace_scatter_self_Tensor_dim_int64_t_index_Tensor_value_Scalar(SEXP selfSEXP, SEXP dimSEXP, SEXP indexSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type index(indexSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_scatter_self_Tensor_dim_int64_t_index_Tensor_value_Scalar(self, dim, index, value));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_scatter_self_Tensor_dim_Dimname_index_Tensor_src_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_scatter_self_Tensor_dim_Dimname_index_Tensor_src_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Dimname> dim, Rcpp::XPtr<torch::Tensor> index, Rcpp::XPtr<torch::Tensor> src);
RcppExport SEXP _torch_cpp_torch_namespace_scatter_self_Tensor_dim_Dimname_index_Tensor_src_Tensor(SEXP selfSEXP, SEXP dimSEXP, SEXP indexSEXP, SEXP srcSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Dimname> >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type index(indexSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type src(srcSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_scatter_self_Tensor_dim_Dimname_index_Tensor_src_Tensor(self, dim, index, src));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_scatter_self_Tensor_dim_Dimname_index_Tensor_value_Scalar
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_scatter_self_Tensor_dim_Dimname_index_Tensor_value_Scalar(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Dimname> dim, Rcpp::XPtr<torch::Tensor> index, Rcpp::XPtr<torch::Scalar> value);
RcppExport SEXP _torch_cpp_torch_namespace_scatter_self_Tensor_dim_Dimname_index_Tensor_value_Scalar(SEXP selfSEXP, SEXP dimSEXP, SEXP indexSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Dimname> >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type index(indexSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_scatter_self_Tensor_dim_Dimname_index_Tensor_value_Scalar(self, dim, index, value));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_scatter_add_self_Tensor_dim_int64_t_index_Tensor_src_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_scatter_add_self_Tensor_dim_int64_t_index_Tensor_src_Tensor(Rcpp::XPtr<torch::Tensor> self, int64_t dim, Rcpp::XPtr<torch::Tensor> index, Rcpp::XPtr<torch::Tensor> src);
RcppExport SEXP _torch_cpp_torch_namespace_scatter_add_self_Tensor_dim_int64_t_index_Tensor_src_Tensor(SEXP selfSEXP, SEXP dimSEXP, SEXP indexSEXP, SEXP srcSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type index(indexSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type src(srcSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_scatter_add_self_Tensor_dim_int64_t_index_Tensor_src_Tensor(self, dim, index, src));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_scatter_add_self_Tensor_dim_Dimname_index_Tensor_src_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_scatter_add_self_Tensor_dim_Dimname_index_Tensor_src_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Dimname> dim, Rcpp::XPtr<torch::Tensor> index, Rcpp::XPtr<torch::Tensor> src);
RcppExport SEXP _torch_cpp_torch_namespace_scatter_add_self_Tensor_dim_Dimname_index_Tensor_src_Tensor(SEXP selfSEXP, SEXP dimSEXP, SEXP indexSEXP, SEXP srcSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Dimname> >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type index(indexSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type src(srcSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_scatter_add_self_Tensor_dim_Dimname_index_Tensor_src_Tensor(self, dim, index, src));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace___and___self_Tensor_other_Scalar
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace___and___self_Tensor_other_Scalar(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Scalar> other);
RcppExport SEXP _torch_cpp_torch_namespace___and___self_Tensor_other_Scalar(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace___and___self_Tensor_other_Scalar(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace___and___self_Tensor_other_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace___and___self_Tensor_other_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> other);
RcppExport SEXP _torch_cpp_torch_namespace___and___self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace___and___self_Tensor_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace___or___self_Tensor_other_Scalar
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace___or___self_Tensor_other_Scalar(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Scalar> other);
RcppExport SEXP _torch_cpp_torch_namespace___or___self_Tensor_other_Scalar(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace___or___self_Tensor_other_Scalar(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace___or___self_Tensor_other_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace___or___self_Tensor_other_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> other);
RcppExport SEXP _torch_cpp_torch_namespace___or___self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace___or___self_Tensor_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_bitwise_xor_out_out_Tensor_self_Tensor_other_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_bitwise_xor_out_out_Tensor_self_Tensor_other_Tensor(Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> other);
RcppExport SEXP _torch_cpp_torch_namespace_bitwise_xor_out_out_Tensor_self_Tensor_other_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type out(outSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_bitwise_xor_out_out_Tensor_self_Tensor_other_Tensor(out, self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_bitwise_xor_out_out_Tensor_self_Tensor_other_Scalar
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_bitwise_xor_out_out_Tensor_self_Tensor_other_Scalar(Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Scalar> other);
RcppExport SEXP _torch_cpp_torch_namespace_bitwise_xor_out_out_Tensor_self_Tensor_other_Scalar(SEXP outSEXP, SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type out(outSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_bitwise_xor_out_out_Tensor_self_Tensor_other_Scalar(out, self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_bitwise_xor_self_Tensor_other_Scalar
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_bitwise_xor_self_Tensor_other_Scalar(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Scalar> other);
RcppExport SEXP _torch_cpp_torch_namespace_bitwise_xor_self_Tensor_other_Scalar(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_bitwise_xor_self_Tensor_other_Scalar(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_bitwise_xor_self_Tensor_other_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_bitwise_xor_self_Tensor_other_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> other);
RcppExport SEXP _torch_cpp_torch_namespace_bitwise_xor_self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_bitwise_xor_self_Tensor_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace___xor___self_Tensor_other_Scalar
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace___xor___self_Tensor_other_Scalar(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Scalar> other);
RcppExport SEXP _torch_cpp_torch_namespace___xor___self_Tensor_other_Scalar(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace___xor___self_Tensor_other_Scalar(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace___xor___self_Tensor_other_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace___xor___self_Tensor_other_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> other);
RcppExport SEXP _torch_cpp_torch_namespace___xor___self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace___xor___self_Tensor_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace___lshift___self_Tensor_other_Scalar
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace___lshift___self_Tensor_other_Scalar(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Scalar> other);
RcppExport SEXP _torch_cpp_torch_namespace___lshift___self_Tensor_other_Scalar(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace___lshift___self_Tensor_other_Scalar(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace___lshift___self_Tensor_other_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace___lshift___self_Tensor_other_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> other);
RcppExport SEXP _torch_cpp_torch_namespace___lshift___self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace___lshift___self_Tensor_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace___rshift___self_Tensor_other_Scalar
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace___rshift___self_Tensor_other_Scalar(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Scalar> other);
RcppExport SEXP _torch_cpp_torch_namespace___rshift___self_Tensor_other_Scalar(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace___rshift___self_Tensor_other_Scalar(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace___rshift___self_Tensor_other_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace___rshift___self_Tensor_other_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> other);
RcppExport SEXP _torch_cpp_torch_namespace___rshift___self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace___rshift___self_Tensor_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_addbmm_out_out_Tensor_self_Tensor_batch1_Tensor_batch2_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_addbmm_out_out_Tensor_self_Tensor_batch1_Tensor_batch2_Tensor(Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> batch1, Rcpp::XPtr<torch::Tensor> batch2, Rcpp::XPtr<torch::Scalar> beta, Rcpp::XPtr<torch::Scalar> alpha);
RcppExport SEXP _torch_cpp_torch_namespace_addbmm_out_out_Tensor_self_Tensor_batch1_Tensor_batch2_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP batch1SEXP, SEXP batch2SEXP, SEXP betaSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type out(outSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type batch1(batch1SEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type batch2(batch2SEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_addbmm_out_out_Tensor_self_Tensor_batch1_Tensor_batch2_Tensor(out, self, batch1, batch2, beta, alpha));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_addbmm_self_Tensor_batch1_Tensor_batch2_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_addbmm_self_Tensor_batch1_Tensor_batch2_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> batch1, Rcpp::XPtr<torch::Tensor> batch2, Rcpp::XPtr<torch::Scalar> beta, Rcpp::XPtr<torch::Scalar> alpha);
RcppExport SEXP _torch_cpp_torch_namespace_addbmm_self_Tensor_batch1_Tensor_batch2_Tensor(SEXP selfSEXP, SEXP batch1SEXP, SEXP batch2SEXP, SEXP betaSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type batch1(batch1SEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type batch2(batch2SEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_addbmm_self_Tensor_batch1_Tensor_batch2_Tensor(self, batch1, batch2, beta, alpha));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_diag_out_out_Tensor_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_diag_out_out_Tensor_self_Tensor(Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, int64_t diagonal);
RcppExport SEXP _torch_cpp_torch_namespace_diag_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP diagonalSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type out(outSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< int64_t >::type diagonal(diagonalSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_diag_out_out_Tensor_self_Tensor(out, self, diagonal));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_diag_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_diag_self_Tensor(Rcpp::XPtr<torch::Tensor> self, int64_t diagonal);
RcppExport SEXP _torch_cpp_torch_namespace_diag_self_Tensor(SEXP selfSEXP, SEXP diagonalSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< int64_t >::type diagonal(diagonalSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_diag_self_Tensor(self, diagonal));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_cross_out_out_Tensor_self_Tensor_other_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_cross_out_out_Tensor_self_Tensor_other_Tensor(Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> other, int64_t dim);
RcppExport SEXP _torch_cpp_torch_namespace_cross_out_out_Tensor_self_Tensor_other_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP otherSEXP, SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type out(outSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type other(otherSEXP);
    Rcpp::traits::input_parameter< int64_t >::type dim(dimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_cross_out_out_Tensor_self_Tensor_other_Tensor(out, self, other, dim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_cross_self_Tensor_other_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_cross_self_Tensor_other_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> other, int64_t dim);
RcppExport SEXP _torch_cpp_torch_namespace_cross_self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP, SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type other(otherSEXP);
    Rcpp::traits::input_parameter< int64_t >::type dim(dimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_cross_self_Tensor_other_Tensor(self, other, dim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_triu_out_out_Tensor_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_triu_out_out_Tensor_self_Tensor(Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, int64_t diagonal);
RcppExport SEXP _torch_cpp_torch_namespace_triu_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP diagonalSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type out(outSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< int64_t >::type diagonal(diagonalSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_triu_out_out_Tensor_self_Tensor(out, self, diagonal));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_triu_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_triu_self_Tensor(Rcpp::XPtr<torch::Tensor> self, int64_t diagonal);
RcppExport SEXP _torch_cpp_torch_namespace_triu_self_Tensor(SEXP selfSEXP, SEXP diagonalSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< int64_t >::type diagonal(diagonalSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_triu_self_Tensor(self, diagonal));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_tril_out_out_Tensor_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_tril_out_out_Tensor_self_Tensor(Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, int64_t diagonal);
RcppExport SEXP _torch_cpp_torch_namespace_tril_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP diagonalSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type out(outSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< int64_t >::type diagonal(diagonalSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_tril_out_out_Tensor_self_Tensor(out, self, diagonal));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_tril_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_tril_self_Tensor(Rcpp::XPtr<torch::Tensor> self, int64_t diagonal);
RcppExport SEXP _torch_cpp_torch_namespace_tril_self_Tensor(SEXP selfSEXP, SEXP diagonalSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< int64_t >::type diagonal(diagonalSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_tril_self_Tensor(self, diagonal));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_tril_indices_row_int64_t_col_int64_t
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_tril_indices_row_int64_t_col_int64_t(int64_t row, int64_t col, int64_t offset, Rcpp::XPtr<torch::TensorOptions> options);
RcppExport SEXP _torch_cpp_torch_namespace_tril_indices_row_int64_t_col_int64_t(SEXP rowSEXP, SEXP colSEXP, SEXP offsetSEXP, SEXP optionsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int64_t >::type row(rowSEXP);
    Rcpp::traits::input_parameter< int64_t >::type col(colSEXP);
    Rcpp::traits::input_parameter< int64_t >::type offset(offsetSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::TensorOptions> >::type options(optionsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_tril_indices_row_int64_t_col_int64_t(row, col, offset, options));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_triu_indices_row_int64_t_col_int64_t
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_triu_indices_row_int64_t_col_int64_t(int64_t row, int64_t col, int64_t offset, Rcpp::XPtr<torch::TensorOptions> options);
RcppExport SEXP _torch_cpp_torch_namespace_triu_indices_row_int64_t_col_int64_t(SEXP rowSEXP, SEXP colSEXP, SEXP offsetSEXP, SEXP optionsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int64_t >::type row(rowSEXP);
    Rcpp::traits::input_parameter< int64_t >::type col(colSEXP);
    Rcpp::traits::input_parameter< int64_t >::type offset(offsetSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::TensorOptions> >::type options(optionsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_triu_indices_row_int64_t_col_int64_t(row, col, offset, options));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_trace_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_trace_self_Tensor(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_namespace_trace_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_trace_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_ne_out_out_Tensor_self_Tensor_other_Scalar
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_ne_out_out_Tensor_self_Tensor_other_Scalar(Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Scalar> other);
RcppExport SEXP _torch_cpp_torch_namespace_ne_out_out_Tensor_self_Tensor_other_Scalar(SEXP outSEXP, SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type out(outSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_ne_out_out_Tensor_self_Tensor_other_Scalar(out, self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_ne_self_Tensor_other_Scalar
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_ne_self_Tensor_other_Scalar(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Scalar> other);
RcppExport SEXP _torch_cpp_torch_namespace_ne_self_Tensor_other_Scalar(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_ne_self_Tensor_other_Scalar(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_ne_out_out_Tensor_self_Tensor_other_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_ne_out_out_Tensor_self_Tensor_other_Tensor(Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> other);
RcppExport SEXP _torch_cpp_torch_namespace_ne_out_out_Tensor_self_Tensor_other_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type out(outSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_ne_out_out_Tensor_self_Tensor_other_Tensor(out, self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_ne_self_Tensor_other_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_ne_self_Tensor_other_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> other);
RcppExport SEXP _torch_cpp_torch_namespace_ne_self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_ne_self_Tensor_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_eq_out_out_Tensor_self_Tensor_other_Scalar
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_eq_out_out_Tensor_self_Tensor_other_Scalar(Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Scalar> other);
RcppExport SEXP _torch_cpp_torch_namespace_eq_out_out_Tensor_self_Tensor_other_Scalar(SEXP outSEXP, SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type out(outSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_eq_out_out_Tensor_self_Tensor_other_Scalar(out, self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_eq_self_Tensor_other_Scalar
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_eq_self_Tensor_other_Scalar(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Scalar> other);
RcppExport SEXP _torch_cpp_torch_namespace_eq_self_Tensor_other_Scalar(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_eq_self_Tensor_other_Scalar(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_eq_out_out_Tensor_self_Tensor_other_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_eq_out_out_Tensor_self_Tensor_other_Tensor(Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> other);
RcppExport SEXP _torch_cpp_torch_namespace_eq_out_out_Tensor_self_Tensor_other_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type out(outSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_eq_out_out_Tensor_self_Tensor_other_Tensor(out, self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_eq_self_Tensor_other_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_eq_self_Tensor_other_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> other);
RcppExport SEXP _torch_cpp_torch_namespace_eq_self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_eq_self_Tensor_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_ge_out_out_Tensor_self_Tensor_other_Scalar
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_ge_out_out_Tensor_self_Tensor_other_Scalar(Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Scalar> other);
RcppExport SEXP _torch_cpp_torch_namespace_ge_out_out_Tensor_self_Tensor_other_Scalar(SEXP outSEXP, SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type out(outSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_ge_out_out_Tensor_self_Tensor_other_Scalar(out, self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_ge_self_Tensor_other_Scalar
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_ge_self_Tensor_other_Scalar(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Scalar> other);
RcppExport SEXP _torch_cpp_torch_namespace_ge_self_Tensor_other_Scalar(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_ge_self_Tensor_other_Scalar(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_ge_out_out_Tensor_self_Tensor_other_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_ge_out_out_Tensor_self_Tensor_other_Tensor(Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> other);
RcppExport SEXP _torch_cpp_torch_namespace_ge_out_out_Tensor_self_Tensor_other_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type out(outSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_ge_out_out_Tensor_self_Tensor_other_Tensor(out, self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_ge_self_Tensor_other_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_ge_self_Tensor_other_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> other);
RcppExport SEXP _torch_cpp_torch_namespace_ge_self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_ge_self_Tensor_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_le_out_out_Tensor_self_Tensor_other_Scalar
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_le_out_out_Tensor_self_Tensor_other_Scalar(Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Scalar> other);
RcppExport SEXP _torch_cpp_torch_namespace_le_out_out_Tensor_self_Tensor_other_Scalar(SEXP outSEXP, SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type out(outSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_le_out_out_Tensor_self_Tensor_other_Scalar(out, self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_le_self_Tensor_other_Scalar
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_le_self_Tensor_other_Scalar(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Scalar> other);
RcppExport SEXP _torch_cpp_torch_namespace_le_self_Tensor_other_Scalar(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_le_self_Tensor_other_Scalar(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_le_out_out_Tensor_self_Tensor_other_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_le_out_out_Tensor_self_Tensor_other_Tensor(Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> other);
RcppExport SEXP _torch_cpp_torch_namespace_le_out_out_Tensor_self_Tensor_other_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type out(outSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_le_out_out_Tensor_self_Tensor_other_Tensor(out, self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_le_self_Tensor_other_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_le_self_Tensor_other_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> other);
RcppExport SEXP _torch_cpp_torch_namespace_le_self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_le_self_Tensor_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_gt_out_out_Tensor_self_Tensor_other_Scalar
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_gt_out_out_Tensor_self_Tensor_other_Scalar(Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Scalar> other);
RcppExport SEXP _torch_cpp_torch_namespace_gt_out_out_Tensor_self_Tensor_other_Scalar(SEXP outSEXP, SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type out(outSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_gt_out_out_Tensor_self_Tensor_other_Scalar(out, self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_gt_self_Tensor_other_Scalar
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_gt_self_Tensor_other_Scalar(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Scalar> other);
RcppExport SEXP _torch_cpp_torch_namespace_gt_self_Tensor_other_Scalar(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_gt_self_Tensor_other_Scalar(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_gt_out_out_Tensor_self_Tensor_other_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_gt_out_out_Tensor_self_Tensor_other_Tensor(Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> other);
RcppExport SEXP _torch_cpp_torch_namespace_gt_out_out_Tensor_self_Tensor_other_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type out(outSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_gt_out_out_Tensor_self_Tensor_other_Tensor(out, self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_gt_self_Tensor_other_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_gt_self_Tensor_other_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> other);
RcppExport SEXP _torch_cpp_torch_namespace_gt_self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_gt_self_Tensor_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_lt_out_out_Tensor_self_Tensor_other_Scalar
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_lt_out_out_Tensor_self_Tensor_other_Scalar(Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Scalar> other);
RcppExport SEXP _torch_cpp_torch_namespace_lt_out_out_Tensor_self_Tensor_other_Scalar(SEXP outSEXP, SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type out(outSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_lt_out_out_Tensor_self_Tensor_other_Scalar(out, self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_lt_self_Tensor_other_Scalar
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_lt_self_Tensor_other_Scalar(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Scalar> other);
RcppExport SEXP _torch_cpp_torch_namespace_lt_self_Tensor_other_Scalar(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_lt_self_Tensor_other_Scalar(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_lt_out_out_Tensor_self_Tensor_other_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_lt_out_out_Tensor_self_Tensor_other_Tensor(Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> other);
RcppExport SEXP _torch_cpp_torch_namespace_lt_out_out_Tensor_self_Tensor_other_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type out(outSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_lt_out_out_Tensor_self_Tensor_other_Tensor(out, self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_lt_self_Tensor_other_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_lt_self_Tensor_other_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> other);
RcppExport SEXP _torch_cpp_torch_namespace_lt_self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_lt_self_Tensor_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_take_out_out_Tensor_self_Tensor_index_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_take_out_out_Tensor_self_Tensor_index_Tensor(Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> index);
RcppExport SEXP _torch_cpp_torch_namespace_take_out_out_Tensor_self_Tensor_index_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP indexSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type out(outSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type index(indexSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_take_out_out_Tensor_self_Tensor_index_Tensor(out, self, index));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_take_self_Tensor_index_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_take_self_Tensor_index_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> index);
RcppExport SEXP _torch_cpp_torch_namespace_take_self_Tensor_index_Tensor(SEXP selfSEXP, SEXP indexSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type index(indexSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_take_self_Tensor_index_Tensor(self, index));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_index_select_out_out_Tensor_self_Tensor_dim_int64_t_index_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_index_select_out_out_Tensor_self_Tensor_dim_int64_t_index_Tensor(Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, int64_t dim, Rcpp::XPtr<torch::Tensor> index);
RcppExport SEXP _torch_cpp_torch_namespace_index_select_out_out_Tensor_self_Tensor_dim_int64_t_index_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP dimSEXP, SEXP indexSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type out(outSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type index(indexSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_index_select_out_out_Tensor_self_Tensor_dim_int64_t_index_Tensor(out, self, dim, index));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_index_select_self_Tensor_dim_int64_t_index_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_index_select_self_Tensor_dim_int64_t_index_Tensor(Rcpp::XPtr<torch::Tensor> self, int64_t dim, Rcpp::XPtr<torch::Tensor> index);
RcppExport SEXP _torch_cpp_torch_namespace_index_select_self_Tensor_dim_int64_t_index_Tensor(SEXP selfSEXP, SEXP dimSEXP, SEXP indexSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type index(indexSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_index_select_self_Tensor_dim_int64_t_index_Tensor(self, dim, index));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_index_select_out_out_Tensor_self_Tensor_dim_Dimname_index_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_index_select_out_out_Tensor_self_Tensor_dim_Dimname_index_Tensor(Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Dimname> dim, Rcpp::XPtr<torch::Tensor> index);
RcppExport SEXP _torch_cpp_torch_namespace_index_select_out_out_Tensor_self_Tensor_dim_Dimname_index_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP dimSEXP, SEXP indexSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type out(outSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Dimname> >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type index(indexSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_index_select_out_out_Tensor_self_Tensor_dim_Dimname_index_Tensor(out, self, dim, index));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_index_select_self_Tensor_dim_Dimname_index_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_index_select_self_Tensor_dim_Dimname_index_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Dimname> dim, Rcpp::XPtr<torch::Tensor> index);
RcppExport SEXP _torch_cpp_torch_namespace_index_select_self_Tensor_dim_Dimname_index_Tensor(SEXP selfSEXP, SEXP dimSEXP, SEXP indexSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Dimname> >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type index(indexSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_index_select_self_Tensor_dim_Dimname_index_Tensor(self, dim, index));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_masked_select_out_out_Tensor_self_Tensor_mask_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_masked_select_out_out_Tensor_self_Tensor_mask_Tensor(Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> mask);
RcppExport SEXP _torch_cpp_torch_namespace_masked_select_out_out_Tensor_self_Tensor_mask_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP maskSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type out(outSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type mask(maskSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_masked_select_out_out_Tensor_self_Tensor_mask_Tensor(out, self, mask));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_masked_select_self_Tensor_mask_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_masked_select_self_Tensor_mask_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> mask);
RcppExport SEXP _torch_cpp_torch_namespace_masked_select_self_Tensor_mask_Tensor(SEXP selfSEXP, SEXP maskSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type mask(maskSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_masked_select_self_Tensor_mask_Tensor(self, mask));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_nonzero_out_out_Tensor_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_nonzero_out_out_Tensor_self_Tensor(Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_namespace_nonzero_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type out(outSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_nonzero_out_out_Tensor_self_Tensor(out, self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_nonzero_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_nonzero_self_Tensor(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_namespace_nonzero_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_nonzero_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_nonzero_numpy_self_Tensor
Rcpp::XPtr<torch::TensorList> cpp_torch_namespace_nonzero_numpy_self_Tensor(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_namespace_nonzero_numpy_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_nonzero_numpy_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_gather_out_out_Tensor_self_Tensor_dim_int64_t_index_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_gather_out_out_Tensor_self_Tensor_dim_int64_t_index_Tensor(Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, int64_t dim, Rcpp::XPtr<torch::Tensor> index, bool sparse_grad);
RcppExport SEXP _torch_cpp_torch_namespace_gather_out_out_Tensor_self_Tensor_dim_int64_t_index_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP dimSEXP, SEXP indexSEXP, SEXP sparse_gradSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type out(outSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type index(indexSEXP);
    Rcpp::traits::input_parameter< bool >::type sparse_grad(sparse_gradSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_gather_out_out_Tensor_self_Tensor_dim_int64_t_index_Tensor(out, self, dim, index, sparse_grad));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_gather_self_Tensor_dim_int64_t_index_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_gather_self_Tensor_dim_int64_t_index_Tensor(Rcpp::XPtr<torch::Tensor> self, int64_t dim, Rcpp::XPtr<torch::Tensor> index, bool sparse_grad);
RcppExport SEXP _torch_cpp_torch_namespace_gather_self_Tensor_dim_int64_t_index_Tensor(SEXP selfSEXP, SEXP dimSEXP, SEXP indexSEXP, SEXP sparse_gradSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type index(indexSEXP);
    Rcpp::traits::input_parameter< bool >::type sparse_grad(sparse_gradSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_gather_self_Tensor_dim_int64_t_index_Tensor(self, dim, index, sparse_grad));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_gather_out_out_Tensor_self_Tensor_dim_Dimname_index_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_gather_out_out_Tensor_self_Tensor_dim_Dimname_index_Tensor(Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Dimname> dim, Rcpp::XPtr<torch::Tensor> index, bool sparse_grad);
RcppExport SEXP _torch_cpp_torch_namespace_gather_out_out_Tensor_self_Tensor_dim_Dimname_index_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP dimSEXP, SEXP indexSEXP, SEXP sparse_gradSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type out(outSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Dimname> >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type index(indexSEXP);
    Rcpp::traits::input_parameter< bool >::type sparse_grad(sparse_gradSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_gather_out_out_Tensor_self_Tensor_dim_Dimname_index_Tensor(out, self, dim, index, sparse_grad));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_gather_self_Tensor_dim_Dimname_index_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_gather_self_Tensor_dim_Dimname_index_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Dimname> dim, Rcpp::XPtr<torch::Tensor> index, bool sparse_grad);
RcppExport SEXP _torch_cpp_torch_namespace_gather_self_Tensor_dim_Dimname_index_Tensor(SEXP selfSEXP, SEXP dimSEXP, SEXP indexSEXP, SEXP sparse_gradSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Dimname> >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type index(indexSEXP);
    Rcpp::traits::input_parameter< bool >::type sparse_grad(sparse_gradSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_gather_self_Tensor_dim_Dimname_index_Tensor(self, dim, index, sparse_grad));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__gather_sparse_backward_self_Tensor_dim_int64_t_index_Tensor_grad_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace__gather_sparse_backward_self_Tensor_dim_int64_t_index_Tensor_grad_Tensor(Rcpp::XPtr<torch::Tensor> self, int64_t dim, Rcpp::XPtr<torch::Tensor> index, Rcpp::XPtr<torch::Tensor> grad);
RcppExport SEXP _torch_cpp_torch_namespace__gather_sparse_backward_self_Tensor_dim_int64_t_index_Tensor_grad_Tensor(SEXP selfSEXP, SEXP dimSEXP, SEXP indexSEXP, SEXP gradSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type index(indexSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type grad(gradSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__gather_sparse_backward_self_Tensor_dim_int64_t_index_Tensor_grad_Tensor(self, dim, index, grad));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_addcmul_out_out_Tensor_self_Tensor_tensor1_Tensor_tensor2_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_addcmul_out_out_Tensor_self_Tensor_tensor1_Tensor_tensor2_Tensor(Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> tensor1, Rcpp::XPtr<torch::Tensor> tensor2, Rcpp::XPtr<torch::Scalar> value);
RcppExport SEXP _torch_cpp_torch_namespace_addcmul_out_out_Tensor_self_Tensor_tensor1_Tensor_tensor2_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP tensor1SEXP, SEXP tensor2SEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type out(outSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type tensor1(tensor1SEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type tensor2(tensor2SEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_addcmul_out_out_Tensor_self_Tensor_tensor1_Tensor_tensor2_Tensor(out, self, tensor1, tensor2, value));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_addcmul_self_Tensor_tensor1_Tensor_tensor2_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_addcmul_self_Tensor_tensor1_Tensor_tensor2_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> tensor1, Rcpp::XPtr<torch::Tensor> tensor2, Rcpp::XPtr<torch::Scalar> value);
RcppExport SEXP _torch_cpp_torch_namespace_addcmul_self_Tensor_tensor1_Tensor_tensor2_Tensor(SEXP selfSEXP, SEXP tensor1SEXP, SEXP tensor2SEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type tensor1(tensor1SEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type tensor2(tensor2SEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_addcmul_self_Tensor_tensor1_Tensor_tensor2_Tensor(self, tensor1, tensor2, value));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_addcdiv_out_out_Tensor_self_Tensor_tensor1_Tensor_tensor2_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_addcdiv_out_out_Tensor_self_Tensor_tensor1_Tensor_tensor2_Tensor(Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> tensor1, Rcpp::XPtr<torch::Tensor> tensor2, Rcpp::XPtr<torch::Scalar> value);
RcppExport SEXP _torch_cpp_torch_namespace_addcdiv_out_out_Tensor_self_Tensor_tensor1_Tensor_tensor2_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP tensor1SEXP, SEXP tensor2SEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type out(outSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type tensor1(tensor1SEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type tensor2(tensor2SEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_addcdiv_out_out_Tensor_self_Tensor_tensor1_Tensor_tensor2_Tensor(out, self, tensor1, tensor2, value));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_addcdiv_self_Tensor_tensor1_Tensor_tensor2_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_addcdiv_self_Tensor_tensor1_Tensor_tensor2_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> tensor1, Rcpp::XPtr<torch::Tensor> tensor2, Rcpp::XPtr<torch::Scalar> value);
RcppExport SEXP _torch_cpp_torch_namespace_addcdiv_self_Tensor_tensor1_Tensor_tensor2_Tensor(SEXP selfSEXP, SEXP tensor1SEXP, SEXP tensor2SEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type tensor1(tensor1SEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type tensor2(tensor2SEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_addcdiv_self_Tensor_tensor1_Tensor_tensor2_Tensor(self, tensor1, tensor2, value));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_lstsq_out_X_Tensor_qr_Tensor_self_Tensor_A_Tensor
Rcpp::List cpp_torch_namespace_lstsq_out_X_Tensor_qr_Tensor_self_Tensor_A_Tensor(Rcpp::XPtr<torch::Tensor> X, Rcpp::XPtr<torch::Tensor> qr, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> A);
RcppExport SEXP _torch_cpp_torch_namespace_lstsq_out_X_Tensor_qr_Tensor_self_Tensor_A_Tensor(SEXP XSEXP, SEXP qrSEXP, SEXP selfSEXP, SEXP ASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type X(XSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type qr(qrSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type A(ASEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_lstsq_out_X_Tensor_qr_Tensor_self_Tensor_A_Tensor(X, qr, self, A));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_lstsq_self_Tensor_A_Tensor
Rcpp::List cpp_torch_namespace_lstsq_self_Tensor_A_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> A);
RcppExport SEXP _torch_cpp_torch_namespace_lstsq_self_Tensor_A_Tensor(SEXP selfSEXP, SEXP ASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type A(ASEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_lstsq_self_Tensor_A_Tensor(self, A));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_triangular_solve_out_X_Tensor_M_Tensor_self_Tensor_A_Tensor
Rcpp::List cpp_torch_namespace_triangular_solve_out_X_Tensor_M_Tensor_self_Tensor_A_Tensor(Rcpp::XPtr<torch::Tensor> X, Rcpp::XPtr<torch::Tensor> M, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> A, bool upper, bool transpose, bool unitriangular);
RcppExport SEXP _torch_cpp_torch_namespace_triangular_solve_out_X_Tensor_M_Tensor_self_Tensor_A_Tensor(SEXP XSEXP, SEXP MSEXP, SEXP selfSEXP, SEXP ASEXP, SEXP upperSEXP, SEXP transposeSEXP, SEXP unitriangularSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type X(XSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type M(MSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type A(ASEXP);
    Rcpp::traits::input_parameter< bool >::type upper(upperSEXP);
    Rcpp::traits::input_parameter< bool >::type transpose(transposeSEXP);
    Rcpp::traits::input_parameter< bool >::type unitriangular(unitriangularSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_triangular_solve_out_X_Tensor_M_Tensor_self_Tensor_A_Tensor(X, M, self, A, upper, transpose, unitriangular));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_triangular_solve_self_Tensor_A_Tensor
Rcpp::List cpp_torch_namespace_triangular_solve_self_Tensor_A_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> A, bool upper, bool transpose, bool unitriangular);
RcppExport SEXP _torch_cpp_torch_namespace_triangular_solve_self_Tensor_A_Tensor(SEXP selfSEXP, SEXP ASEXP, SEXP upperSEXP, SEXP transposeSEXP, SEXP unitriangularSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type A(ASEXP);
    Rcpp::traits::input_parameter< bool >::type upper(upperSEXP);
    Rcpp::traits::input_parameter< bool >::type transpose(transposeSEXP);
    Rcpp::traits::input_parameter< bool >::type unitriangular(unitriangularSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_triangular_solve_self_Tensor_A_Tensor(self, A, upper, transpose, unitriangular));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__triangular_solve_helper_self_Tensor_A_Tensor_upper_bool_transpose_bool_unitriangular_bool
Rcpp::List cpp_torch_namespace__triangular_solve_helper_self_Tensor_A_Tensor_upper_bool_transpose_bool_unitriangular_bool(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> A, bool upper, bool transpose, bool unitriangular);
RcppExport SEXP _torch_cpp_torch_namespace__triangular_solve_helper_self_Tensor_A_Tensor_upper_bool_transpose_bool_unitriangular_bool(SEXP selfSEXP, SEXP ASEXP, SEXP upperSEXP, SEXP transposeSEXP, SEXP unitriangularSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type A(ASEXP);
    Rcpp::traits::input_parameter< bool >::type upper(upperSEXP);
    Rcpp::traits::input_parameter< bool >::type transpose(transposeSEXP);
    Rcpp::traits::input_parameter< bool >::type unitriangular(unitriangularSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__triangular_solve_helper_self_Tensor_A_Tensor_upper_bool_transpose_bool_unitriangular_bool(self, A, upper, transpose, unitriangular));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_symeig_out_e_Tensor_V_Tensor_self_Tensor
Rcpp::List cpp_torch_namespace_symeig_out_e_Tensor_V_Tensor_self_Tensor(Rcpp::XPtr<torch::Tensor> e, Rcpp::XPtr<torch::Tensor> V, Rcpp::XPtr<torch::Tensor> self, bool eigenvectors, bool upper);
RcppExport SEXP _torch_cpp_torch_namespace_symeig_out_e_Tensor_V_Tensor_self_Tensor(SEXP eSEXP, SEXP VSEXP, SEXP selfSEXP, SEXP eigenvectorsSEXP, SEXP upperSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type e(eSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type V(VSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< bool >::type eigenvectors(eigenvectorsSEXP);
    Rcpp::traits::input_parameter< bool >::type upper(upperSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_symeig_out_e_Tensor_V_Tensor_self_Tensor(e, V, self, eigenvectors, upper));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_symeig_self_Tensor
Rcpp::List cpp_torch_namespace_symeig_self_Tensor(Rcpp::XPtr<torch::Tensor> self, bool eigenvectors, bool upper);
RcppExport SEXP _torch_cpp_torch_namespace_symeig_self_Tensor(SEXP selfSEXP, SEXP eigenvectorsSEXP, SEXP upperSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< bool >::type eigenvectors(eigenvectorsSEXP);
    Rcpp::traits::input_parameter< bool >::type upper(upperSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_symeig_self_Tensor(self, eigenvectors, upper));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__symeig_helper_self_Tensor_eigenvectors_bool_upper_bool
Rcpp::List cpp_torch_namespace__symeig_helper_self_Tensor_eigenvectors_bool_upper_bool(Rcpp::XPtr<torch::Tensor> self, bool eigenvectors, bool upper);
RcppExport SEXP _torch_cpp_torch_namespace__symeig_helper_self_Tensor_eigenvectors_bool_upper_bool(SEXP selfSEXP, SEXP eigenvectorsSEXP, SEXP upperSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< bool >::type eigenvectors(eigenvectorsSEXP);
    Rcpp::traits::input_parameter< bool >::type upper(upperSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__symeig_helper_self_Tensor_eigenvectors_bool_upper_bool(self, eigenvectors, upper));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_eig_out_e_Tensor_v_Tensor_self_Tensor
Rcpp::List cpp_torch_namespace_eig_out_e_Tensor_v_Tensor_self_Tensor(Rcpp::XPtr<torch::Tensor> e, Rcpp::XPtr<torch::Tensor> v, Rcpp::XPtr<torch::Tensor> self, bool eigenvectors);
RcppExport SEXP _torch_cpp_torch_namespace_eig_out_e_Tensor_v_Tensor_self_Tensor(SEXP eSEXP, SEXP vSEXP, SEXP selfSEXP, SEXP eigenvectorsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type e(eSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type v(vSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< bool >::type eigenvectors(eigenvectorsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_eig_out_e_Tensor_v_Tensor_self_Tensor(e, v, self, eigenvectors));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_eig_self_Tensor
Rcpp::List cpp_torch_namespace_eig_self_Tensor(Rcpp::XPtr<torch::Tensor> self, bool eigenvectors);
RcppExport SEXP _torch_cpp_torch_namespace_eig_self_Tensor(SEXP selfSEXP, SEXP eigenvectorsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< bool >::type eigenvectors(eigenvectorsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_eig_self_Tensor(self, eigenvectors));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_svd_out_U_Tensor_S_Tensor_V_Tensor_self_Tensor
Rcpp::List cpp_torch_namespace_svd_out_U_Tensor_S_Tensor_V_Tensor_self_Tensor(Rcpp::XPtr<torch::Tensor> U, Rcpp::XPtr<torch::Tensor> S, Rcpp::XPtr<torch::Tensor> V, Rcpp::XPtr<torch::Tensor> self, bool some, bool compute_uv);
RcppExport SEXP _torch_cpp_torch_namespace_svd_out_U_Tensor_S_Tensor_V_Tensor_self_Tensor(SEXP USEXP, SEXP SSEXP, SEXP VSEXP, SEXP selfSEXP, SEXP someSEXP, SEXP compute_uvSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type U(USEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type S(SSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type V(VSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< bool >::type some(someSEXP);
    Rcpp::traits::input_parameter< bool >::type compute_uv(compute_uvSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_svd_out_U_Tensor_S_Tensor_V_Tensor_self_Tensor(U, S, V, self, some, compute_uv));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_svd_self_Tensor
Rcpp::List cpp_torch_namespace_svd_self_Tensor(Rcpp::XPtr<torch::Tensor> self, bool some, bool compute_uv);
RcppExport SEXP _torch_cpp_torch_namespace_svd_self_Tensor(SEXP selfSEXP, SEXP someSEXP, SEXP compute_uvSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< bool >::type some(someSEXP);
    Rcpp::traits::input_parameter< bool >::type compute_uv(compute_uvSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_svd_self_Tensor(self, some, compute_uv));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__svd_helper_self_Tensor_some_bool_compute_uv_bool
Rcpp::List cpp_torch_namespace__svd_helper_self_Tensor_some_bool_compute_uv_bool(Rcpp::XPtr<torch::Tensor> self, bool some, bool compute_uv);
RcppExport SEXP _torch_cpp_torch_namespace__svd_helper_self_Tensor_some_bool_compute_uv_bool(SEXP selfSEXP, SEXP someSEXP, SEXP compute_uvSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< bool >::type some(someSEXP);
    Rcpp::traits::input_parameter< bool >::type compute_uv(compute_uvSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__svd_helper_self_Tensor_some_bool_compute_uv_bool(self, some, compute_uv));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_cholesky_out_out_Tensor_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_cholesky_out_out_Tensor_self_Tensor(Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, bool upper);
RcppExport SEXP _torch_cpp_torch_namespace_cholesky_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP upperSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type out(outSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< bool >::type upper(upperSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_cholesky_out_out_Tensor_self_Tensor(out, self, upper));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_cholesky_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_cholesky_self_Tensor(Rcpp::XPtr<torch::Tensor> self, bool upper);
RcppExport SEXP _torch_cpp_torch_namespace_cholesky_self_Tensor(SEXP selfSEXP, SEXP upperSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< bool >::type upper(upperSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_cholesky_self_Tensor(self, upper));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__cholesky_helper_self_Tensor_upper_bool
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace__cholesky_helper_self_Tensor_upper_bool(Rcpp::XPtr<torch::Tensor> self, bool upper);
RcppExport SEXP _torch_cpp_torch_namespace__cholesky_helper_self_Tensor_upper_bool(SEXP selfSEXP, SEXP upperSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< bool >::type upper(upperSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__cholesky_helper_self_Tensor_upper_bool(self, upper));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_cholesky_solve_out_out_Tensor_self_Tensor_input2_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_cholesky_solve_out_out_Tensor_self_Tensor_input2_Tensor(Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> input2, bool upper);
RcppExport SEXP _torch_cpp_torch_namespace_cholesky_solve_out_out_Tensor_self_Tensor_input2_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP input2SEXP, SEXP upperSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type out(outSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type input2(input2SEXP);
    Rcpp::traits::input_parameter< bool >::type upper(upperSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_cholesky_solve_out_out_Tensor_self_Tensor_input2_Tensor(out, self, input2, upper));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_cholesky_solve_self_Tensor_input2_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_cholesky_solve_self_Tensor_input2_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> input2, bool upper);
RcppExport SEXP _torch_cpp_torch_namespace_cholesky_solve_self_Tensor_input2_Tensor(SEXP selfSEXP, SEXP input2SEXP, SEXP upperSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type input2(input2SEXP);
    Rcpp::traits::input_parameter< bool >::type upper(upperSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_cholesky_solve_self_Tensor_input2_Tensor(self, input2, upper));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__cholesky_solve_helper_self_Tensor_A_Tensor_upper_bool
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace__cholesky_solve_helper_self_Tensor_A_Tensor_upper_bool(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> A, bool upper);
RcppExport SEXP _torch_cpp_torch_namespace__cholesky_solve_helper_self_Tensor_A_Tensor_upper_bool(SEXP selfSEXP, SEXP ASEXP, SEXP upperSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type A(ASEXP);
    Rcpp::traits::input_parameter< bool >::type upper(upperSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__cholesky_solve_helper_self_Tensor_A_Tensor_upper_bool(self, A, upper));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_solve_self_Tensor_A_Tensor
Rcpp::List cpp_torch_namespace_solve_self_Tensor_A_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> A);
RcppExport SEXP _torch_cpp_torch_namespace_solve_self_Tensor_A_Tensor(SEXP selfSEXP, SEXP ASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type A(ASEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_solve_self_Tensor_A_Tensor(self, A));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_solve_out_solution_Tensor_lu_Tensor_self_Tensor_A_Tensor
Rcpp::List cpp_torch_namespace_solve_out_solution_Tensor_lu_Tensor_self_Tensor_A_Tensor(Rcpp::XPtr<torch::Tensor> solution, Rcpp::XPtr<torch::Tensor> lu, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> A);
RcppExport SEXP _torch_cpp_torch_namespace_solve_out_solution_Tensor_lu_Tensor_self_Tensor_A_Tensor(SEXP solutionSEXP, SEXP luSEXP, SEXP selfSEXP, SEXP ASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type solution(solutionSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type lu(luSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type A(ASEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_solve_out_solution_Tensor_lu_Tensor_self_Tensor_A_Tensor(solution, lu, self, A));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__solve_helper_self_Tensor_A_Tensor
Rcpp::List cpp_torch_namespace__solve_helper_self_Tensor_A_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> A);
RcppExport SEXP _torch_cpp_torch_namespace__solve_helper_self_Tensor_A_Tensor(SEXP selfSEXP, SEXP ASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type A(ASEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__solve_helper_self_Tensor_A_Tensor(self, A));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_cholesky_inverse_out_out_Tensor_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_cholesky_inverse_out_out_Tensor_self_Tensor(Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, bool upper);
RcppExport SEXP _torch_cpp_torch_namespace_cholesky_inverse_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP upperSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type out(outSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< bool >::type upper(upperSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_cholesky_inverse_out_out_Tensor_self_Tensor(out, self, upper));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_cholesky_inverse_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_cholesky_inverse_self_Tensor(Rcpp::XPtr<torch::Tensor> self, bool upper);
RcppExport SEXP _torch_cpp_torch_namespace_cholesky_inverse_self_Tensor(SEXP selfSEXP, SEXP upperSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< bool >::type upper(upperSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_cholesky_inverse_self_Tensor(self, upper));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_qr_out_Q_Tensor_R_Tensor_self_Tensor
Rcpp::List cpp_torch_namespace_qr_out_Q_Tensor_R_Tensor_self_Tensor(Rcpp::XPtr<torch::Tensor> Q, Rcpp::XPtr<torch::Tensor> R, Rcpp::XPtr<torch::Tensor> self, bool some);
RcppExport SEXP _torch_cpp_torch_namespace_qr_out_Q_Tensor_R_Tensor_self_Tensor(SEXP QSEXP, SEXP RSEXP, SEXP selfSEXP, SEXP someSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type Q(QSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type R(RSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< bool >::type some(someSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_qr_out_Q_Tensor_R_Tensor_self_Tensor(Q, R, self, some));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_qr_self_Tensor
Rcpp::List cpp_torch_namespace_qr_self_Tensor(Rcpp::XPtr<torch::Tensor> self, bool some);
RcppExport SEXP _torch_cpp_torch_namespace_qr_self_Tensor(SEXP selfSEXP, SEXP someSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< bool >::type some(someSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_qr_self_Tensor(self, some));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__qr_helper_self_Tensor_some_bool
Rcpp::List cpp_torch_namespace__qr_helper_self_Tensor_some_bool(Rcpp::XPtr<torch::Tensor> self, bool some);
RcppExport SEXP _torch_cpp_torch_namespace__qr_helper_self_Tensor_some_bool(SEXP selfSEXP, SEXP someSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< bool >::type some(someSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__qr_helper_self_Tensor_some_bool(self, some));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_geqrf_out_a_Tensor_tau_Tensor_self_Tensor
Rcpp::List cpp_torch_namespace_geqrf_out_a_Tensor_tau_Tensor_self_Tensor(Rcpp::XPtr<torch::Tensor> a, Rcpp::XPtr<torch::Tensor> tau, Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_namespace_geqrf_out_a_Tensor_tau_Tensor_self_Tensor(SEXP aSEXP, SEXP tauSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type a(aSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_geqrf_out_a_Tensor_tau_Tensor_self_Tensor(a, tau, self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_geqrf_self_Tensor
Rcpp::List cpp_torch_namespace_geqrf_self_Tensor(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_namespace_geqrf_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_geqrf_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_orgqr_out_out_Tensor_self_Tensor_input2_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_orgqr_out_out_Tensor_self_Tensor_input2_Tensor(Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> input2);
RcppExport SEXP _torch_cpp_torch_namespace_orgqr_out_out_Tensor_self_Tensor_input2_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP input2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type out(outSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type input2(input2SEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_orgqr_out_out_Tensor_self_Tensor_input2_Tensor(out, self, input2));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_orgqr_self_Tensor_input2_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_orgqr_self_Tensor_input2_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> input2);
RcppExport SEXP _torch_cpp_torch_namespace_orgqr_self_Tensor_input2_Tensor(SEXP selfSEXP, SEXP input2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type input2(input2SEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_orgqr_self_Tensor_input2_Tensor(self, input2));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_ormqr_out_out_Tensor_self_Tensor_input2_Tensor_input3_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_ormqr_out_out_Tensor_self_Tensor_input2_Tensor_input3_Tensor(Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> input2, Rcpp::XPtr<torch::Tensor> input3, bool left, bool transpose);
RcppExport SEXP _torch_cpp_torch_namespace_ormqr_out_out_Tensor_self_Tensor_input2_Tensor_input3_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP input2SEXP, SEXP input3SEXP, SEXP leftSEXP, SEXP transposeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type out(outSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type input2(input2SEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type input3(input3SEXP);
    Rcpp::traits::input_parameter< bool >::type left(leftSEXP);
    Rcpp::traits::input_parameter< bool >::type transpose(transposeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_ormqr_out_out_Tensor_self_Tensor_input2_Tensor_input3_Tensor(out, self, input2, input3, left, transpose));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_ormqr_self_Tensor_input2_Tensor_input3_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_ormqr_self_Tensor_input2_Tensor_input3_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> input2, Rcpp::XPtr<torch::Tensor> input3, bool left, bool transpose);
RcppExport SEXP _torch_cpp_torch_namespace_ormqr_self_Tensor_input2_Tensor_input3_Tensor(SEXP selfSEXP, SEXP input2SEXP, SEXP input3SEXP, SEXP leftSEXP, SEXP transposeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type input2(input2SEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type input3(input3SEXP);
    Rcpp::traits::input_parameter< bool >::type left(leftSEXP);
    Rcpp::traits::input_parameter< bool >::type transpose(transposeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_ormqr_self_Tensor_input2_Tensor_input3_Tensor(self, input2, input3, left, transpose));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__lu_with_info_self_Tensor
Rcpp::List cpp_torch_namespace__lu_with_info_self_Tensor(Rcpp::XPtr<torch::Tensor> self, bool pivot, bool check_errors);
RcppExport SEXP _torch_cpp_torch_namespace__lu_with_info_self_Tensor(SEXP selfSEXP, SEXP pivotSEXP, SEXP check_errorsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< bool >::type pivot(pivotSEXP);
    Rcpp::traits::input_parameter< bool >::type check_errors(check_errorsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__lu_with_info_self_Tensor(self, pivot, check_errors));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_lu_solve_out_out_Tensor_self_Tensor_LU_data_Tensor_LU_pivots_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_lu_solve_out_out_Tensor_self_Tensor_LU_data_Tensor_LU_pivots_Tensor(Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> LU_data, Rcpp::XPtr<torch::Tensor> LU_pivots);
RcppExport SEXP _torch_cpp_torch_namespace_lu_solve_out_out_Tensor_self_Tensor_LU_data_Tensor_LU_pivots_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP LU_dataSEXP, SEXP LU_pivotsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type out(outSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type LU_data(LU_dataSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type LU_pivots(LU_pivotsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_lu_solve_out_out_Tensor_self_Tensor_LU_data_Tensor_LU_pivots_Tensor(out, self, LU_data, LU_pivots));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_lu_solve_self_Tensor_LU_data_Tensor_LU_pivots_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_lu_solve_self_Tensor_LU_data_Tensor_LU_pivots_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> LU_data, Rcpp::XPtr<torch::Tensor> LU_pivots);
RcppExport SEXP _torch_cpp_torch_namespace_lu_solve_self_Tensor_LU_data_Tensor_LU_pivots_Tensor(SEXP selfSEXP, SEXP LU_dataSEXP, SEXP LU_pivotsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type LU_data(LU_dataSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type LU_pivots(LU_pivotsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_lu_solve_self_Tensor_LU_data_Tensor_LU_pivots_Tensor(self, LU_data, LU_pivots));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__lu_solve_helper_self_Tensor_LU_data_Tensor_LU_pivots_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace__lu_solve_helper_self_Tensor_LU_data_Tensor_LU_pivots_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> LU_data, Rcpp::XPtr<torch::Tensor> LU_pivots);
RcppExport SEXP _torch_cpp_torch_namespace__lu_solve_helper_self_Tensor_LU_data_Tensor_LU_pivots_Tensor(SEXP selfSEXP, SEXP LU_dataSEXP, SEXP LU_pivotsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type LU_data(LU_dataSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type LU_pivots(LU_pivotsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__lu_solve_helper_self_Tensor_LU_data_Tensor_LU_pivots_Tensor(self, LU_data, LU_pivots));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_multinomial_out_out_Tensor_self_Tensor_num_samples_int64_t
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_multinomial_out_out_Tensor_self_Tensor_num_samples_int64_t(Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, int64_t num_samples, bool replacement, Rcpp::XPtr<torch::Generator *> generator);
RcppExport SEXP _torch_cpp_torch_namespace_multinomial_out_out_Tensor_self_Tensor_num_samples_int64_t(SEXP outSEXP, SEXP selfSEXP, SEXP num_samplesSEXP, SEXP replacementSEXP, SEXP generatorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type out(outSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< int64_t >::type num_samples(num_samplesSEXP);
    Rcpp::traits::input_parameter< bool >::type replacement(replacementSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Generator *> >::type generator(generatorSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_multinomial_out_out_Tensor_self_Tensor_num_samples_int64_t(out, self, num_samples, replacement, generator));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_multinomial_self_Tensor_num_samples_int64_t
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_multinomial_self_Tensor_num_samples_int64_t(Rcpp::XPtr<torch::Tensor> self, int64_t num_samples, bool replacement, Rcpp::XPtr<torch::Generator *> generator);
RcppExport SEXP _torch_cpp_torch_namespace_multinomial_self_Tensor_num_samples_int64_t(SEXP selfSEXP, SEXP num_samplesSEXP, SEXP replacementSEXP, SEXP generatorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< int64_t >::type num_samples(num_samplesSEXP);
    Rcpp::traits::input_parameter< bool >::type replacement(replacementSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Generator *> >::type generator(generatorSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_multinomial_self_Tensor_num_samples_int64_t(self, num_samples, replacement, generator));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__multinomial_alias_setup_probs_Tensor
Rcpp::List cpp_torch_namespace__multinomial_alias_setup_probs_Tensor(Rcpp::XPtr<torch::Tensor> probs);
RcppExport SEXP _torch_cpp_torch_namespace__multinomial_alias_setup_probs_Tensor(SEXP probsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type probs(probsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__multinomial_alias_setup_probs_Tensor(probs));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__multinomial_alias_draw_J_Tensor_q_Tensor_num_samples_int64_t
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace__multinomial_alias_draw_J_Tensor_q_Tensor_num_samples_int64_t(Rcpp::XPtr<torch::Tensor> J, Rcpp::XPtr<torch::Tensor> q, int64_t num_samples, Rcpp::XPtr<torch::Generator *> generator);
RcppExport SEXP _torch_cpp_torch_namespace__multinomial_alias_draw_J_Tensor_q_Tensor_num_samples_int64_t(SEXP JSEXP, SEXP qSEXP, SEXP num_samplesSEXP, SEXP generatorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type J(JSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type q(qSEXP);
    Rcpp::traits::input_parameter< int64_t >::type num_samples(num_samplesSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Generator *> >::type generator(generatorSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__multinomial_alias_draw_J_Tensor_q_Tensor_num_samples_int64_t(J, q, num_samples, generator));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_lgamma_out_out_Tensor_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_lgamma_out_out_Tensor_self_Tensor(Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_namespace_lgamma_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type out(outSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_lgamma_out_out_Tensor_self_Tensor(out, self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_lgamma_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_lgamma_self_Tensor(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_namespace_lgamma_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_lgamma_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_digamma_out_out_Tensor_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_digamma_out_out_Tensor_self_Tensor(Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_namespace_digamma_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type out(outSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_digamma_out_out_Tensor_self_Tensor(out, self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_digamma_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_digamma_self_Tensor(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_namespace_digamma_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_digamma_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_polygamma_out_out_Tensor_n_int64_t_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_polygamma_out_out_Tensor_n_int64_t_self_Tensor(Rcpp::XPtr<torch::Tensor> out, int64_t n, Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_namespace_polygamma_out_out_Tensor_n_int64_t_self_Tensor(SEXP outSEXP, SEXP nSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type out(outSEXP);
    Rcpp::traits::input_parameter< int64_t >::type n(nSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_polygamma_out_out_Tensor_n_int64_t_self_Tensor(out, n, self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_polygamma_n_int64_t_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_polygamma_n_int64_t_self_Tensor(int64_t n, Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_namespace_polygamma_n_int64_t_self_Tensor(SEXP nSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int64_t >::type n(nSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_polygamma_n_int64_t_self_Tensor(n, self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_erfinv_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_erfinv_self_Tensor(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_namespace_erfinv_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_erfinv_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_erfinv_out_out_Tensor_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_erfinv_out_out_Tensor_self_Tensor(Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_namespace_erfinv_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type out(outSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_erfinv_out_out_Tensor_self_Tensor(out, self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_sign_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_sign_self_Tensor(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_namespace_sign_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_sign_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_sign_out_out_Tensor_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_sign_out_out_Tensor_self_Tensor(Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_namespace_sign_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type out(outSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_sign_out_out_Tensor_self_Tensor(out, self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_dist_self_Tensor_other_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_dist_self_Tensor_other_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> other, Rcpp::XPtr<torch::Scalar> p);
RcppExport SEXP _torch_cpp_torch_namespace_dist_self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type other(otherSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_dist_self_Tensor_other_Tensor(self, other, p));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_atan2_out_out_Tensor_self_Tensor_other_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_atan2_out_out_Tensor_self_Tensor_other_Tensor(Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> other);
RcppExport SEXP _torch_cpp_torch_namespace_atan2_out_out_Tensor_self_Tensor_other_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type out(outSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_atan2_out_out_Tensor_self_Tensor_other_Tensor(out, self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_atan2_self_Tensor_other_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_atan2_self_Tensor_other_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> other);
RcppExport SEXP _torch_cpp_torch_namespace_atan2_self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_atan2_self_Tensor_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_lerp_out_out_Tensor_self_Tensor_end_Tensor_weight_Scalar
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_lerp_out_out_Tensor_self_Tensor_end_Tensor_weight_Scalar(Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> end, Rcpp::XPtr<torch::Scalar> weight);
RcppExport SEXP _torch_cpp_torch_namespace_lerp_out_out_Tensor_self_Tensor_end_Tensor_weight_Scalar(SEXP outSEXP, SEXP selfSEXP, SEXP endSEXP, SEXP weightSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type out(outSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type end(endSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type weight(weightSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_lerp_out_out_Tensor_self_Tensor_end_Tensor_weight_Scalar(out, self, end, weight));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_lerp_out_out_Tensor_self_Tensor_end_Tensor_weight_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_lerp_out_out_Tensor_self_Tensor_end_Tensor_weight_Tensor(Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> end, Rcpp::XPtr<torch::Tensor> weight);
RcppExport SEXP _torch_cpp_torch_namespace_lerp_out_out_Tensor_self_Tensor_end_Tensor_weight_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP endSEXP, SEXP weightSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type out(outSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type end(endSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type weight(weightSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_lerp_out_out_Tensor_self_Tensor_end_Tensor_weight_Tensor(out, self, end, weight));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_lerp_self_Tensor_end_Tensor_weight_Scalar
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_lerp_self_Tensor_end_Tensor_weight_Scalar(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> end, Rcpp::XPtr<torch::Scalar> weight);
RcppExport SEXP _torch_cpp_torch_namespace_lerp_self_Tensor_end_Tensor_weight_Scalar(SEXP selfSEXP, SEXP endSEXP, SEXP weightSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type end(endSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type weight(weightSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_lerp_self_Tensor_end_Tensor_weight_Scalar(self, end, weight));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_lerp_self_Tensor_end_Tensor_weight_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_lerp_self_Tensor_end_Tensor_weight_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> end, Rcpp::XPtr<torch::Tensor> weight);
RcppExport SEXP _torch_cpp_torch_namespace_lerp_self_Tensor_end_Tensor_weight_Tensor(SEXP selfSEXP, SEXP endSEXP, SEXP weightSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type end(endSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type weight(weightSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_lerp_self_Tensor_end_Tensor_weight_Tensor(self, end, weight));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_histc_out_out_Tensor_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_histc_out_out_Tensor_self_Tensor(Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, int64_t bins, Rcpp::XPtr<torch::Scalar> min, Rcpp::XPtr<torch::Scalar> max);
RcppExport SEXP _torch_cpp_torch_namespace_histc_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP binsSEXP, SEXP minSEXP, SEXP maxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type out(outSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< int64_t >::type bins(binsSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type min(minSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type max(maxSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_histc_out_out_Tensor_self_Tensor(out, self, bins, min, max));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_histc_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_histc_self_Tensor(Rcpp::XPtr<torch::Tensor> self, int64_t bins, Rcpp::XPtr<torch::Scalar> min, Rcpp::XPtr<torch::Scalar> max);
RcppExport SEXP _torch_cpp_torch_namespace_histc_self_Tensor(SEXP selfSEXP, SEXP binsSEXP, SEXP minSEXP, SEXP maxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< int64_t >::type bins(binsSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type min(minSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type max(maxSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_histc_self_Tensor(self, bins, min, max));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_fmod_out_out_Tensor_self_Tensor_other_Scalar
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_fmod_out_out_Tensor_self_Tensor_other_Scalar(Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Scalar> other);
RcppExport SEXP _torch_cpp_torch_namespace_fmod_out_out_Tensor_self_Tensor_other_Scalar(SEXP outSEXP, SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type out(outSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_fmod_out_out_Tensor_self_Tensor_other_Scalar(out, self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_fmod_self_Tensor_other_Scalar
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_fmod_self_Tensor_other_Scalar(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Scalar> other);
RcppExport SEXP _torch_cpp_torch_namespace_fmod_self_Tensor_other_Scalar(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_fmod_self_Tensor_other_Scalar(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_fmod_out_out_Tensor_self_Tensor_other_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_fmod_out_out_Tensor_self_Tensor_other_Tensor(Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> other);
RcppExport SEXP _torch_cpp_torch_namespace_fmod_out_out_Tensor_self_Tensor_other_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type out(outSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_fmod_out_out_Tensor_self_Tensor_other_Tensor(out, self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_fmod_self_Tensor_other_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_fmod_self_Tensor_other_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> other);
RcppExport SEXP _torch_cpp_torch_namespace_fmod_self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_fmod_self_Tensor_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_remainder_out_out_Tensor_self_Tensor_other_Scalar
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_remainder_out_out_Tensor_self_Tensor_other_Scalar(Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Scalar> other);
RcppExport SEXP _torch_cpp_torch_namespace_remainder_out_out_Tensor_self_Tensor_other_Scalar(SEXP outSEXP, SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type out(outSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_remainder_out_out_Tensor_self_Tensor_other_Scalar(out, self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_remainder_self_Tensor_other_Scalar
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_remainder_self_Tensor_other_Scalar(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Scalar> other);
RcppExport SEXP _torch_cpp_torch_namespace_remainder_self_Tensor_other_Scalar(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_remainder_self_Tensor_other_Scalar(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_remainder_out_out_Tensor_self_Tensor_other_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_remainder_out_out_Tensor_self_Tensor_other_Tensor(Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> other);
RcppExport SEXP _torch_cpp_torch_namespace_remainder_out_out_Tensor_self_Tensor_other_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type out(outSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_remainder_out_out_Tensor_self_Tensor_other_Tensor(out, self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_remainder_self_Tensor_other_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_remainder_self_Tensor_other_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> other);
RcppExport SEXP _torch_cpp_torch_namespace_remainder_self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_remainder_self_Tensor_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_min_out_out_Tensor_self_Tensor_other_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_min_out_out_Tensor_self_Tensor_other_Tensor(Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> other);
RcppExport SEXP _torch_cpp_torch_namespace_min_out_out_Tensor_self_Tensor_other_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type out(outSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_min_out_out_Tensor_self_Tensor_other_Tensor(out, self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_min_self_Tensor_other_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_min_self_Tensor_other_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> other);
RcppExport SEXP _torch_cpp_torch_namespace_min_self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_min_self_Tensor_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_min_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_min_self_Tensor(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_namespace_min_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_min_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_max_out_out_Tensor_self_Tensor_other_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_max_out_out_Tensor_self_Tensor_other_Tensor(Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> other);
RcppExport SEXP _torch_cpp_torch_namespace_max_out_out_Tensor_self_Tensor_other_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type out(outSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_max_out_out_Tensor_self_Tensor_other_Tensor(out, self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_max_self_Tensor_other_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_max_self_Tensor_other_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> other);
RcppExport SEXP _torch_cpp_torch_namespace_max_self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_max_self_Tensor_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_max_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_max_self_Tensor(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_namespace_max_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_max_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_median_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_median_self_Tensor(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_namespace_median_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_median_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_sort_out_values_Tensor_indices_Tensor_self_Tensor
Rcpp::List cpp_torch_namespace_sort_out_values_Tensor_indices_Tensor_self_Tensor(Rcpp::XPtr<torch::Tensor> values, Rcpp::XPtr<torch::Tensor> indices, Rcpp::XPtr<torch::Tensor> self, int64_t dim, bool descending);
RcppExport SEXP _torch_cpp_torch_namespace_sort_out_values_Tensor_indices_Tensor_self_Tensor(SEXP valuesSEXP, SEXP indicesSEXP, SEXP selfSEXP, SEXP dimSEXP, SEXP descendingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type values(valuesSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type indices(indicesSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< bool >::type descending(descendingSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_sort_out_values_Tensor_indices_Tensor_self_Tensor(values, indices, self, dim, descending));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_sort_self_Tensor
Rcpp::List cpp_torch_namespace_sort_self_Tensor(Rcpp::XPtr<torch::Tensor> self, int64_t dim, bool descending);
RcppExport SEXP _torch_cpp_torch_namespace_sort_self_Tensor(SEXP selfSEXP, SEXP dimSEXP, SEXP descendingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< bool >::type descending(descendingSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_sort_self_Tensor(self, dim, descending));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_sort_out_values_Tensor_indices_Tensor_self_Tensor_dim_Dimname
Rcpp::List cpp_torch_namespace_sort_out_values_Tensor_indices_Tensor_self_Tensor_dim_Dimname(Rcpp::XPtr<torch::Tensor> values, Rcpp::XPtr<torch::Tensor> indices, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Dimname> dim, bool descending);
RcppExport SEXP _torch_cpp_torch_namespace_sort_out_values_Tensor_indices_Tensor_self_Tensor_dim_Dimname(SEXP valuesSEXP, SEXP indicesSEXP, SEXP selfSEXP, SEXP dimSEXP, SEXP descendingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type values(valuesSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type indices(indicesSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Dimname> >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< bool >::type descending(descendingSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_sort_out_values_Tensor_indices_Tensor_self_Tensor_dim_Dimname(values, indices, self, dim, descending));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_sort_self_Tensor_dim_Dimname
Rcpp::List cpp_torch_namespace_sort_self_Tensor_dim_Dimname(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Dimname> dim, bool descending);
RcppExport SEXP _torch_cpp_torch_namespace_sort_self_Tensor_dim_Dimname(SEXP selfSEXP, SEXP dimSEXP, SEXP descendingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Dimname> >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< bool >::type descending(descendingSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_sort_self_Tensor_dim_Dimname(self, dim, descending));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_argsort_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_argsort_self_Tensor(Rcpp::XPtr<torch::Tensor> self, int64_t dim, bool descending);
RcppExport SEXP _torch_cpp_torch_namespace_argsort_self_Tensor(SEXP selfSEXP, SEXP dimSEXP, SEXP descendingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< bool >::type descending(descendingSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_argsort_self_Tensor(self, dim, descending));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_argsort_self_Tensor_dim_Dimname
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_argsort_self_Tensor_dim_Dimname(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Dimname> dim, bool descending);
RcppExport SEXP _torch_cpp_torch_namespace_argsort_self_Tensor_dim_Dimname(SEXP selfSEXP, SEXP dimSEXP, SEXP descendingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Dimname> >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< bool >::type descending(descendingSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_argsort_self_Tensor_dim_Dimname(self, dim, descending));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_topk_out_values_Tensor_indices_Tensor_self_Tensor_k_int64_t
Rcpp::List cpp_torch_namespace_topk_out_values_Tensor_indices_Tensor_self_Tensor_k_int64_t(Rcpp::XPtr<torch::Tensor> values, Rcpp::XPtr<torch::Tensor> indices, Rcpp::XPtr<torch::Tensor> self, int64_t k, int64_t dim, bool largest, bool sorted);
RcppExport SEXP _torch_cpp_torch_namespace_topk_out_values_Tensor_indices_Tensor_self_Tensor_k_int64_t(SEXP valuesSEXP, SEXP indicesSEXP, SEXP selfSEXP, SEXP kSEXP, SEXP dimSEXP, SEXP largestSEXP, SEXP sortedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type values(valuesSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type indices(indicesSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< int64_t >::type k(kSEXP);
    Rcpp::traits::input_parameter< int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< bool >::type largest(largestSEXP);
    Rcpp::traits::input_parameter< bool >::type sorted(sortedSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_topk_out_values_Tensor_indices_Tensor_self_Tensor_k_int64_t(values, indices, self, k, dim, largest, sorted));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_topk_self_Tensor_k_int64_t
Rcpp::List cpp_torch_namespace_topk_self_Tensor_k_int64_t(Rcpp::XPtr<torch::Tensor> self, int64_t k, int64_t dim, bool largest, bool sorted);
RcppExport SEXP _torch_cpp_torch_namespace_topk_self_Tensor_k_int64_t(SEXP selfSEXP, SEXP kSEXP, SEXP dimSEXP, SEXP largestSEXP, SEXP sortedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< int64_t >::type k(kSEXP);
    Rcpp::traits::input_parameter< int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< bool >::type largest(largestSEXP);
    Rcpp::traits::input_parameter< bool >::type sorted(sortedSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_topk_self_Tensor_k_int64_t(self, k, dim, largest, sorted));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_all_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_all_self_Tensor(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_namespace_all_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_all_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_any_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_any_self_Tensor(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_namespace_any_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_any_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_renorm_out_out_Tensor_self_Tensor_p_Scalar_dim_int64_t_maxnorm_Scalar
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_renorm_out_out_Tensor_self_Tensor_p_Scalar_dim_int64_t_maxnorm_Scalar(Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Scalar> p, int64_t dim, Rcpp::XPtr<torch::Scalar> maxnorm);
RcppExport SEXP _torch_cpp_torch_namespace_renorm_out_out_Tensor_self_Tensor_p_Scalar_dim_int64_t_maxnorm_Scalar(SEXP outSEXP, SEXP selfSEXP, SEXP pSEXP, SEXP dimSEXP, SEXP maxnormSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type out(outSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type p(pSEXP);
    Rcpp::traits::input_parameter< int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type maxnorm(maxnormSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_renorm_out_out_Tensor_self_Tensor_p_Scalar_dim_int64_t_maxnorm_Scalar(out, self, p, dim, maxnorm));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_renorm_self_Tensor_p_Scalar_dim_int64_t_maxnorm_Scalar
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_renorm_self_Tensor_p_Scalar_dim_int64_t_maxnorm_Scalar(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Scalar> p, int64_t dim, Rcpp::XPtr<torch::Scalar> maxnorm);
RcppExport SEXP _torch_cpp_torch_namespace_renorm_self_Tensor_p_Scalar_dim_int64_t_maxnorm_Scalar(SEXP selfSEXP, SEXP pSEXP, SEXP dimSEXP, SEXP maxnormSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type p(pSEXP);
    Rcpp::traits::input_parameter< int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type maxnorm(maxnormSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_renorm_self_Tensor_p_Scalar_dim_int64_t_maxnorm_Scalar(self, p, dim, maxnorm));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_equal_self_Tensor_other_Tensor
bool cpp_torch_namespace_equal_self_Tensor_other_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> other);
RcppExport SEXP _torch_cpp_torch_namespace_equal_self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_equal_self_Tensor_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_pow_out_out_Tensor_self_Tensor_exponent_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_pow_out_out_Tensor_self_Tensor_exponent_Tensor(Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> exponent);
RcppExport SEXP _torch_cpp_torch_namespace_pow_out_out_Tensor_self_Tensor_exponent_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP exponentSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type out(outSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type exponent(exponentSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_pow_out_out_Tensor_self_Tensor_exponent_Tensor(out, self, exponent));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_pow_self_Tensor_exponent_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_pow_self_Tensor_exponent_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> exponent);
RcppExport SEXP _torch_cpp_torch_namespace_pow_self_Tensor_exponent_Tensor(SEXP selfSEXP, SEXP exponentSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type exponent(exponentSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_pow_self_Tensor_exponent_Tensor(self, exponent));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_pow_out_out_Tensor_self_Scalar_exponent_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_pow_out_out_Tensor_self_Scalar_exponent_Tensor(Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Scalar> self, Rcpp::XPtr<torch::Tensor> exponent);
RcppExport SEXP _torch_cpp_torch_namespace_pow_out_out_Tensor_self_Scalar_exponent_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP exponentSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type out(outSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type exponent(exponentSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_pow_out_out_Tensor_self_Scalar_exponent_Tensor(out, self, exponent));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_pow_self_Scalar_exponent_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_pow_self_Scalar_exponent_Tensor(Rcpp::XPtr<torch::Scalar> self, Rcpp::XPtr<torch::Tensor> exponent);
RcppExport SEXP _torch_cpp_torch_namespace_pow_self_Scalar_exponent_Tensor(SEXP selfSEXP, SEXP exponentSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type exponent(exponentSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_pow_self_Scalar_exponent_Tensor(self, exponent));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_normal_out_out_Tensor_mean_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_normal_out_out_Tensor_mean_Tensor(Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> mean, double std, Rcpp::XPtr<torch::Generator *> generator);
RcppExport SEXP _torch_cpp_torch_namespace_normal_out_out_Tensor_mean_Tensor(SEXP outSEXP, SEXP meanSEXP, SEXP stdSEXP, SEXP generatorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type out(outSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< double >::type std(stdSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Generator *> >::type generator(generatorSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_normal_out_out_Tensor_mean_Tensor(out, mean, std, generator));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_normal_mean_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_normal_mean_Tensor(Rcpp::XPtr<torch::Tensor> mean, double std, Rcpp::XPtr<torch::Generator *> generator);
RcppExport SEXP _torch_cpp_torch_namespace_normal_mean_Tensor(SEXP meanSEXP, SEXP stdSEXP, SEXP generatorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< double >::type std(stdSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Generator *> >::type generator(generatorSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_normal_mean_Tensor(mean, std, generator));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_normal_out_out_Tensor_mean_double_std_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_normal_out_out_Tensor_mean_double_std_Tensor(Rcpp::XPtr<torch::Tensor> out, double mean, Rcpp::XPtr<torch::Tensor> std, Rcpp::XPtr<torch::Generator *> generator);
RcppExport SEXP _torch_cpp_torch_namespace_normal_out_out_Tensor_mean_double_std_Tensor(SEXP outSEXP, SEXP meanSEXP, SEXP stdSEXP, SEXP generatorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type out(outSEXP);
    Rcpp::traits::input_parameter< double >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type std(stdSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Generator *> >::type generator(generatorSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_normal_out_out_Tensor_mean_double_std_Tensor(out, mean, std, generator));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_normal_mean_double_std_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_normal_mean_double_std_Tensor(double mean, Rcpp::XPtr<torch::Tensor> std, Rcpp::XPtr<torch::Generator *> generator);
RcppExport SEXP _torch_cpp_torch_namespace_normal_mean_double_std_Tensor(SEXP meanSEXP, SEXP stdSEXP, SEXP generatorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type std(stdSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Generator *> >::type generator(generatorSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_normal_mean_double_std_Tensor(mean, std, generator));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_normal_out_out_Tensor_mean_Tensor_std_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_normal_out_out_Tensor_mean_Tensor_std_Tensor(Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> mean, Rcpp::XPtr<torch::Tensor> std, Rcpp::XPtr<torch::Generator *> generator);
RcppExport SEXP _torch_cpp_torch_namespace_normal_out_out_Tensor_mean_Tensor_std_Tensor(SEXP outSEXP, SEXP meanSEXP, SEXP stdSEXP, SEXP generatorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type out(outSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type std(stdSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Generator *> >::type generator(generatorSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_normal_out_out_Tensor_mean_Tensor_std_Tensor(out, mean, std, generator));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_normal_mean_Tensor_std_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_normal_mean_Tensor_std_Tensor(Rcpp::XPtr<torch::Tensor> mean, Rcpp::XPtr<torch::Tensor> std, Rcpp::XPtr<torch::Generator *> generator);
RcppExport SEXP _torch_cpp_torch_namespace_normal_mean_Tensor_std_Tensor(SEXP meanSEXP, SEXP stdSEXP, SEXP generatorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type std(stdSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Generator *> >::type generator(generatorSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_normal_mean_Tensor_std_Tensor(mean, std, generator));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_normal_mean_double_std_double_size_IntArrayRef
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_normal_mean_double_std_double_size_IntArrayRef(double mean, double std, std::vector<int64_t> size, Rcpp::XPtr<torch::Generator *> generator, Rcpp::XPtr<torch::TensorOptions> options);
RcppExport SEXP _torch_cpp_torch_namespace_normal_mean_double_std_double_size_IntArrayRef(SEXP meanSEXP, SEXP stdSEXP, SEXP sizeSEXP, SEXP generatorSEXP, SEXP optionsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< double >::type std(stdSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Generator *> >::type generator(generatorSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::TensorOptions> >::type options(optionsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_normal_mean_double_std_double_size_IntArrayRef(mean, std, size, generator, options));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_normal_out_out_Tensor_mean_double_std_double_size_IntArrayRef
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_normal_out_out_Tensor_mean_double_std_double_size_IntArrayRef(Rcpp::XPtr<torch::Tensor> out, double mean, double std, std::vector<int64_t> size, Rcpp::XPtr<torch::Generator *> generator);
RcppExport SEXP _torch_cpp_torch_namespace_normal_out_out_Tensor_mean_double_std_double_size_IntArrayRef(SEXP outSEXP, SEXP meanSEXP, SEXP stdSEXP, SEXP sizeSEXP, SEXP generatorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type out(outSEXP);
    Rcpp::traits::input_parameter< double >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< double >::type std(stdSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Generator *> >::type generator(generatorSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_normal_out_out_Tensor_mean_double_std_double_size_IntArrayRef(out, mean, std, size, generator));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_alias_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_alias_self_Tensor(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_namespace_alias_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_alias_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__addr_self_Tensor_vec1_Tensor_vec2_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace__addr_self_Tensor_vec1_Tensor_vec2_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> vec1, Rcpp::XPtr<torch::Tensor> vec2, Rcpp::XPtr<torch::Scalar> beta, Rcpp::XPtr<torch::Scalar> alpha);
RcppExport SEXP _torch_cpp_torch_namespace__addr_self_Tensor_vec1_Tensor_vec2_Tensor(SEXP selfSEXP, SEXP vec1SEXP, SEXP vec2SEXP, SEXP betaSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type vec1(vec1SEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type vec2(vec2SEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__addr_self_Tensor_vec1_Tensor_vec2_Tensor(self, vec1, vec2, beta, alpha));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__addr__self_Tensor_vec1_Tensor_vec2_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace__addr__self_Tensor_vec1_Tensor_vec2_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> vec1, Rcpp::XPtr<torch::Tensor> vec2, Rcpp::XPtr<torch::Scalar> beta, Rcpp::XPtr<torch::Scalar> alpha);
RcppExport SEXP _torch_cpp_torch_namespace__addr__self_Tensor_vec1_Tensor_vec2_Tensor(SEXP selfSEXP, SEXP vec1SEXP, SEXP vec2SEXP, SEXP betaSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type vec1(vec1SEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type vec2(vec2SEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__addr__self_Tensor_vec1_Tensor_vec2_Tensor(self, vec1, vec2, beta, alpha));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__addr_out_out_Tensor_self_Tensor_vec1_Tensor_vec2_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace__addr_out_out_Tensor_self_Tensor_vec1_Tensor_vec2_Tensor(Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> vec1, Rcpp::XPtr<torch::Tensor> vec2, Rcpp::XPtr<torch::Scalar> beta, Rcpp::XPtr<torch::Scalar> alpha);
RcppExport SEXP _torch_cpp_torch_namespace__addr_out_out_Tensor_self_Tensor_vec1_Tensor_vec2_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP vec1SEXP, SEXP vec2SEXP, SEXP betaSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type out(outSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type vec1(vec1SEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type vec2(vec2SEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__addr_out_out_Tensor_self_Tensor_vec1_Tensor_vec2_Tensor(out, self, vec1, vec2, beta, alpha));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__index_copy__self_Tensor_dim_int64_t_index_Tensor_source_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace__index_copy__self_Tensor_dim_int64_t_index_Tensor_source_Tensor(Rcpp::XPtr<torch::Tensor> self, int64_t dim, Rcpp::XPtr<torch::Tensor> index, Rcpp::XPtr<torch::Tensor> source);
RcppExport SEXP _torch_cpp_torch_namespace__index_copy__self_Tensor_dim_int64_t_index_Tensor_source_Tensor(SEXP selfSEXP, SEXP dimSEXP, SEXP indexSEXP, SEXP sourceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type index(indexSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type source(sourceSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__index_copy__self_Tensor_dim_int64_t_index_Tensor_source_Tensor(self, dim, index, source));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__cumsum_self_Tensor_dim_int64_t
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace__cumsum_self_Tensor_dim_int64_t(Rcpp::XPtr<torch::Tensor> self, int64_t dim);
RcppExport SEXP _torch_cpp_torch_namespace__cumsum_self_Tensor_dim_int64_t(SEXP selfSEXP, SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< int64_t >::type dim(dimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__cumsum_self_Tensor_dim_int64_t(self, dim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__cumsum_out_out_Tensor_self_Tensor_dim_int64_t
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace__cumsum_out_out_Tensor_self_Tensor_dim_int64_t(Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, int64_t dim);
RcppExport SEXP _torch_cpp_torch_namespace__cumsum_out_out_Tensor_self_Tensor_dim_int64_t(SEXP outSEXP, SEXP selfSEXP, SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type out(outSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< int64_t >::type dim(dimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__cumsum_out_out_Tensor_self_Tensor_dim_int64_t(out, self, dim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__cumprod_self_Tensor_dim_int64_t
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace__cumprod_self_Tensor_dim_int64_t(Rcpp::XPtr<torch::Tensor> self, int64_t dim);
RcppExport SEXP _torch_cpp_torch_namespace__cumprod_self_Tensor_dim_int64_t(SEXP selfSEXP, SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< int64_t >::type dim(dimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__cumprod_self_Tensor_dim_int64_t(self, dim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__cumprod_out_out_Tensor_self_Tensor_dim_int64_t
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace__cumprod_out_out_Tensor_self_Tensor_dim_int64_t(Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, int64_t dim);
RcppExport SEXP _torch_cpp_torch_namespace__cumprod_out_out_Tensor_self_Tensor_dim_int64_t(SEXP outSEXP, SEXP selfSEXP, SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type out(outSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< int64_t >::type dim(dimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__cumprod_out_out_Tensor_self_Tensor_dim_int64_t(out, self, dim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__var_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace__var_self_Tensor(Rcpp::XPtr<torch::Tensor> self, bool unbiased);
RcppExport SEXP _torch_cpp_torch_namespace__var_self_Tensor(SEXP selfSEXP, SEXP unbiasedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< bool >::type unbiased(unbiasedSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__var_self_Tensor(self, unbiased));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__std_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace__std_self_Tensor(Rcpp::XPtr<torch::Tensor> self, bool unbiased);
RcppExport SEXP _torch_cpp_torch_namespace__std_self_Tensor(SEXP selfSEXP, SEXP unbiasedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< bool >::type unbiased(unbiasedSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__std_self_Tensor(self, unbiased));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__cat_tensors_TensorList
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace__cat_tensors_TensorList(Rcpp::XPtr<std::vector<torch::Tensor>> tensors, int64_t dim);
RcppExport SEXP _torch_cpp_torch_namespace__cat_tensors_TensorList(SEXP tensorsSEXP, SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::vector<torch::Tensor>> >::type tensors(tensorsSEXP);
    Rcpp::traits::input_parameter< int64_t >::type dim(dimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__cat_tensors_TensorList(tensors, dim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__cat_out_out_Tensor_tensors_TensorList
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace__cat_out_out_Tensor_tensors_TensorList(Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<std::vector<torch::Tensor>> tensors, int64_t dim);
RcppExport SEXP _torch_cpp_torch_namespace__cat_out_out_Tensor_tensors_TensorList(SEXP outSEXP, SEXP tensorsSEXP, SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type out(outSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::vector<torch::Tensor>> >::type tensors(tensorsSEXP);
    Rcpp::traits::input_parameter< int64_t >::type dim(dimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__cat_out_out_Tensor_tensors_TensorList(out, tensors, dim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__mode_self_Tensor
Rcpp::List cpp_torch_namespace__mode_self_Tensor(Rcpp::XPtr<torch::Tensor> self, int64_t dim, bool keepdim);
RcppExport SEXP _torch_cpp_torch_namespace__mode_self_Tensor(SEXP selfSEXP, SEXP dimSEXP, SEXP keepdimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< bool >::type keepdim(keepdimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__mode_self_Tensor(self, dim, keepdim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__mode_out_values_Tensor_indices_Tensor_self_Tensor
Rcpp::List cpp_torch_namespace__mode_out_values_Tensor_indices_Tensor_self_Tensor(Rcpp::XPtr<torch::Tensor> values, Rcpp::XPtr<torch::Tensor> indices, Rcpp::XPtr<torch::Tensor> self, int64_t dim, bool keepdim);
RcppExport SEXP _torch_cpp_torch_namespace__mode_out_values_Tensor_indices_Tensor_self_Tensor(SEXP valuesSEXP, SEXP indicesSEXP, SEXP selfSEXP, SEXP dimSEXP, SEXP keepdimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type values(valuesSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type indices(indicesSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< bool >::type keepdim(keepdimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__mode_out_values_Tensor_indices_Tensor_self_Tensor(values, indices, self, dim, keepdim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__max_self_Tensor_dim_int64_t
Rcpp::List cpp_torch_namespace__max_self_Tensor_dim_int64_t(Rcpp::XPtr<torch::Tensor> self, int64_t dim, bool keepdim);
RcppExport SEXP _torch_cpp_torch_namespace__max_self_Tensor_dim_int64_t(SEXP selfSEXP, SEXP dimSEXP, SEXP keepdimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< bool >::type keepdim(keepdimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__max_self_Tensor_dim_int64_t(self, dim, keepdim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__max_out_max_Tensor_max_indices_Tensor_self_Tensor_dim_int64_t
Rcpp::List cpp_torch_namespace__max_out_max_Tensor_max_indices_Tensor_self_Tensor_dim_int64_t(Rcpp::XPtr<torch::Tensor> max, Rcpp::XPtr<torch::Tensor> max_indices, Rcpp::XPtr<torch::Tensor> self, int64_t dim, bool keepdim);
RcppExport SEXP _torch_cpp_torch_namespace__max_out_max_Tensor_max_indices_Tensor_self_Tensor_dim_int64_t(SEXP maxSEXP, SEXP max_indicesSEXP, SEXP selfSEXP, SEXP dimSEXP, SEXP keepdimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type max(maxSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type max_indices(max_indicesSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< bool >::type keepdim(keepdimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__max_out_max_Tensor_max_indices_Tensor_self_Tensor_dim_int64_t(max, max_indices, self, dim, keepdim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__min_self_Tensor_dim_int64_t
Rcpp::List cpp_torch_namespace__min_self_Tensor_dim_int64_t(Rcpp::XPtr<torch::Tensor> self, int64_t dim, bool keepdim);
RcppExport SEXP _torch_cpp_torch_namespace__min_self_Tensor_dim_int64_t(SEXP selfSEXP, SEXP dimSEXP, SEXP keepdimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< bool >::type keepdim(keepdimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__min_self_Tensor_dim_int64_t(self, dim, keepdim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__min_out_min_Tensor_min_indices_Tensor_self_Tensor_dim_int64_t
Rcpp::List cpp_torch_namespace__min_out_min_Tensor_min_indices_Tensor_self_Tensor_dim_int64_t(Rcpp::XPtr<torch::Tensor> min, Rcpp::XPtr<torch::Tensor> min_indices, Rcpp::XPtr<torch::Tensor> self, int64_t dim, bool keepdim);
RcppExport SEXP _torch_cpp_torch_namespace__min_out_min_Tensor_min_indices_Tensor_self_Tensor_dim_int64_t(SEXP minSEXP, SEXP min_indicesSEXP, SEXP selfSEXP, SEXP dimSEXP, SEXP keepdimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type min(minSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type min_indices(min_indicesSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< bool >::type keepdim(keepdimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__min_out_min_Tensor_min_indices_Tensor_self_Tensor_dim_int64_t(min, min_indices, self, dim, keepdim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_binary_cross_entropy_out_out_Tensor_self_Tensor_target_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_binary_cross_entropy_out_out_Tensor_self_Tensor_target_Tensor(Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> target, Rcpp::XPtr<torch::Tensor> weight, int64_t reduction);
RcppExport SEXP _torch_cpp_torch_namespace_binary_cross_entropy_out_out_Tensor_self_Tensor_target_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP targetSEXP, SEXP weightSEXP, SEXP reductionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type out(outSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type target(targetSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< int64_t >::type reduction(reductionSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_binary_cross_entropy_out_out_Tensor_self_Tensor_target_Tensor(out, self, target, weight, reduction));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_binary_cross_entropy_self_Tensor_target_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_binary_cross_entropy_self_Tensor_target_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> target, Rcpp::XPtr<torch::Tensor> weight, int64_t reduction);
RcppExport SEXP _torch_cpp_torch_namespace_binary_cross_entropy_self_Tensor_target_Tensor(SEXP selfSEXP, SEXP targetSEXP, SEXP weightSEXP, SEXP reductionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type target(targetSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< int64_t >::type reduction(reductionSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_binary_cross_entropy_self_Tensor_target_Tensor(self, target, weight, reduction));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_binary_cross_entropy_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_target_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_binary_cross_entropy_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_target_Tensor(Rcpp::XPtr<torch::Tensor> grad_input, Rcpp::XPtr<torch::Tensor> grad_output, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> target, Rcpp::XPtr<torch::Tensor> weight, int64_t reduction);
RcppExport SEXP _torch_cpp_torch_namespace_binary_cross_entropy_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_target_Tensor(SEXP grad_inputSEXP, SEXP grad_outputSEXP, SEXP selfSEXP, SEXP targetSEXP, SEXP weightSEXP, SEXP reductionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type grad_input(grad_inputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type target(targetSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< int64_t >::type reduction(reductionSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_binary_cross_entropy_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_target_Tensor(grad_input, grad_output, self, target, weight, reduction));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_binary_cross_entropy_backward_grad_output_Tensor_self_Tensor_target_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_binary_cross_entropy_backward_grad_output_Tensor_self_Tensor_target_Tensor(Rcpp::XPtr<torch::Tensor> grad_output, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> target, Rcpp::XPtr<torch::Tensor> weight, int64_t reduction);
RcppExport SEXP _torch_cpp_torch_namespace_binary_cross_entropy_backward_grad_output_Tensor_self_Tensor_target_Tensor(SEXP grad_outputSEXP, SEXP selfSEXP, SEXP targetSEXP, SEXP weightSEXP, SEXP reductionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type target(targetSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< int64_t >::type reduction(reductionSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_binary_cross_entropy_backward_grad_output_Tensor_self_Tensor_target_Tensor(grad_output, self, target, weight, reduction));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_mse_loss_out_out_Tensor_self_Tensor_target_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_mse_loss_out_out_Tensor_self_Tensor_target_Tensor(Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> target, int64_t reduction);
RcppExport SEXP _torch_cpp_torch_namespace_mse_loss_out_out_Tensor_self_Tensor_target_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP targetSEXP, SEXP reductionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type out(outSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type target(targetSEXP);
    Rcpp::traits::input_parameter< int64_t >::type reduction(reductionSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_mse_loss_out_out_Tensor_self_Tensor_target_Tensor(out, self, target, reduction));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_mse_loss_self_Tensor_target_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_mse_loss_self_Tensor_target_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> target, int64_t reduction);
RcppExport SEXP _torch_cpp_torch_namespace_mse_loss_self_Tensor_target_Tensor(SEXP selfSEXP, SEXP targetSEXP, SEXP reductionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type target(targetSEXP);
    Rcpp::traits::input_parameter< int64_t >::type reduction(reductionSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_mse_loss_self_Tensor_target_Tensor(self, target, reduction));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_mse_loss_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_target_Tensor_reduction_int64_t
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_mse_loss_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_target_Tensor_reduction_int64_t(Rcpp::XPtr<torch::Tensor> grad_input, Rcpp::XPtr<torch::Tensor> grad_output, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> target, int64_t reduction);
RcppExport SEXP _torch_cpp_torch_namespace_mse_loss_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_target_Tensor_reduction_int64_t(SEXP grad_inputSEXP, SEXP grad_outputSEXP, SEXP selfSEXP, SEXP targetSEXP, SEXP reductionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type grad_input(grad_inputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type target(targetSEXP);
    Rcpp::traits::input_parameter< int64_t >::type reduction(reductionSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_mse_loss_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_target_Tensor_reduction_int64_t(grad_input, grad_output, self, target, reduction));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_mse_loss_backward_grad_output_Tensor_self_Tensor_target_Tensor_reduction_int64_t
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_mse_loss_backward_grad_output_Tensor_self_Tensor_target_Tensor_reduction_int64_t(Rcpp::XPtr<torch::Tensor> grad_output, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> target, int64_t reduction);
RcppExport SEXP _torch_cpp_torch_namespace_mse_loss_backward_grad_output_Tensor_self_Tensor_target_Tensor_reduction_int64_t(SEXP grad_outputSEXP, SEXP selfSEXP, SEXP targetSEXP, SEXP reductionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type target(targetSEXP);
    Rcpp::traits::input_parameter< int64_t >::type reduction(reductionSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_mse_loss_backward_grad_output_Tensor_self_Tensor_target_Tensor_reduction_int64_t(grad_output, self, target, reduction));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_l1_loss_out_out_Tensor_self_Tensor_target_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_l1_loss_out_out_Tensor_self_Tensor_target_Tensor(Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> target, int64_t reduction);
RcppExport SEXP _torch_cpp_torch_namespace_l1_loss_out_out_Tensor_self_Tensor_target_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP targetSEXP, SEXP reductionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type out(outSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type target(targetSEXP);
    Rcpp::traits::input_parameter< int64_t >::type reduction(reductionSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_l1_loss_out_out_Tensor_self_Tensor_target_Tensor(out, self, target, reduction));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_l1_loss_self_Tensor_target_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_l1_loss_self_Tensor_target_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> target, int64_t reduction);
RcppExport SEXP _torch_cpp_torch_namespace_l1_loss_self_Tensor_target_Tensor(SEXP selfSEXP, SEXP targetSEXP, SEXP reductionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type target(targetSEXP);
    Rcpp::traits::input_parameter< int64_t >::type reduction(reductionSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_l1_loss_self_Tensor_target_Tensor(self, target, reduction));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_l1_loss_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_target_Tensor_reduction_int64_t
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_l1_loss_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_target_Tensor_reduction_int64_t(Rcpp::XPtr<torch::Tensor> grad_input, Rcpp::XPtr<torch::Tensor> grad_output, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> target, int64_t reduction);
RcppExport SEXP _torch_cpp_torch_namespace_l1_loss_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_target_Tensor_reduction_int64_t(SEXP grad_inputSEXP, SEXP grad_outputSEXP, SEXP selfSEXP, SEXP targetSEXP, SEXP reductionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type grad_input(grad_inputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type target(targetSEXP);
    Rcpp::traits::input_parameter< int64_t >::type reduction(reductionSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_l1_loss_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_target_Tensor_reduction_int64_t(grad_input, grad_output, self, target, reduction));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_l1_loss_backward_grad_output_Tensor_self_Tensor_target_Tensor_reduction_int64_t
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_l1_loss_backward_grad_output_Tensor_self_Tensor_target_Tensor_reduction_int64_t(Rcpp::XPtr<torch::Tensor> grad_output, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> target, int64_t reduction);
RcppExport SEXP _torch_cpp_torch_namespace_l1_loss_backward_grad_output_Tensor_self_Tensor_target_Tensor_reduction_int64_t(SEXP grad_outputSEXP, SEXP selfSEXP, SEXP targetSEXP, SEXP reductionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type target(targetSEXP);
    Rcpp::traits::input_parameter< int64_t >::type reduction(reductionSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_l1_loss_backward_grad_output_Tensor_self_Tensor_target_Tensor_reduction_int64_t(grad_output, self, target, reduction));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_multi_margin_loss_out_out_Tensor_self_Tensor_target_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_multi_margin_loss_out_out_Tensor_self_Tensor_target_Tensor(Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> target, Rcpp::XPtr<torch::Scalar> p, Rcpp::XPtr<torch::Scalar> margin, Rcpp::XPtr<torch::Tensor> weight, int64_t reduction);
RcppExport SEXP _torch_cpp_torch_namespace_multi_margin_loss_out_out_Tensor_self_Tensor_target_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP targetSEXP, SEXP pSEXP, SEXP marginSEXP, SEXP weightSEXP, SEXP reductionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type out(outSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type target(targetSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type p(pSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type margin(marginSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< int64_t >::type reduction(reductionSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_multi_margin_loss_out_out_Tensor_self_Tensor_target_Tensor(out, self, target, p, margin, weight, reduction));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_multi_margin_loss_self_Tensor_target_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_multi_margin_loss_self_Tensor_target_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> target, Rcpp::XPtr<torch::Scalar> p, Rcpp::XPtr<torch::Scalar> margin, Rcpp::XPtr<torch::Tensor> weight, int64_t reduction);
RcppExport SEXP _torch_cpp_torch_namespace_multi_margin_loss_self_Tensor_target_Tensor(SEXP selfSEXP, SEXP targetSEXP, SEXP pSEXP, SEXP marginSEXP, SEXP weightSEXP, SEXP reductionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type target(targetSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type p(pSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type margin(marginSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< int64_t >::type reduction(reductionSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_multi_margin_loss_self_Tensor_target_Tensor(self, target, p, margin, weight, reduction));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_multi_margin_loss_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_target_Tensor_p_Scalar_margin_Scalar
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_multi_margin_loss_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_target_Tensor_p_Scalar_margin_Scalar(Rcpp::XPtr<torch::Tensor> grad_input, Rcpp::XPtr<torch::Tensor> grad_output, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> target, Rcpp::XPtr<torch::Scalar> p, Rcpp::XPtr<torch::Scalar> margin, Rcpp::XPtr<torch::Tensor> weight, int64_t reduction);
RcppExport SEXP _torch_cpp_torch_namespace_multi_margin_loss_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_target_Tensor_p_Scalar_margin_Scalar(SEXP grad_inputSEXP, SEXP grad_outputSEXP, SEXP selfSEXP, SEXP targetSEXP, SEXP pSEXP, SEXP marginSEXP, SEXP weightSEXP, SEXP reductionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type grad_input(grad_inputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type target(targetSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type p(pSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type margin(marginSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< int64_t >::type reduction(reductionSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_multi_margin_loss_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_target_Tensor_p_Scalar_margin_Scalar(grad_input, grad_output, self, target, p, margin, weight, reduction));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_multi_margin_loss_backward_grad_output_Tensor_self_Tensor_target_Tensor_p_Scalar_margin_Scalar
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_multi_margin_loss_backward_grad_output_Tensor_self_Tensor_target_Tensor_p_Scalar_margin_Scalar(Rcpp::XPtr<torch::Tensor> grad_output, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> target, Rcpp::XPtr<torch::Scalar> p, Rcpp::XPtr<torch::Scalar> margin, Rcpp::XPtr<torch::Tensor> weight, int64_t reduction);
RcppExport SEXP _torch_cpp_torch_namespace_multi_margin_loss_backward_grad_output_Tensor_self_Tensor_target_Tensor_p_Scalar_margin_Scalar(SEXP grad_outputSEXP, SEXP selfSEXP, SEXP targetSEXP, SEXP pSEXP, SEXP marginSEXP, SEXP weightSEXP, SEXP reductionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type target(targetSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type p(pSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type margin(marginSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< int64_t >::type reduction(reductionSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_multi_margin_loss_backward_grad_output_Tensor_self_Tensor_target_Tensor_p_Scalar_margin_Scalar(grad_output, self, target, p, margin, weight, reduction));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_multilabel_margin_loss_out_out_Tensor_self_Tensor_target_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_multilabel_margin_loss_out_out_Tensor_self_Tensor_target_Tensor(Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> target, int64_t reduction);
RcppExport SEXP _torch_cpp_torch_namespace_multilabel_margin_loss_out_out_Tensor_self_Tensor_target_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP targetSEXP, SEXP reductionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type out(outSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type target(targetSEXP);
    Rcpp::traits::input_parameter< int64_t >::type reduction(reductionSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_multilabel_margin_loss_out_out_Tensor_self_Tensor_target_Tensor(out, self, target, reduction));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_multilabel_margin_loss_self_Tensor_target_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_multilabel_margin_loss_self_Tensor_target_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> target, int64_t reduction);
RcppExport SEXP _torch_cpp_torch_namespace_multilabel_margin_loss_self_Tensor_target_Tensor(SEXP selfSEXP, SEXP targetSEXP, SEXP reductionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type target(targetSEXP);
    Rcpp::traits::input_parameter< int64_t >::type reduction(reductionSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_multilabel_margin_loss_self_Tensor_target_Tensor(self, target, reduction));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_multilabel_margin_loss_forward_out_output_Tensor_is_target_Tensor_self_Tensor_target_Tensor_reduction_int64_t
Rcpp::List cpp_torch_namespace_multilabel_margin_loss_forward_out_output_Tensor_is_target_Tensor_self_Tensor_target_Tensor_reduction_int64_t(Rcpp::XPtr<torch::Tensor> output, Rcpp::XPtr<torch::Tensor> is_target, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> target, int64_t reduction);
RcppExport SEXP _torch_cpp_torch_namespace_multilabel_margin_loss_forward_out_output_Tensor_is_target_Tensor_self_Tensor_target_Tensor_reduction_int64_t(SEXP outputSEXP, SEXP is_targetSEXP, SEXP selfSEXP, SEXP targetSEXP, SEXP reductionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type output(outputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type is_target(is_targetSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type target(targetSEXP);
    Rcpp::traits::input_parameter< int64_t >::type reduction(reductionSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_multilabel_margin_loss_forward_out_output_Tensor_is_target_Tensor_self_Tensor_target_Tensor_reduction_int64_t(output, is_target, self, target, reduction));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_multilabel_margin_loss_forward_self_Tensor_target_Tensor_reduction_int64_t
Rcpp::List cpp_torch_namespace_multilabel_margin_loss_forward_self_Tensor_target_Tensor_reduction_int64_t(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> target, int64_t reduction);
RcppExport SEXP _torch_cpp_torch_namespace_multilabel_margin_loss_forward_self_Tensor_target_Tensor_reduction_int64_t(SEXP selfSEXP, SEXP targetSEXP, SEXP reductionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type target(targetSEXP);
    Rcpp::traits::input_parameter< int64_t >::type reduction(reductionSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_multilabel_margin_loss_forward_self_Tensor_target_Tensor_reduction_int64_t(self, target, reduction));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_multilabel_margin_loss_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_target_Tensor_reduction_int64_t_is_target_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_multilabel_margin_loss_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_target_Tensor_reduction_int64_t_is_target_Tensor(Rcpp::XPtr<torch::Tensor> grad_input, Rcpp::XPtr<torch::Tensor> grad_output, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> target, int64_t reduction, Rcpp::XPtr<torch::Tensor> is_target);
RcppExport SEXP _torch_cpp_torch_namespace_multilabel_margin_loss_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_target_Tensor_reduction_int64_t_is_target_Tensor(SEXP grad_inputSEXP, SEXP grad_outputSEXP, SEXP selfSEXP, SEXP targetSEXP, SEXP reductionSEXP, SEXP is_targetSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type grad_input(grad_inputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type target(targetSEXP);
    Rcpp::traits::input_parameter< int64_t >::type reduction(reductionSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type is_target(is_targetSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_multilabel_margin_loss_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_target_Tensor_reduction_int64_t_is_target_Tensor(grad_input, grad_output, self, target, reduction, is_target));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_multilabel_margin_loss_backward_grad_output_Tensor_self_Tensor_target_Tensor_reduction_int64_t_is_target_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_multilabel_margin_loss_backward_grad_output_Tensor_self_Tensor_target_Tensor_reduction_int64_t_is_target_Tensor(Rcpp::XPtr<torch::Tensor> grad_output, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> target, int64_t reduction, Rcpp::XPtr<torch::Tensor> is_target);
RcppExport SEXP _torch_cpp_torch_namespace_multilabel_margin_loss_backward_grad_output_Tensor_self_Tensor_target_Tensor_reduction_int64_t_is_target_Tensor(SEXP grad_outputSEXP, SEXP selfSEXP, SEXP targetSEXP, SEXP reductionSEXP, SEXP is_targetSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type target(targetSEXP);
    Rcpp::traits::input_parameter< int64_t >::type reduction(reductionSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type is_target(is_targetSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_multilabel_margin_loss_backward_grad_output_Tensor_self_Tensor_target_Tensor_reduction_int64_t_is_target_Tensor(grad_output, self, target, reduction, is_target));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_nll_loss_out_out_Tensor_self_Tensor_target_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_nll_loss_out_out_Tensor_self_Tensor_target_Tensor(Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> target, Rcpp::XPtr<torch::Tensor> weight, int64_t reduction, int64_t ignore_index);
RcppExport SEXP _torch_cpp_torch_namespace_nll_loss_out_out_Tensor_self_Tensor_target_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP targetSEXP, SEXP weightSEXP, SEXP reductionSEXP, SEXP ignore_indexSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type out(outSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type target(targetSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< int64_t >::type reduction(reductionSEXP);
    Rcpp::traits::input_parameter< int64_t >::type ignore_index(ignore_indexSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_nll_loss_out_out_Tensor_self_Tensor_target_Tensor(out, self, target, weight, reduction, ignore_index));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_nll_loss_self_Tensor_target_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_nll_loss_self_Tensor_target_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> target, Rcpp::XPtr<torch::Tensor> weight, int64_t reduction, int64_t ignore_index);
RcppExport SEXP _torch_cpp_torch_namespace_nll_loss_self_Tensor_target_Tensor(SEXP selfSEXP, SEXP targetSEXP, SEXP weightSEXP, SEXP reductionSEXP, SEXP ignore_indexSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type target(targetSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< int64_t >::type reduction(reductionSEXP);
    Rcpp::traits::input_parameter< int64_t >::type ignore_index(ignore_indexSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_nll_loss_self_Tensor_target_Tensor(self, target, weight, reduction, ignore_index));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_nll_loss_forward_out_output_Tensor_total_weight_Tensor_self_Tensor_target_Tensor_weight_Tensor_reduction_int64_t_ignore_index_int64_t
Rcpp::List cpp_torch_namespace_nll_loss_forward_out_output_Tensor_total_weight_Tensor_self_Tensor_target_Tensor_weight_Tensor_reduction_int64_t_ignore_index_int64_t(Rcpp::XPtr<torch::Tensor> output, Rcpp::XPtr<torch::Tensor> total_weight, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> target, Rcpp::XPtr<torch::Tensor> weight, int64_t reduction, int64_t ignore_index);
RcppExport SEXP _torch_cpp_torch_namespace_nll_loss_forward_out_output_Tensor_total_weight_Tensor_self_Tensor_target_Tensor_weight_Tensor_reduction_int64_t_ignore_index_int64_t(SEXP outputSEXP, SEXP total_weightSEXP, SEXP selfSEXP, SEXP targetSEXP, SEXP weightSEXP, SEXP reductionSEXP, SEXP ignore_indexSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type output(outputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type total_weight(total_weightSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type target(targetSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< int64_t >::type reduction(reductionSEXP);
    Rcpp::traits::input_parameter< int64_t >::type ignore_index(ignore_indexSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_nll_loss_forward_out_output_Tensor_total_weight_Tensor_self_Tensor_target_Tensor_weight_Tensor_reduction_int64_t_ignore_index_int64_t(output, total_weight, self, target, weight, reduction, ignore_index));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_nll_loss_forward_self_Tensor_target_Tensor_weight_Tensor_reduction_int64_t_ignore_index_int64_t
Rcpp::List cpp_torch_namespace_nll_loss_forward_self_Tensor_target_Tensor_weight_Tensor_reduction_int64_t_ignore_index_int64_t(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> target, Rcpp::XPtr<torch::Tensor> weight, int64_t reduction, int64_t ignore_index);
RcppExport SEXP _torch_cpp_torch_namespace_nll_loss_forward_self_Tensor_target_Tensor_weight_Tensor_reduction_int64_t_ignore_index_int64_t(SEXP selfSEXP, SEXP targetSEXP, SEXP weightSEXP, SEXP reductionSEXP, SEXP ignore_indexSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type target(targetSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< int64_t >::type reduction(reductionSEXP);
    Rcpp::traits::input_parameter< int64_t >::type ignore_index(ignore_indexSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_nll_loss_forward_self_Tensor_target_Tensor_weight_Tensor_reduction_int64_t_ignore_index_int64_t(self, target, weight, reduction, ignore_index));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_nll_loss_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_target_Tensor_weight_Tensor_reduction_int64_t_ignore_index_int64_t_total_weight_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_nll_loss_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_target_Tensor_weight_Tensor_reduction_int64_t_ignore_index_int64_t_total_weight_Tensor(Rcpp::XPtr<torch::Tensor> grad_input, Rcpp::XPtr<torch::Tensor> grad_output, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> target, Rcpp::XPtr<torch::Tensor> weight, int64_t reduction, int64_t ignore_index, Rcpp::XPtr<torch::Tensor> total_weight);
RcppExport SEXP _torch_cpp_torch_namespace_nll_loss_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_target_Tensor_weight_Tensor_reduction_int64_t_ignore_index_int64_t_total_weight_Tensor(SEXP grad_inputSEXP, SEXP grad_outputSEXP, SEXP selfSEXP, SEXP targetSEXP, SEXP weightSEXP, SEXP reductionSEXP, SEXP ignore_indexSEXP, SEXP total_weightSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type grad_input(grad_inputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type target(targetSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< int64_t >::type reduction(reductionSEXP);
    Rcpp::traits::input_parameter< int64_t >::type ignore_index(ignore_indexSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type total_weight(total_weightSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_nll_loss_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_target_Tensor_weight_Tensor_reduction_int64_t_ignore_index_int64_t_total_weight_Tensor(grad_input, grad_output, self, target, weight, reduction, ignore_index, total_weight));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_nll_loss_backward_grad_output_Tensor_self_Tensor_target_Tensor_weight_Tensor_reduction_int64_t_ignore_index_int64_t_total_weight_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_nll_loss_backward_grad_output_Tensor_self_Tensor_target_Tensor_weight_Tensor_reduction_int64_t_ignore_index_int64_t_total_weight_Tensor(Rcpp::XPtr<torch::Tensor> grad_output, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> target, Rcpp::XPtr<torch::Tensor> weight, int64_t reduction, int64_t ignore_index, Rcpp::XPtr<torch::Tensor> total_weight);
RcppExport SEXP _torch_cpp_torch_namespace_nll_loss_backward_grad_output_Tensor_self_Tensor_target_Tensor_weight_Tensor_reduction_int64_t_ignore_index_int64_t_total_weight_Tensor(SEXP grad_outputSEXP, SEXP selfSEXP, SEXP targetSEXP, SEXP weightSEXP, SEXP reductionSEXP, SEXP ignore_indexSEXP, SEXP total_weightSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type target(targetSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< int64_t >::type reduction(reductionSEXP);
    Rcpp::traits::input_parameter< int64_t >::type ignore_index(ignore_indexSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type total_weight(total_weightSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_nll_loss_backward_grad_output_Tensor_self_Tensor_target_Tensor_weight_Tensor_reduction_int64_t_ignore_index_int64_t_total_weight_Tensor(grad_output, self, target, weight, reduction, ignore_index, total_weight));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_nll_loss2d_out_out_Tensor_self_Tensor_target_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_nll_loss2d_out_out_Tensor_self_Tensor_target_Tensor(Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> target, Rcpp::XPtr<torch::Tensor> weight, int64_t reduction, int64_t ignore_index);
RcppExport SEXP _torch_cpp_torch_namespace_nll_loss2d_out_out_Tensor_self_Tensor_target_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP targetSEXP, SEXP weightSEXP, SEXP reductionSEXP, SEXP ignore_indexSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type out(outSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type target(targetSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< int64_t >::type reduction(reductionSEXP);
    Rcpp::traits::input_parameter< int64_t >::type ignore_index(ignore_indexSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_nll_loss2d_out_out_Tensor_self_Tensor_target_Tensor(out, self, target, weight, reduction, ignore_index));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_nll_loss2d_self_Tensor_target_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_nll_loss2d_self_Tensor_target_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> target, Rcpp::XPtr<torch::Tensor> weight, int64_t reduction, int64_t ignore_index);
RcppExport SEXP _torch_cpp_torch_namespace_nll_loss2d_self_Tensor_target_Tensor(SEXP selfSEXP, SEXP targetSEXP, SEXP weightSEXP, SEXP reductionSEXP, SEXP ignore_indexSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type target(targetSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< int64_t >::type reduction(reductionSEXP);
    Rcpp::traits::input_parameter< int64_t >::type ignore_index(ignore_indexSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_nll_loss2d_self_Tensor_target_Tensor(self, target, weight, reduction, ignore_index));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_nll_loss2d_forward_out_output_Tensor_total_weight_Tensor_self_Tensor_target_Tensor_weight_Tensor_reduction_int64_t_ignore_index_int64_t
Rcpp::List cpp_torch_namespace_nll_loss2d_forward_out_output_Tensor_total_weight_Tensor_self_Tensor_target_Tensor_weight_Tensor_reduction_int64_t_ignore_index_int64_t(Rcpp::XPtr<torch::Tensor> output, Rcpp::XPtr<torch::Tensor> total_weight, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> target, Rcpp::XPtr<torch::Tensor> weight, int64_t reduction, int64_t ignore_index);
RcppExport SEXP _torch_cpp_torch_namespace_nll_loss2d_forward_out_output_Tensor_total_weight_Tensor_self_Tensor_target_Tensor_weight_Tensor_reduction_int64_t_ignore_index_int64_t(SEXP outputSEXP, SEXP total_weightSEXP, SEXP selfSEXP, SEXP targetSEXP, SEXP weightSEXP, SEXP reductionSEXP, SEXP ignore_indexSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type output(outputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type total_weight(total_weightSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type target(targetSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< int64_t >::type reduction(reductionSEXP);
    Rcpp::traits::input_parameter< int64_t >::type ignore_index(ignore_indexSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_nll_loss2d_forward_out_output_Tensor_total_weight_Tensor_self_Tensor_target_Tensor_weight_Tensor_reduction_int64_t_ignore_index_int64_t(output, total_weight, self, target, weight, reduction, ignore_index));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_nll_loss2d_forward_self_Tensor_target_Tensor_weight_Tensor_reduction_int64_t_ignore_index_int64_t
Rcpp::List cpp_torch_namespace_nll_loss2d_forward_self_Tensor_target_Tensor_weight_Tensor_reduction_int64_t_ignore_index_int64_t(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> target, Rcpp::XPtr<torch::Tensor> weight, int64_t reduction, int64_t ignore_index);
RcppExport SEXP _torch_cpp_torch_namespace_nll_loss2d_forward_self_Tensor_target_Tensor_weight_Tensor_reduction_int64_t_ignore_index_int64_t(SEXP selfSEXP, SEXP targetSEXP, SEXP weightSEXP, SEXP reductionSEXP, SEXP ignore_indexSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type target(targetSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< int64_t >::type reduction(reductionSEXP);
    Rcpp::traits::input_parameter< int64_t >::type ignore_index(ignore_indexSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_nll_loss2d_forward_self_Tensor_target_Tensor_weight_Tensor_reduction_int64_t_ignore_index_int64_t(self, target, weight, reduction, ignore_index));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_nll_loss2d_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_target_Tensor_weight_Tensor_reduction_int64_t_ignore_index_int64_t_total_weight_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_nll_loss2d_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_target_Tensor_weight_Tensor_reduction_int64_t_ignore_index_int64_t_total_weight_Tensor(Rcpp::XPtr<torch::Tensor> grad_input, Rcpp::XPtr<torch::Tensor> grad_output, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> target, Rcpp::XPtr<torch::Tensor> weight, int64_t reduction, int64_t ignore_index, Rcpp::XPtr<torch::Tensor> total_weight);
RcppExport SEXP _torch_cpp_torch_namespace_nll_loss2d_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_target_Tensor_weight_Tensor_reduction_int64_t_ignore_index_int64_t_total_weight_Tensor(SEXP grad_inputSEXP, SEXP grad_outputSEXP, SEXP selfSEXP, SEXP targetSEXP, SEXP weightSEXP, SEXP reductionSEXP, SEXP ignore_indexSEXP, SEXP total_weightSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type grad_input(grad_inputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type target(targetSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< int64_t >::type reduction(reductionSEXP);
    Rcpp::traits::input_parameter< int64_t >::type ignore_index(ignore_indexSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type total_weight(total_weightSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_nll_loss2d_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_target_Tensor_weight_Tensor_reduction_int64_t_ignore_index_int64_t_total_weight_Tensor(grad_input, grad_output, self, target, weight, reduction, ignore_index, total_weight));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_nll_loss2d_backward_grad_output_Tensor_self_Tensor_target_Tensor_weight_Tensor_reduction_int64_t_ignore_index_int64_t_total_weight_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_nll_loss2d_backward_grad_output_Tensor_self_Tensor_target_Tensor_weight_Tensor_reduction_int64_t_ignore_index_int64_t_total_weight_Tensor(Rcpp::XPtr<torch::Tensor> grad_output, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> target, Rcpp::XPtr<torch::Tensor> weight, int64_t reduction, int64_t ignore_index, Rcpp::XPtr<torch::Tensor> total_weight);
RcppExport SEXP _torch_cpp_torch_namespace_nll_loss2d_backward_grad_output_Tensor_self_Tensor_target_Tensor_weight_Tensor_reduction_int64_t_ignore_index_int64_t_total_weight_Tensor(SEXP grad_outputSEXP, SEXP selfSEXP, SEXP targetSEXP, SEXP weightSEXP, SEXP reductionSEXP, SEXP ignore_indexSEXP, SEXP total_weightSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type target(targetSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< int64_t >::type reduction(reductionSEXP);
    Rcpp::traits::input_parameter< int64_t >::type ignore_index(ignore_indexSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type total_weight(total_weightSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_nll_loss2d_backward_grad_output_Tensor_self_Tensor_target_Tensor_weight_Tensor_reduction_int64_t_ignore_index_int64_t_total_weight_Tensor(grad_output, self, target, weight, reduction, ignore_index, total_weight));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_smooth_l1_loss_out_out_Tensor_self_Tensor_target_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_smooth_l1_loss_out_out_Tensor_self_Tensor_target_Tensor(Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> target, int64_t reduction);
RcppExport SEXP _torch_cpp_torch_namespace_smooth_l1_loss_out_out_Tensor_self_Tensor_target_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP targetSEXP, SEXP reductionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type out(outSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type target(targetSEXP);
    Rcpp::traits::input_parameter< int64_t >::type reduction(reductionSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_smooth_l1_loss_out_out_Tensor_self_Tensor_target_Tensor(out, self, target, reduction));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_smooth_l1_loss_self_Tensor_target_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_smooth_l1_loss_self_Tensor_target_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> target, int64_t reduction);
RcppExport SEXP _torch_cpp_torch_namespace_smooth_l1_loss_self_Tensor_target_Tensor(SEXP selfSEXP, SEXP targetSEXP, SEXP reductionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type target(targetSEXP);
    Rcpp::traits::input_parameter< int64_t >::type reduction(reductionSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_smooth_l1_loss_self_Tensor_target_Tensor(self, target, reduction));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_smooth_l1_loss_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_target_Tensor_reduction_int64_t
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_smooth_l1_loss_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_target_Tensor_reduction_int64_t(Rcpp::XPtr<torch::Tensor> grad_input, Rcpp::XPtr<torch::Tensor> grad_output, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> target, int64_t reduction);
RcppExport SEXP _torch_cpp_torch_namespace_smooth_l1_loss_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_target_Tensor_reduction_int64_t(SEXP grad_inputSEXP, SEXP grad_outputSEXP, SEXP selfSEXP, SEXP targetSEXP, SEXP reductionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type grad_input(grad_inputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type target(targetSEXP);
    Rcpp::traits::input_parameter< int64_t >::type reduction(reductionSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_smooth_l1_loss_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_target_Tensor_reduction_int64_t(grad_input, grad_output, self, target, reduction));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_smooth_l1_loss_backward_grad_output_Tensor_self_Tensor_target_Tensor_reduction_int64_t
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_smooth_l1_loss_backward_grad_output_Tensor_self_Tensor_target_Tensor_reduction_int64_t(Rcpp::XPtr<torch::Tensor> grad_output, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> target, int64_t reduction);
RcppExport SEXP _torch_cpp_torch_namespace_smooth_l1_loss_backward_grad_output_Tensor_self_Tensor_target_Tensor_reduction_int64_t(SEXP grad_outputSEXP, SEXP selfSEXP, SEXP targetSEXP, SEXP reductionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type target(targetSEXP);
    Rcpp::traits::input_parameter< int64_t >::type reduction(reductionSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_smooth_l1_loss_backward_grad_output_Tensor_self_Tensor_target_Tensor_reduction_int64_t(grad_output, self, target, reduction));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_soft_margin_loss_out_out_Tensor_self_Tensor_target_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_soft_margin_loss_out_out_Tensor_self_Tensor_target_Tensor(Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> target, int64_t reduction);
RcppExport SEXP _torch_cpp_torch_namespace_soft_margin_loss_out_out_Tensor_self_Tensor_target_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP targetSEXP, SEXP reductionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type out(outSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type target(targetSEXP);
    Rcpp::traits::input_parameter< int64_t >::type reduction(reductionSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_soft_margin_loss_out_out_Tensor_self_Tensor_target_Tensor(out, self, target, reduction));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_soft_margin_loss_self_Tensor_target_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_soft_margin_loss_self_Tensor_target_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> target, int64_t reduction);
RcppExport SEXP _torch_cpp_torch_namespace_soft_margin_loss_self_Tensor_target_Tensor(SEXP selfSEXP, SEXP targetSEXP, SEXP reductionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type target(targetSEXP);
    Rcpp::traits::input_parameter< int64_t >::type reduction(reductionSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_soft_margin_loss_self_Tensor_target_Tensor(self, target, reduction));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_soft_margin_loss_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_target_Tensor_reduction_int64_t
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_soft_margin_loss_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_target_Tensor_reduction_int64_t(Rcpp::XPtr<torch::Tensor> grad_input, Rcpp::XPtr<torch::Tensor> grad_output, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> target, int64_t reduction);
RcppExport SEXP _torch_cpp_torch_namespace_soft_margin_loss_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_target_Tensor_reduction_int64_t(SEXP grad_inputSEXP, SEXP grad_outputSEXP, SEXP selfSEXP, SEXP targetSEXP, SEXP reductionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type grad_input(grad_inputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type target(targetSEXP);
    Rcpp::traits::input_parameter< int64_t >::type reduction(reductionSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_soft_margin_loss_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_target_Tensor_reduction_int64_t(grad_input, grad_output, self, target, reduction));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_soft_margin_loss_backward_grad_output_Tensor_self_Tensor_target_Tensor_reduction_int64_t
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_soft_margin_loss_backward_grad_output_Tensor_self_Tensor_target_Tensor_reduction_int64_t(Rcpp::XPtr<torch::Tensor> grad_output, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> target, int64_t reduction);
RcppExport SEXP _torch_cpp_torch_namespace_soft_margin_loss_backward_grad_output_Tensor_self_Tensor_target_Tensor_reduction_int64_t(SEXP grad_outputSEXP, SEXP selfSEXP, SEXP targetSEXP, SEXP reductionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type target(targetSEXP);
    Rcpp::traits::input_parameter< int64_t >::type reduction(reductionSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_soft_margin_loss_backward_grad_output_Tensor_self_Tensor_target_Tensor_reduction_int64_t(grad_output, self, target, reduction));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_elu_out_out_Tensor_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_elu_out_out_Tensor_self_Tensor(Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Scalar> alpha, Rcpp::XPtr<torch::Scalar> scale, Rcpp::XPtr<torch::Scalar> input_scale);
RcppExport SEXP _torch_cpp_torch_namespace_elu_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP alphaSEXP, SEXP scaleSEXP, SEXP input_scaleSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type out(outSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type scale(scaleSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type input_scale(input_scaleSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_elu_out_out_Tensor_self_Tensor(out, self, alpha, scale, input_scale));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_elu_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_elu_self_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Scalar> alpha, Rcpp::XPtr<torch::Scalar> scale, Rcpp::XPtr<torch::Scalar> input_scale);
RcppExport SEXP _torch_cpp_torch_namespace_elu_self_Tensor(SEXP selfSEXP, SEXP alphaSEXP, SEXP scaleSEXP, SEXP input_scaleSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type scale(scaleSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type input_scale(input_scaleSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_elu_self_Tensor(self, alpha, scale, input_scale));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_elu_backward_out_grad_input_Tensor_grad_output_Tensor_alpha_Scalar_scale_Scalar_input_scale_Scalar_output_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_elu_backward_out_grad_input_Tensor_grad_output_Tensor_alpha_Scalar_scale_Scalar_input_scale_Scalar_output_Tensor(Rcpp::XPtr<torch::Tensor> grad_input, Rcpp::XPtr<torch::Tensor> grad_output, Rcpp::XPtr<torch::Scalar> alpha, Rcpp::XPtr<torch::Scalar> scale, Rcpp::XPtr<torch::Scalar> input_scale, Rcpp::XPtr<torch::Tensor> output);
RcppExport SEXP _torch_cpp_torch_namespace_elu_backward_out_grad_input_Tensor_grad_output_Tensor_alpha_Scalar_scale_Scalar_input_scale_Scalar_output_Tensor(SEXP grad_inputSEXP, SEXP grad_outputSEXP, SEXP alphaSEXP, SEXP scaleSEXP, SEXP input_scaleSEXP, SEXP outputSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type grad_input(grad_inputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type scale(scaleSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type input_scale(input_scaleSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type output(outputSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_elu_backward_out_grad_input_Tensor_grad_output_Tensor_alpha_Scalar_scale_Scalar_input_scale_Scalar_output_Tensor(grad_input, grad_output, alpha, scale, input_scale, output));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_elu_backward_grad_output_Tensor_alpha_Scalar_scale_Scalar_input_scale_Scalar_output_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_elu_backward_grad_output_Tensor_alpha_Scalar_scale_Scalar_input_scale_Scalar_output_Tensor(Rcpp::XPtr<torch::Tensor> grad_output, Rcpp::XPtr<torch::Scalar> alpha, Rcpp::XPtr<torch::Scalar> scale, Rcpp::XPtr<torch::Scalar> input_scale, Rcpp::XPtr<torch::Tensor> output);
RcppExport SEXP _torch_cpp_torch_namespace_elu_backward_grad_output_Tensor_alpha_Scalar_scale_Scalar_input_scale_Scalar_output_Tensor(SEXP grad_outputSEXP, SEXP alphaSEXP, SEXP scaleSEXP, SEXP input_scaleSEXP, SEXP outputSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type scale(scaleSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type input_scale(input_scaleSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type output(outputSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_elu_backward_grad_output_Tensor_alpha_Scalar_scale_Scalar_input_scale_Scalar_output_Tensor(grad_output, alpha, scale, input_scale, output));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_elu__self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_elu__self_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Scalar> alpha, Rcpp::XPtr<torch::Scalar> scale, Rcpp::XPtr<torch::Scalar> input_scale);
RcppExport SEXP _torch_cpp_torch_namespace_elu__self_Tensor(SEXP selfSEXP, SEXP alphaSEXP, SEXP scaleSEXP, SEXP input_scaleSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type scale(scaleSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type input_scale(input_scaleSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_elu__self_Tensor(self, alpha, scale, input_scale));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_glu_out_out_Tensor_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_glu_out_out_Tensor_self_Tensor(Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, int64_t dim);
RcppExport SEXP _torch_cpp_torch_namespace_glu_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type out(outSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< int64_t >::type dim(dimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_glu_out_out_Tensor_self_Tensor(out, self, dim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_glu_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_glu_self_Tensor(Rcpp::XPtr<torch::Tensor> self, int64_t dim);
RcppExport SEXP _torch_cpp_torch_namespace_glu_self_Tensor(SEXP selfSEXP, SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< int64_t >::type dim(dimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_glu_self_Tensor(self, dim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_glu_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_dim_int64_t
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_glu_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_dim_int64_t(Rcpp::XPtr<torch::Tensor> grad_input, Rcpp::XPtr<torch::Tensor> grad_output, Rcpp::XPtr<torch::Tensor> self, int64_t dim);
RcppExport SEXP _torch_cpp_torch_namespace_glu_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_dim_int64_t(SEXP grad_inputSEXP, SEXP grad_outputSEXP, SEXP selfSEXP, SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type grad_input(grad_inputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< int64_t >::type dim(dimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_glu_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_dim_int64_t(grad_input, grad_output, self, dim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_glu_backward_grad_output_Tensor_self_Tensor_dim_int64_t
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_glu_backward_grad_output_Tensor_self_Tensor_dim_int64_t(Rcpp::XPtr<torch::Tensor> grad_output, Rcpp::XPtr<torch::Tensor> self, int64_t dim);
RcppExport SEXP _torch_cpp_torch_namespace_glu_backward_grad_output_Tensor_self_Tensor_dim_int64_t(SEXP grad_outputSEXP, SEXP selfSEXP, SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< int64_t >::type dim(dimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_glu_backward_grad_output_Tensor_self_Tensor_dim_int64_t(grad_output, self, dim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_hardtanh_out_out_Tensor_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_hardtanh_out_out_Tensor_self_Tensor(Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Scalar> min_val, Rcpp::XPtr<torch::Scalar> max_val);
RcppExport SEXP _torch_cpp_torch_namespace_hardtanh_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP min_valSEXP, SEXP max_valSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type out(outSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type min_val(min_valSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type max_val(max_valSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_hardtanh_out_out_Tensor_self_Tensor(out, self, min_val, max_val));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_hardtanh_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_hardtanh_self_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Scalar> min_val, Rcpp::XPtr<torch::Scalar> max_val);
RcppExport SEXP _torch_cpp_torch_namespace_hardtanh_self_Tensor(SEXP selfSEXP, SEXP min_valSEXP, SEXP max_valSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type min_val(min_valSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type max_val(max_valSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_hardtanh_self_Tensor(self, min_val, max_val));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_hardtanh_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_min_val_Scalar_max_val_Scalar
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_hardtanh_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_min_val_Scalar_max_val_Scalar(Rcpp::XPtr<torch::Tensor> grad_input, Rcpp::XPtr<torch::Tensor> grad_output, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Scalar> min_val, Rcpp::XPtr<torch::Scalar> max_val);
RcppExport SEXP _torch_cpp_torch_namespace_hardtanh_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_min_val_Scalar_max_val_Scalar(SEXP grad_inputSEXP, SEXP grad_outputSEXP, SEXP selfSEXP, SEXP min_valSEXP, SEXP max_valSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type grad_input(grad_inputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type min_val(min_valSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type max_val(max_valSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_hardtanh_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_min_val_Scalar_max_val_Scalar(grad_input, grad_output, self, min_val, max_val));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_hardtanh_backward_grad_output_Tensor_self_Tensor_min_val_Scalar_max_val_Scalar
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_hardtanh_backward_grad_output_Tensor_self_Tensor_min_val_Scalar_max_val_Scalar(Rcpp::XPtr<torch::Tensor> grad_output, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Scalar> min_val, Rcpp::XPtr<torch::Scalar> max_val);
RcppExport SEXP _torch_cpp_torch_namespace_hardtanh_backward_grad_output_Tensor_self_Tensor_min_val_Scalar_max_val_Scalar(SEXP grad_outputSEXP, SEXP selfSEXP, SEXP min_valSEXP, SEXP max_valSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type min_val(min_valSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type max_val(max_valSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_hardtanh_backward_grad_output_Tensor_self_Tensor_min_val_Scalar_max_val_Scalar(grad_output, self, min_val, max_val));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_hardtanh__self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_hardtanh__self_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Scalar> min_val, Rcpp::XPtr<torch::Scalar> max_val);
RcppExport SEXP _torch_cpp_torch_namespace_hardtanh__self_Tensor(SEXP selfSEXP, SEXP min_valSEXP, SEXP max_valSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type min_val(min_valSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type max_val(max_valSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_hardtanh__self_Tensor(self, min_val, max_val));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_leaky_relu_out_out_Tensor_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_leaky_relu_out_out_Tensor_self_Tensor(Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Scalar> negative_slope);
RcppExport SEXP _torch_cpp_torch_namespace_leaky_relu_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP negative_slopeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type out(outSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type negative_slope(negative_slopeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_leaky_relu_out_out_Tensor_self_Tensor(out, self, negative_slope));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_leaky_relu_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_leaky_relu_self_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Scalar> negative_slope);
RcppExport SEXP _torch_cpp_torch_namespace_leaky_relu_self_Tensor(SEXP selfSEXP, SEXP negative_slopeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type negative_slope(negative_slopeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_leaky_relu_self_Tensor(self, negative_slope));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_leaky_relu_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_negative_slope_Scalar
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_leaky_relu_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_negative_slope_Scalar(Rcpp::XPtr<torch::Tensor> grad_input, Rcpp::XPtr<torch::Tensor> grad_output, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Scalar> negative_slope);
RcppExport SEXP _torch_cpp_torch_namespace_leaky_relu_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_negative_slope_Scalar(SEXP grad_inputSEXP, SEXP grad_outputSEXP, SEXP selfSEXP, SEXP negative_slopeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type grad_input(grad_inputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type negative_slope(negative_slopeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_leaky_relu_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_negative_slope_Scalar(grad_input, grad_output, self, negative_slope));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_leaky_relu_backward_grad_output_Tensor_self_Tensor_negative_slope_Scalar
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_leaky_relu_backward_grad_output_Tensor_self_Tensor_negative_slope_Scalar(Rcpp::XPtr<torch::Tensor> grad_output, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Scalar> negative_slope);
RcppExport SEXP _torch_cpp_torch_namespace_leaky_relu_backward_grad_output_Tensor_self_Tensor_negative_slope_Scalar(SEXP grad_outputSEXP, SEXP selfSEXP, SEXP negative_slopeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type negative_slope(negative_slopeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_leaky_relu_backward_grad_output_Tensor_self_Tensor_negative_slope_Scalar(grad_output, self, negative_slope));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_leaky_relu__self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_leaky_relu__self_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Scalar> negative_slope);
RcppExport SEXP _torch_cpp_torch_namespace_leaky_relu__self_Tensor(SEXP selfSEXP, SEXP negative_slopeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type negative_slope(negative_slopeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_leaky_relu__self_Tensor(self, negative_slope));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_log_sigmoid_out_out_Tensor_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_log_sigmoid_out_out_Tensor_self_Tensor(Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_namespace_log_sigmoid_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type out(outSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_log_sigmoid_out_out_Tensor_self_Tensor(out, self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_log_sigmoid_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_log_sigmoid_self_Tensor(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_namespace_log_sigmoid_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_log_sigmoid_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_log_sigmoid_forward_out_output_Tensor_buffer_Tensor_self_Tensor
Rcpp::List cpp_torch_namespace_log_sigmoid_forward_out_output_Tensor_buffer_Tensor_self_Tensor(Rcpp::XPtr<torch::Tensor> output, Rcpp::XPtr<torch::Tensor> buffer, Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_namespace_log_sigmoid_forward_out_output_Tensor_buffer_Tensor_self_Tensor(SEXP outputSEXP, SEXP bufferSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type output(outputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type buffer(bufferSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_log_sigmoid_forward_out_output_Tensor_buffer_Tensor_self_Tensor(output, buffer, self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_log_sigmoid_forward_self_Tensor
Rcpp::List cpp_torch_namespace_log_sigmoid_forward_self_Tensor(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_namespace_log_sigmoid_forward_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_log_sigmoid_forward_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_log_sigmoid_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_buffer_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_log_sigmoid_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_buffer_Tensor(Rcpp::XPtr<torch::Tensor> grad_input, Rcpp::XPtr<torch::Tensor> grad_output, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> buffer);
RcppExport SEXP _torch_cpp_torch_namespace_log_sigmoid_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_buffer_Tensor(SEXP grad_inputSEXP, SEXP grad_outputSEXP, SEXP selfSEXP, SEXP bufferSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type grad_input(grad_inputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type buffer(bufferSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_log_sigmoid_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_buffer_Tensor(grad_input, grad_output, self, buffer));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_log_sigmoid_backward_grad_output_Tensor_self_Tensor_buffer_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_log_sigmoid_backward_grad_output_Tensor_self_Tensor_buffer_Tensor(Rcpp::XPtr<torch::Tensor> grad_output, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> buffer);
RcppExport SEXP _torch_cpp_torch_namespace_log_sigmoid_backward_grad_output_Tensor_self_Tensor_buffer_Tensor(SEXP grad_outputSEXP, SEXP selfSEXP, SEXP bufferSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type buffer(bufferSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_log_sigmoid_backward_grad_output_Tensor_self_Tensor_buffer_Tensor(grad_output, self, buffer));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_rrelu_with_noise_out_out_Tensor_self_Tensor_noise_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_rrelu_with_noise_out_out_Tensor_self_Tensor_noise_Tensor(Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> noise, Rcpp::XPtr<torch::Scalar> lower, Rcpp::XPtr<torch::Scalar> upper, bool training, Rcpp::XPtr<torch::Generator *> generator);
RcppExport SEXP _torch_cpp_torch_namespace_rrelu_with_noise_out_out_Tensor_self_Tensor_noise_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP noiseSEXP, SEXP lowerSEXP, SEXP upperSEXP, SEXP trainingSEXP, SEXP generatorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type out(outSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type noise(noiseSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type lower(lowerSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type upper(upperSEXP);
    Rcpp::traits::input_parameter< bool >::type training(trainingSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Generator *> >::type generator(generatorSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_rrelu_with_noise_out_out_Tensor_self_Tensor_noise_Tensor(out, self, noise, lower, upper, training, generator));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_rrelu_with_noise_self_Tensor_noise_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_rrelu_with_noise_self_Tensor_noise_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> noise, Rcpp::XPtr<torch::Scalar> lower, Rcpp::XPtr<torch::Scalar> upper, bool training, Rcpp::XPtr<torch::Generator *> generator);
RcppExport SEXP _torch_cpp_torch_namespace_rrelu_with_noise_self_Tensor_noise_Tensor(SEXP selfSEXP, SEXP noiseSEXP, SEXP lowerSEXP, SEXP upperSEXP, SEXP trainingSEXP, SEXP generatorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type noise(noiseSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type lower(lowerSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type upper(upperSEXP);
    Rcpp::traits::input_parameter< bool >::type training(trainingSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Generator *> >::type generator(generatorSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_rrelu_with_noise_self_Tensor_noise_Tensor(self, noise, lower, upper, training, generator));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_rrelu_with_noise_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_noise_Tensor_lower_Scalar_upper_Scalar_training_bool
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_rrelu_with_noise_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_noise_Tensor_lower_Scalar_upper_Scalar_training_bool(Rcpp::XPtr<torch::Tensor> grad_input, Rcpp::XPtr<torch::Tensor> grad_output, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> noise, Rcpp::XPtr<torch::Scalar> lower, Rcpp::XPtr<torch::Scalar> upper, bool training);
RcppExport SEXP _torch_cpp_torch_namespace_rrelu_with_noise_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_noise_Tensor_lower_Scalar_upper_Scalar_training_bool(SEXP grad_inputSEXP, SEXP grad_outputSEXP, SEXP selfSEXP, SEXP noiseSEXP, SEXP lowerSEXP, SEXP upperSEXP, SEXP trainingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type grad_input(grad_inputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type noise(noiseSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type lower(lowerSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type upper(upperSEXP);
    Rcpp::traits::input_parameter< bool >::type training(trainingSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_rrelu_with_noise_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_noise_Tensor_lower_Scalar_upper_Scalar_training_bool(grad_input, grad_output, self, noise, lower, upper, training));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_rrelu_with_noise_backward_grad_output_Tensor_self_Tensor_noise_Tensor_lower_Scalar_upper_Scalar_training_bool
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_rrelu_with_noise_backward_grad_output_Tensor_self_Tensor_noise_Tensor_lower_Scalar_upper_Scalar_training_bool(Rcpp::XPtr<torch::Tensor> grad_output, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> noise, Rcpp::XPtr<torch::Scalar> lower, Rcpp::XPtr<torch::Scalar> upper, bool training);
RcppExport SEXP _torch_cpp_torch_namespace_rrelu_with_noise_backward_grad_output_Tensor_self_Tensor_noise_Tensor_lower_Scalar_upper_Scalar_training_bool(SEXP grad_outputSEXP, SEXP selfSEXP, SEXP noiseSEXP, SEXP lowerSEXP, SEXP upperSEXP, SEXP trainingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type noise(noiseSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type lower(lowerSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type upper(upperSEXP);
    Rcpp::traits::input_parameter< bool >::type training(trainingSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_rrelu_with_noise_backward_grad_output_Tensor_self_Tensor_noise_Tensor_lower_Scalar_upper_Scalar_training_bool(grad_output, self, noise, lower, upper, training));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_rrelu_with_noise__self_Tensor_noise_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_rrelu_with_noise__self_Tensor_noise_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> noise, Rcpp::XPtr<torch::Scalar> lower, Rcpp::XPtr<torch::Scalar> upper, bool training, Rcpp::XPtr<torch::Generator *> generator);
RcppExport SEXP _torch_cpp_torch_namespace_rrelu_with_noise__self_Tensor_noise_Tensor(SEXP selfSEXP, SEXP noiseSEXP, SEXP lowerSEXP, SEXP upperSEXP, SEXP trainingSEXP, SEXP generatorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type noise(noiseSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type lower(lowerSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type upper(upperSEXP);
    Rcpp::traits::input_parameter< bool >::type training(trainingSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Generator *> >::type generator(generatorSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_rrelu_with_noise__self_Tensor_noise_Tensor(self, noise, lower, upper, training, generator));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_softplus_out_out_Tensor_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_softplus_out_out_Tensor_self_Tensor(Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Scalar> beta, Rcpp::XPtr<torch::Scalar> threshold);
RcppExport SEXP _torch_cpp_torch_namespace_softplus_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP betaSEXP, SEXP thresholdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type out(outSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type threshold(thresholdSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_softplus_out_out_Tensor_self_Tensor(out, self, beta, threshold));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_softplus_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_softplus_self_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Scalar> beta, Rcpp::XPtr<torch::Scalar> threshold);
RcppExport SEXP _torch_cpp_torch_namespace_softplus_self_Tensor(SEXP selfSEXP, SEXP betaSEXP, SEXP thresholdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type threshold(thresholdSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_softplus_self_Tensor(self, beta, threshold));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_softplus_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_beta_Scalar_threshold_Scalar_output_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_softplus_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_beta_Scalar_threshold_Scalar_output_Tensor(Rcpp::XPtr<torch::Tensor> grad_input, Rcpp::XPtr<torch::Tensor> grad_output, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Scalar> beta, Rcpp::XPtr<torch::Scalar> threshold, Rcpp::XPtr<torch::Tensor> output);
RcppExport SEXP _torch_cpp_torch_namespace_softplus_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_beta_Scalar_threshold_Scalar_output_Tensor(SEXP grad_inputSEXP, SEXP grad_outputSEXP, SEXP selfSEXP, SEXP betaSEXP, SEXP thresholdSEXP, SEXP outputSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type grad_input(grad_inputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type threshold(thresholdSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type output(outputSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_softplus_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_beta_Scalar_threshold_Scalar_output_Tensor(grad_input, grad_output, self, beta, threshold, output));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_softplus_backward_grad_output_Tensor_self_Tensor_beta_Scalar_threshold_Scalar_output_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_softplus_backward_grad_output_Tensor_self_Tensor_beta_Scalar_threshold_Scalar_output_Tensor(Rcpp::XPtr<torch::Tensor> grad_output, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Scalar> beta, Rcpp::XPtr<torch::Scalar> threshold, Rcpp::XPtr<torch::Tensor> output);
RcppExport SEXP _torch_cpp_torch_namespace_softplus_backward_grad_output_Tensor_self_Tensor_beta_Scalar_threshold_Scalar_output_Tensor(SEXP grad_outputSEXP, SEXP selfSEXP, SEXP betaSEXP, SEXP thresholdSEXP, SEXP outputSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type threshold(thresholdSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type output(outputSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_softplus_backward_grad_output_Tensor_self_Tensor_beta_Scalar_threshold_Scalar_output_Tensor(grad_output, self, beta, threshold, output));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_softshrink_out_out_Tensor_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_softshrink_out_out_Tensor_self_Tensor(Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Scalar> lambd);
RcppExport SEXP _torch_cpp_torch_namespace_softshrink_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP lambdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type out(outSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type lambd(lambdSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_softshrink_out_out_Tensor_self_Tensor(out, self, lambd));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_softshrink_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_softshrink_self_Tensor(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Scalar> lambd);
RcppExport SEXP _torch_cpp_torch_namespace_softshrink_self_Tensor(SEXP selfSEXP, SEXP lambdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type lambd(lambdSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_softshrink_self_Tensor(self, lambd));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_softshrink_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_lambd_Scalar
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_softshrink_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_lambd_Scalar(Rcpp::XPtr<torch::Tensor> grad_input, Rcpp::XPtr<torch::Tensor> grad_output, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Scalar> lambd);
RcppExport SEXP _torch_cpp_torch_namespace_softshrink_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_lambd_Scalar(SEXP grad_inputSEXP, SEXP grad_outputSEXP, SEXP selfSEXP, SEXP lambdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type grad_input(grad_inputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type lambd(lambdSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_softshrink_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_lambd_Scalar(grad_input, grad_output, self, lambd));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_softshrink_backward_grad_output_Tensor_self_Tensor_lambd_Scalar
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_softshrink_backward_grad_output_Tensor_self_Tensor_lambd_Scalar(Rcpp::XPtr<torch::Tensor> grad_output, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Scalar> lambd);
RcppExport SEXP _torch_cpp_torch_namespace_softshrink_backward_grad_output_Tensor_self_Tensor_lambd_Scalar(SEXP grad_outputSEXP, SEXP selfSEXP, SEXP lambdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Scalar> >::type lambd(lambdSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_softshrink_backward_grad_output_Tensor_self_Tensor_lambd_Scalar(grad_output, self, lambd));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_adaptive_avg_pool2d_out_out_Tensor_self_Tensor_output_size_IntArrayRef
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_adaptive_avg_pool2d_out_out_Tensor_self_Tensor_output_size_IntArrayRef(Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, std::vector<int64_t> output_size);
RcppExport SEXP _torch_cpp_torch_namespace_adaptive_avg_pool2d_out_out_Tensor_self_Tensor_output_size_IntArrayRef(SEXP outSEXP, SEXP selfSEXP, SEXP output_sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type out(outSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type output_size(output_sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_adaptive_avg_pool2d_out_out_Tensor_self_Tensor_output_size_IntArrayRef(out, self, output_size));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_adaptive_avg_pool2d_self_Tensor_output_size_IntArrayRef
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_adaptive_avg_pool2d_self_Tensor_output_size_IntArrayRef(Rcpp::XPtr<torch::Tensor> self, std::vector<int64_t> output_size);
RcppExport SEXP _torch_cpp_torch_namespace_adaptive_avg_pool2d_self_Tensor_output_size_IntArrayRef(SEXP selfSEXP, SEXP output_sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type output_size(output_sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_adaptive_avg_pool2d_self_Tensor_output_size_IntArrayRef(self, output_size));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_mkldnn_adaptive_avg_pool2d_self_Tensor_output_size_IntArrayRef
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_mkldnn_adaptive_avg_pool2d_self_Tensor_output_size_IntArrayRef(Rcpp::XPtr<torch::Tensor> self, std::vector<int64_t> output_size);
RcppExport SEXP _torch_cpp_torch_namespace_mkldnn_adaptive_avg_pool2d_self_Tensor_output_size_IntArrayRef(SEXP selfSEXP, SEXP output_sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type output_size(output_sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_mkldnn_adaptive_avg_pool2d_self_Tensor_output_size_IntArrayRef(self, output_size));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__adaptive_avg_pool2d_self_Tensor_output_size_IntArrayRef
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace__adaptive_avg_pool2d_self_Tensor_output_size_IntArrayRef(Rcpp::XPtr<torch::Tensor> self, std::vector<int64_t> output_size);
RcppExport SEXP _torch_cpp_torch_namespace__adaptive_avg_pool2d_self_Tensor_output_size_IntArrayRef(SEXP selfSEXP, SEXP output_sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type output_size(output_sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__adaptive_avg_pool2d_self_Tensor_output_size_IntArrayRef(self, output_size));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__adaptive_avg_pool2d_backward_grad_output_Tensor_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace__adaptive_avg_pool2d_backward_grad_output_Tensor_self_Tensor(Rcpp::XPtr<torch::Tensor> grad_output, Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_namespace__adaptive_avg_pool2d_backward_grad_output_Tensor_self_Tensor(SEXP grad_outputSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__adaptive_avg_pool2d_backward_grad_output_Tensor_self_Tensor(grad_output, self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_adaptive_avg_pool3d_out_out_Tensor_self_Tensor_output_size_IntArrayRef
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_adaptive_avg_pool3d_out_out_Tensor_self_Tensor_output_size_IntArrayRef(Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, std::vector<int64_t> output_size);
RcppExport SEXP _torch_cpp_torch_namespace_adaptive_avg_pool3d_out_out_Tensor_self_Tensor_output_size_IntArrayRef(SEXP outSEXP, SEXP selfSEXP, SEXP output_sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type out(outSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type output_size(output_sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_adaptive_avg_pool3d_out_out_Tensor_self_Tensor_output_size_IntArrayRef(out, self, output_size));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_adaptive_avg_pool3d_self_Tensor_output_size_IntArrayRef
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_adaptive_avg_pool3d_self_Tensor_output_size_IntArrayRef(Rcpp::XPtr<torch::Tensor> self, std::vector<int64_t> output_size);
RcppExport SEXP _torch_cpp_torch_namespace_adaptive_avg_pool3d_self_Tensor_output_size_IntArrayRef(SEXP selfSEXP, SEXP output_sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type output_size(output_sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_adaptive_avg_pool3d_self_Tensor_output_size_IntArrayRef(self, output_size));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_adaptive_avg_pool3d_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_adaptive_avg_pool3d_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor(Rcpp::XPtr<torch::Tensor> grad_input, Rcpp::XPtr<torch::Tensor> grad_output, Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_namespace_adaptive_avg_pool3d_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor(SEXP grad_inputSEXP, SEXP grad_outputSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type grad_input(grad_inputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_adaptive_avg_pool3d_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor(grad_input, grad_output, self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_adaptive_avg_pool3d_backward_grad_output_Tensor_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_adaptive_avg_pool3d_backward_grad_output_Tensor_self_Tensor(Rcpp::XPtr<torch::Tensor> grad_output, Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_namespace_adaptive_avg_pool3d_backward_grad_output_Tensor_self_Tensor(SEXP grad_outputSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_adaptive_avg_pool3d_backward_grad_output_Tensor_self_Tensor(grad_output, self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_adaptive_max_pool2d_out_out_Tensor_indices_Tensor_self_Tensor_output_size_IntArrayRef
Rcpp::List cpp_torch_namespace_adaptive_max_pool2d_out_out_Tensor_indices_Tensor_self_Tensor_output_size_IntArrayRef(Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> indices, Rcpp::XPtr<torch::Tensor> self, std::vector<int64_t> output_size);
RcppExport SEXP _torch_cpp_torch_namespace_adaptive_max_pool2d_out_out_Tensor_indices_Tensor_self_Tensor_output_size_IntArrayRef(SEXP outSEXP, SEXP indicesSEXP, SEXP selfSEXP, SEXP output_sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type out(outSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type indices(indicesSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type output_size(output_sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_adaptive_max_pool2d_out_out_Tensor_indices_Tensor_self_Tensor_output_size_IntArrayRef(out, indices, self, output_size));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_adaptive_max_pool2d_self_Tensor_output_size_IntArrayRef
Rcpp::List cpp_torch_namespace_adaptive_max_pool2d_self_Tensor_output_size_IntArrayRef(Rcpp::XPtr<torch::Tensor> self, std::vector<int64_t> output_size);
RcppExport SEXP _torch_cpp_torch_namespace_adaptive_max_pool2d_self_Tensor_output_size_IntArrayRef(SEXP selfSEXP, SEXP output_sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type output_size(output_sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_adaptive_max_pool2d_self_Tensor_output_size_IntArrayRef(self, output_size));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_adaptive_max_pool2d_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_indices_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_adaptive_max_pool2d_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_indices_Tensor(Rcpp::XPtr<torch::Tensor> grad_input, Rcpp::XPtr<torch::Tensor> grad_output, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> indices);
RcppExport SEXP _torch_cpp_torch_namespace_adaptive_max_pool2d_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_indices_Tensor(SEXP grad_inputSEXP, SEXP grad_outputSEXP, SEXP selfSEXP, SEXP indicesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type grad_input(grad_inputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type indices(indicesSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_adaptive_max_pool2d_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_indices_Tensor(grad_input, grad_output, self, indices));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_adaptive_max_pool2d_backward_grad_output_Tensor_self_Tensor_indices_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_adaptive_max_pool2d_backward_grad_output_Tensor_self_Tensor_indices_Tensor(Rcpp::XPtr<torch::Tensor> grad_output, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> indices);
RcppExport SEXP _torch_cpp_torch_namespace_adaptive_max_pool2d_backward_grad_output_Tensor_self_Tensor_indices_Tensor(SEXP grad_outputSEXP, SEXP selfSEXP, SEXP indicesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type indices(indicesSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_adaptive_max_pool2d_backward_grad_output_Tensor_self_Tensor_indices_Tensor(grad_output, self, indices));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_adaptive_max_pool3d_out_out_Tensor_indices_Tensor_self_Tensor_output_size_IntArrayRef
Rcpp::List cpp_torch_namespace_adaptive_max_pool3d_out_out_Tensor_indices_Tensor_self_Tensor_output_size_IntArrayRef(Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> indices, Rcpp::XPtr<torch::Tensor> self, std::vector<int64_t> output_size);
RcppExport SEXP _torch_cpp_torch_namespace_adaptive_max_pool3d_out_out_Tensor_indices_Tensor_self_Tensor_output_size_IntArrayRef(SEXP outSEXP, SEXP indicesSEXP, SEXP selfSEXP, SEXP output_sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type out(outSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type indices(indicesSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type output_size(output_sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_adaptive_max_pool3d_out_out_Tensor_indices_Tensor_self_Tensor_output_size_IntArrayRef(out, indices, self, output_size));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_adaptive_max_pool3d_self_Tensor_output_size_IntArrayRef
Rcpp::List cpp_torch_namespace_adaptive_max_pool3d_self_Tensor_output_size_IntArrayRef(Rcpp::XPtr<torch::Tensor> self, std::vector<int64_t> output_size);
RcppExport SEXP _torch_cpp_torch_namespace_adaptive_max_pool3d_self_Tensor_output_size_IntArrayRef(SEXP selfSEXP, SEXP output_sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type output_size(output_sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_adaptive_max_pool3d_self_Tensor_output_size_IntArrayRef(self, output_size));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_adaptive_max_pool3d_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_indices_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_adaptive_max_pool3d_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_indices_Tensor(Rcpp::XPtr<torch::Tensor> grad_input, Rcpp::XPtr<torch::Tensor> grad_output, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> indices);
RcppExport SEXP _torch_cpp_torch_namespace_adaptive_max_pool3d_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_indices_Tensor(SEXP grad_inputSEXP, SEXP grad_outputSEXP, SEXP selfSEXP, SEXP indicesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type grad_input(grad_inputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type indices(indicesSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_adaptive_max_pool3d_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_indices_Tensor(grad_input, grad_output, self, indices));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_adaptive_max_pool3d_backward_grad_output_Tensor_self_Tensor_indices_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_adaptive_max_pool3d_backward_grad_output_Tensor_self_Tensor_indices_Tensor(Rcpp::XPtr<torch::Tensor> grad_output, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> indices);
RcppExport SEXP _torch_cpp_torch_namespace_adaptive_max_pool3d_backward_grad_output_Tensor_self_Tensor_indices_Tensor(SEXP grad_outputSEXP, SEXP selfSEXP, SEXP indicesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type indices(indicesSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_adaptive_max_pool3d_backward_grad_output_Tensor_self_Tensor_indices_Tensor(grad_output, self, indices));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_avg_pool2d_out_out_Tensor_self_Tensor_kernel_size_IntArrayRef
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_avg_pool2d_out_out_Tensor_self_Tensor_kernel_size_IntArrayRef(Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, std::vector<int64_t> kernel_size, std::vector<int64_t> stride, std::vector<int64_t> padding, bool ceil_mode, bool count_include_pad, int64_t divisor_override);
RcppExport SEXP _torch_cpp_torch_namespace_avg_pool2d_out_out_Tensor_self_Tensor_kernel_size_IntArrayRef(SEXP outSEXP, SEXP selfSEXP, SEXP kernel_sizeSEXP, SEXP strideSEXP, SEXP paddingSEXP, SEXP ceil_modeSEXP, SEXP count_include_padSEXP, SEXP divisor_overrideSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type out(outSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type kernel_size(kernel_sizeSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type stride(strideSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type padding(paddingSEXP);
    Rcpp::traits::input_parameter< bool >::type ceil_mode(ceil_modeSEXP);
    Rcpp::traits::input_parameter< bool >::type count_include_pad(count_include_padSEXP);
    Rcpp::traits::input_parameter< int64_t >::type divisor_override(divisor_overrideSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_avg_pool2d_out_out_Tensor_self_Tensor_kernel_size_IntArrayRef(out, self, kernel_size, stride, padding, ceil_mode, count_include_pad, divisor_override));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_avg_pool2d_self_Tensor_kernel_size_IntArrayRef
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_avg_pool2d_self_Tensor_kernel_size_IntArrayRef(Rcpp::XPtr<torch::Tensor> self, std::vector<int64_t> kernel_size, std::vector<int64_t> stride, std::vector<int64_t> padding, bool ceil_mode, bool count_include_pad, int64_t divisor_override);
RcppExport SEXP _torch_cpp_torch_namespace_avg_pool2d_self_Tensor_kernel_size_IntArrayRef(SEXP selfSEXP, SEXP kernel_sizeSEXP, SEXP strideSEXP, SEXP paddingSEXP, SEXP ceil_modeSEXP, SEXP count_include_padSEXP, SEXP divisor_overrideSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type kernel_size(kernel_sizeSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type stride(strideSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type padding(paddingSEXP);
    Rcpp::traits::input_parameter< bool >::type ceil_mode(ceil_modeSEXP);
    Rcpp::traits::input_parameter< bool >::type count_include_pad(count_include_padSEXP);
    Rcpp::traits::input_parameter< int64_t >::type divisor_override(divisor_overrideSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_avg_pool2d_self_Tensor_kernel_size_IntArrayRef(self, kernel_size, stride, padding, ceil_mode, count_include_pad, divisor_override));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_avg_pool2d_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_kernel_size_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef_ceil_mode_bool_count_include_pad_bool_divisor_override_int64_t
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_avg_pool2d_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_kernel_size_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef_ceil_mode_bool_count_include_pad_bool_divisor_override_int64_t(Rcpp::XPtr<torch::Tensor> grad_input, Rcpp::XPtr<torch::Tensor> grad_output, Rcpp::XPtr<torch::Tensor> self, std::vector<int64_t> kernel_size, std::vector<int64_t> stride, std::vector<int64_t> padding, bool ceil_mode, bool count_include_pad, int64_t divisor_override);
RcppExport SEXP _torch_cpp_torch_namespace_avg_pool2d_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_kernel_size_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef_ceil_mode_bool_count_include_pad_bool_divisor_override_int64_t(SEXP grad_inputSEXP, SEXP grad_outputSEXP, SEXP selfSEXP, SEXP kernel_sizeSEXP, SEXP strideSEXP, SEXP paddingSEXP, SEXP ceil_modeSEXP, SEXP count_include_padSEXP, SEXP divisor_overrideSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type grad_input(grad_inputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type kernel_size(kernel_sizeSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type stride(strideSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type padding(paddingSEXP);
    Rcpp::traits::input_parameter< bool >::type ceil_mode(ceil_modeSEXP);
    Rcpp::traits::input_parameter< bool >::type count_include_pad(count_include_padSEXP);
    Rcpp::traits::input_parameter< int64_t >::type divisor_override(divisor_overrideSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_avg_pool2d_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_kernel_size_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef_ceil_mode_bool_count_include_pad_bool_divisor_override_int64_t(grad_input, grad_output, self, kernel_size, stride, padding, ceil_mode, count_include_pad, divisor_override));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_avg_pool2d_backward_grad_output_Tensor_self_Tensor_kernel_size_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef_ceil_mode_bool_count_include_pad_bool_divisor_override_int64_t
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_avg_pool2d_backward_grad_output_Tensor_self_Tensor_kernel_size_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef_ceil_mode_bool_count_include_pad_bool_divisor_override_int64_t(Rcpp::XPtr<torch::Tensor> grad_output, Rcpp::XPtr<torch::Tensor> self, std::vector<int64_t> kernel_size, std::vector<int64_t> stride, std::vector<int64_t> padding, bool ceil_mode, bool count_include_pad, int64_t divisor_override);
RcppExport SEXP _torch_cpp_torch_namespace_avg_pool2d_backward_grad_output_Tensor_self_Tensor_kernel_size_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef_ceil_mode_bool_count_include_pad_bool_divisor_override_int64_t(SEXP grad_outputSEXP, SEXP selfSEXP, SEXP kernel_sizeSEXP, SEXP strideSEXP, SEXP paddingSEXP, SEXP ceil_modeSEXP, SEXP count_include_padSEXP, SEXP divisor_overrideSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type kernel_size(kernel_sizeSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type stride(strideSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type padding(paddingSEXP);
    Rcpp::traits::input_parameter< bool >::type ceil_mode(ceil_modeSEXP);
    Rcpp::traits::input_parameter< bool >::type count_include_pad(count_include_padSEXP);
    Rcpp::traits::input_parameter< int64_t >::type divisor_override(divisor_overrideSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_avg_pool2d_backward_grad_output_Tensor_self_Tensor_kernel_size_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef_ceil_mode_bool_count_include_pad_bool_divisor_override_int64_t(grad_output, self, kernel_size, stride, padding, ceil_mode, count_include_pad, divisor_override));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_avg_pool3d_out_out_Tensor_self_Tensor_kernel_size_IntArrayRef
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_avg_pool3d_out_out_Tensor_self_Tensor_kernel_size_IntArrayRef(Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, std::vector<int64_t> kernel_size, std::vector<int64_t> stride, std::vector<int64_t> padding, bool ceil_mode, bool count_include_pad, int64_t divisor_override);
RcppExport SEXP _torch_cpp_torch_namespace_avg_pool3d_out_out_Tensor_self_Tensor_kernel_size_IntArrayRef(SEXP outSEXP, SEXP selfSEXP, SEXP kernel_sizeSEXP, SEXP strideSEXP, SEXP paddingSEXP, SEXP ceil_modeSEXP, SEXP count_include_padSEXP, SEXP divisor_overrideSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type out(outSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type kernel_size(kernel_sizeSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type stride(strideSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type padding(paddingSEXP);
    Rcpp::traits::input_parameter< bool >::type ceil_mode(ceil_modeSEXP);
    Rcpp::traits::input_parameter< bool >::type count_include_pad(count_include_padSEXP);
    Rcpp::traits::input_parameter< int64_t >::type divisor_override(divisor_overrideSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_avg_pool3d_out_out_Tensor_self_Tensor_kernel_size_IntArrayRef(out, self, kernel_size, stride, padding, ceil_mode, count_include_pad, divisor_override));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_avg_pool3d_self_Tensor_kernel_size_IntArrayRef
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_avg_pool3d_self_Tensor_kernel_size_IntArrayRef(Rcpp::XPtr<torch::Tensor> self, std::vector<int64_t> kernel_size, std::vector<int64_t> stride, std::vector<int64_t> padding, bool ceil_mode, bool count_include_pad, int64_t divisor_override);
RcppExport SEXP _torch_cpp_torch_namespace_avg_pool3d_self_Tensor_kernel_size_IntArrayRef(SEXP selfSEXP, SEXP kernel_sizeSEXP, SEXP strideSEXP, SEXP paddingSEXP, SEXP ceil_modeSEXP, SEXP count_include_padSEXP, SEXP divisor_overrideSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type kernel_size(kernel_sizeSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type stride(strideSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type padding(paddingSEXP);
    Rcpp::traits::input_parameter< bool >::type ceil_mode(ceil_modeSEXP);
    Rcpp::traits::input_parameter< bool >::type count_include_pad(count_include_padSEXP);
    Rcpp::traits::input_parameter< int64_t >::type divisor_override(divisor_overrideSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_avg_pool3d_self_Tensor_kernel_size_IntArrayRef(self, kernel_size, stride, padding, ceil_mode, count_include_pad, divisor_override));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_avg_pool3d_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_kernel_size_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef_ceil_mode_bool_count_include_pad_bool_divisor_override_int64_t
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_avg_pool3d_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_kernel_size_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef_ceil_mode_bool_count_include_pad_bool_divisor_override_int64_t(Rcpp::XPtr<torch::Tensor> grad_input, Rcpp::XPtr<torch::Tensor> grad_output, Rcpp::XPtr<torch::Tensor> self, std::vector<int64_t> kernel_size, std::vector<int64_t> stride, std::vector<int64_t> padding, bool ceil_mode, bool count_include_pad, int64_t divisor_override);
RcppExport SEXP _torch_cpp_torch_namespace_avg_pool3d_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_kernel_size_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef_ceil_mode_bool_count_include_pad_bool_divisor_override_int64_t(SEXP grad_inputSEXP, SEXP grad_outputSEXP, SEXP selfSEXP, SEXP kernel_sizeSEXP, SEXP strideSEXP, SEXP paddingSEXP, SEXP ceil_modeSEXP, SEXP count_include_padSEXP, SEXP divisor_overrideSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type grad_input(grad_inputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type kernel_size(kernel_sizeSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type stride(strideSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type padding(paddingSEXP);
    Rcpp::traits::input_parameter< bool >::type ceil_mode(ceil_modeSEXP);
    Rcpp::traits::input_parameter< bool >::type count_include_pad(count_include_padSEXP);
    Rcpp::traits::input_parameter< int64_t >::type divisor_override(divisor_overrideSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_avg_pool3d_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_kernel_size_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef_ceil_mode_bool_count_include_pad_bool_divisor_override_int64_t(grad_input, grad_output, self, kernel_size, stride, padding, ceil_mode, count_include_pad, divisor_override));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_avg_pool3d_backward_grad_output_Tensor_self_Tensor_kernel_size_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef_ceil_mode_bool_count_include_pad_bool_divisor_override_int64_t
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_avg_pool3d_backward_grad_output_Tensor_self_Tensor_kernel_size_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef_ceil_mode_bool_count_include_pad_bool_divisor_override_int64_t(Rcpp::XPtr<torch::Tensor> grad_output, Rcpp::XPtr<torch::Tensor> self, std::vector<int64_t> kernel_size, std::vector<int64_t> stride, std::vector<int64_t> padding, bool ceil_mode, bool count_include_pad, int64_t divisor_override);
RcppExport SEXP _torch_cpp_torch_namespace_avg_pool3d_backward_grad_output_Tensor_self_Tensor_kernel_size_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef_ceil_mode_bool_count_include_pad_bool_divisor_override_int64_t(SEXP grad_outputSEXP, SEXP selfSEXP, SEXP kernel_sizeSEXP, SEXP strideSEXP, SEXP paddingSEXP, SEXP ceil_modeSEXP, SEXP count_include_padSEXP, SEXP divisor_overrideSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type kernel_size(kernel_sizeSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type stride(strideSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type padding(paddingSEXP);
    Rcpp::traits::input_parameter< bool >::type ceil_mode(ceil_modeSEXP);
    Rcpp::traits::input_parameter< bool >::type count_include_pad(count_include_padSEXP);
    Rcpp::traits::input_parameter< int64_t >::type divisor_override(divisor_overrideSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_avg_pool3d_backward_grad_output_Tensor_self_Tensor_kernel_size_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef_ceil_mode_bool_count_include_pad_bool_divisor_override_int64_t(grad_output, self, kernel_size, stride, padding, ceil_mode, count_include_pad, divisor_override));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_fractional_max_pool2d_out_output_Tensor_indices_Tensor_self_Tensor_kernel_size_IntArrayRef_output_size_IntArrayRef_random_samples_Tensor
Rcpp::List cpp_torch_namespace_fractional_max_pool2d_out_output_Tensor_indices_Tensor_self_Tensor_kernel_size_IntArrayRef_output_size_IntArrayRef_random_samples_Tensor(Rcpp::XPtr<torch::Tensor> output, Rcpp::XPtr<torch::Tensor> indices, Rcpp::XPtr<torch::Tensor> self, std::vector<int64_t> kernel_size, std::vector<int64_t> output_size, Rcpp::XPtr<torch::Tensor> random_samples);
RcppExport SEXP _torch_cpp_torch_namespace_fractional_max_pool2d_out_output_Tensor_indices_Tensor_self_Tensor_kernel_size_IntArrayRef_output_size_IntArrayRef_random_samples_Tensor(SEXP outputSEXP, SEXP indicesSEXP, SEXP selfSEXP, SEXP kernel_sizeSEXP, SEXP output_sizeSEXP, SEXP random_samplesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type output(outputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type indices(indicesSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type kernel_size(kernel_sizeSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type output_size(output_sizeSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type random_samples(random_samplesSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_fractional_max_pool2d_out_output_Tensor_indices_Tensor_self_Tensor_kernel_size_IntArrayRef_output_size_IntArrayRef_random_samples_Tensor(output, indices, self, kernel_size, output_size, random_samples));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_fractional_max_pool2d_self_Tensor_kernel_size_IntArrayRef_output_size_IntArrayRef_random_samples_Tensor
Rcpp::List cpp_torch_namespace_fractional_max_pool2d_self_Tensor_kernel_size_IntArrayRef_output_size_IntArrayRef_random_samples_Tensor(Rcpp::XPtr<torch::Tensor> self, std::vector<int64_t> kernel_size, std::vector<int64_t> output_size, Rcpp::XPtr<torch::Tensor> random_samples);
RcppExport SEXP _torch_cpp_torch_namespace_fractional_max_pool2d_self_Tensor_kernel_size_IntArrayRef_output_size_IntArrayRef_random_samples_Tensor(SEXP selfSEXP, SEXP kernel_sizeSEXP, SEXP output_sizeSEXP, SEXP random_samplesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type kernel_size(kernel_sizeSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type output_size(output_sizeSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type random_samples(random_samplesSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_fractional_max_pool2d_self_Tensor_kernel_size_IntArrayRef_output_size_IntArrayRef_random_samples_Tensor(self, kernel_size, output_size, random_samples));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_fractional_max_pool2d_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_kernel_size_IntArrayRef_output_size_IntArrayRef_indices_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_fractional_max_pool2d_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_kernel_size_IntArrayRef_output_size_IntArrayRef_indices_Tensor(Rcpp::XPtr<torch::Tensor> grad_input, Rcpp::XPtr<torch::Tensor> grad_output, Rcpp::XPtr<torch::Tensor> self, std::vector<int64_t> kernel_size, std::vector<int64_t> output_size, Rcpp::XPtr<torch::Tensor> indices);
RcppExport SEXP _torch_cpp_torch_namespace_fractional_max_pool2d_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_kernel_size_IntArrayRef_output_size_IntArrayRef_indices_Tensor(SEXP grad_inputSEXP, SEXP grad_outputSEXP, SEXP selfSEXP, SEXP kernel_sizeSEXP, SEXP output_sizeSEXP, SEXP indicesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type grad_input(grad_inputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type kernel_size(kernel_sizeSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type output_size(output_sizeSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type indices(indicesSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_fractional_max_pool2d_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_kernel_size_IntArrayRef_output_size_IntArrayRef_indices_Tensor(grad_input, grad_output, self, kernel_size, output_size, indices));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_fractional_max_pool2d_backward_grad_output_Tensor_self_Tensor_kernel_size_IntArrayRef_output_size_IntArrayRef_indices_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_fractional_max_pool2d_backward_grad_output_Tensor_self_Tensor_kernel_size_IntArrayRef_output_size_IntArrayRef_indices_Tensor(Rcpp::XPtr<torch::Tensor> grad_output, Rcpp::XPtr<torch::Tensor> self, std::vector<int64_t> kernel_size, std::vector<int64_t> output_size, Rcpp::XPtr<torch::Tensor> indices);
RcppExport SEXP _torch_cpp_torch_namespace_fractional_max_pool2d_backward_grad_output_Tensor_self_Tensor_kernel_size_IntArrayRef_output_size_IntArrayRef_indices_Tensor(SEXP grad_outputSEXP, SEXP selfSEXP, SEXP kernel_sizeSEXP, SEXP output_sizeSEXP, SEXP indicesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type kernel_size(kernel_sizeSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type output_size(output_sizeSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type indices(indicesSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_fractional_max_pool2d_backward_grad_output_Tensor_self_Tensor_kernel_size_IntArrayRef_output_size_IntArrayRef_indices_Tensor(grad_output, self, kernel_size, output_size, indices));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_fractional_max_pool3d_out_output_Tensor_indices_Tensor_self_Tensor_kernel_size_IntArrayRef_output_size_IntArrayRef_random_samples_Tensor
Rcpp::List cpp_torch_namespace_fractional_max_pool3d_out_output_Tensor_indices_Tensor_self_Tensor_kernel_size_IntArrayRef_output_size_IntArrayRef_random_samples_Tensor(Rcpp::XPtr<torch::Tensor> output, Rcpp::XPtr<torch::Tensor> indices, Rcpp::XPtr<torch::Tensor> self, std::vector<int64_t> kernel_size, std::vector<int64_t> output_size, Rcpp::XPtr<torch::Tensor> random_samples);
RcppExport SEXP _torch_cpp_torch_namespace_fractional_max_pool3d_out_output_Tensor_indices_Tensor_self_Tensor_kernel_size_IntArrayRef_output_size_IntArrayRef_random_samples_Tensor(SEXP outputSEXP, SEXP indicesSEXP, SEXP selfSEXP, SEXP kernel_sizeSEXP, SEXP output_sizeSEXP, SEXP random_samplesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type output(outputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type indices(indicesSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type kernel_size(kernel_sizeSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type output_size(output_sizeSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type random_samples(random_samplesSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_fractional_max_pool3d_out_output_Tensor_indices_Tensor_self_Tensor_kernel_size_IntArrayRef_output_size_IntArrayRef_random_samples_Tensor(output, indices, self, kernel_size, output_size, random_samples));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_fractional_max_pool3d_self_Tensor_kernel_size_IntArrayRef_output_size_IntArrayRef_random_samples_Tensor
Rcpp::List cpp_torch_namespace_fractional_max_pool3d_self_Tensor_kernel_size_IntArrayRef_output_size_IntArrayRef_random_samples_Tensor(Rcpp::XPtr<torch::Tensor> self, std::vector<int64_t> kernel_size, std::vector<int64_t> output_size, Rcpp::XPtr<torch::Tensor> random_samples);
RcppExport SEXP _torch_cpp_torch_namespace_fractional_max_pool3d_self_Tensor_kernel_size_IntArrayRef_output_size_IntArrayRef_random_samples_Tensor(SEXP selfSEXP, SEXP kernel_sizeSEXP, SEXP output_sizeSEXP, SEXP random_samplesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type kernel_size(kernel_sizeSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type output_size(output_sizeSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type random_samples(random_samplesSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_fractional_max_pool3d_self_Tensor_kernel_size_IntArrayRef_output_size_IntArrayRef_random_samples_Tensor(self, kernel_size, output_size, random_samples));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_fractional_max_pool3d_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_kernel_size_IntArrayRef_output_size_IntArrayRef_indices_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_fractional_max_pool3d_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_kernel_size_IntArrayRef_output_size_IntArrayRef_indices_Tensor(Rcpp::XPtr<torch::Tensor> grad_input, Rcpp::XPtr<torch::Tensor> grad_output, Rcpp::XPtr<torch::Tensor> self, std::vector<int64_t> kernel_size, std::vector<int64_t> output_size, Rcpp::XPtr<torch::Tensor> indices);
RcppExport SEXP _torch_cpp_torch_namespace_fractional_max_pool3d_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_kernel_size_IntArrayRef_output_size_IntArrayRef_indices_Tensor(SEXP grad_inputSEXP, SEXP grad_outputSEXP, SEXP selfSEXP, SEXP kernel_sizeSEXP, SEXP output_sizeSEXP, SEXP indicesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type grad_input(grad_inputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type kernel_size(kernel_sizeSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type output_size(output_sizeSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type indices(indicesSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_fractional_max_pool3d_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_kernel_size_IntArrayRef_output_size_IntArrayRef_indices_Tensor(grad_input, grad_output, self, kernel_size, output_size, indices));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_fractional_max_pool3d_backward_grad_output_Tensor_self_Tensor_kernel_size_IntArrayRef_output_size_IntArrayRef_indices_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_fractional_max_pool3d_backward_grad_output_Tensor_self_Tensor_kernel_size_IntArrayRef_output_size_IntArrayRef_indices_Tensor(Rcpp::XPtr<torch::Tensor> grad_output, Rcpp::XPtr<torch::Tensor> self, std::vector<int64_t> kernel_size, std::vector<int64_t> output_size, Rcpp::XPtr<torch::Tensor> indices);
RcppExport SEXP _torch_cpp_torch_namespace_fractional_max_pool3d_backward_grad_output_Tensor_self_Tensor_kernel_size_IntArrayRef_output_size_IntArrayRef_indices_Tensor(SEXP grad_outputSEXP, SEXP selfSEXP, SEXP kernel_sizeSEXP, SEXP output_sizeSEXP, SEXP indicesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type kernel_size(kernel_sizeSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type output_size(output_sizeSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type indices(indicesSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_fractional_max_pool3d_backward_grad_output_Tensor_self_Tensor_kernel_size_IntArrayRef_output_size_IntArrayRef_indices_Tensor(grad_output, self, kernel_size, output_size, indices));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_max_pool2d_with_indices_out_out_Tensor_indices_Tensor_self_Tensor_kernel_size_IntArrayRef
Rcpp::List cpp_torch_namespace_max_pool2d_with_indices_out_out_Tensor_indices_Tensor_self_Tensor_kernel_size_IntArrayRef(Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> indices, Rcpp::XPtr<torch::Tensor> self, std::vector<int64_t> kernel_size, std::vector<int64_t> stride, std::vector<int64_t> padding, std::vector<int64_t> dilation, bool ceil_mode);
RcppExport SEXP _torch_cpp_torch_namespace_max_pool2d_with_indices_out_out_Tensor_indices_Tensor_self_Tensor_kernel_size_IntArrayRef(SEXP outSEXP, SEXP indicesSEXP, SEXP selfSEXP, SEXP kernel_sizeSEXP, SEXP strideSEXP, SEXP paddingSEXP, SEXP dilationSEXP, SEXP ceil_modeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type out(outSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type indices(indicesSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type kernel_size(kernel_sizeSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type stride(strideSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type padding(paddingSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type dilation(dilationSEXP);
    Rcpp::traits::input_parameter< bool >::type ceil_mode(ceil_modeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_max_pool2d_with_indices_out_out_Tensor_indices_Tensor_self_Tensor_kernel_size_IntArrayRef(out, indices, self, kernel_size, stride, padding, dilation, ceil_mode));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_max_pool2d_with_indices_self_Tensor_kernel_size_IntArrayRef
Rcpp::List cpp_torch_namespace_max_pool2d_with_indices_self_Tensor_kernel_size_IntArrayRef(Rcpp::XPtr<torch::Tensor> self, std::vector<int64_t> kernel_size, std::vector<int64_t> stride, std::vector<int64_t> padding, std::vector<int64_t> dilation, bool ceil_mode);
RcppExport SEXP _torch_cpp_torch_namespace_max_pool2d_with_indices_self_Tensor_kernel_size_IntArrayRef(SEXP selfSEXP, SEXP kernel_sizeSEXP, SEXP strideSEXP, SEXP paddingSEXP, SEXP dilationSEXP, SEXP ceil_modeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type kernel_size(kernel_sizeSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type stride(strideSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type padding(paddingSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type dilation(dilationSEXP);
    Rcpp::traits::input_parameter< bool >::type ceil_mode(ceil_modeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_max_pool2d_with_indices_self_Tensor_kernel_size_IntArrayRef(self, kernel_size, stride, padding, dilation, ceil_mode));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_max_pool2d_with_indices_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_kernel_size_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef_ceil_mode_bool_indices_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_max_pool2d_with_indices_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_kernel_size_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef_ceil_mode_bool_indices_Tensor(Rcpp::XPtr<torch::Tensor> grad_input, Rcpp::XPtr<torch::Tensor> grad_output, Rcpp::XPtr<torch::Tensor> self, std::vector<int64_t> kernel_size, std::vector<int64_t> stride, std::vector<int64_t> padding, std::vector<int64_t> dilation, bool ceil_mode, Rcpp::XPtr<torch::Tensor> indices);
RcppExport SEXP _torch_cpp_torch_namespace_max_pool2d_with_indices_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_kernel_size_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef_ceil_mode_bool_indices_Tensor(SEXP grad_inputSEXP, SEXP grad_outputSEXP, SEXP selfSEXP, SEXP kernel_sizeSEXP, SEXP strideSEXP, SEXP paddingSEXP, SEXP dilationSEXP, SEXP ceil_modeSEXP, SEXP indicesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type grad_input(grad_inputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type kernel_size(kernel_sizeSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type stride(strideSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type padding(paddingSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type dilation(dilationSEXP);
    Rcpp::traits::input_parameter< bool >::type ceil_mode(ceil_modeSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type indices(indicesSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_max_pool2d_with_indices_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_kernel_size_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef_ceil_mode_bool_indices_Tensor(grad_input, grad_output, self, kernel_size, stride, padding, dilation, ceil_mode, indices));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_max_pool2d_with_indices_backward_grad_output_Tensor_self_Tensor_kernel_size_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef_ceil_mode_bool_indices_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_max_pool2d_with_indices_backward_grad_output_Tensor_self_Tensor_kernel_size_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef_ceil_mode_bool_indices_Tensor(Rcpp::XPtr<torch::Tensor> grad_output, Rcpp::XPtr<torch::Tensor> self, std::vector<int64_t> kernel_size, std::vector<int64_t> stride, std::vector<int64_t> padding, std::vector<int64_t> dilation, bool ceil_mode, Rcpp::XPtr<torch::Tensor> indices);
RcppExport SEXP _torch_cpp_torch_namespace_max_pool2d_with_indices_backward_grad_output_Tensor_self_Tensor_kernel_size_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef_ceil_mode_bool_indices_Tensor(SEXP grad_outputSEXP, SEXP selfSEXP, SEXP kernel_sizeSEXP, SEXP strideSEXP, SEXP paddingSEXP, SEXP dilationSEXP, SEXP ceil_modeSEXP, SEXP indicesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type kernel_size(kernel_sizeSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type stride(strideSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type padding(paddingSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type dilation(dilationSEXP);
    Rcpp::traits::input_parameter< bool >::type ceil_mode(ceil_modeSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type indices(indicesSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_max_pool2d_with_indices_backward_grad_output_Tensor_self_Tensor_kernel_size_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef_ceil_mode_bool_indices_Tensor(grad_output, self, kernel_size, stride, padding, dilation, ceil_mode, indices));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_max_pool3d_with_indices_out_out_Tensor_indices_Tensor_self_Tensor_kernel_size_IntArrayRef
Rcpp::List cpp_torch_namespace_max_pool3d_with_indices_out_out_Tensor_indices_Tensor_self_Tensor_kernel_size_IntArrayRef(Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> indices, Rcpp::XPtr<torch::Tensor> self, std::vector<int64_t> kernel_size, std::vector<int64_t> stride, std::vector<int64_t> padding, std::vector<int64_t> dilation, bool ceil_mode);
RcppExport SEXP _torch_cpp_torch_namespace_max_pool3d_with_indices_out_out_Tensor_indices_Tensor_self_Tensor_kernel_size_IntArrayRef(SEXP outSEXP, SEXP indicesSEXP, SEXP selfSEXP, SEXP kernel_sizeSEXP, SEXP strideSEXP, SEXP paddingSEXP, SEXP dilationSEXP, SEXP ceil_modeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type out(outSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type indices(indicesSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type kernel_size(kernel_sizeSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type stride(strideSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type padding(paddingSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type dilation(dilationSEXP);
    Rcpp::traits::input_parameter< bool >::type ceil_mode(ceil_modeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_max_pool3d_with_indices_out_out_Tensor_indices_Tensor_self_Tensor_kernel_size_IntArrayRef(out, indices, self, kernel_size, stride, padding, dilation, ceil_mode));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_max_pool3d_with_indices_self_Tensor_kernel_size_IntArrayRef
Rcpp::List cpp_torch_namespace_max_pool3d_with_indices_self_Tensor_kernel_size_IntArrayRef(Rcpp::XPtr<torch::Tensor> self, std::vector<int64_t> kernel_size, std::vector<int64_t> stride, std::vector<int64_t> padding, std::vector<int64_t> dilation, bool ceil_mode);
RcppExport SEXP _torch_cpp_torch_namespace_max_pool3d_with_indices_self_Tensor_kernel_size_IntArrayRef(SEXP selfSEXP, SEXP kernel_sizeSEXP, SEXP strideSEXP, SEXP paddingSEXP, SEXP dilationSEXP, SEXP ceil_modeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type kernel_size(kernel_sizeSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type stride(strideSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type padding(paddingSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type dilation(dilationSEXP);
    Rcpp::traits::input_parameter< bool >::type ceil_mode(ceil_modeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_max_pool3d_with_indices_self_Tensor_kernel_size_IntArrayRef(self, kernel_size, stride, padding, dilation, ceil_mode));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_max_pool3d_with_indices_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_kernel_size_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef_ceil_mode_bool_indices_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_max_pool3d_with_indices_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_kernel_size_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef_ceil_mode_bool_indices_Tensor(Rcpp::XPtr<torch::Tensor> grad_input, Rcpp::XPtr<torch::Tensor> grad_output, Rcpp::XPtr<torch::Tensor> self, std::vector<int64_t> kernel_size, std::vector<int64_t> stride, std::vector<int64_t> padding, std::vector<int64_t> dilation, bool ceil_mode, Rcpp::XPtr<torch::Tensor> indices);
RcppExport SEXP _torch_cpp_torch_namespace_max_pool3d_with_indices_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_kernel_size_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef_ceil_mode_bool_indices_Tensor(SEXP grad_inputSEXP, SEXP grad_outputSEXP, SEXP selfSEXP, SEXP kernel_sizeSEXP, SEXP strideSEXP, SEXP paddingSEXP, SEXP dilationSEXP, SEXP ceil_modeSEXP, SEXP indicesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type grad_input(grad_inputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type kernel_size(kernel_sizeSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type stride(strideSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type padding(paddingSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type dilation(dilationSEXP);
    Rcpp::traits::input_parameter< bool >::type ceil_mode(ceil_modeSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type indices(indicesSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_max_pool3d_with_indices_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_kernel_size_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef_ceil_mode_bool_indices_Tensor(grad_input, grad_output, self, kernel_size, stride, padding, dilation, ceil_mode, indices));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_max_pool3d_with_indices_backward_grad_output_Tensor_self_Tensor_kernel_size_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef_ceil_mode_bool_indices_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_max_pool3d_with_indices_backward_grad_output_Tensor_self_Tensor_kernel_size_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef_ceil_mode_bool_indices_Tensor(Rcpp::XPtr<torch::Tensor> grad_output, Rcpp::XPtr<torch::Tensor> self, std::vector<int64_t> kernel_size, std::vector<int64_t> stride, std::vector<int64_t> padding, std::vector<int64_t> dilation, bool ceil_mode, Rcpp::XPtr<torch::Tensor> indices);
RcppExport SEXP _torch_cpp_torch_namespace_max_pool3d_with_indices_backward_grad_output_Tensor_self_Tensor_kernel_size_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef_ceil_mode_bool_indices_Tensor(SEXP grad_outputSEXP, SEXP selfSEXP, SEXP kernel_sizeSEXP, SEXP strideSEXP, SEXP paddingSEXP, SEXP dilationSEXP, SEXP ceil_modeSEXP, SEXP indicesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type kernel_size(kernel_sizeSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type stride(strideSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type padding(paddingSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type dilation(dilationSEXP);
    Rcpp::traits::input_parameter< bool >::type ceil_mode(ceil_modeSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type indices(indicesSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_max_pool3d_with_indices_backward_grad_output_Tensor_self_Tensor_kernel_size_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef_ceil_mode_bool_indices_Tensor(grad_output, self, kernel_size, stride, padding, dilation, ceil_mode, indices));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_max_unpool2d_out_out_Tensor_self_Tensor_indices_Tensor_output_size_IntArrayRef
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_max_unpool2d_out_out_Tensor_self_Tensor_indices_Tensor_output_size_IntArrayRef(Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> indices, std::vector<int64_t> output_size);
RcppExport SEXP _torch_cpp_torch_namespace_max_unpool2d_out_out_Tensor_self_Tensor_indices_Tensor_output_size_IntArrayRef(SEXP outSEXP, SEXP selfSEXP, SEXP indicesSEXP, SEXP output_sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type out(outSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type indices(indicesSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type output_size(output_sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_max_unpool2d_out_out_Tensor_self_Tensor_indices_Tensor_output_size_IntArrayRef(out, self, indices, output_size));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_max_unpool2d_self_Tensor_indices_Tensor_output_size_IntArrayRef
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_max_unpool2d_self_Tensor_indices_Tensor_output_size_IntArrayRef(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> indices, std::vector<int64_t> output_size);
RcppExport SEXP _torch_cpp_torch_namespace_max_unpool2d_self_Tensor_indices_Tensor_output_size_IntArrayRef(SEXP selfSEXP, SEXP indicesSEXP, SEXP output_sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type indices(indicesSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type output_size(output_sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_max_unpool2d_self_Tensor_indices_Tensor_output_size_IntArrayRef(self, indices, output_size));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_max_unpool2d_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_indices_Tensor_output_size_IntArrayRef
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_max_unpool2d_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_indices_Tensor_output_size_IntArrayRef(Rcpp::XPtr<torch::Tensor> grad_input, Rcpp::XPtr<torch::Tensor> grad_output, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> indices, std::vector<int64_t> output_size);
RcppExport SEXP _torch_cpp_torch_namespace_max_unpool2d_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_indices_Tensor_output_size_IntArrayRef(SEXP grad_inputSEXP, SEXP grad_outputSEXP, SEXP selfSEXP, SEXP indicesSEXP, SEXP output_sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type grad_input(grad_inputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type indices(indicesSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type output_size(output_sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_max_unpool2d_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_indices_Tensor_output_size_IntArrayRef(grad_input, grad_output, self, indices, output_size));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_max_unpool2d_backward_grad_output_Tensor_self_Tensor_indices_Tensor_output_size_IntArrayRef
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_max_unpool2d_backward_grad_output_Tensor_self_Tensor_indices_Tensor_output_size_IntArrayRef(Rcpp::XPtr<torch::Tensor> grad_output, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> indices, std::vector<int64_t> output_size);
RcppExport SEXP _torch_cpp_torch_namespace_max_unpool2d_backward_grad_output_Tensor_self_Tensor_indices_Tensor_output_size_IntArrayRef(SEXP grad_outputSEXP, SEXP selfSEXP, SEXP indicesSEXP, SEXP output_sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type indices(indicesSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type output_size(output_sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_max_unpool2d_backward_grad_output_Tensor_self_Tensor_indices_Tensor_output_size_IntArrayRef(grad_output, self, indices, output_size));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_max_unpool3d_out_out_Tensor_self_Tensor_indices_Tensor_output_size_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_max_unpool3d_out_out_Tensor_self_Tensor_indices_Tensor_output_size_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef(Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> indices, std::vector<int64_t> output_size, std::vector<int64_t> stride, std::vector<int64_t> padding);
RcppExport SEXP _torch_cpp_torch_namespace_max_unpool3d_out_out_Tensor_self_Tensor_indices_Tensor_output_size_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef(SEXP outSEXP, SEXP selfSEXP, SEXP indicesSEXP, SEXP output_sizeSEXP, SEXP strideSEXP, SEXP paddingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type out(outSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type indices(indicesSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type output_size(output_sizeSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type stride(strideSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type padding(paddingSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_max_unpool3d_out_out_Tensor_self_Tensor_indices_Tensor_output_size_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef(out, self, indices, output_size, stride, padding));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_max_unpool3d_self_Tensor_indices_Tensor_output_size_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_max_unpool3d_self_Tensor_indices_Tensor_output_size_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> indices, std::vector<int64_t> output_size, std::vector<int64_t> stride, std::vector<int64_t> padding);
RcppExport SEXP _torch_cpp_torch_namespace_max_unpool3d_self_Tensor_indices_Tensor_output_size_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef(SEXP selfSEXP, SEXP indicesSEXP, SEXP output_sizeSEXP, SEXP strideSEXP, SEXP paddingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type indices(indicesSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type output_size(output_sizeSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type stride(strideSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type padding(paddingSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_max_unpool3d_self_Tensor_indices_Tensor_output_size_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef(self, indices, output_size, stride, padding));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_max_unpool3d_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_indices_Tensor_output_size_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_max_unpool3d_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_indices_Tensor_output_size_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef(Rcpp::XPtr<torch::Tensor> grad_input, Rcpp::XPtr<torch::Tensor> grad_output, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> indices, std::vector<int64_t> output_size, std::vector<int64_t> stride, std::vector<int64_t> padding);
RcppExport SEXP _torch_cpp_torch_namespace_max_unpool3d_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_indices_Tensor_output_size_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef(SEXP grad_inputSEXP, SEXP grad_outputSEXP, SEXP selfSEXP, SEXP indicesSEXP, SEXP output_sizeSEXP, SEXP strideSEXP, SEXP paddingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type grad_input(grad_inputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type indices(indicesSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type output_size(output_sizeSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type stride(strideSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type padding(paddingSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_max_unpool3d_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_indices_Tensor_output_size_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef(grad_input, grad_output, self, indices, output_size, stride, padding));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_max_unpool3d_backward_grad_output_Tensor_self_Tensor_indices_Tensor_output_size_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_max_unpool3d_backward_grad_output_Tensor_self_Tensor_indices_Tensor_output_size_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef(Rcpp::XPtr<torch::Tensor> grad_output, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> indices, std::vector<int64_t> output_size, std::vector<int64_t> stride, std::vector<int64_t> padding);
RcppExport SEXP _torch_cpp_torch_namespace_max_unpool3d_backward_grad_output_Tensor_self_Tensor_indices_Tensor_output_size_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef(SEXP grad_outputSEXP, SEXP selfSEXP, SEXP indicesSEXP, SEXP output_sizeSEXP, SEXP strideSEXP, SEXP paddingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type indices(indicesSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type output_size(output_sizeSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type stride(strideSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type padding(paddingSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_max_unpool3d_backward_grad_output_Tensor_self_Tensor_indices_Tensor_output_size_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef(grad_output, self, indices, output_size, stride, padding));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_reflection_pad1d_out_out_Tensor_self_Tensor_padding_IntArrayRef
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_reflection_pad1d_out_out_Tensor_self_Tensor_padding_IntArrayRef(Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, std::vector<int64_t> padding);
RcppExport SEXP _torch_cpp_torch_namespace_reflection_pad1d_out_out_Tensor_self_Tensor_padding_IntArrayRef(SEXP outSEXP, SEXP selfSEXP, SEXP paddingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type out(outSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type padding(paddingSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_reflection_pad1d_out_out_Tensor_self_Tensor_padding_IntArrayRef(out, self, padding));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_reflection_pad1d_self_Tensor_padding_IntArrayRef
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_reflection_pad1d_self_Tensor_padding_IntArrayRef(Rcpp::XPtr<torch::Tensor> self, std::vector<int64_t> padding);
RcppExport SEXP _torch_cpp_torch_namespace_reflection_pad1d_self_Tensor_padding_IntArrayRef(SEXP selfSEXP, SEXP paddingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type padding(paddingSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_reflection_pad1d_self_Tensor_padding_IntArrayRef(self, padding));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_reflection_pad1d_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_padding_IntArrayRef
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_reflection_pad1d_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_padding_IntArrayRef(Rcpp::XPtr<torch::Tensor> grad_input, Rcpp::XPtr<torch::Tensor> grad_output, Rcpp::XPtr<torch::Tensor> self, std::vector<int64_t> padding);
RcppExport SEXP _torch_cpp_torch_namespace_reflection_pad1d_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_padding_IntArrayRef(SEXP grad_inputSEXP, SEXP grad_outputSEXP, SEXP selfSEXP, SEXP paddingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type grad_input(grad_inputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type padding(paddingSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_reflection_pad1d_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_padding_IntArrayRef(grad_input, grad_output, self, padding));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_reflection_pad1d_backward_grad_output_Tensor_self_Tensor_padding_IntArrayRef
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_reflection_pad1d_backward_grad_output_Tensor_self_Tensor_padding_IntArrayRef(Rcpp::XPtr<torch::Tensor> grad_output, Rcpp::XPtr<torch::Tensor> self, std::vector<int64_t> padding);
RcppExport SEXP _torch_cpp_torch_namespace_reflection_pad1d_backward_grad_output_Tensor_self_Tensor_padding_IntArrayRef(SEXP grad_outputSEXP, SEXP selfSEXP, SEXP paddingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type padding(paddingSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_reflection_pad1d_backward_grad_output_Tensor_self_Tensor_padding_IntArrayRef(grad_output, self, padding));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_reflection_pad2d_out_out_Tensor_self_Tensor_padding_IntArrayRef
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_reflection_pad2d_out_out_Tensor_self_Tensor_padding_IntArrayRef(Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, std::vector<int64_t> padding);
RcppExport SEXP _torch_cpp_torch_namespace_reflection_pad2d_out_out_Tensor_self_Tensor_padding_IntArrayRef(SEXP outSEXP, SEXP selfSEXP, SEXP paddingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type out(outSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type padding(paddingSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_reflection_pad2d_out_out_Tensor_self_Tensor_padding_IntArrayRef(out, self, padding));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_reflection_pad2d_self_Tensor_padding_IntArrayRef
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_reflection_pad2d_self_Tensor_padding_IntArrayRef(Rcpp::XPtr<torch::Tensor> self, std::vector<int64_t> padding);
RcppExport SEXP _torch_cpp_torch_namespace_reflection_pad2d_self_Tensor_padding_IntArrayRef(SEXP selfSEXP, SEXP paddingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type padding(paddingSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_reflection_pad2d_self_Tensor_padding_IntArrayRef(self, padding));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_reflection_pad2d_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_padding_IntArrayRef
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_reflection_pad2d_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_padding_IntArrayRef(Rcpp::XPtr<torch::Tensor> grad_input, Rcpp::XPtr<torch::Tensor> grad_output, Rcpp::XPtr<torch::Tensor> self, std::vector<int64_t> padding);
RcppExport SEXP _torch_cpp_torch_namespace_reflection_pad2d_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_padding_IntArrayRef(SEXP grad_inputSEXP, SEXP grad_outputSEXP, SEXP selfSEXP, SEXP paddingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type grad_input(grad_inputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type padding(paddingSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_reflection_pad2d_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_padding_IntArrayRef(grad_input, grad_output, self, padding));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_reflection_pad2d_backward_grad_output_Tensor_self_Tensor_padding_IntArrayRef
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_reflection_pad2d_backward_grad_output_Tensor_self_Tensor_padding_IntArrayRef(Rcpp::XPtr<torch::Tensor> grad_output, Rcpp::XPtr<torch::Tensor> self, std::vector<int64_t> padding);
RcppExport SEXP _torch_cpp_torch_namespace_reflection_pad2d_backward_grad_output_Tensor_self_Tensor_padding_IntArrayRef(SEXP grad_outputSEXP, SEXP selfSEXP, SEXP paddingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type padding(paddingSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_reflection_pad2d_backward_grad_output_Tensor_self_Tensor_padding_IntArrayRef(grad_output, self, padding));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_replication_pad1d_out_out_Tensor_self_Tensor_padding_IntArrayRef
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_replication_pad1d_out_out_Tensor_self_Tensor_padding_IntArrayRef(Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, std::vector<int64_t> padding);
RcppExport SEXP _torch_cpp_torch_namespace_replication_pad1d_out_out_Tensor_self_Tensor_padding_IntArrayRef(SEXP outSEXP, SEXP selfSEXP, SEXP paddingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type out(outSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type padding(paddingSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_replication_pad1d_out_out_Tensor_self_Tensor_padding_IntArrayRef(out, self, padding));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_replication_pad1d_self_Tensor_padding_IntArrayRef
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_replication_pad1d_self_Tensor_padding_IntArrayRef(Rcpp::XPtr<torch::Tensor> self, std::vector<int64_t> padding);
RcppExport SEXP _torch_cpp_torch_namespace_replication_pad1d_self_Tensor_padding_IntArrayRef(SEXP selfSEXP, SEXP paddingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type padding(paddingSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_replication_pad1d_self_Tensor_padding_IntArrayRef(self, padding));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_replication_pad1d_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_padding_IntArrayRef
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_replication_pad1d_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_padding_IntArrayRef(Rcpp::XPtr<torch::Tensor> grad_input, Rcpp::XPtr<torch::Tensor> grad_output, Rcpp::XPtr<torch::Tensor> self, std::vector<int64_t> padding);
RcppExport SEXP _torch_cpp_torch_namespace_replication_pad1d_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_padding_IntArrayRef(SEXP grad_inputSEXP, SEXP grad_outputSEXP, SEXP selfSEXP, SEXP paddingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type grad_input(grad_inputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type padding(paddingSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_replication_pad1d_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_padding_IntArrayRef(grad_input, grad_output, self, padding));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_replication_pad1d_backward_grad_output_Tensor_self_Tensor_padding_IntArrayRef
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_replication_pad1d_backward_grad_output_Tensor_self_Tensor_padding_IntArrayRef(Rcpp::XPtr<torch::Tensor> grad_output, Rcpp::XPtr<torch::Tensor> self, std::vector<int64_t> padding);
RcppExport SEXP _torch_cpp_torch_namespace_replication_pad1d_backward_grad_output_Tensor_self_Tensor_padding_IntArrayRef(SEXP grad_outputSEXP, SEXP selfSEXP, SEXP paddingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type padding(paddingSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_replication_pad1d_backward_grad_output_Tensor_self_Tensor_padding_IntArrayRef(grad_output, self, padding));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_replication_pad2d_out_out_Tensor_self_Tensor_padding_IntArrayRef
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_replication_pad2d_out_out_Tensor_self_Tensor_padding_IntArrayRef(Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, std::vector<int64_t> padding);
RcppExport SEXP _torch_cpp_torch_namespace_replication_pad2d_out_out_Tensor_self_Tensor_padding_IntArrayRef(SEXP outSEXP, SEXP selfSEXP, SEXP paddingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type out(outSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type padding(paddingSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_replication_pad2d_out_out_Tensor_self_Tensor_padding_IntArrayRef(out, self, padding));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_replication_pad2d_self_Tensor_padding_IntArrayRef
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_replication_pad2d_self_Tensor_padding_IntArrayRef(Rcpp::XPtr<torch::Tensor> self, std::vector<int64_t> padding);
RcppExport SEXP _torch_cpp_torch_namespace_replication_pad2d_self_Tensor_padding_IntArrayRef(SEXP selfSEXP, SEXP paddingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type padding(paddingSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_replication_pad2d_self_Tensor_padding_IntArrayRef(self, padding));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_replication_pad2d_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_padding_IntArrayRef
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_replication_pad2d_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_padding_IntArrayRef(Rcpp::XPtr<torch::Tensor> grad_input, Rcpp::XPtr<torch::Tensor> grad_output, Rcpp::XPtr<torch::Tensor> self, std::vector<int64_t> padding);
RcppExport SEXP _torch_cpp_torch_namespace_replication_pad2d_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_padding_IntArrayRef(SEXP grad_inputSEXP, SEXP grad_outputSEXP, SEXP selfSEXP, SEXP paddingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type grad_input(grad_inputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type padding(paddingSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_replication_pad2d_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_padding_IntArrayRef(grad_input, grad_output, self, padding));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_replication_pad2d_backward_grad_output_Tensor_self_Tensor_padding_IntArrayRef
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_replication_pad2d_backward_grad_output_Tensor_self_Tensor_padding_IntArrayRef(Rcpp::XPtr<torch::Tensor> grad_output, Rcpp::XPtr<torch::Tensor> self, std::vector<int64_t> padding);
RcppExport SEXP _torch_cpp_torch_namespace_replication_pad2d_backward_grad_output_Tensor_self_Tensor_padding_IntArrayRef(SEXP grad_outputSEXP, SEXP selfSEXP, SEXP paddingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type padding(paddingSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_replication_pad2d_backward_grad_output_Tensor_self_Tensor_padding_IntArrayRef(grad_output, self, padding));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_replication_pad3d_out_out_Tensor_self_Tensor_padding_IntArrayRef
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_replication_pad3d_out_out_Tensor_self_Tensor_padding_IntArrayRef(Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, std::vector<int64_t> padding);
RcppExport SEXP _torch_cpp_torch_namespace_replication_pad3d_out_out_Tensor_self_Tensor_padding_IntArrayRef(SEXP outSEXP, SEXP selfSEXP, SEXP paddingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type out(outSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type padding(paddingSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_replication_pad3d_out_out_Tensor_self_Tensor_padding_IntArrayRef(out, self, padding));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_replication_pad3d_self_Tensor_padding_IntArrayRef
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_replication_pad3d_self_Tensor_padding_IntArrayRef(Rcpp::XPtr<torch::Tensor> self, std::vector<int64_t> padding);
RcppExport SEXP _torch_cpp_torch_namespace_replication_pad3d_self_Tensor_padding_IntArrayRef(SEXP selfSEXP, SEXP paddingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type padding(paddingSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_replication_pad3d_self_Tensor_padding_IntArrayRef(self, padding));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_replication_pad3d_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_padding_IntArrayRef
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_replication_pad3d_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_padding_IntArrayRef(Rcpp::XPtr<torch::Tensor> grad_input, Rcpp::XPtr<torch::Tensor> grad_output, Rcpp::XPtr<torch::Tensor> self, std::vector<int64_t> padding);
RcppExport SEXP _torch_cpp_torch_namespace_replication_pad3d_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_padding_IntArrayRef(SEXP grad_inputSEXP, SEXP grad_outputSEXP, SEXP selfSEXP, SEXP paddingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type grad_input(grad_inputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type padding(paddingSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_replication_pad3d_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_padding_IntArrayRef(grad_input, grad_output, self, padding));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_replication_pad3d_backward_grad_output_Tensor_self_Tensor_padding_IntArrayRef
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_replication_pad3d_backward_grad_output_Tensor_self_Tensor_padding_IntArrayRef(Rcpp::XPtr<torch::Tensor> grad_output, Rcpp::XPtr<torch::Tensor> self, std::vector<int64_t> padding);
RcppExport SEXP _torch_cpp_torch_namespace_replication_pad3d_backward_grad_output_Tensor_self_Tensor_padding_IntArrayRef(SEXP grad_outputSEXP, SEXP selfSEXP, SEXP paddingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type padding(paddingSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_replication_pad3d_backward_grad_output_Tensor_self_Tensor_padding_IntArrayRef(grad_output, self, padding));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__test_optional_float_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace__test_optional_float_self_Tensor(Rcpp::XPtr<torch::Tensor> self, double scale);
RcppExport SEXP _torch_cpp_torch_namespace__test_optional_float_self_Tensor(SEXP selfSEXP, SEXP scaleSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< double >::type scale(scaleSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__test_optional_float_self_Tensor(self, scale));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_upsample_linear1d_out_out_Tensor_self_Tensor_output_size_IntArrayRef_align_corners_bool
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_upsample_linear1d_out_out_Tensor_self_Tensor_output_size_IntArrayRef_align_corners_bool(Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, std::vector<int64_t> output_size, bool align_corners);
RcppExport SEXP _torch_cpp_torch_namespace_upsample_linear1d_out_out_Tensor_self_Tensor_output_size_IntArrayRef_align_corners_bool(SEXP outSEXP, SEXP selfSEXP, SEXP output_sizeSEXP, SEXP align_cornersSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type out(outSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type output_size(output_sizeSEXP);
    Rcpp::traits::input_parameter< bool >::type align_corners(align_cornersSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_upsample_linear1d_out_out_Tensor_self_Tensor_output_size_IntArrayRef_align_corners_bool(out, self, output_size, align_corners));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_upsample_linear1d_self_Tensor_output_size_IntArrayRef_align_corners_bool
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_upsample_linear1d_self_Tensor_output_size_IntArrayRef_align_corners_bool(Rcpp::XPtr<torch::Tensor> self, std::vector<int64_t> output_size, bool align_corners);
RcppExport SEXP _torch_cpp_torch_namespace_upsample_linear1d_self_Tensor_output_size_IntArrayRef_align_corners_bool(SEXP selfSEXP, SEXP output_sizeSEXP, SEXP align_cornersSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type output_size(output_sizeSEXP);
    Rcpp::traits::input_parameter< bool >::type align_corners(align_cornersSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_upsample_linear1d_self_Tensor_output_size_IntArrayRef_align_corners_bool(self, output_size, align_corners));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_upsample_linear1d_backward_out_grad_input_Tensor_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef_align_corners_bool
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_upsample_linear1d_backward_out_grad_input_Tensor_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef_align_corners_bool(Rcpp::XPtr<torch::Tensor> grad_input, Rcpp::XPtr<torch::Tensor> grad_output, std::vector<int64_t> output_size, std::vector<int64_t> input_size, bool align_corners);
RcppExport SEXP _torch_cpp_torch_namespace_upsample_linear1d_backward_out_grad_input_Tensor_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef_align_corners_bool(SEXP grad_inputSEXP, SEXP grad_outputSEXP, SEXP output_sizeSEXP, SEXP input_sizeSEXP, SEXP align_cornersSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type grad_input(grad_inputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type output_size(output_sizeSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type input_size(input_sizeSEXP);
    Rcpp::traits::input_parameter< bool >::type align_corners(align_cornersSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_upsample_linear1d_backward_out_grad_input_Tensor_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef_align_corners_bool(grad_input, grad_output, output_size, input_size, align_corners));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_upsample_linear1d_backward_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef_align_corners_bool
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_upsample_linear1d_backward_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef_align_corners_bool(Rcpp::XPtr<torch::Tensor> grad_output, std::vector<int64_t> output_size, std::vector<int64_t> input_size, bool align_corners);
RcppExport SEXP _torch_cpp_torch_namespace_upsample_linear1d_backward_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef_align_corners_bool(SEXP grad_outputSEXP, SEXP output_sizeSEXP, SEXP input_sizeSEXP, SEXP align_cornersSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type output_size(output_sizeSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type input_size(input_sizeSEXP);
    Rcpp::traits::input_parameter< bool >::type align_corners(align_cornersSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_upsample_linear1d_backward_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef_align_corners_bool(grad_output, output_size, input_size, align_corners));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_upsample_bilinear2d_out_out_Tensor_self_Tensor_output_size_IntArrayRef_align_corners_bool
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_upsample_bilinear2d_out_out_Tensor_self_Tensor_output_size_IntArrayRef_align_corners_bool(Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, std::vector<int64_t> output_size, bool align_corners);
RcppExport SEXP _torch_cpp_torch_namespace_upsample_bilinear2d_out_out_Tensor_self_Tensor_output_size_IntArrayRef_align_corners_bool(SEXP outSEXP, SEXP selfSEXP, SEXP output_sizeSEXP, SEXP align_cornersSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type out(outSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type output_size(output_sizeSEXP);
    Rcpp::traits::input_parameter< bool >::type align_corners(align_cornersSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_upsample_bilinear2d_out_out_Tensor_self_Tensor_output_size_IntArrayRef_align_corners_bool(out, self, output_size, align_corners));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_upsample_bilinear2d_self_Tensor_output_size_IntArrayRef_align_corners_bool
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_upsample_bilinear2d_self_Tensor_output_size_IntArrayRef_align_corners_bool(Rcpp::XPtr<torch::Tensor> self, std::vector<int64_t> output_size, bool align_corners);
RcppExport SEXP _torch_cpp_torch_namespace_upsample_bilinear2d_self_Tensor_output_size_IntArrayRef_align_corners_bool(SEXP selfSEXP, SEXP output_sizeSEXP, SEXP align_cornersSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type output_size(output_sizeSEXP);
    Rcpp::traits::input_parameter< bool >::type align_corners(align_cornersSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_upsample_bilinear2d_self_Tensor_output_size_IntArrayRef_align_corners_bool(self, output_size, align_corners));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_upsample_bilinear2d_backward_out_grad_input_Tensor_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef_align_corners_bool
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_upsample_bilinear2d_backward_out_grad_input_Tensor_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef_align_corners_bool(Rcpp::XPtr<torch::Tensor> grad_input, Rcpp::XPtr<torch::Tensor> grad_output, std::vector<int64_t> output_size, std::vector<int64_t> input_size, bool align_corners);
RcppExport SEXP _torch_cpp_torch_namespace_upsample_bilinear2d_backward_out_grad_input_Tensor_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef_align_corners_bool(SEXP grad_inputSEXP, SEXP grad_outputSEXP, SEXP output_sizeSEXP, SEXP input_sizeSEXP, SEXP align_cornersSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type grad_input(grad_inputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type output_size(output_sizeSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type input_size(input_sizeSEXP);
    Rcpp::traits::input_parameter< bool >::type align_corners(align_cornersSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_upsample_bilinear2d_backward_out_grad_input_Tensor_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef_align_corners_bool(grad_input, grad_output, output_size, input_size, align_corners));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_upsample_bilinear2d_backward_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef_align_corners_bool
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_upsample_bilinear2d_backward_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef_align_corners_bool(Rcpp::XPtr<torch::Tensor> grad_output, std::vector<int64_t> output_size, std::vector<int64_t> input_size, bool align_corners);
RcppExport SEXP _torch_cpp_torch_namespace_upsample_bilinear2d_backward_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef_align_corners_bool(SEXP grad_outputSEXP, SEXP output_sizeSEXP, SEXP input_sizeSEXP, SEXP align_cornersSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type output_size(output_sizeSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type input_size(input_sizeSEXP);
    Rcpp::traits::input_parameter< bool >::type align_corners(align_cornersSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_upsample_bilinear2d_backward_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef_align_corners_bool(grad_output, output_size, input_size, align_corners));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_upsample_bicubic2d_out_out_Tensor_self_Tensor_output_size_IntArrayRef_align_corners_bool
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_upsample_bicubic2d_out_out_Tensor_self_Tensor_output_size_IntArrayRef_align_corners_bool(Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, std::vector<int64_t> output_size, bool align_corners);
RcppExport SEXP _torch_cpp_torch_namespace_upsample_bicubic2d_out_out_Tensor_self_Tensor_output_size_IntArrayRef_align_corners_bool(SEXP outSEXP, SEXP selfSEXP, SEXP output_sizeSEXP, SEXP align_cornersSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type out(outSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type output_size(output_sizeSEXP);
    Rcpp::traits::input_parameter< bool >::type align_corners(align_cornersSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_upsample_bicubic2d_out_out_Tensor_self_Tensor_output_size_IntArrayRef_align_corners_bool(out, self, output_size, align_corners));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_upsample_bicubic2d_self_Tensor_output_size_IntArrayRef_align_corners_bool
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_upsample_bicubic2d_self_Tensor_output_size_IntArrayRef_align_corners_bool(Rcpp::XPtr<torch::Tensor> self, std::vector<int64_t> output_size, bool align_corners);
RcppExport SEXP _torch_cpp_torch_namespace_upsample_bicubic2d_self_Tensor_output_size_IntArrayRef_align_corners_bool(SEXP selfSEXP, SEXP output_sizeSEXP, SEXP align_cornersSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type output_size(output_sizeSEXP);
    Rcpp::traits::input_parameter< bool >::type align_corners(align_cornersSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_upsample_bicubic2d_self_Tensor_output_size_IntArrayRef_align_corners_bool(self, output_size, align_corners));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_upsample_bicubic2d_backward_out_grad_input_Tensor_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef_align_corners_bool
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_upsample_bicubic2d_backward_out_grad_input_Tensor_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef_align_corners_bool(Rcpp::XPtr<torch::Tensor> grad_input, Rcpp::XPtr<torch::Tensor> grad_output, std::vector<int64_t> output_size, std::vector<int64_t> input_size, bool align_corners);
RcppExport SEXP _torch_cpp_torch_namespace_upsample_bicubic2d_backward_out_grad_input_Tensor_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef_align_corners_bool(SEXP grad_inputSEXP, SEXP grad_outputSEXP, SEXP output_sizeSEXP, SEXP input_sizeSEXP, SEXP align_cornersSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type grad_input(grad_inputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type output_size(output_sizeSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type input_size(input_sizeSEXP);
    Rcpp::traits::input_parameter< bool >::type align_corners(align_cornersSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_upsample_bicubic2d_backward_out_grad_input_Tensor_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef_align_corners_bool(grad_input, grad_output, output_size, input_size, align_corners));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_upsample_bicubic2d_backward_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef_align_corners_bool
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_upsample_bicubic2d_backward_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef_align_corners_bool(Rcpp::XPtr<torch::Tensor> grad_output, std::vector<int64_t> output_size, std::vector<int64_t> input_size, bool align_corners);
RcppExport SEXP _torch_cpp_torch_namespace_upsample_bicubic2d_backward_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef_align_corners_bool(SEXP grad_outputSEXP, SEXP output_sizeSEXP, SEXP input_sizeSEXP, SEXP align_cornersSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type output_size(output_sizeSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type input_size(input_sizeSEXP);
    Rcpp::traits::input_parameter< bool >::type align_corners(align_cornersSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_upsample_bicubic2d_backward_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef_align_corners_bool(grad_output, output_size, input_size, align_corners));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_upsample_trilinear3d_out_out_Tensor_self_Tensor_output_size_IntArrayRef_align_corners_bool
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_upsample_trilinear3d_out_out_Tensor_self_Tensor_output_size_IntArrayRef_align_corners_bool(Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, std::vector<int64_t> output_size, bool align_corners);
RcppExport SEXP _torch_cpp_torch_namespace_upsample_trilinear3d_out_out_Tensor_self_Tensor_output_size_IntArrayRef_align_corners_bool(SEXP outSEXP, SEXP selfSEXP, SEXP output_sizeSEXP, SEXP align_cornersSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type out(outSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type output_size(output_sizeSEXP);
    Rcpp::traits::input_parameter< bool >::type align_corners(align_cornersSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_upsample_trilinear3d_out_out_Tensor_self_Tensor_output_size_IntArrayRef_align_corners_bool(out, self, output_size, align_corners));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_upsample_trilinear3d_self_Tensor_output_size_IntArrayRef_align_corners_bool
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_upsample_trilinear3d_self_Tensor_output_size_IntArrayRef_align_corners_bool(Rcpp::XPtr<torch::Tensor> self, std::vector<int64_t> output_size, bool align_corners);
RcppExport SEXP _torch_cpp_torch_namespace_upsample_trilinear3d_self_Tensor_output_size_IntArrayRef_align_corners_bool(SEXP selfSEXP, SEXP output_sizeSEXP, SEXP align_cornersSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type output_size(output_sizeSEXP);
    Rcpp::traits::input_parameter< bool >::type align_corners(align_cornersSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_upsample_trilinear3d_self_Tensor_output_size_IntArrayRef_align_corners_bool(self, output_size, align_corners));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_upsample_trilinear3d_backward_out_grad_input_Tensor_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef_align_corners_bool
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_upsample_trilinear3d_backward_out_grad_input_Tensor_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef_align_corners_bool(Rcpp::XPtr<torch::Tensor> grad_input, Rcpp::XPtr<torch::Tensor> grad_output, std::vector<int64_t> output_size, std::vector<int64_t> input_size, bool align_corners);
RcppExport SEXP _torch_cpp_torch_namespace_upsample_trilinear3d_backward_out_grad_input_Tensor_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef_align_corners_bool(SEXP grad_inputSEXP, SEXP grad_outputSEXP, SEXP output_sizeSEXP, SEXP input_sizeSEXP, SEXP align_cornersSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type grad_input(grad_inputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type output_size(output_sizeSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type input_size(input_sizeSEXP);
    Rcpp::traits::input_parameter< bool >::type align_corners(align_cornersSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_upsample_trilinear3d_backward_out_grad_input_Tensor_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef_align_corners_bool(grad_input, grad_output, output_size, input_size, align_corners));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_upsample_trilinear3d_backward_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef_align_corners_bool
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_upsample_trilinear3d_backward_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef_align_corners_bool(Rcpp::XPtr<torch::Tensor> grad_output, std::vector<int64_t> output_size, std::vector<int64_t> input_size, bool align_corners);
RcppExport SEXP _torch_cpp_torch_namespace_upsample_trilinear3d_backward_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef_align_corners_bool(SEXP grad_outputSEXP, SEXP output_sizeSEXP, SEXP input_sizeSEXP, SEXP align_cornersSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type output_size(output_sizeSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type input_size(input_sizeSEXP);
    Rcpp::traits::input_parameter< bool >::type align_corners(align_cornersSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_upsample_trilinear3d_backward_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef_align_corners_bool(grad_output, output_size, input_size, align_corners));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_upsample_nearest1d_out_out_Tensor_self_Tensor_output_size_IntArrayRef
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_upsample_nearest1d_out_out_Tensor_self_Tensor_output_size_IntArrayRef(Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, std::vector<int64_t> output_size);
RcppExport SEXP _torch_cpp_torch_namespace_upsample_nearest1d_out_out_Tensor_self_Tensor_output_size_IntArrayRef(SEXP outSEXP, SEXP selfSEXP, SEXP output_sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type out(outSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type output_size(output_sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_upsample_nearest1d_out_out_Tensor_self_Tensor_output_size_IntArrayRef(out, self, output_size));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_upsample_nearest1d_self_Tensor_output_size_IntArrayRef
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_upsample_nearest1d_self_Tensor_output_size_IntArrayRef(Rcpp::XPtr<torch::Tensor> self, std::vector<int64_t> output_size);
RcppExport SEXP _torch_cpp_torch_namespace_upsample_nearest1d_self_Tensor_output_size_IntArrayRef(SEXP selfSEXP, SEXP output_sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type output_size(output_sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_upsample_nearest1d_self_Tensor_output_size_IntArrayRef(self, output_size));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_upsample_nearest1d_backward_out_grad_input_Tensor_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_upsample_nearest1d_backward_out_grad_input_Tensor_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef(Rcpp::XPtr<torch::Tensor> grad_input, Rcpp::XPtr<torch::Tensor> grad_output, std::vector<int64_t> output_size, std::vector<int64_t> input_size);
RcppExport SEXP _torch_cpp_torch_namespace_upsample_nearest1d_backward_out_grad_input_Tensor_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef(SEXP grad_inputSEXP, SEXP grad_outputSEXP, SEXP output_sizeSEXP, SEXP input_sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type grad_input(grad_inputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type output_size(output_sizeSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type input_size(input_sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_upsample_nearest1d_backward_out_grad_input_Tensor_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef(grad_input, grad_output, output_size, input_size));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_upsample_nearest1d_backward_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_upsample_nearest1d_backward_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef(Rcpp::XPtr<torch::Tensor> grad_output, std::vector<int64_t> output_size, std::vector<int64_t> input_size);
RcppExport SEXP _torch_cpp_torch_namespace_upsample_nearest1d_backward_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef(SEXP grad_outputSEXP, SEXP output_sizeSEXP, SEXP input_sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type output_size(output_sizeSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type input_size(input_sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_upsample_nearest1d_backward_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef(grad_output, output_size, input_size));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_upsample_nearest2d_out_out_Tensor_self_Tensor_output_size_IntArrayRef
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_upsample_nearest2d_out_out_Tensor_self_Tensor_output_size_IntArrayRef(Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, std::vector<int64_t> output_size);
RcppExport SEXP _torch_cpp_torch_namespace_upsample_nearest2d_out_out_Tensor_self_Tensor_output_size_IntArrayRef(SEXP outSEXP, SEXP selfSEXP, SEXP output_sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type out(outSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type output_size(output_sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_upsample_nearest2d_out_out_Tensor_self_Tensor_output_size_IntArrayRef(out, self, output_size));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_upsample_nearest2d_self_Tensor_output_size_IntArrayRef
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_upsample_nearest2d_self_Tensor_output_size_IntArrayRef(Rcpp::XPtr<torch::Tensor> self, std::vector<int64_t> output_size);
RcppExport SEXP _torch_cpp_torch_namespace_upsample_nearest2d_self_Tensor_output_size_IntArrayRef(SEXP selfSEXP, SEXP output_sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type output_size(output_sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_upsample_nearest2d_self_Tensor_output_size_IntArrayRef(self, output_size));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_upsample_nearest2d_backward_out_grad_input_Tensor_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_upsample_nearest2d_backward_out_grad_input_Tensor_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef(Rcpp::XPtr<torch::Tensor> grad_input, Rcpp::XPtr<torch::Tensor> grad_output, std::vector<int64_t> output_size, std::vector<int64_t> input_size);
RcppExport SEXP _torch_cpp_torch_namespace_upsample_nearest2d_backward_out_grad_input_Tensor_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef(SEXP grad_inputSEXP, SEXP grad_outputSEXP, SEXP output_sizeSEXP, SEXP input_sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type grad_input(grad_inputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type output_size(output_sizeSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type input_size(input_sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_upsample_nearest2d_backward_out_grad_input_Tensor_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef(grad_input, grad_output, output_size, input_size));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_upsample_nearest2d_backward_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_upsample_nearest2d_backward_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef(Rcpp::XPtr<torch::Tensor> grad_output, std::vector<int64_t> output_size, std::vector<int64_t> input_size);
RcppExport SEXP _torch_cpp_torch_namespace_upsample_nearest2d_backward_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef(SEXP grad_outputSEXP, SEXP output_sizeSEXP, SEXP input_sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type output_size(output_sizeSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type input_size(input_sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_upsample_nearest2d_backward_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef(grad_output, output_size, input_size));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_upsample_nearest3d_out_out_Tensor_self_Tensor_output_size_IntArrayRef
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_upsample_nearest3d_out_out_Tensor_self_Tensor_output_size_IntArrayRef(Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, std::vector<int64_t> output_size);
RcppExport SEXP _torch_cpp_torch_namespace_upsample_nearest3d_out_out_Tensor_self_Tensor_output_size_IntArrayRef(SEXP outSEXP, SEXP selfSEXP, SEXP output_sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type out(outSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type output_size(output_sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_upsample_nearest3d_out_out_Tensor_self_Tensor_output_size_IntArrayRef(out, self, output_size));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_upsample_nearest3d_self_Tensor_output_size_IntArrayRef
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_upsample_nearest3d_self_Tensor_output_size_IntArrayRef(Rcpp::XPtr<torch::Tensor> self, std::vector<int64_t> output_size);
RcppExport SEXP _torch_cpp_torch_namespace_upsample_nearest3d_self_Tensor_output_size_IntArrayRef(SEXP selfSEXP, SEXP output_sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type output_size(output_sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_upsample_nearest3d_self_Tensor_output_size_IntArrayRef(self, output_size));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_upsample_nearest3d_backward_out_grad_input_Tensor_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_upsample_nearest3d_backward_out_grad_input_Tensor_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef(Rcpp::XPtr<torch::Tensor> grad_input, Rcpp::XPtr<torch::Tensor> grad_output, std::vector<int64_t> output_size, std::vector<int64_t> input_size);
RcppExport SEXP _torch_cpp_torch_namespace_upsample_nearest3d_backward_out_grad_input_Tensor_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef(SEXP grad_inputSEXP, SEXP grad_outputSEXP, SEXP output_sizeSEXP, SEXP input_sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type grad_input(grad_inputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type output_size(output_sizeSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type input_size(input_sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_upsample_nearest3d_backward_out_grad_input_Tensor_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef(grad_input, grad_output, output_size, input_size));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_upsample_nearest3d_backward_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_upsample_nearest3d_backward_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef(Rcpp::XPtr<torch::Tensor> grad_output, std::vector<int64_t> output_size, std::vector<int64_t> input_size);
RcppExport SEXP _torch_cpp_torch_namespace_upsample_nearest3d_backward_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef(SEXP grad_outputSEXP, SEXP output_sizeSEXP, SEXP input_sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type output_size(output_sizeSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type input_size(input_sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_upsample_nearest3d_backward_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef(grad_output, output_size, input_size));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_sigmoid_backward_out_grad_input_Tensor_grad_output_Tensor_output_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_sigmoid_backward_out_grad_input_Tensor_grad_output_Tensor_output_Tensor(Rcpp::XPtr<torch::Tensor> grad_input, Rcpp::XPtr<torch::Tensor> grad_output, Rcpp::XPtr<torch::Tensor> output);
RcppExport SEXP _torch_cpp_torch_namespace_sigmoid_backward_out_grad_input_Tensor_grad_output_Tensor_output_Tensor(SEXP grad_inputSEXP, SEXP grad_outputSEXP, SEXP outputSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type grad_input(grad_inputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type output(outputSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_sigmoid_backward_out_grad_input_Tensor_grad_output_Tensor_output_Tensor(grad_input, grad_output, output));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_sigmoid_backward_grad_output_Tensor_output_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_sigmoid_backward_grad_output_Tensor_output_Tensor(Rcpp::XPtr<torch::Tensor> grad_output, Rcpp::XPtr<torch::Tensor> output);
RcppExport SEXP _torch_cpp_torch_namespace_sigmoid_backward_grad_output_Tensor_output_Tensor(SEXP grad_outputSEXP, SEXP outputSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type output(outputSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_sigmoid_backward_grad_output_Tensor_output_Tensor(grad_output, output));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_tanh_backward_out_grad_input_Tensor_grad_output_Tensor_output_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_tanh_backward_out_grad_input_Tensor_grad_output_Tensor_output_Tensor(Rcpp::XPtr<torch::Tensor> grad_input, Rcpp::XPtr<torch::Tensor> grad_output, Rcpp::XPtr<torch::Tensor> output);
RcppExport SEXP _torch_cpp_torch_namespace_tanh_backward_out_grad_input_Tensor_grad_output_Tensor_output_Tensor(SEXP grad_inputSEXP, SEXP grad_outputSEXP, SEXP outputSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type grad_input(grad_inputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type output(outputSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_tanh_backward_out_grad_input_Tensor_grad_output_Tensor_output_Tensor(grad_input, grad_output, output));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_tanh_backward_grad_output_Tensor_output_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_tanh_backward_grad_output_Tensor_output_Tensor(Rcpp::XPtr<torch::Tensor> grad_output, Rcpp::XPtr<torch::Tensor> output);
RcppExport SEXP _torch_cpp_torch_namespace_tanh_backward_grad_output_Tensor_output_Tensor(SEXP grad_outputSEXP, SEXP outputSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type output(outputSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_tanh_backward_grad_output_Tensor_output_Tensor(grad_output, output));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_slow_conv_transpose2d_out_out_Tensor_self_Tensor_weight_Tensor_kernel_size_IntArrayRef
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_slow_conv_transpose2d_out_out_Tensor_self_Tensor_weight_Tensor_kernel_size_IntArrayRef(Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> weight, std::vector<int64_t> kernel_size, Rcpp::XPtr<torch::Tensor> bias, std::vector<int64_t> stride, std::vector<int64_t> padding, std::vector<int64_t> output_padding, std::vector<int64_t> dilation);
RcppExport SEXP _torch_cpp_torch_namespace_slow_conv_transpose2d_out_out_Tensor_self_Tensor_weight_Tensor_kernel_size_IntArrayRef(SEXP outSEXP, SEXP selfSEXP, SEXP weightSEXP, SEXP kernel_sizeSEXP, SEXP biasSEXP, SEXP strideSEXP, SEXP paddingSEXP, SEXP output_paddingSEXP, SEXP dilationSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type out(outSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type kernel_size(kernel_sizeSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type bias(biasSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type stride(strideSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type padding(paddingSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type output_padding(output_paddingSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type dilation(dilationSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_slow_conv_transpose2d_out_out_Tensor_self_Tensor_weight_Tensor_kernel_size_IntArrayRef(out, self, weight, kernel_size, bias, stride, padding, output_padding, dilation));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_slow_conv_transpose2d_self_Tensor_weight_Tensor_kernel_size_IntArrayRef
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_slow_conv_transpose2d_self_Tensor_weight_Tensor_kernel_size_IntArrayRef(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> weight, std::vector<int64_t> kernel_size, Rcpp::XPtr<torch::Tensor> bias, std::vector<int64_t> stride, std::vector<int64_t> padding, std::vector<int64_t> output_padding, std::vector<int64_t> dilation);
RcppExport SEXP _torch_cpp_torch_namespace_slow_conv_transpose2d_self_Tensor_weight_Tensor_kernel_size_IntArrayRef(SEXP selfSEXP, SEXP weightSEXP, SEXP kernel_sizeSEXP, SEXP biasSEXP, SEXP strideSEXP, SEXP paddingSEXP, SEXP output_paddingSEXP, SEXP dilationSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type kernel_size(kernel_sizeSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type bias(biasSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type stride(strideSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type padding(paddingSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type output_padding(output_paddingSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type dilation(dilationSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_slow_conv_transpose2d_self_Tensor_weight_Tensor_kernel_size_IntArrayRef(self, weight, kernel_size, bias, stride, padding, output_padding, dilation));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_slow_conv_transpose2d_backward_out_grad_input_Tensor_grad_weight_Tensor_grad_bias_Tensor_grad_output_Tensor_self_Tensor_weight_Tensor_kernel_size_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef_output_padding_IntArrayRef_dilation_IntArrayRef_columns_Tensor_ones_Tensor
Rcpp::List cpp_torch_namespace_slow_conv_transpose2d_backward_out_grad_input_Tensor_grad_weight_Tensor_grad_bias_Tensor_grad_output_Tensor_self_Tensor_weight_Tensor_kernel_size_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef_output_padding_IntArrayRef_dilation_IntArrayRef_columns_Tensor_ones_Tensor(Rcpp::XPtr<torch::Tensor> grad_input, Rcpp::XPtr<torch::Tensor> grad_weight, Rcpp::XPtr<torch::Tensor> grad_bias, Rcpp::XPtr<torch::Tensor> grad_output, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> weight, std::vector<int64_t> kernel_size, std::vector<int64_t> stride, std::vector<int64_t> padding, std::vector<int64_t> output_padding, std::vector<int64_t> dilation, Rcpp::XPtr<torch::Tensor> columns, Rcpp::XPtr<torch::Tensor> ones);
RcppExport SEXP _torch_cpp_torch_namespace_slow_conv_transpose2d_backward_out_grad_input_Tensor_grad_weight_Tensor_grad_bias_Tensor_grad_output_Tensor_self_Tensor_weight_Tensor_kernel_size_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef_output_padding_IntArrayRef_dilation_IntArrayRef_columns_Tensor_ones_Tensor(SEXP grad_inputSEXP, SEXP grad_weightSEXP, SEXP grad_biasSEXP, SEXP grad_outputSEXP, SEXP selfSEXP, SEXP weightSEXP, SEXP kernel_sizeSEXP, SEXP strideSEXP, SEXP paddingSEXP, SEXP output_paddingSEXP, SEXP dilationSEXP, SEXP columnsSEXP, SEXP onesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type grad_input(grad_inputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type grad_weight(grad_weightSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type grad_bias(grad_biasSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type kernel_size(kernel_sizeSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type stride(strideSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type padding(paddingSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type output_padding(output_paddingSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type dilation(dilationSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type columns(columnsSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type ones(onesSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_slow_conv_transpose2d_backward_out_grad_input_Tensor_grad_weight_Tensor_grad_bias_Tensor_grad_output_Tensor_self_Tensor_weight_Tensor_kernel_size_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef_output_padding_IntArrayRef_dilation_IntArrayRef_columns_Tensor_ones_Tensor(grad_input, grad_weight, grad_bias, grad_output, self, weight, kernel_size, stride, padding, output_padding, dilation, columns, ones));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_slow_conv_transpose2d_backward_grad_output_Tensor_self_Tensor_weight_Tensor_kernel_size_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef_output_padding_IntArrayRef_dilation_IntArrayRef_columns_Tensor_ones_Tensor_output_mask_stdarraybool3
Rcpp::List cpp_torch_namespace_slow_conv_transpose2d_backward_grad_output_Tensor_self_Tensor_weight_Tensor_kernel_size_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef_output_padding_IntArrayRef_dilation_IntArrayRef_columns_Tensor_ones_Tensor_output_mask_stdarraybool3(Rcpp::XPtr<torch::Tensor> grad_output, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> weight, std::vector<int64_t> kernel_size, std::vector<int64_t> stride, std::vector<int64_t> padding, std::vector<int64_t> output_padding, std::vector<int64_t> dilation, Rcpp::XPtr<torch::Tensor> columns, Rcpp::XPtr<torch::Tensor> ones, std::vector<bool> output_mask);
RcppExport SEXP _torch_cpp_torch_namespace_slow_conv_transpose2d_backward_grad_output_Tensor_self_Tensor_weight_Tensor_kernel_size_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef_output_padding_IntArrayRef_dilation_IntArrayRef_columns_Tensor_ones_Tensor_output_mask_stdarraybool3(SEXP grad_outputSEXP, SEXP selfSEXP, SEXP weightSEXP, SEXP kernel_sizeSEXP, SEXP strideSEXP, SEXP paddingSEXP, SEXP output_paddingSEXP, SEXP dilationSEXP, SEXP columnsSEXP, SEXP onesSEXP, SEXP output_maskSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type kernel_size(kernel_sizeSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type stride(strideSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type padding(paddingSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type output_padding(output_paddingSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type dilation(dilationSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type columns(columnsSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type ones(onesSEXP);
    Rcpp::traits::input_parameter< std::vector<bool> >::type output_mask(output_maskSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_slow_conv_transpose2d_backward_grad_output_Tensor_self_Tensor_weight_Tensor_kernel_size_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef_output_padding_IntArrayRef_dilation_IntArrayRef_columns_Tensor_ones_Tensor_output_mask_stdarraybool3(grad_output, self, weight, kernel_size, stride, padding, output_padding, dilation, columns, ones, output_mask));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_slow_conv_transpose3d_out_out_Tensor_self_Tensor_weight_Tensor_kernel_size_IntArrayRef
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_slow_conv_transpose3d_out_out_Tensor_self_Tensor_weight_Tensor_kernel_size_IntArrayRef(Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> weight, std::vector<int64_t> kernel_size, Rcpp::XPtr<torch::Tensor> bias, std::vector<int64_t> stride, std::vector<int64_t> padding, std::vector<int64_t> output_padding, std::vector<int64_t> dilation);
RcppExport SEXP _torch_cpp_torch_namespace_slow_conv_transpose3d_out_out_Tensor_self_Tensor_weight_Tensor_kernel_size_IntArrayRef(SEXP outSEXP, SEXP selfSEXP, SEXP weightSEXP, SEXP kernel_sizeSEXP, SEXP biasSEXP, SEXP strideSEXP, SEXP paddingSEXP, SEXP output_paddingSEXP, SEXP dilationSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type out(outSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type kernel_size(kernel_sizeSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type bias(biasSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type stride(strideSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type padding(paddingSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type output_padding(output_paddingSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type dilation(dilationSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_slow_conv_transpose3d_out_out_Tensor_self_Tensor_weight_Tensor_kernel_size_IntArrayRef(out, self, weight, kernel_size, bias, stride, padding, output_padding, dilation));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_slow_conv_transpose3d_self_Tensor_weight_Tensor_kernel_size_IntArrayRef
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_slow_conv_transpose3d_self_Tensor_weight_Tensor_kernel_size_IntArrayRef(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> weight, std::vector<int64_t> kernel_size, Rcpp::XPtr<torch::Tensor> bias, std::vector<int64_t> stride, std::vector<int64_t> padding, std::vector<int64_t> output_padding, std::vector<int64_t> dilation);
RcppExport SEXP _torch_cpp_torch_namespace_slow_conv_transpose3d_self_Tensor_weight_Tensor_kernel_size_IntArrayRef(SEXP selfSEXP, SEXP weightSEXP, SEXP kernel_sizeSEXP, SEXP biasSEXP, SEXP strideSEXP, SEXP paddingSEXP, SEXP output_paddingSEXP, SEXP dilationSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type kernel_size(kernel_sizeSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type bias(biasSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type stride(strideSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type padding(paddingSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type output_padding(output_paddingSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type dilation(dilationSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_slow_conv_transpose3d_self_Tensor_weight_Tensor_kernel_size_IntArrayRef(self, weight, kernel_size, bias, stride, padding, output_padding, dilation));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_slow_conv_transpose3d_backward_out_grad_input_Tensor_grad_weight_Tensor_grad_bias_Tensor_grad_output_Tensor_self_Tensor_weight_Tensor_kernel_size_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef_output_padding_IntArrayRef_dilation_IntArrayRef_finput_Tensor_fgrad_input_Tensor
Rcpp::List cpp_torch_namespace_slow_conv_transpose3d_backward_out_grad_input_Tensor_grad_weight_Tensor_grad_bias_Tensor_grad_output_Tensor_self_Tensor_weight_Tensor_kernel_size_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef_output_padding_IntArrayRef_dilation_IntArrayRef_finput_Tensor_fgrad_input_Tensor(Rcpp::XPtr<torch::Tensor> grad_input, Rcpp::XPtr<torch::Tensor> grad_weight, Rcpp::XPtr<torch::Tensor> grad_bias, Rcpp::XPtr<torch::Tensor> grad_output, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> weight, std::vector<int64_t> kernel_size, std::vector<int64_t> stride, std::vector<int64_t> padding, std::vector<int64_t> output_padding, std::vector<int64_t> dilation, Rcpp::XPtr<torch::Tensor> finput, Rcpp::XPtr<torch::Tensor> fgrad_input);
RcppExport SEXP _torch_cpp_torch_namespace_slow_conv_transpose3d_backward_out_grad_input_Tensor_grad_weight_Tensor_grad_bias_Tensor_grad_output_Tensor_self_Tensor_weight_Tensor_kernel_size_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef_output_padding_IntArrayRef_dilation_IntArrayRef_finput_Tensor_fgrad_input_Tensor(SEXP grad_inputSEXP, SEXP grad_weightSEXP, SEXP grad_biasSEXP, SEXP grad_outputSEXP, SEXP selfSEXP, SEXP weightSEXP, SEXP kernel_sizeSEXP, SEXP strideSEXP, SEXP paddingSEXP, SEXP output_paddingSEXP, SEXP dilationSEXP, SEXP finputSEXP, SEXP fgrad_inputSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type grad_input(grad_inputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type grad_weight(grad_weightSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type grad_bias(grad_biasSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type kernel_size(kernel_sizeSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type stride(strideSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type padding(paddingSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type output_padding(output_paddingSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type dilation(dilationSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type finput(finputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type fgrad_input(fgrad_inputSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_slow_conv_transpose3d_backward_out_grad_input_Tensor_grad_weight_Tensor_grad_bias_Tensor_grad_output_Tensor_self_Tensor_weight_Tensor_kernel_size_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef_output_padding_IntArrayRef_dilation_IntArrayRef_finput_Tensor_fgrad_input_Tensor(grad_input, grad_weight, grad_bias, grad_output, self, weight, kernel_size, stride, padding, output_padding, dilation, finput, fgrad_input));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_slow_conv_transpose3d_backward_grad_output_Tensor_self_Tensor_weight_Tensor_kernel_size_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef_output_padding_IntArrayRef_dilation_IntArrayRef_finput_Tensor_fgrad_input_Tensor_output_mask_stdarraybool3
Rcpp::List cpp_torch_namespace_slow_conv_transpose3d_backward_grad_output_Tensor_self_Tensor_weight_Tensor_kernel_size_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef_output_padding_IntArrayRef_dilation_IntArrayRef_finput_Tensor_fgrad_input_Tensor_output_mask_stdarraybool3(Rcpp::XPtr<torch::Tensor> grad_output, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> weight, std::vector<int64_t> kernel_size, std::vector<int64_t> stride, std::vector<int64_t> padding, std::vector<int64_t> output_padding, std::vector<int64_t> dilation, Rcpp::XPtr<torch::Tensor> finput, Rcpp::XPtr<torch::Tensor> fgrad_input, std::vector<bool> output_mask);
RcppExport SEXP _torch_cpp_torch_namespace_slow_conv_transpose3d_backward_grad_output_Tensor_self_Tensor_weight_Tensor_kernel_size_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef_output_padding_IntArrayRef_dilation_IntArrayRef_finput_Tensor_fgrad_input_Tensor_output_mask_stdarraybool3(SEXP grad_outputSEXP, SEXP selfSEXP, SEXP weightSEXP, SEXP kernel_sizeSEXP, SEXP strideSEXP, SEXP paddingSEXP, SEXP output_paddingSEXP, SEXP dilationSEXP, SEXP finputSEXP, SEXP fgrad_inputSEXP, SEXP output_maskSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type kernel_size(kernel_sizeSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type stride(strideSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type padding(paddingSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type output_padding(output_paddingSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type dilation(dilationSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type finput(finputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type fgrad_input(fgrad_inputSEXP);
    Rcpp::traits::input_parameter< std::vector<bool> >::type output_mask(output_maskSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_slow_conv_transpose3d_backward_grad_output_Tensor_self_Tensor_weight_Tensor_kernel_size_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef_output_padding_IntArrayRef_dilation_IntArrayRef_finput_Tensor_fgrad_input_Tensor_output_mask_stdarraybool3(grad_output, self, weight, kernel_size, stride, padding, output_padding, dilation, finput, fgrad_input, output_mask));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_thnn_conv2d_out_out_Tensor_self_Tensor_weight_Tensor_kernel_size_IntArrayRef
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_thnn_conv2d_out_out_Tensor_self_Tensor_weight_Tensor_kernel_size_IntArrayRef(Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> weight, std::vector<int64_t> kernel_size, Rcpp::XPtr<torch::Tensor> bias, std::vector<int64_t> stride, std::vector<int64_t> padding);
RcppExport SEXP _torch_cpp_torch_namespace_thnn_conv2d_out_out_Tensor_self_Tensor_weight_Tensor_kernel_size_IntArrayRef(SEXP outSEXP, SEXP selfSEXP, SEXP weightSEXP, SEXP kernel_sizeSEXP, SEXP biasSEXP, SEXP strideSEXP, SEXP paddingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type out(outSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type kernel_size(kernel_sizeSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type bias(biasSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type stride(strideSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type padding(paddingSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_thnn_conv2d_out_out_Tensor_self_Tensor_weight_Tensor_kernel_size_IntArrayRef(out, self, weight, kernel_size, bias, stride, padding));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_thnn_conv2d_self_Tensor_weight_Tensor_kernel_size_IntArrayRef
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_thnn_conv2d_self_Tensor_weight_Tensor_kernel_size_IntArrayRef(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> weight, std::vector<int64_t> kernel_size, Rcpp::XPtr<torch::Tensor> bias, std::vector<int64_t> stride, std::vector<int64_t> padding);
RcppExport SEXP _torch_cpp_torch_namespace_thnn_conv2d_self_Tensor_weight_Tensor_kernel_size_IntArrayRef(SEXP selfSEXP, SEXP weightSEXP, SEXP kernel_sizeSEXP, SEXP biasSEXP, SEXP strideSEXP, SEXP paddingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type kernel_size(kernel_sizeSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type bias(biasSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type stride(strideSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type padding(paddingSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_thnn_conv2d_self_Tensor_weight_Tensor_kernel_size_IntArrayRef(self, weight, kernel_size, bias, stride, padding));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_thnn_conv2d_forward_out_output_Tensor_finput_Tensor_fgrad_input_Tensor_self_Tensor_weight_Tensor_kernel_size_IntArrayRef_bias_Tensor_stride_IntArrayRef_padding_IntArrayRef
Rcpp::List cpp_torch_namespace_thnn_conv2d_forward_out_output_Tensor_finput_Tensor_fgrad_input_Tensor_self_Tensor_weight_Tensor_kernel_size_IntArrayRef_bias_Tensor_stride_IntArrayRef_padding_IntArrayRef(Rcpp::XPtr<torch::Tensor> output, Rcpp::XPtr<torch::Tensor> finput, Rcpp::XPtr<torch::Tensor> fgrad_input, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> weight, std::vector<int64_t> kernel_size, Rcpp::XPtr<torch::Tensor> bias, std::vector<int64_t> stride, std::vector<int64_t> padding);
RcppExport SEXP _torch_cpp_torch_namespace_thnn_conv2d_forward_out_output_Tensor_finput_Tensor_fgrad_input_Tensor_self_Tensor_weight_Tensor_kernel_size_IntArrayRef_bias_Tensor_stride_IntArrayRef_padding_IntArrayRef(SEXP outputSEXP, SEXP finputSEXP, SEXP fgrad_inputSEXP, SEXP selfSEXP, SEXP weightSEXP, SEXP kernel_sizeSEXP, SEXP biasSEXP, SEXP strideSEXP, SEXP paddingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type output(outputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type finput(finputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type fgrad_input(fgrad_inputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type kernel_size(kernel_sizeSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type bias(biasSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type stride(strideSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type padding(paddingSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_thnn_conv2d_forward_out_output_Tensor_finput_Tensor_fgrad_input_Tensor_self_Tensor_weight_Tensor_kernel_size_IntArrayRef_bias_Tensor_stride_IntArrayRef_padding_IntArrayRef(output, finput, fgrad_input, self, weight, kernel_size, bias, stride, padding));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_thnn_conv2d_forward_self_Tensor_weight_Tensor_kernel_size_IntArrayRef_bias_Tensor_stride_IntArrayRef_padding_IntArrayRef
Rcpp::List cpp_torch_namespace_thnn_conv2d_forward_self_Tensor_weight_Tensor_kernel_size_IntArrayRef_bias_Tensor_stride_IntArrayRef_padding_IntArrayRef(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> weight, std::vector<int64_t> kernel_size, Rcpp::XPtr<torch::Tensor> bias, std::vector<int64_t> stride, std::vector<int64_t> padding);
RcppExport SEXP _torch_cpp_torch_namespace_thnn_conv2d_forward_self_Tensor_weight_Tensor_kernel_size_IntArrayRef_bias_Tensor_stride_IntArrayRef_padding_IntArrayRef(SEXP selfSEXP, SEXP weightSEXP, SEXP kernel_sizeSEXP, SEXP biasSEXP, SEXP strideSEXP, SEXP paddingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type kernel_size(kernel_sizeSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type bias(biasSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type stride(strideSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type padding(paddingSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_thnn_conv2d_forward_self_Tensor_weight_Tensor_kernel_size_IntArrayRef_bias_Tensor_stride_IntArrayRef_padding_IntArrayRef(self, weight, kernel_size, bias, stride, padding));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_thnn_conv2d_backward_out_grad_input_Tensor_grad_weight_Tensor_grad_bias_Tensor_grad_output_Tensor_self_Tensor_weight_Tensor_kernel_size_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef_finput_Tensor_fgrad_input_Tensor
Rcpp::List cpp_torch_namespace_thnn_conv2d_backward_out_grad_input_Tensor_grad_weight_Tensor_grad_bias_Tensor_grad_output_Tensor_self_Tensor_weight_Tensor_kernel_size_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef_finput_Tensor_fgrad_input_Tensor(Rcpp::XPtr<torch::Tensor> grad_input, Rcpp::XPtr<torch::Tensor> grad_weight, Rcpp::XPtr<torch::Tensor> grad_bias, Rcpp::XPtr<torch::Tensor> grad_output, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> weight, std::vector<int64_t> kernel_size, std::vector<int64_t> stride, std::vector<int64_t> padding, Rcpp::XPtr<torch::Tensor> finput, Rcpp::XPtr<torch::Tensor> fgrad_input);
RcppExport SEXP _torch_cpp_torch_namespace_thnn_conv2d_backward_out_grad_input_Tensor_grad_weight_Tensor_grad_bias_Tensor_grad_output_Tensor_self_Tensor_weight_Tensor_kernel_size_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef_finput_Tensor_fgrad_input_Tensor(SEXP grad_inputSEXP, SEXP grad_weightSEXP, SEXP grad_biasSEXP, SEXP grad_outputSEXP, SEXP selfSEXP, SEXP weightSEXP, SEXP kernel_sizeSEXP, SEXP strideSEXP, SEXP paddingSEXP, SEXP finputSEXP, SEXP fgrad_inputSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type grad_input(grad_inputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type grad_weight(grad_weightSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type grad_bias(grad_biasSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type kernel_size(kernel_sizeSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type stride(strideSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type padding(paddingSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type finput(finputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type fgrad_input(fgrad_inputSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_thnn_conv2d_backward_out_grad_input_Tensor_grad_weight_Tensor_grad_bias_Tensor_grad_output_Tensor_self_Tensor_weight_Tensor_kernel_size_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef_finput_Tensor_fgrad_input_Tensor(grad_input, grad_weight, grad_bias, grad_output, self, weight, kernel_size, stride, padding, finput, fgrad_input));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_thnn_conv2d_backward_grad_output_Tensor_self_Tensor_weight_Tensor_kernel_size_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef_finput_Tensor_fgrad_input_Tensor_output_mask_stdarraybool3
Rcpp::List cpp_torch_namespace_thnn_conv2d_backward_grad_output_Tensor_self_Tensor_weight_Tensor_kernel_size_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef_finput_Tensor_fgrad_input_Tensor_output_mask_stdarraybool3(Rcpp::XPtr<torch::Tensor> grad_output, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> weight, std::vector<int64_t> kernel_size, std::vector<int64_t> stride, std::vector<int64_t> padding, Rcpp::XPtr<torch::Tensor> finput, Rcpp::XPtr<torch::Tensor> fgrad_input, std::vector<bool> output_mask);
RcppExport SEXP _torch_cpp_torch_namespace_thnn_conv2d_backward_grad_output_Tensor_self_Tensor_weight_Tensor_kernel_size_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef_finput_Tensor_fgrad_input_Tensor_output_mask_stdarraybool3(SEXP grad_outputSEXP, SEXP selfSEXP, SEXP weightSEXP, SEXP kernel_sizeSEXP, SEXP strideSEXP, SEXP paddingSEXP, SEXP finputSEXP, SEXP fgrad_inputSEXP, SEXP output_maskSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type kernel_size(kernel_sizeSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type stride(strideSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type padding(paddingSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type finput(finputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type fgrad_input(fgrad_inputSEXP);
    Rcpp::traits::input_parameter< std::vector<bool> >::type output_mask(output_maskSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_thnn_conv2d_backward_grad_output_Tensor_self_Tensor_weight_Tensor_kernel_size_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef_finput_Tensor_fgrad_input_Tensor_output_mask_stdarraybool3(grad_output, self, weight, kernel_size, stride, padding, finput, fgrad_input, output_mask));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_thnn_conv_depthwise2d_out_out_Tensor_self_Tensor_weight_Tensor_kernel_size_IntArrayRef
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_thnn_conv_depthwise2d_out_out_Tensor_self_Tensor_weight_Tensor_kernel_size_IntArrayRef(Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> weight, std::vector<int64_t> kernel_size, Rcpp::XPtr<torch::Tensor> bias, std::vector<int64_t> stride, std::vector<int64_t> padding, std::vector<int64_t> dilation);
RcppExport SEXP _torch_cpp_torch_namespace_thnn_conv_depthwise2d_out_out_Tensor_self_Tensor_weight_Tensor_kernel_size_IntArrayRef(SEXP outSEXP, SEXP selfSEXP, SEXP weightSEXP, SEXP kernel_sizeSEXP, SEXP biasSEXP, SEXP strideSEXP, SEXP paddingSEXP, SEXP dilationSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type out(outSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type kernel_size(kernel_sizeSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type bias(biasSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type stride(strideSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type padding(paddingSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type dilation(dilationSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_thnn_conv_depthwise2d_out_out_Tensor_self_Tensor_weight_Tensor_kernel_size_IntArrayRef(out, self, weight, kernel_size, bias, stride, padding, dilation));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_thnn_conv_depthwise2d_self_Tensor_weight_Tensor_kernel_size_IntArrayRef
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_thnn_conv_depthwise2d_self_Tensor_weight_Tensor_kernel_size_IntArrayRef(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> weight, std::vector<int64_t> kernel_size, Rcpp::XPtr<torch::Tensor> bias, std::vector<int64_t> stride, std::vector<int64_t> padding, std::vector<int64_t> dilation);
RcppExport SEXP _torch_cpp_torch_namespace_thnn_conv_depthwise2d_self_Tensor_weight_Tensor_kernel_size_IntArrayRef(SEXP selfSEXP, SEXP weightSEXP, SEXP kernel_sizeSEXP, SEXP biasSEXP, SEXP strideSEXP, SEXP paddingSEXP, SEXP dilationSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type kernel_size(kernel_sizeSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type bias(biasSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type stride(strideSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type padding(paddingSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type dilation(dilationSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_thnn_conv_depthwise2d_self_Tensor_weight_Tensor_kernel_size_IntArrayRef(self, weight, kernel_size, bias, stride, padding, dilation));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_thnn_conv_depthwise2d_forward_out_out_Tensor_self_Tensor_weight_Tensor_kernel_size_IntArrayRef_bias_Tensor_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_thnn_conv_depthwise2d_forward_out_out_Tensor_self_Tensor_weight_Tensor_kernel_size_IntArrayRef_bias_Tensor_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef(Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> weight, std::vector<int64_t> kernel_size, Rcpp::XPtr<torch::Tensor> bias, std::vector<int64_t> stride, std::vector<int64_t> padding, std::vector<int64_t> dilation);
RcppExport SEXP _torch_cpp_torch_namespace_thnn_conv_depthwise2d_forward_out_out_Tensor_self_Tensor_weight_Tensor_kernel_size_IntArrayRef_bias_Tensor_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef(SEXP outSEXP, SEXP selfSEXP, SEXP weightSEXP, SEXP kernel_sizeSEXP, SEXP biasSEXP, SEXP strideSEXP, SEXP paddingSEXP, SEXP dilationSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type out(outSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type kernel_size(kernel_sizeSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type bias(biasSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type stride(strideSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type padding(paddingSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type dilation(dilationSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_thnn_conv_depthwise2d_forward_out_out_Tensor_self_Tensor_weight_Tensor_kernel_size_IntArrayRef_bias_Tensor_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef(out, self, weight, kernel_size, bias, stride, padding, dilation));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_thnn_conv_depthwise2d_forward_self_Tensor_weight_Tensor_kernel_size_IntArrayRef_bias_Tensor_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_thnn_conv_depthwise2d_forward_self_Tensor_weight_Tensor_kernel_size_IntArrayRef_bias_Tensor_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> weight, std::vector<int64_t> kernel_size, Rcpp::XPtr<torch::Tensor> bias, std::vector<int64_t> stride, std::vector<int64_t> padding, std::vector<int64_t> dilation);
RcppExport SEXP _torch_cpp_torch_namespace_thnn_conv_depthwise2d_forward_self_Tensor_weight_Tensor_kernel_size_IntArrayRef_bias_Tensor_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef(SEXP selfSEXP, SEXP weightSEXP, SEXP kernel_sizeSEXP, SEXP biasSEXP, SEXP strideSEXP, SEXP paddingSEXP, SEXP dilationSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type kernel_size(kernel_sizeSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type bias(biasSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type stride(strideSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type padding(paddingSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type dilation(dilationSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_thnn_conv_depthwise2d_forward_self_Tensor_weight_Tensor_kernel_size_IntArrayRef_bias_Tensor_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef(self, weight, kernel_size, bias, stride, padding, dilation));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_thnn_conv_depthwise2d_backward_out_grad_input_Tensor_grad_weight_Tensor_grad_output_Tensor_self_Tensor_weight_Tensor_kernel_size_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef
Rcpp::List cpp_torch_namespace_thnn_conv_depthwise2d_backward_out_grad_input_Tensor_grad_weight_Tensor_grad_output_Tensor_self_Tensor_weight_Tensor_kernel_size_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef(Rcpp::XPtr<torch::Tensor> grad_input, Rcpp::XPtr<torch::Tensor> grad_weight, Rcpp::XPtr<torch::Tensor> grad_output, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> weight, std::vector<int64_t> kernel_size, std::vector<int64_t> stride, std::vector<int64_t> padding, std::vector<int64_t> dilation);
RcppExport SEXP _torch_cpp_torch_namespace_thnn_conv_depthwise2d_backward_out_grad_input_Tensor_grad_weight_Tensor_grad_output_Tensor_self_Tensor_weight_Tensor_kernel_size_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef(SEXP grad_inputSEXP, SEXP grad_weightSEXP, SEXP grad_outputSEXP, SEXP selfSEXP, SEXP weightSEXP, SEXP kernel_sizeSEXP, SEXP strideSEXP, SEXP paddingSEXP, SEXP dilationSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type grad_input(grad_inputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type grad_weight(grad_weightSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type kernel_size(kernel_sizeSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type stride(strideSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type padding(paddingSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type dilation(dilationSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_thnn_conv_depthwise2d_backward_out_grad_input_Tensor_grad_weight_Tensor_grad_output_Tensor_self_Tensor_weight_Tensor_kernel_size_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef(grad_input, grad_weight, grad_output, self, weight, kernel_size, stride, padding, dilation));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_thnn_conv_depthwise2d_backward_grad_output_Tensor_self_Tensor_weight_Tensor_kernel_size_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef_output_mask_stdarraybool2
Rcpp::List cpp_torch_namespace_thnn_conv_depthwise2d_backward_grad_output_Tensor_self_Tensor_weight_Tensor_kernel_size_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef_output_mask_stdarraybool2(Rcpp::XPtr<torch::Tensor> grad_output, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> weight, std::vector<int64_t> kernel_size, std::vector<int64_t> stride, std::vector<int64_t> padding, std::vector<int64_t> dilation, std::vector<bool> output_mask);
RcppExport SEXP _torch_cpp_torch_namespace_thnn_conv_depthwise2d_backward_grad_output_Tensor_self_Tensor_weight_Tensor_kernel_size_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef_output_mask_stdarraybool2(SEXP grad_outputSEXP, SEXP selfSEXP, SEXP weightSEXP, SEXP kernel_sizeSEXP, SEXP strideSEXP, SEXP paddingSEXP, SEXP dilationSEXP, SEXP output_maskSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type kernel_size(kernel_sizeSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type stride(strideSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type padding(paddingSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type dilation(dilationSEXP);
    Rcpp::traits::input_parameter< std::vector<bool> >::type output_mask(output_maskSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_thnn_conv_depthwise2d_backward_grad_output_Tensor_self_Tensor_weight_Tensor_kernel_size_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef_output_mask_stdarraybool2(grad_output, self, weight, kernel_size, stride, padding, dilation, output_mask));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_slow_conv3d_out_out_Tensor_self_Tensor_weight_Tensor_kernel_size_IntArrayRef
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_slow_conv3d_out_out_Tensor_self_Tensor_weight_Tensor_kernel_size_IntArrayRef(Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> weight, std::vector<int64_t> kernel_size, Rcpp::XPtr<torch::Tensor> bias, std::vector<int64_t> stride, std::vector<int64_t> padding);
RcppExport SEXP _torch_cpp_torch_namespace_slow_conv3d_out_out_Tensor_self_Tensor_weight_Tensor_kernel_size_IntArrayRef(SEXP outSEXP, SEXP selfSEXP, SEXP weightSEXP, SEXP kernel_sizeSEXP, SEXP biasSEXP, SEXP strideSEXP, SEXP paddingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type out(outSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type kernel_size(kernel_sizeSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type bias(biasSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type stride(strideSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type padding(paddingSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_slow_conv3d_out_out_Tensor_self_Tensor_weight_Tensor_kernel_size_IntArrayRef(out, self, weight, kernel_size, bias, stride, padding));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_slow_conv3d_self_Tensor_weight_Tensor_kernel_size_IntArrayRef
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_slow_conv3d_self_Tensor_weight_Tensor_kernel_size_IntArrayRef(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> weight, std::vector<int64_t> kernel_size, Rcpp::XPtr<torch::Tensor> bias, std::vector<int64_t> stride, std::vector<int64_t> padding);
RcppExport SEXP _torch_cpp_torch_namespace_slow_conv3d_self_Tensor_weight_Tensor_kernel_size_IntArrayRef(SEXP selfSEXP, SEXP weightSEXP, SEXP kernel_sizeSEXP, SEXP biasSEXP, SEXP strideSEXP, SEXP paddingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type kernel_size(kernel_sizeSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type bias(biasSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type stride(strideSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type padding(paddingSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_slow_conv3d_self_Tensor_weight_Tensor_kernel_size_IntArrayRef(self, weight, kernel_size, bias, stride, padding));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_slow_conv3d_forward_out_output_Tensor_finput_Tensor_fgrad_input_Tensor_self_Tensor_weight_Tensor_kernel_size_IntArrayRef_bias_Tensor_stride_IntArrayRef_padding_IntArrayRef
Rcpp::List cpp_torch_namespace_slow_conv3d_forward_out_output_Tensor_finput_Tensor_fgrad_input_Tensor_self_Tensor_weight_Tensor_kernel_size_IntArrayRef_bias_Tensor_stride_IntArrayRef_padding_IntArrayRef(Rcpp::XPtr<torch::Tensor> output, Rcpp::XPtr<torch::Tensor> finput, Rcpp::XPtr<torch::Tensor> fgrad_input, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> weight, std::vector<int64_t> kernel_size, Rcpp::XPtr<torch::Tensor> bias, std::vector<int64_t> stride, std::vector<int64_t> padding);
RcppExport SEXP _torch_cpp_torch_namespace_slow_conv3d_forward_out_output_Tensor_finput_Tensor_fgrad_input_Tensor_self_Tensor_weight_Tensor_kernel_size_IntArrayRef_bias_Tensor_stride_IntArrayRef_padding_IntArrayRef(SEXP outputSEXP, SEXP finputSEXP, SEXP fgrad_inputSEXP, SEXP selfSEXP, SEXP weightSEXP, SEXP kernel_sizeSEXP, SEXP biasSEXP, SEXP strideSEXP, SEXP paddingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type output(outputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type finput(finputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type fgrad_input(fgrad_inputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type kernel_size(kernel_sizeSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type bias(biasSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type stride(strideSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type padding(paddingSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_slow_conv3d_forward_out_output_Tensor_finput_Tensor_fgrad_input_Tensor_self_Tensor_weight_Tensor_kernel_size_IntArrayRef_bias_Tensor_stride_IntArrayRef_padding_IntArrayRef(output, finput, fgrad_input, self, weight, kernel_size, bias, stride, padding));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_slow_conv3d_forward_self_Tensor_weight_Tensor_kernel_size_IntArrayRef_bias_Tensor_stride_IntArrayRef_padding_IntArrayRef
Rcpp::List cpp_torch_namespace_slow_conv3d_forward_self_Tensor_weight_Tensor_kernel_size_IntArrayRef_bias_Tensor_stride_IntArrayRef_padding_IntArrayRef(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> weight, std::vector<int64_t> kernel_size, Rcpp::XPtr<torch::Tensor> bias, std::vector<int64_t> stride, std::vector<int64_t> padding);
RcppExport SEXP _torch_cpp_torch_namespace_slow_conv3d_forward_self_Tensor_weight_Tensor_kernel_size_IntArrayRef_bias_Tensor_stride_IntArrayRef_padding_IntArrayRef(SEXP selfSEXP, SEXP weightSEXP, SEXP kernel_sizeSEXP, SEXP biasSEXP, SEXP strideSEXP, SEXP paddingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type kernel_size(kernel_sizeSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type bias(biasSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type stride(strideSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type padding(paddingSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_slow_conv3d_forward_self_Tensor_weight_Tensor_kernel_size_IntArrayRef_bias_Tensor_stride_IntArrayRef_padding_IntArrayRef(self, weight, kernel_size, bias, stride, padding));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_slow_conv3d_backward_out_grad_input_Tensor_grad_weight_Tensor_grad_bias_Tensor_grad_output_Tensor_self_Tensor_weight_Tensor_kernel_size_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef_finput_Tensor_fgrad_input_Tensor
Rcpp::List cpp_torch_namespace_slow_conv3d_backward_out_grad_input_Tensor_grad_weight_Tensor_grad_bias_Tensor_grad_output_Tensor_self_Tensor_weight_Tensor_kernel_size_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef_finput_Tensor_fgrad_input_Tensor(Rcpp::XPtr<torch::Tensor> grad_input, Rcpp::XPtr<torch::Tensor> grad_weight, Rcpp::XPtr<torch::Tensor> grad_bias, Rcpp::XPtr<torch::Tensor> grad_output, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> weight, std::vector<int64_t> kernel_size, std::vector<int64_t> stride, std::vector<int64_t> padding, Rcpp::XPtr<torch::Tensor> finput, Rcpp::XPtr<torch::Tensor> fgrad_input);
RcppExport SEXP _torch_cpp_torch_namespace_slow_conv3d_backward_out_grad_input_Tensor_grad_weight_Tensor_grad_bias_Tensor_grad_output_Tensor_self_Tensor_weight_Tensor_kernel_size_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef_finput_Tensor_fgrad_input_Tensor(SEXP grad_inputSEXP, SEXP grad_weightSEXP, SEXP grad_biasSEXP, SEXP grad_outputSEXP, SEXP selfSEXP, SEXP weightSEXP, SEXP kernel_sizeSEXP, SEXP strideSEXP, SEXP paddingSEXP, SEXP finputSEXP, SEXP fgrad_inputSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type grad_input(grad_inputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type grad_weight(grad_weightSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type grad_bias(grad_biasSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type kernel_size(kernel_sizeSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type stride(strideSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type padding(paddingSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type finput(finputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type fgrad_input(fgrad_inputSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_slow_conv3d_backward_out_grad_input_Tensor_grad_weight_Tensor_grad_bias_Tensor_grad_output_Tensor_self_Tensor_weight_Tensor_kernel_size_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef_finput_Tensor_fgrad_input_Tensor(grad_input, grad_weight, grad_bias, grad_output, self, weight, kernel_size, stride, padding, finput, fgrad_input));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_slow_conv3d_backward_grad_output_Tensor_self_Tensor_weight_Tensor_kernel_size_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef_finput_Tensor_fgrad_input_Tensor_output_mask_stdarraybool3
Rcpp::List cpp_torch_namespace_slow_conv3d_backward_grad_output_Tensor_self_Tensor_weight_Tensor_kernel_size_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef_finput_Tensor_fgrad_input_Tensor_output_mask_stdarraybool3(Rcpp::XPtr<torch::Tensor> grad_output, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> weight, std::vector<int64_t> kernel_size, std::vector<int64_t> stride, std::vector<int64_t> padding, Rcpp::XPtr<torch::Tensor> finput, Rcpp::XPtr<torch::Tensor> fgrad_input, std::vector<bool> output_mask);
RcppExport SEXP _torch_cpp_torch_namespace_slow_conv3d_backward_grad_output_Tensor_self_Tensor_weight_Tensor_kernel_size_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef_finput_Tensor_fgrad_input_Tensor_output_mask_stdarraybool3(SEXP grad_outputSEXP, SEXP selfSEXP, SEXP weightSEXP, SEXP kernel_sizeSEXP, SEXP strideSEXP, SEXP paddingSEXP, SEXP finputSEXP, SEXP fgrad_inputSEXP, SEXP output_maskSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type kernel_size(kernel_sizeSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type stride(strideSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type padding(paddingSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type finput(finputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type fgrad_input(fgrad_inputSEXP);
    Rcpp::traits::input_parameter< std::vector<bool> >::type output_mask(output_maskSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_slow_conv3d_backward_grad_output_Tensor_self_Tensor_weight_Tensor_kernel_size_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef_finput_Tensor_fgrad_input_Tensor_output_mask_stdarraybool3(grad_output, self, weight, kernel_size, stride, padding, finput, fgrad_input, output_mask));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_slow_conv_dilated2d_self_Tensor_weight_Tensor_kernel_size_IntArrayRef
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_slow_conv_dilated2d_self_Tensor_weight_Tensor_kernel_size_IntArrayRef(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> weight, std::vector<int64_t> kernel_size, Rcpp::XPtr<torch::Tensor> bias, std::vector<int64_t> stride, std::vector<int64_t> padding, std::vector<int64_t> dilation);
RcppExport SEXP _torch_cpp_torch_namespace_slow_conv_dilated2d_self_Tensor_weight_Tensor_kernel_size_IntArrayRef(SEXP selfSEXP, SEXP weightSEXP, SEXP kernel_sizeSEXP, SEXP biasSEXP, SEXP strideSEXP, SEXP paddingSEXP, SEXP dilationSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type kernel_size(kernel_sizeSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type bias(biasSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type stride(strideSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type padding(paddingSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type dilation(dilationSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_slow_conv_dilated2d_self_Tensor_weight_Tensor_kernel_size_IntArrayRef(self, weight, kernel_size, bias, stride, padding, dilation));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_slow_conv_dilated2d_backward_grad_output_Tensor_self_Tensor_weight_Tensor_kernel_size_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef_output_mask_stdarraybool3
Rcpp::List cpp_torch_namespace_slow_conv_dilated2d_backward_grad_output_Tensor_self_Tensor_weight_Tensor_kernel_size_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef_output_mask_stdarraybool3(Rcpp::XPtr<torch::Tensor> grad_output, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> weight, std::vector<int64_t> kernel_size, std::vector<int64_t> stride, std::vector<int64_t> padding, std::vector<int64_t> dilation, std::vector<bool> output_mask);
RcppExport SEXP _torch_cpp_torch_namespace_slow_conv_dilated2d_backward_grad_output_Tensor_self_Tensor_weight_Tensor_kernel_size_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef_output_mask_stdarraybool3(SEXP grad_outputSEXP, SEXP selfSEXP, SEXP weightSEXP, SEXP kernel_sizeSEXP, SEXP strideSEXP, SEXP paddingSEXP, SEXP dilationSEXP, SEXP output_maskSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type kernel_size(kernel_sizeSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type stride(strideSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type padding(paddingSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type dilation(dilationSEXP);
    Rcpp::traits::input_parameter< std::vector<bool> >::type output_mask(output_maskSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_slow_conv_dilated2d_backward_grad_output_Tensor_self_Tensor_weight_Tensor_kernel_size_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef_output_mask_stdarraybool3(grad_output, self, weight, kernel_size, stride, padding, dilation, output_mask));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_slow_conv_dilated3d_self_Tensor_weight_Tensor_kernel_size_IntArrayRef
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_slow_conv_dilated3d_self_Tensor_weight_Tensor_kernel_size_IntArrayRef(Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> weight, std::vector<int64_t> kernel_size, Rcpp::XPtr<torch::Tensor> bias, std::vector<int64_t> stride, std::vector<int64_t> padding, std::vector<int64_t> dilation);
RcppExport SEXP _torch_cpp_torch_namespace_slow_conv_dilated3d_self_Tensor_weight_Tensor_kernel_size_IntArrayRef(SEXP selfSEXP, SEXP weightSEXP, SEXP kernel_sizeSEXP, SEXP biasSEXP, SEXP strideSEXP, SEXP paddingSEXP, SEXP dilationSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type kernel_size(kernel_sizeSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type bias(biasSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type stride(strideSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type padding(paddingSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type dilation(dilationSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_slow_conv_dilated3d_self_Tensor_weight_Tensor_kernel_size_IntArrayRef(self, weight, kernel_size, bias, stride, padding, dilation));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_slow_conv_dilated3d_backward_grad_output_Tensor_self_Tensor_weight_Tensor_kernel_size_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef_output_mask_stdarraybool3
Rcpp::List cpp_torch_namespace_slow_conv_dilated3d_backward_grad_output_Tensor_self_Tensor_weight_Tensor_kernel_size_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef_output_mask_stdarraybool3(Rcpp::XPtr<torch::Tensor> grad_output, Rcpp::XPtr<torch::Tensor> self, Rcpp::XPtr<torch::Tensor> weight, std::vector<int64_t> kernel_size, std::vector<int64_t> stride, std::vector<int64_t> padding, std::vector<int64_t> dilation, std::vector<bool> output_mask);
RcppExport SEXP _torch_cpp_torch_namespace_slow_conv_dilated3d_backward_grad_output_Tensor_self_Tensor_weight_Tensor_kernel_size_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef_output_mask_stdarraybool3(SEXP grad_outputSEXP, SEXP selfSEXP, SEXP weightSEXP, SEXP kernel_sizeSEXP, SEXP strideSEXP, SEXP paddingSEXP, SEXP dilationSEXP, SEXP output_maskSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type kernel_size(kernel_sizeSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type stride(strideSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type padding(paddingSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type dilation(dilationSEXP);
    Rcpp::traits::input_parameter< std::vector<bool> >::type output_mask(output_maskSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_slow_conv_dilated3d_backward_grad_output_Tensor_self_Tensor_weight_Tensor_kernel_size_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef_output_mask_stdarraybool3(grad_output, self, weight, kernel_size, stride, padding, dilation, output_mask));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_col2im_out_out_Tensor_self_Tensor_output_size_IntArrayRef_kernel_size_IntArrayRef_dilation_IntArrayRef_padding_IntArrayRef_stride_IntArrayRef
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_col2im_out_out_Tensor_self_Tensor_output_size_IntArrayRef_kernel_size_IntArrayRef_dilation_IntArrayRef_padding_IntArrayRef_stride_IntArrayRef(Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, std::vector<int64_t> output_size, std::vector<int64_t> kernel_size, std::vector<int64_t> dilation, std::vector<int64_t> padding, std::vector<int64_t> stride);
RcppExport SEXP _torch_cpp_torch_namespace_col2im_out_out_Tensor_self_Tensor_output_size_IntArrayRef_kernel_size_IntArrayRef_dilation_IntArrayRef_padding_IntArrayRef_stride_IntArrayRef(SEXP outSEXP, SEXP selfSEXP, SEXP output_sizeSEXP, SEXP kernel_sizeSEXP, SEXP dilationSEXP, SEXP paddingSEXP, SEXP strideSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type out(outSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type output_size(output_sizeSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type kernel_size(kernel_sizeSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type dilation(dilationSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type padding(paddingSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type stride(strideSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_col2im_out_out_Tensor_self_Tensor_output_size_IntArrayRef_kernel_size_IntArrayRef_dilation_IntArrayRef_padding_IntArrayRef_stride_IntArrayRef(out, self, output_size, kernel_size, dilation, padding, stride));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_col2im_self_Tensor_output_size_IntArrayRef_kernel_size_IntArrayRef_dilation_IntArrayRef_padding_IntArrayRef_stride_IntArrayRef
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_col2im_self_Tensor_output_size_IntArrayRef_kernel_size_IntArrayRef_dilation_IntArrayRef_padding_IntArrayRef_stride_IntArrayRef(Rcpp::XPtr<torch::Tensor> self, std::vector<int64_t> output_size, std::vector<int64_t> kernel_size, std::vector<int64_t> dilation, std::vector<int64_t> padding, std::vector<int64_t> stride);
RcppExport SEXP _torch_cpp_torch_namespace_col2im_self_Tensor_output_size_IntArrayRef_kernel_size_IntArrayRef_dilation_IntArrayRef_padding_IntArrayRef_stride_IntArrayRef(SEXP selfSEXP, SEXP output_sizeSEXP, SEXP kernel_sizeSEXP, SEXP dilationSEXP, SEXP paddingSEXP, SEXP strideSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type output_size(output_sizeSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type kernel_size(kernel_sizeSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type dilation(dilationSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type padding(paddingSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type stride(strideSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_col2im_self_Tensor_output_size_IntArrayRef_kernel_size_IntArrayRef_dilation_IntArrayRef_padding_IntArrayRef_stride_IntArrayRef(self, output_size, kernel_size, dilation, padding, stride));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_col2im_backward_out_grad_input_Tensor_grad_output_Tensor_kernel_size_IntArrayRef_dilation_IntArrayRef_padding_IntArrayRef_stride_IntArrayRef
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_col2im_backward_out_grad_input_Tensor_grad_output_Tensor_kernel_size_IntArrayRef_dilation_IntArrayRef_padding_IntArrayRef_stride_IntArrayRef(Rcpp::XPtr<torch::Tensor> grad_input, Rcpp::XPtr<torch::Tensor> grad_output, std::vector<int64_t> kernel_size, std::vector<int64_t> dilation, std::vector<int64_t> padding, std::vector<int64_t> stride);
RcppExport SEXP _torch_cpp_torch_namespace_col2im_backward_out_grad_input_Tensor_grad_output_Tensor_kernel_size_IntArrayRef_dilation_IntArrayRef_padding_IntArrayRef_stride_IntArrayRef(SEXP grad_inputSEXP, SEXP grad_outputSEXP, SEXP kernel_sizeSEXP, SEXP dilationSEXP, SEXP paddingSEXP, SEXP strideSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type grad_input(grad_inputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type kernel_size(kernel_sizeSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type dilation(dilationSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type padding(paddingSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type stride(strideSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_col2im_backward_out_grad_input_Tensor_grad_output_Tensor_kernel_size_IntArrayRef_dilation_IntArrayRef_padding_IntArrayRef_stride_IntArrayRef(grad_input, grad_output, kernel_size, dilation, padding, stride));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_col2im_backward_grad_output_Tensor_kernel_size_IntArrayRef_dilation_IntArrayRef_padding_IntArrayRef_stride_IntArrayRef
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_col2im_backward_grad_output_Tensor_kernel_size_IntArrayRef_dilation_IntArrayRef_padding_IntArrayRef_stride_IntArrayRef(Rcpp::XPtr<torch::Tensor> grad_output, std::vector<int64_t> kernel_size, std::vector<int64_t> dilation, std::vector<int64_t> padding, std::vector<int64_t> stride);
RcppExport SEXP _torch_cpp_torch_namespace_col2im_backward_grad_output_Tensor_kernel_size_IntArrayRef_dilation_IntArrayRef_padding_IntArrayRef_stride_IntArrayRef(SEXP grad_outputSEXP, SEXP kernel_sizeSEXP, SEXP dilationSEXP, SEXP paddingSEXP, SEXP strideSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type kernel_size(kernel_sizeSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type dilation(dilationSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type padding(paddingSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type stride(strideSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_col2im_backward_grad_output_Tensor_kernel_size_IntArrayRef_dilation_IntArrayRef_padding_IntArrayRef_stride_IntArrayRef(grad_output, kernel_size, dilation, padding, stride));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_im2col_out_out_Tensor_self_Tensor_kernel_size_IntArrayRef_dilation_IntArrayRef_padding_IntArrayRef_stride_IntArrayRef
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_im2col_out_out_Tensor_self_Tensor_kernel_size_IntArrayRef_dilation_IntArrayRef_padding_IntArrayRef_stride_IntArrayRef(Rcpp::XPtr<torch::Tensor> out, Rcpp::XPtr<torch::Tensor> self, std::vector<int64_t> kernel_size, std::vector<int64_t> dilation, std::vector<int64_t> padding, std::vector<int64_t> stride);
RcppExport SEXP _torch_cpp_torch_namespace_im2col_out_out_Tensor_self_Tensor_kernel_size_IntArrayRef_dilation_IntArrayRef_padding_IntArrayRef_stride_IntArrayRef(SEXP outSEXP, SEXP selfSEXP, SEXP kernel_sizeSEXP, SEXP dilationSEXP, SEXP paddingSEXP, SEXP strideSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type out(outSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type kernel_size(kernel_sizeSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type dilation(dilationSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type padding(paddingSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type stride(strideSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_im2col_out_out_Tensor_self_Tensor_kernel_size_IntArrayRef_dilation_IntArrayRef_padding_IntArrayRef_stride_IntArrayRef(out, self, kernel_size, dilation, padding, stride));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_im2col_self_Tensor_kernel_size_IntArrayRef_dilation_IntArrayRef_padding_IntArrayRef_stride_IntArrayRef
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_im2col_self_Tensor_kernel_size_IntArrayRef_dilation_IntArrayRef_padding_IntArrayRef_stride_IntArrayRef(Rcpp::XPtr<torch::Tensor> self, std::vector<int64_t> kernel_size, std::vector<int64_t> dilation, std::vector<int64_t> padding, std::vector<int64_t> stride);
RcppExport SEXP _torch_cpp_torch_namespace_im2col_self_Tensor_kernel_size_IntArrayRef_dilation_IntArrayRef_padding_IntArrayRef_stride_IntArrayRef(SEXP selfSEXP, SEXP kernel_sizeSEXP, SEXP dilationSEXP, SEXP paddingSEXP, SEXP strideSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type kernel_size(kernel_sizeSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type dilation(dilationSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type padding(paddingSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type stride(strideSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_im2col_self_Tensor_kernel_size_IntArrayRef_dilation_IntArrayRef_padding_IntArrayRef_stride_IntArrayRef(self, kernel_size, dilation, padding, stride));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_im2col_backward_out_grad_input_Tensor_grad_output_Tensor_input_size_IntArrayRef_kernel_size_IntArrayRef_dilation_IntArrayRef_padding_IntArrayRef_stride_IntArrayRef
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_im2col_backward_out_grad_input_Tensor_grad_output_Tensor_input_size_IntArrayRef_kernel_size_IntArrayRef_dilation_IntArrayRef_padding_IntArrayRef_stride_IntArrayRef(Rcpp::XPtr<torch::Tensor> grad_input, Rcpp::XPtr<torch::Tensor> grad_output, std::vector<int64_t> input_size, std::vector<int64_t> kernel_size, std::vector<int64_t> dilation, std::vector<int64_t> padding, std::vector<int64_t> stride);
RcppExport SEXP _torch_cpp_torch_namespace_im2col_backward_out_grad_input_Tensor_grad_output_Tensor_input_size_IntArrayRef_kernel_size_IntArrayRef_dilation_IntArrayRef_padding_IntArrayRef_stride_IntArrayRef(SEXP grad_inputSEXP, SEXP grad_outputSEXP, SEXP input_sizeSEXP, SEXP kernel_sizeSEXP, SEXP dilationSEXP, SEXP paddingSEXP, SEXP strideSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type grad_input(grad_inputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type input_size(input_sizeSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type kernel_size(kernel_sizeSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type dilation(dilationSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type padding(paddingSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type stride(strideSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_im2col_backward_out_grad_input_Tensor_grad_output_Tensor_input_size_IntArrayRef_kernel_size_IntArrayRef_dilation_IntArrayRef_padding_IntArrayRef_stride_IntArrayRef(grad_input, grad_output, input_size, kernel_size, dilation, padding, stride));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_im2col_backward_grad_output_Tensor_input_size_IntArrayRef_kernel_size_IntArrayRef_dilation_IntArrayRef_padding_IntArrayRef_stride_IntArrayRef
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_im2col_backward_grad_output_Tensor_input_size_IntArrayRef_kernel_size_IntArrayRef_dilation_IntArrayRef_padding_IntArrayRef_stride_IntArrayRef(Rcpp::XPtr<torch::Tensor> grad_output, std::vector<int64_t> input_size, std::vector<int64_t> kernel_size, std::vector<int64_t> dilation, std::vector<int64_t> padding, std::vector<int64_t> stride);
RcppExport SEXP _torch_cpp_torch_namespace_im2col_backward_grad_output_Tensor_input_size_IntArrayRef_kernel_size_IntArrayRef_dilation_IntArrayRef_padding_IntArrayRef_stride_IntArrayRef(SEXP grad_outputSEXP, SEXP input_sizeSEXP, SEXP kernel_sizeSEXP, SEXP dilationSEXP, SEXP paddingSEXP, SEXP strideSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type input_size(input_sizeSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type kernel_size(kernel_sizeSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type dilation(dilationSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type padding(paddingSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type stride(strideSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_im2col_backward_grad_output_Tensor_input_size_IntArrayRef_kernel_size_IntArrayRef_dilation_IntArrayRef_padding_IntArrayRef_stride_IntArrayRef(grad_output, input_size, kernel_size, dilation, padding, stride));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_isfinite_self_Tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_namespace_isfinite_self_Tensor(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_torch_namespace_isfinite_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_isfinite_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_generator
Rcpp::XPtr<torch::Generator *> cpp_torch_generator();
RcppExport SEXP _torch_cpp_torch_generator() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(cpp_torch_generator());
    return rcpp_result_gen;
END_RCPP
}
// cpp_generator_current_seed
Rcpp::NumericVector cpp_generator_current_seed(Rcpp::XPtr<torch::Generator *> generator);
RcppExport SEXP _torch_cpp_generator_current_seed(SEXP generatorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Generator *> >::type generator(generatorSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_generator_current_seed(generator));
    return rcpp_result_gen;
END_RCPP
}
// cpp_generator_set_current_seed
void cpp_generator_set_current_seed(Rcpp::XPtr<torch::Generator *> generator, std::uint64_t seed);
RcppExport SEXP _torch_cpp_generator_set_current_seed(SEXP generatorSEXP, SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Generator *> >::type generator(generatorSEXP);
    Rcpp::traits::input_parameter< std::uint64_t >::type seed(seedSEXP);
    cpp_generator_set_current_seed(generator, seed);
    return R_NilValue;
END_RCPP
}
// cpp_layout_to_string
std::string cpp_layout_to_string(Rcpp::XPtr<torch::Layout> layout_ptr);
RcppExport SEXP _torch_cpp_layout_to_string(SEXP layout_ptrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Layout> >::type layout_ptr(layout_ptrSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_layout_to_string(layout_ptr));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_strided
Rcpp::XPtr<torch::Layout> cpp_torch_strided();
RcppExport SEXP _torch_cpp_torch_strided() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(cpp_torch_strided());
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_sparse_coo
Rcpp::XPtr<torch::Layout> cpp_torch_sparse_coo();
RcppExport SEXP _torch_cpp_torch_sparse_coo() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(cpp_torch_sparse_coo());
    return rcpp_result_gen;
END_RCPP
}
// cpp_memory_format_to_string
std::string cpp_memory_format_to_string(Rcpp::XPtr<torch::MemoryFormat> x);
RcppExport SEXP _torch_cpp_memory_format_to_string(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::MemoryFormat> >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_memory_format_to_string(x));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_contiguous_format
Rcpp::XPtr<torch::MemoryFormat> cpp_torch_contiguous_format();
RcppExport SEXP _torch_cpp_torch_contiguous_format() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(cpp_torch_contiguous_format());
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_preserve_format
Rcpp::XPtr<torch::MemoryFormat> cpp_torch_preserve_format();
RcppExport SEXP _torch_cpp_torch_preserve_format() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(cpp_torch_preserve_format());
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_channels_last_format
Rcpp::XPtr<torch::MemoryFormat> cpp_torch_channels_last_format();
RcppExport SEXP _torch_cpp_torch_channels_last_format() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(cpp_torch_channels_last_format());
    return rcpp_result_gen;
END_RCPP
}
// cpp_qscheme_to_string
std::string cpp_qscheme_to_string(Rcpp::XPtr<torch::QScheme> x);
RcppExport SEXP _torch_cpp_qscheme_to_string(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::QScheme> >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_qscheme_to_string(x));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_per_channel_affine
Rcpp::XPtr<torch::QScheme> cpp_torch_per_channel_affine();
RcppExport SEXP _torch_cpp_torch_per_channel_affine() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(cpp_torch_per_channel_affine());
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_per_tensor_affine
Rcpp::XPtr<torch::QScheme> cpp_torch_per_tensor_affine();
RcppExport SEXP _torch_cpp_torch_per_tensor_affine() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(cpp_torch_per_tensor_affine());
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_per_channel_symmetric
Rcpp::XPtr<torch::QScheme> cpp_torch_per_channel_symmetric();
RcppExport SEXP _torch_cpp_torch_per_channel_symmetric() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(cpp_torch_per_channel_symmetric());
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_per_tensor_symmetric
Rcpp::XPtr<torch::QScheme> cpp_torch_per_tensor_symmetric();
RcppExport SEXP _torch_cpp_torch_per_tensor_symmetric() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(cpp_torch_per_tensor_symmetric());
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_reduction_mean
std::int64_t cpp_torch_reduction_mean();
RcppExport SEXP _torch_cpp_torch_reduction_mean() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(cpp_torch_reduction_mean());
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_reduction_none
std::int64_t cpp_torch_reduction_none();
RcppExport SEXP _torch_cpp_torch_reduction_none() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(cpp_torch_reduction_none());
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_reduction_sum
std::int64_t cpp_torch_reduction_sum();
RcppExport SEXP _torch_cpp_torch_reduction_sum() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(cpp_torch_reduction_sum());
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_scalar
Rcpp::XPtr<torch::Scalar> cpp_torch_scalar(SEXP x);
RcppExport SEXP _torch_cpp_torch_scalar(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_scalar(x));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_tensor
Rcpp::XPtr<torch::Tensor> cpp_torch_tensor(SEXP x, std::vector<std::int64_t> dim, Rcpp::XPtr<torch::TensorOptions> options, bool requires_grad);
RcppExport SEXP _torch_cpp_torch_tensor(SEXP xSEXP, SEXP dimSEXP, SEXP optionsSEXP, SEXP requires_gradSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::vector<std::int64_t> >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::TensorOptions> >::type options(optionsSEXP);
    Rcpp::traits::input_parameter< bool >::type requires_grad(requires_gradSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_tensor(x, dim, options, requires_grad));
    return rcpp_result_gen;
END_RCPP
}
// cpp_as_array
Rcpp::List cpp_as_array(Rcpp::XPtr<torch::Tensor> x);
RcppExport SEXP _torch_cpp_as_array(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_as_array(x));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_tensor_print
void cpp_torch_tensor_print(Rcpp::XPtr<torch::Tensor> x);
RcppExport SEXP _torch_cpp_torch_tensor_print(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    cpp_torch_tensor_print(x);
    return R_NilValue;
END_RCPP
}
// cpp_torch_tensor_list
Rcpp::XPtr<std::vector<torch::Tensor>> cpp_torch_tensor_list(const Rcpp::List& x);
RcppExport SEXP _torch_cpp_torch_tensor_list(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_tensor_list(x));
    return rcpp_result_gen;
END_RCPP
}
// cpp_tensor_list_to_r_list
Rcpp::List cpp_tensor_list_to_r_list(Rcpp::XPtr<std::vector<torch::Tensor>> x);
RcppExport SEXP _torch_cpp_tensor_list_to_r_list(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::vector<torch::Tensor>> >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_tensor_list_to_r_list(x));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_tensor_options
Rcpp::XPtr<torch::TensorOptions> cpp_torch_tensor_options(Rcpp::Nullable<Rcpp::XPtr<torch::Dtype>> dtype_ptr, Rcpp::Nullable<Rcpp::XPtr<torch::Layout>> layout_ptr, Rcpp::Nullable<Rcpp::XPtr<torch::Device>> device_ptr, Rcpp::Nullable<bool> requires_grad, Rcpp::Nullable<bool> pinned_memory);
RcppExport SEXP _torch_cpp_torch_tensor_options(SEXP dtype_ptrSEXP, SEXP layout_ptrSEXP, SEXP device_ptrSEXP, SEXP requires_gradSEXP, SEXP pinned_memorySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::XPtr<torch::Dtype>> >::type dtype_ptr(dtype_ptrSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::XPtr<torch::Layout>> >::type layout_ptr(layout_ptrSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::XPtr<torch::Device>> >::type device_ptr(device_ptrSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<bool> >::type requires_grad(requires_gradSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<bool> >::type pinned_memory(pinned_memorySEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_tensor_options(dtype_ptr, layout_ptr, device_ptr, requires_grad, pinned_memory));
    return rcpp_result_gen;
END_RCPP
}
// cpp_nullptr
Rcpp::XPtr<std::nullptr_t> cpp_nullptr();
RcppExport SEXP _torch_cpp_nullptr() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(cpp_nullptr());
    return rcpp_result_gen;
END_RCPP
}
// cpp_nullopt
Rcpp::XPtr<c10::nullopt_t> cpp_nullopt();
RcppExport SEXP _torch_cpp_nullopt() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(cpp_nullopt());
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_torch_cpp_device_type_to_string", (DL_FUNC) &_torch_cpp_device_type_to_string, 1},
    {"_torch_cpp_device_index_to_int", (DL_FUNC) &_torch_cpp_device_index_to_int, 1},
    {"_torch_cpp_torch_device", (DL_FUNC) &_torch_cpp_torch_device, 2},
    {"_torch_get_device_index", (DL_FUNC) &_torch_get_device_index, 1},
    {"_torch_get_device_type", (DL_FUNC) &_torch_get_device_type, 1},
    {"_torch_device_has_index", (DL_FUNC) &_torch_device_has_index, 1},
    {"_torch_device_is_cuda", (DL_FUNC) &_torch_device_is_cuda, 1},
    {"_torch_device_is_cpu", (DL_FUNC) &_torch_device_is_cpu, 1},
    {"_torch_device_equals", (DL_FUNC) &_torch_device_equals, 2},
    {"_torch_device_set_index", (DL_FUNC) &_torch_device_set_index, 2},
    {"_torch_device_from_r", (DL_FUNC) &_torch_device_from_r, 2},
    {"_torch_cpp_torch_dimname", (DL_FUNC) &_torch_cpp_torch_dimname, 1},
    {"_torch_cpp_torch_dimname_list", (DL_FUNC) &_torch_cpp_torch_dimname_list, 1},
    {"_torch_cpp_dimname_to_string", (DL_FUNC) &_torch_cpp_dimname_to_string, 1},
    {"_torch_cpp_dimname_list_to_string", (DL_FUNC) &_torch_cpp_dimname_list_to_string, 1},
    {"_torch_cpp_dtype_to_string", (DL_FUNC) &_torch_cpp_dtype_to_string, 1},
    {"_torch_cpp_torch_float32", (DL_FUNC) &_torch_cpp_torch_float32, 0},
    {"_torch_cpp_torch_float64", (DL_FUNC) &_torch_cpp_torch_float64, 0},
    {"_torch_cpp_torch_float16", (DL_FUNC) &_torch_cpp_torch_float16, 0},
    {"_torch_cpp_torch_uint8", (DL_FUNC) &_torch_cpp_torch_uint8, 0},
    {"_torch_cpp_torch_int8", (DL_FUNC) &_torch_cpp_torch_int8, 0},
    {"_torch_cpp_torch_int16", (DL_FUNC) &_torch_cpp_torch_int16, 0},
    {"_torch_cpp_torch_int32", (DL_FUNC) &_torch_cpp_torch_int32, 0},
    {"_torch_cpp_torch_int64", (DL_FUNC) &_torch_cpp_torch_int64, 0},
    {"_torch_cpp_torch_bool", (DL_FUNC) &_torch_cpp_torch_bool, 0},
    {"_torch_cpp_torch_method_backward_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_backward_self_Tensor, 4},
    {"_torch_cpp_torch_method_set_data_self_Tensor_new_data_Tensor", (DL_FUNC) &_torch_cpp_torch_method_set_data_self_Tensor_new_data_Tensor, 2},
    {"_torch_cpp_torch_method_data_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_data_self_Tensor, 1},
    {"_torch_cpp_torch_method_is_leaf_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_is_leaf_self_Tensor, 1},
    {"_torch_cpp_torch_method_output_nr_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_output_nr_self_Tensor, 1},
    {"_torch_cpp_torch_method__version_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method__version_self_Tensor, 1},
    {"_torch_cpp_torch_method_requires_grad__self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_requires_grad__self_Tensor, 2},
    {"_torch_cpp_torch_method_rename__self_Tensor_names_DimnameList", (DL_FUNC) &_torch_cpp_torch_method_rename__self_Tensor_names_DimnameList, 2},
    {"_torch_cpp_torch_method_rename_self_Tensor_names_DimnameList", (DL_FUNC) &_torch_cpp_torch_method_rename_self_Tensor_names_DimnameList, 2},
    {"_torch_cpp_torch_method_align_to_self_Tensor_names_DimnameList", (DL_FUNC) &_torch_cpp_torch_method_align_to_self_Tensor_names_DimnameList, 2},
    {"_torch_cpp_torch_method_align_to_self_Tensor_order_DimnameList_ellipsis_idx_int64_t", (DL_FUNC) &_torch_cpp_torch_method_align_to_self_Tensor_order_DimnameList_ellipsis_idx_int64_t, 3},
    {"_torch_cpp_torch_method_align_as_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_method_align_as_self_Tensor_other_Tensor, 2},
    {"_torch_cpp_torch_method_refine_names_self_Tensor_names_DimnameList", (DL_FUNC) &_torch_cpp_torch_method_refine_names_self_Tensor_names_DimnameList, 2},
    {"_torch_cpp_torch_method_unflatten_self_Tensor_dim_Dimname_sizes_IntArrayRef_names_DimnameList", (DL_FUNC) &_torch_cpp_torch_method_unflatten_self_Tensor_dim_Dimname_sizes_IntArrayRef_names_DimnameList, 4},
    {"_torch_cpp_torch_method_unflatten_self_Tensor_dim_int64_t_sizes_IntArrayRef_names_DimnameList", (DL_FUNC) &_torch_cpp_torch_method_unflatten_self_Tensor_dim_int64_t_sizes_IntArrayRef_names_DimnameList, 4},
    {"_torch_cpp_torch_method_abs_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_abs_self_Tensor, 1},
    {"_torch_cpp_torch_method_abs__self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_abs__self_Tensor, 1},
    {"_torch_cpp_torch_method_angle_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_angle_self_Tensor, 1},
    {"_torch_cpp_torch_method_real_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_real_self_Tensor, 1},
    {"_torch_cpp_torch_method_imag_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_imag_self_Tensor, 1},
    {"_torch_cpp_torch_method_conj_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_conj_self_Tensor, 1},
    {"_torch_cpp_torch_method_acos_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_acos_self_Tensor, 1},
    {"_torch_cpp_torch_method_acos__self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_acos__self_Tensor, 1},
    {"_torch_cpp_torch_method_add_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_method_add_self_Tensor_other_Tensor, 3},
    {"_torch_cpp_torch_method_add__self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_method_add__self_Tensor_other_Tensor, 3},
    {"_torch_cpp_torch_method_add_self_Tensor_other_Scalar", (DL_FUNC) &_torch_cpp_torch_method_add_self_Tensor_other_Scalar, 3},
    {"_torch_cpp_torch_method_add__self_Tensor_other_Scalar", (DL_FUNC) &_torch_cpp_torch_method_add__self_Tensor_other_Scalar, 3},
    {"_torch_cpp_torch_method_addmv_self_Tensor_mat_Tensor_vec_Tensor", (DL_FUNC) &_torch_cpp_torch_method_addmv_self_Tensor_mat_Tensor_vec_Tensor, 5},
    {"_torch_cpp_torch_method_addmv__self_Tensor_mat_Tensor_vec_Tensor", (DL_FUNC) &_torch_cpp_torch_method_addmv__self_Tensor_mat_Tensor_vec_Tensor, 5},
    {"_torch_cpp_torch_method_addr_self_Tensor_vec1_Tensor_vec2_Tensor", (DL_FUNC) &_torch_cpp_torch_method_addr_self_Tensor_vec1_Tensor_vec2_Tensor, 5},
    {"_torch_cpp_torch_method_addr__self_Tensor_vec1_Tensor_vec2_Tensor", (DL_FUNC) &_torch_cpp_torch_method_addr__self_Tensor_vec1_Tensor_vec2_Tensor, 5},
    {"_torch_cpp_torch_method_all_self_Tensor_dim_int64_t", (DL_FUNC) &_torch_cpp_torch_method_all_self_Tensor_dim_int64_t, 3},
    {"_torch_cpp_torch_method_all_self_Tensor_dim_Dimname", (DL_FUNC) &_torch_cpp_torch_method_all_self_Tensor_dim_Dimname, 3},
    {"_torch_cpp_torch_method_allclose_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_method_allclose_self_Tensor_other_Tensor, 5},
    {"_torch_cpp_torch_method_any_self_Tensor_dim_int64_t", (DL_FUNC) &_torch_cpp_torch_method_any_self_Tensor_dim_int64_t, 3},
    {"_torch_cpp_torch_method_any_self_Tensor_dim_Dimname", (DL_FUNC) &_torch_cpp_torch_method_any_self_Tensor_dim_Dimname, 3},
    {"_torch_cpp_torch_method_argmax_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_argmax_self_Tensor, 3},
    {"_torch_cpp_torch_method_argmin_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_argmin_self_Tensor, 3},
    {"_torch_cpp_torch_method_as_strided_self_Tensor_size_IntArrayRef_stride_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_method_as_strided_self_Tensor_size_IntArrayRef_stride_IntArrayRef, 4},
    {"_torch_cpp_torch_method_as_strided__self_Tensor_size_IntArrayRef_stride_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_method_as_strided__self_Tensor_size_IntArrayRef_stride_IntArrayRef, 4},
    {"_torch_cpp_torch_method_asin_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_asin_self_Tensor, 1},
    {"_torch_cpp_torch_method_asin__self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_asin__self_Tensor, 1},
    {"_torch_cpp_torch_method_atan_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_atan_self_Tensor, 1},
    {"_torch_cpp_torch_method_atan__self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_atan__self_Tensor, 1},
    {"_torch_cpp_torch_method_baddbmm_self_Tensor_batch1_Tensor_batch2_Tensor", (DL_FUNC) &_torch_cpp_torch_method_baddbmm_self_Tensor_batch1_Tensor_batch2_Tensor, 5},
    {"_torch_cpp_torch_method_baddbmm__self_Tensor_batch1_Tensor_batch2_Tensor", (DL_FUNC) &_torch_cpp_torch_method_baddbmm__self_Tensor_batch1_Tensor_batch2_Tensor, 5},
    {"_torch_cpp_torch_method_bernoulli_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_bernoulli_self_Tensor, 2},
    {"_torch_cpp_torch_method_bernoulli__self_Tensor_p_Tensor", (DL_FUNC) &_torch_cpp_torch_method_bernoulli__self_Tensor_p_Tensor, 3},
    {"_torch_cpp_torch_method_bernoulli__self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_bernoulli__self_Tensor, 3},
    {"_torch_cpp_torch_method_bernoulli_self_Tensor_p_double", (DL_FUNC) &_torch_cpp_torch_method_bernoulli_self_Tensor_p_double, 3},
    {"_torch_cpp_torch_method_bincount_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_bincount_self_Tensor, 3},
    {"_torch_cpp_torch_method_bitwise_not_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_bitwise_not_self_Tensor, 1},
    {"_torch_cpp_torch_method_bitwise_not__self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_bitwise_not__self_Tensor, 1},
    {"_torch_cpp_torch_method_logical_not_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_logical_not_self_Tensor, 1},
    {"_torch_cpp_torch_method_logical_not__self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_logical_not__self_Tensor, 1},
    {"_torch_cpp_torch_method_logical_xor_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_method_logical_xor_self_Tensor_other_Tensor, 2},
    {"_torch_cpp_torch_method_logical_xor__self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_method_logical_xor__self_Tensor_other_Tensor, 2},
    {"_torch_cpp_torch_method_bmm_self_Tensor_mat2_Tensor", (DL_FUNC) &_torch_cpp_torch_method_bmm_self_Tensor_mat2_Tensor, 2},
    {"_torch_cpp_torch_method_ceil_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_ceil_self_Tensor, 1},
    {"_torch_cpp_torch_method_ceil__self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_ceil__self_Tensor, 1},
    {"_torch_cpp_torch_method_chunk_self_Tensor_chunks_int64_t", (DL_FUNC) &_torch_cpp_torch_method_chunk_self_Tensor_chunks_int64_t, 3},
    {"_torch_cpp_torch_method_clamp_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_clamp_self_Tensor, 3},
    {"_torch_cpp_torch_method_clamp__self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_clamp__self_Tensor, 3},
    {"_torch_cpp_torch_method_clamp_max_self_Tensor_max_Scalar", (DL_FUNC) &_torch_cpp_torch_method_clamp_max_self_Tensor_max_Scalar, 2},
    {"_torch_cpp_torch_method_clamp_max__self_Tensor_max_Scalar", (DL_FUNC) &_torch_cpp_torch_method_clamp_max__self_Tensor_max_Scalar, 2},
    {"_torch_cpp_torch_method_clamp_min_self_Tensor_min_Scalar", (DL_FUNC) &_torch_cpp_torch_method_clamp_min_self_Tensor_min_Scalar, 2},
    {"_torch_cpp_torch_method_clamp_min__self_Tensor_min_Scalar", (DL_FUNC) &_torch_cpp_torch_method_clamp_min__self_Tensor_min_Scalar, 2},
    {"_torch_cpp_torch_method_contiguous_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_contiguous_self_Tensor, 2},
    {"_torch_cpp_torch_method_copy__self_Tensor_src_Tensor", (DL_FUNC) &_torch_cpp_torch_method_copy__self_Tensor_src_Tensor, 3},
    {"_torch_cpp_torch_method_cos_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_cos_self_Tensor, 1},
    {"_torch_cpp_torch_method_cos__self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_cos__self_Tensor, 1},
    {"_torch_cpp_torch_method_cosh_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_cosh_self_Tensor, 1},
    {"_torch_cpp_torch_method_cosh__self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_cosh__self_Tensor, 1},
    {"_torch_cpp_torch_method_cumsum_self_Tensor_dim_int64_t", (DL_FUNC) &_torch_cpp_torch_method_cumsum_self_Tensor_dim_int64_t, 3},
    {"_torch_cpp_torch_method_cumsum_self_Tensor_dim_Dimname", (DL_FUNC) &_torch_cpp_torch_method_cumsum_self_Tensor_dim_Dimname, 3},
    {"_torch_cpp_torch_method_cumprod_self_Tensor_dim_int64_t", (DL_FUNC) &_torch_cpp_torch_method_cumprod_self_Tensor_dim_int64_t, 3},
    {"_torch_cpp_torch_method_cumprod_self_Tensor_dim_Dimname", (DL_FUNC) &_torch_cpp_torch_method_cumprod_self_Tensor_dim_Dimname, 3},
    {"_torch_cpp_torch_method_det_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_det_self_Tensor, 1},
    {"_torch_cpp_torch_method_diag_embed_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_diag_embed_self_Tensor, 4},
    {"_torch_cpp_torch_method_diagflat_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_diagflat_self_Tensor, 2},
    {"_torch_cpp_torch_method_diagonal_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_diagonal_self_Tensor, 4},
    {"_torch_cpp_torch_method_fill_diagonal__self_Tensor_fill_value_Scalar", (DL_FUNC) &_torch_cpp_torch_method_fill_diagonal__self_Tensor_fill_value_Scalar, 3},
    {"_torch_cpp_torch_method_div_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_method_div_self_Tensor_other_Tensor, 2},
    {"_torch_cpp_torch_method_div__self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_method_div__self_Tensor_other_Tensor, 2},
    {"_torch_cpp_torch_method_div_self_Tensor_other_Scalar", (DL_FUNC) &_torch_cpp_torch_method_div_self_Tensor_other_Scalar, 2},
    {"_torch_cpp_torch_method_div__self_Tensor_other_Scalar", (DL_FUNC) &_torch_cpp_torch_method_div__self_Tensor_other_Scalar, 2},
    {"_torch_cpp_torch_method_dot_self_Tensor_tensor_Tensor", (DL_FUNC) &_torch_cpp_torch_method_dot_self_Tensor_tensor_Tensor, 2},
    {"_torch_cpp_torch_method_new_empty_self_Tensor_size_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_method_new_empty_self_Tensor_size_IntArrayRef, 3},
    {"_torch_cpp_torch_method_new_full_self_Tensor_size_IntArrayRef_fill_value_Scalar", (DL_FUNC) &_torch_cpp_torch_method_new_full_self_Tensor_size_IntArrayRef_fill_value_Scalar, 4},
    {"_torch_cpp_torch_method_new_zeros_self_Tensor_size_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_method_new_zeros_self_Tensor_size_IntArrayRef, 3},
    {"_torch_cpp_torch_method_resize__self_Tensor_size_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_method_resize__self_Tensor_size_IntArrayRef, 3},
    {"_torch_cpp_torch_method_erf_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_erf_self_Tensor, 1},
    {"_torch_cpp_torch_method_erf__self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_erf__self_Tensor, 1},
    {"_torch_cpp_torch_method_erfc_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_erfc_self_Tensor, 1},
    {"_torch_cpp_torch_method_erfc__self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_erfc__self_Tensor, 1},
    {"_torch_cpp_torch_method_exp_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_exp_self_Tensor, 1},
    {"_torch_cpp_torch_method_exp__self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_exp__self_Tensor, 1},
    {"_torch_cpp_torch_method_expm1_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_expm1_self_Tensor, 1},
    {"_torch_cpp_torch_method_expm1__self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_expm1__self_Tensor, 1},
    {"_torch_cpp_torch_method_expand_self_Tensor_size_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_method_expand_self_Tensor_size_IntArrayRef, 3},
    {"_torch_cpp_torch_method_expand_as_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_method_expand_as_self_Tensor_other_Tensor, 2},
    {"_torch_cpp_torch_method_flatten_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_flatten_self_Tensor, 3},
    {"_torch_cpp_torch_method_flatten_self_Tensor_start_dim_int64_t_end_dim_int64_t_out_dim_Dimname", (DL_FUNC) &_torch_cpp_torch_method_flatten_self_Tensor_start_dim_int64_t_end_dim_int64_t_out_dim_Dimname, 4},
    {"_torch_cpp_torch_method_flatten_self_Tensor_start_dim_Dimname_end_dim_Dimname_out_dim_Dimname", (DL_FUNC) &_torch_cpp_torch_method_flatten_self_Tensor_start_dim_Dimname_end_dim_Dimname_out_dim_Dimname, 4},
    {"_torch_cpp_torch_method_flatten_self_Tensor_dims_DimnameList_out_dim_Dimname", (DL_FUNC) &_torch_cpp_torch_method_flatten_self_Tensor_dims_DimnameList_out_dim_Dimname, 3},
    {"_torch_cpp_torch_method_fill__self_Tensor_value_Scalar", (DL_FUNC) &_torch_cpp_torch_method_fill__self_Tensor_value_Scalar, 2},
    {"_torch_cpp_torch_method_fill__self_Tensor_value_Tensor", (DL_FUNC) &_torch_cpp_torch_method_fill__self_Tensor_value_Tensor, 2},
    {"_torch_cpp_torch_method_floor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_floor_self_Tensor, 1},
    {"_torch_cpp_torch_method_floor__self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_floor__self_Tensor, 1},
    {"_torch_cpp_torch_method_frac_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_frac_self_Tensor, 1},
    {"_torch_cpp_torch_method_frac__self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_frac__self_Tensor, 1},
    {"_torch_cpp_torch_method_ger_self_Tensor_vec2_Tensor", (DL_FUNC) &_torch_cpp_torch_method_ger_self_Tensor_vec2_Tensor, 2},
    {"_torch_cpp_torch_method_fft_self_Tensor_signal_ndim_int64_t", (DL_FUNC) &_torch_cpp_torch_method_fft_self_Tensor_signal_ndim_int64_t, 3},
    {"_torch_cpp_torch_method_ifft_self_Tensor_signal_ndim_int64_t", (DL_FUNC) &_torch_cpp_torch_method_ifft_self_Tensor_signal_ndim_int64_t, 3},
    {"_torch_cpp_torch_method_rfft_self_Tensor_signal_ndim_int64_t", (DL_FUNC) &_torch_cpp_torch_method_rfft_self_Tensor_signal_ndim_int64_t, 4},
    {"_torch_cpp_torch_method_irfft_self_Tensor_signal_ndim_int64_t", (DL_FUNC) &_torch_cpp_torch_method_irfft_self_Tensor_signal_ndim_int64_t, 5},
    {"_torch_cpp_torch_method_index_self_Tensor_indices_TensorList", (DL_FUNC) &_torch_cpp_torch_method_index_self_Tensor_indices_TensorList, 2},
    {"_torch_cpp_torch_method_index_copy__self_Tensor_dim_int64_t_index_Tensor_source_Tensor", (DL_FUNC) &_torch_cpp_torch_method_index_copy__self_Tensor_dim_int64_t_index_Tensor_source_Tensor, 4},
    {"_torch_cpp_torch_method_index_copy_self_Tensor_dim_int64_t_index_Tensor_source_Tensor", (DL_FUNC) &_torch_cpp_torch_method_index_copy_self_Tensor_dim_int64_t_index_Tensor_source_Tensor, 4},
    {"_torch_cpp_torch_method_index_copy__self_Tensor_dim_Dimname_index_Tensor_source_Tensor", (DL_FUNC) &_torch_cpp_torch_method_index_copy__self_Tensor_dim_Dimname_index_Tensor_source_Tensor, 4},
    {"_torch_cpp_torch_method_index_copy_self_Tensor_dim_Dimname_index_Tensor_source_Tensor", (DL_FUNC) &_torch_cpp_torch_method_index_copy_self_Tensor_dim_Dimname_index_Tensor_source_Tensor, 4},
    {"_torch_cpp_torch_method_index_put__self_Tensor_indices_TensorList_values_Tensor", (DL_FUNC) &_torch_cpp_torch_method_index_put__self_Tensor_indices_TensorList_values_Tensor, 4},
    {"_torch_cpp_torch_method_index_put_self_Tensor_indices_TensorList_values_Tensor", (DL_FUNC) &_torch_cpp_torch_method_index_put_self_Tensor_indices_TensorList_values_Tensor, 4},
    {"_torch_cpp_torch_method_inverse_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_inverse_self_Tensor, 1},
    {"_torch_cpp_torch_method_isclose_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_method_isclose_self_Tensor_other_Tensor, 5},
    {"_torch_cpp_torch_method_is_distributed_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_is_distributed_self_Tensor, 1},
    {"_torch_cpp_torch_method_is_floating_point_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_is_floating_point_self_Tensor, 1},
    {"_torch_cpp_torch_method_is_complex_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_is_complex_self_Tensor, 1},
    {"_torch_cpp_torch_method_is_nonzero_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_is_nonzero_self_Tensor, 1},
    {"_torch_cpp_torch_method_is_same_size_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_method_is_same_size_self_Tensor_other_Tensor, 2},
    {"_torch_cpp_torch_method_is_signed_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_is_signed_self_Tensor, 1},
    {"_torch_cpp_torch_method_kthvalue_self_Tensor_k_int64_t", (DL_FUNC) &_torch_cpp_torch_method_kthvalue_self_Tensor_k_int64_t, 4},
    {"_torch_cpp_torch_method_kthvalue_self_Tensor_k_int64_t_dim_Dimname", (DL_FUNC) &_torch_cpp_torch_method_kthvalue_self_Tensor_k_int64_t_dim_Dimname, 4},
    {"_torch_cpp_torch_method_log_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_log_self_Tensor, 1},
    {"_torch_cpp_torch_method_log__self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_log__self_Tensor, 1},
    {"_torch_cpp_torch_method_log10_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_log10_self_Tensor, 1},
    {"_torch_cpp_torch_method_log10__self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_log10__self_Tensor, 1},
    {"_torch_cpp_torch_method_log1p_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_log1p_self_Tensor, 1},
    {"_torch_cpp_torch_method_log1p__self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_log1p__self_Tensor, 1},
    {"_torch_cpp_torch_method_log2_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_log2_self_Tensor, 1},
    {"_torch_cpp_torch_method_log2__self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_log2__self_Tensor, 1},
    {"_torch_cpp_torch_method_logdet_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_logdet_self_Tensor, 1},
    {"_torch_cpp_torch_method_log_softmax_self_Tensor_dim_int64_t", (DL_FUNC) &_torch_cpp_torch_method_log_softmax_self_Tensor_dim_int64_t, 3},
    {"_torch_cpp_torch_method_log_softmax_self_Tensor_dim_Dimname", (DL_FUNC) &_torch_cpp_torch_method_log_softmax_self_Tensor_dim_Dimname, 3},
    {"_torch_cpp_torch_method_logsumexp_self_Tensor_dim_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_method_logsumexp_self_Tensor_dim_IntArrayRef, 3},
    {"_torch_cpp_torch_method_logsumexp_self_Tensor_dim_DimnameList", (DL_FUNC) &_torch_cpp_torch_method_logsumexp_self_Tensor_dim_DimnameList, 3},
    {"_torch_cpp_torch_method_matmul_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_method_matmul_self_Tensor_other_Tensor, 2},
    {"_torch_cpp_torch_method_matrix_power_self_Tensor_n_int64_t", (DL_FUNC) &_torch_cpp_torch_method_matrix_power_self_Tensor_n_int64_t, 2},
    {"_torch_cpp_torch_method_max_self_Tensor_dim_int64_t", (DL_FUNC) &_torch_cpp_torch_method_max_self_Tensor_dim_int64_t, 3},
    {"_torch_cpp_torch_method_max_values_self_Tensor_dim_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_method_max_values_self_Tensor_dim_IntArrayRef, 3},
    {"_torch_cpp_torch_method_max_self_Tensor_dim_Dimname", (DL_FUNC) &_torch_cpp_torch_method_max_self_Tensor_dim_Dimname, 3},
    {"_torch_cpp_torch_method_max_values_self_Tensor_dim_DimnameList", (DL_FUNC) &_torch_cpp_torch_method_max_values_self_Tensor_dim_DimnameList, 3},
    {"_torch_cpp_torch_method_mean_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_mean_self_Tensor, 2},
    {"_torch_cpp_torch_method_mean_self_Tensor_dim_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_method_mean_self_Tensor_dim_IntArrayRef, 4},
    {"_torch_cpp_torch_method_mean_self_Tensor_dim_DimnameList", (DL_FUNC) &_torch_cpp_torch_method_mean_self_Tensor_dim_DimnameList, 4},
    {"_torch_cpp_torch_method_median_self_Tensor_dim_int64_t", (DL_FUNC) &_torch_cpp_torch_method_median_self_Tensor_dim_int64_t, 3},
    {"_torch_cpp_torch_method_median_self_Tensor_dim_Dimname", (DL_FUNC) &_torch_cpp_torch_method_median_self_Tensor_dim_Dimname, 3},
    {"_torch_cpp_torch_method_min_self_Tensor_dim_int64_t", (DL_FUNC) &_torch_cpp_torch_method_min_self_Tensor_dim_int64_t, 3},
    {"_torch_cpp_torch_method_min_values_self_Tensor_dim_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_method_min_values_self_Tensor_dim_IntArrayRef, 3},
    {"_torch_cpp_torch_method_min_self_Tensor_dim_Dimname", (DL_FUNC) &_torch_cpp_torch_method_min_self_Tensor_dim_Dimname, 3},
    {"_torch_cpp_torch_method_min_values_self_Tensor_dim_DimnameList", (DL_FUNC) &_torch_cpp_torch_method_min_values_self_Tensor_dim_DimnameList, 3},
    {"_torch_cpp_torch_method_mm_self_Tensor_mat2_Tensor", (DL_FUNC) &_torch_cpp_torch_method_mm_self_Tensor_mat2_Tensor, 2},
    {"_torch_cpp_torch_method_mode_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_mode_self_Tensor, 3},
    {"_torch_cpp_torch_method_mode_self_Tensor_dim_Dimname", (DL_FUNC) &_torch_cpp_torch_method_mode_self_Tensor_dim_Dimname, 3},
    {"_torch_cpp_torch_method_mul_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_method_mul_self_Tensor_other_Tensor, 2},
    {"_torch_cpp_torch_method_mul__self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_method_mul__self_Tensor_other_Tensor, 2},
    {"_torch_cpp_torch_method_mul_self_Tensor_other_Scalar", (DL_FUNC) &_torch_cpp_torch_method_mul_self_Tensor_other_Scalar, 2},
    {"_torch_cpp_torch_method_mul__self_Tensor_other_Scalar", (DL_FUNC) &_torch_cpp_torch_method_mul__self_Tensor_other_Scalar, 2},
    {"_torch_cpp_torch_method_mv_self_Tensor_vec_Tensor", (DL_FUNC) &_torch_cpp_torch_method_mv_self_Tensor_vec_Tensor, 2},
    {"_torch_cpp_torch_method_mvlgamma_self_Tensor_p_int64_t", (DL_FUNC) &_torch_cpp_torch_method_mvlgamma_self_Tensor_p_int64_t, 2},
    {"_torch_cpp_torch_method_mvlgamma__self_Tensor_p_int64_t", (DL_FUNC) &_torch_cpp_torch_method_mvlgamma__self_Tensor_p_int64_t, 2},
    {"_torch_cpp_torch_method_narrow_copy_self_Tensor_dim_int64_t_start_int64_t_length_int64_t", (DL_FUNC) &_torch_cpp_torch_method_narrow_copy_self_Tensor_dim_int64_t_start_int64_t_length_int64_t, 4},
    {"_torch_cpp_torch_method_narrow_self_Tensor_dim_int64_t_start_int64_t_length_int64_t", (DL_FUNC) &_torch_cpp_torch_method_narrow_self_Tensor_dim_int64_t_start_int64_t_length_int64_t, 4},
    {"_torch_cpp_torch_method_permute_self_Tensor_dims_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_method_permute_self_Tensor_dims_IntArrayRef, 2},
    {"_torch_cpp_torch_method_numpy_T_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_numpy_T_self_Tensor, 1},
    {"_torch_cpp_torch_method_is_pinned_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_is_pinned_self_Tensor, 1},
    {"_torch_cpp_torch_method_pin_memory_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_pin_memory_self_Tensor, 1},
    {"_torch_cpp_torch_method_pinverse_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_pinverse_self_Tensor, 2},
    {"_torch_cpp_torch_method_reciprocal_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_reciprocal_self_Tensor, 1},
    {"_torch_cpp_torch_method_reciprocal__self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_reciprocal__self_Tensor, 1},
    {"_torch_cpp_torch_method_neg_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_neg_self_Tensor, 1},
    {"_torch_cpp_torch_method_neg__self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_neg__self_Tensor, 1},
    {"_torch_cpp_torch_method_repeat_self_Tensor_repeats_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_method_repeat_self_Tensor_repeats_IntArrayRef, 2},
    {"_torch_cpp_torch_method_repeat_interleave_self_Tensor_repeats_Tensor", (DL_FUNC) &_torch_cpp_torch_method_repeat_interleave_self_Tensor_repeats_Tensor, 3},
    {"_torch_cpp_torch_method_repeat_interleave_self_Tensor_repeats_int64_t", (DL_FUNC) &_torch_cpp_torch_method_repeat_interleave_self_Tensor_repeats_int64_t, 3},
    {"_torch_cpp_torch_method_reshape_self_Tensor_shape_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_method_reshape_self_Tensor_shape_IntArrayRef, 2},
    {"_torch_cpp_torch_method_reshape_as_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_method_reshape_as_self_Tensor_other_Tensor, 2},
    {"_torch_cpp_torch_method_round_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_round_self_Tensor, 1},
    {"_torch_cpp_torch_method_round__self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_round__self_Tensor, 1},
    {"_torch_cpp_torch_method_relu_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_relu_self_Tensor, 1},
    {"_torch_cpp_torch_method_relu__self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_relu__self_Tensor, 1},
    {"_torch_cpp_torch_method_prelu_self_Tensor_weight_Tensor", (DL_FUNC) &_torch_cpp_torch_method_prelu_self_Tensor_weight_Tensor, 2},
    {"_torch_cpp_torch_method_prelu_backward_grad_output_Tensor_self_Tensor_weight_Tensor", (DL_FUNC) &_torch_cpp_torch_method_prelu_backward_grad_output_Tensor_self_Tensor_weight_Tensor, 3},
    {"_torch_cpp_torch_method_hardshrink_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_hardshrink_self_Tensor, 2},
    {"_torch_cpp_torch_method_hardshrink_backward_grad_out_Tensor_self_Tensor_lambd_Scalar", (DL_FUNC) &_torch_cpp_torch_method_hardshrink_backward_grad_out_Tensor_self_Tensor_lambd_Scalar, 3},
    {"_torch_cpp_torch_method_rsqrt_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_rsqrt_self_Tensor, 1},
    {"_torch_cpp_torch_method_rsqrt__self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_rsqrt__self_Tensor, 1},
    {"_torch_cpp_torch_method_select_self_Tensor_dim_Dimname_index_int64_t", (DL_FUNC) &_torch_cpp_torch_method_select_self_Tensor_dim_Dimname_index_int64_t, 3},
    {"_torch_cpp_torch_method_select_self_Tensor_dim_int64_t_index_int64_t", (DL_FUNC) &_torch_cpp_torch_method_select_self_Tensor_dim_int64_t_index_int64_t, 3},
    {"_torch_cpp_torch_method_sigmoid_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_sigmoid_self_Tensor, 1},
    {"_torch_cpp_torch_method_sigmoid__self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_sigmoid__self_Tensor, 1},
    {"_torch_cpp_torch_method_sin_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_sin_self_Tensor, 1},
    {"_torch_cpp_torch_method_sin__self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_sin__self_Tensor, 1},
    {"_torch_cpp_torch_method_sinh_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_sinh_self_Tensor, 1},
    {"_torch_cpp_torch_method_sinh__self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_sinh__self_Tensor, 1},
    {"_torch_cpp_torch_method_detach_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_detach_self_Tensor, 1},
    {"_torch_cpp_torch_method_detach__self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_detach__self_Tensor, 1},
    {"_torch_cpp_torch_method_size_self_Tensor_dim_int64_t", (DL_FUNC) &_torch_cpp_torch_method_size_self_Tensor_dim_int64_t, 2},
    {"_torch_cpp_torch_method_size_self_Tensor_dim_Dimname", (DL_FUNC) &_torch_cpp_torch_method_size_self_Tensor_dim_Dimname, 2},
    {"_torch_cpp_torch_method_slice_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_slice_self_Tensor, 5},
    {"_torch_cpp_torch_method_slogdet_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_slogdet_self_Tensor, 1},
    {"_torch_cpp_torch_method_smm_self_Tensor_mat2_Tensor", (DL_FUNC) &_torch_cpp_torch_method_smm_self_Tensor_mat2_Tensor, 2},
    {"_torch_cpp_torch_method_softmax_self_Tensor_dim_int64_t", (DL_FUNC) &_torch_cpp_torch_method_softmax_self_Tensor_dim_int64_t, 3},
    {"_torch_cpp_torch_method_softmax_self_Tensor_dim_Dimname", (DL_FUNC) &_torch_cpp_torch_method_softmax_self_Tensor_dim_Dimname, 3},
    {"_torch_cpp_torch_method_split_self_Tensor_split_size_int64_t", (DL_FUNC) &_torch_cpp_torch_method_split_self_Tensor_split_size_int64_t, 3},
    {"_torch_cpp_torch_method_split_with_sizes_self_Tensor_split_sizes_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_method_split_with_sizes_self_Tensor_split_sizes_IntArrayRef, 3},
    {"_torch_cpp_torch_method_squeeze_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_squeeze_self_Tensor, 1},
    {"_torch_cpp_torch_method_squeeze_self_Tensor_dim_int64_t", (DL_FUNC) &_torch_cpp_torch_method_squeeze_self_Tensor_dim_int64_t, 2},
    {"_torch_cpp_torch_method_squeeze_self_Tensor_dim_Dimname", (DL_FUNC) &_torch_cpp_torch_method_squeeze_self_Tensor_dim_Dimname, 2},
    {"_torch_cpp_torch_method_squeeze__self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_squeeze__self_Tensor, 1},
    {"_torch_cpp_torch_method_squeeze__self_Tensor_dim_int64_t", (DL_FUNC) &_torch_cpp_torch_method_squeeze__self_Tensor_dim_int64_t, 2},
    {"_torch_cpp_torch_method_squeeze__self_Tensor_dim_Dimname", (DL_FUNC) &_torch_cpp_torch_method_squeeze__self_Tensor_dim_Dimname, 2},
    {"_torch_cpp_torch_method_sspaddmm_self_Tensor_mat1_Tensor_mat2_Tensor", (DL_FUNC) &_torch_cpp_torch_method_sspaddmm_self_Tensor_mat1_Tensor_mat2_Tensor, 5},
    {"_torch_cpp_torch_method_stft_self_Tensor_n_fft_int64_t", (DL_FUNC) &_torch_cpp_torch_method_stft_self_Tensor_n_fft_int64_t, 7},
    {"_torch_cpp_torch_method_stride_self_Tensor_dim_int64_t", (DL_FUNC) &_torch_cpp_torch_method_stride_self_Tensor_dim_int64_t, 2},
    {"_torch_cpp_torch_method_stride_self_Tensor_dim_Dimname", (DL_FUNC) &_torch_cpp_torch_method_stride_self_Tensor_dim_Dimname, 2},
    {"_torch_cpp_torch_method_sum_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_sum_self_Tensor, 2},
    {"_torch_cpp_torch_method_sum_self_Tensor_dim_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_method_sum_self_Tensor_dim_IntArrayRef, 4},
    {"_torch_cpp_torch_method_sum_self_Tensor_dim_DimnameList", (DL_FUNC) &_torch_cpp_torch_method_sum_self_Tensor_dim_DimnameList, 4},
    {"_torch_cpp_torch_method_sum_to_size_self_Tensor_size_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_method_sum_to_size_self_Tensor_size_IntArrayRef, 2},
    {"_torch_cpp_torch_method_sqrt_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_sqrt_self_Tensor, 1},
    {"_torch_cpp_torch_method_sqrt__self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_sqrt__self_Tensor, 1},
    {"_torch_cpp_torch_method_std_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_std_self_Tensor, 2},
    {"_torch_cpp_torch_method_std_self_Tensor_dim_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_method_std_self_Tensor_dim_IntArrayRef, 4},
    {"_torch_cpp_torch_method_std_self_Tensor_dim_DimnameList", (DL_FUNC) &_torch_cpp_torch_method_std_self_Tensor_dim_DimnameList, 4},
    {"_torch_cpp_torch_method_prod_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_prod_self_Tensor, 2},
    {"_torch_cpp_torch_method_prod_self_Tensor_dim_int64_t", (DL_FUNC) &_torch_cpp_torch_method_prod_self_Tensor_dim_int64_t, 4},
    {"_torch_cpp_torch_method_prod_self_Tensor_dim_Dimname", (DL_FUNC) &_torch_cpp_torch_method_prod_self_Tensor_dim_Dimname, 4},
    {"_torch_cpp_torch_method_t_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_t_self_Tensor, 1},
    {"_torch_cpp_torch_method_t__self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_t__self_Tensor, 1},
    {"_torch_cpp_torch_method_tan_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_tan_self_Tensor, 1},
    {"_torch_cpp_torch_method_tan__self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_tan__self_Tensor, 1},
    {"_torch_cpp_torch_method_tanh_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_tanh_self_Tensor, 1},
    {"_torch_cpp_torch_method_tanh__self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_tanh__self_Tensor, 1},
    {"_torch_cpp_torch_method_transpose_self_Tensor_dim0_int64_t_dim1_int64_t", (DL_FUNC) &_torch_cpp_torch_method_transpose_self_Tensor_dim0_int64_t_dim1_int64_t, 3},
    {"_torch_cpp_torch_method_transpose_self_Tensor_dim0_Dimname_dim1_Dimname", (DL_FUNC) &_torch_cpp_torch_method_transpose_self_Tensor_dim0_Dimname_dim1_Dimname, 3},
    {"_torch_cpp_torch_method_transpose__self_Tensor_dim0_int64_t_dim1_int64_t", (DL_FUNC) &_torch_cpp_torch_method_transpose__self_Tensor_dim0_int64_t_dim1_int64_t, 3},
    {"_torch_cpp_torch_method_flip_self_Tensor_dims_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_method_flip_self_Tensor_dims_IntArrayRef, 2},
    {"_torch_cpp_torch_method_roll_self_Tensor_shifts_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_method_roll_self_Tensor_shifts_IntArrayRef, 3},
    {"_torch_cpp_torch_method_rot90_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_rot90_self_Tensor, 3},
    {"_torch_cpp_torch_method_trunc_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_trunc_self_Tensor, 1},
    {"_torch_cpp_torch_method_trunc__self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_trunc__self_Tensor, 1},
    {"_torch_cpp_torch_method_type_as_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_method_type_as_self_Tensor_other_Tensor, 2},
    {"_torch_cpp_torch_method_unsqueeze_self_Tensor_dim_int64_t", (DL_FUNC) &_torch_cpp_torch_method_unsqueeze_self_Tensor_dim_int64_t, 2},
    {"_torch_cpp_torch_method_unsqueeze__self_Tensor_dim_int64_t", (DL_FUNC) &_torch_cpp_torch_method_unsqueeze__self_Tensor_dim_int64_t, 2},
    {"_torch_cpp_torch_method_var_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_var_self_Tensor, 2},
    {"_torch_cpp_torch_method_var_self_Tensor_dim_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_method_var_self_Tensor_dim_IntArrayRef, 4},
    {"_torch_cpp_torch_method_var_self_Tensor_dim_DimnameList", (DL_FUNC) &_torch_cpp_torch_method_var_self_Tensor_dim_DimnameList, 4},
    {"_torch_cpp_torch_method_view_as_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_method_view_as_self_Tensor_other_Tensor, 2},
    {"_torch_cpp_torch_method_where_condition_Tensor_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_method_where_condition_Tensor_self_Tensor_other_Tensor, 3},
    {"_torch_cpp_torch_method_norm_self_Tensor_p_Scalar_dtype_ScalarType", (DL_FUNC) &_torch_cpp_torch_method_norm_self_Tensor_p_Scalar_dtype_ScalarType, 3},
    {"_torch_cpp_torch_method_norm_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_norm_self_Tensor, 2},
    {"_torch_cpp_torch_method_norm_self_Tensor_p_Scalar_dim_IntArrayRef_keepdim_bool_dtype_ScalarType", (DL_FUNC) &_torch_cpp_torch_method_norm_self_Tensor_p_Scalar_dim_IntArrayRef_keepdim_bool_dtype_ScalarType, 5},
    {"_torch_cpp_torch_method_norm_self_Tensor_p_Scalar_dim_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_method_norm_self_Tensor_p_Scalar_dim_IntArrayRef, 4},
    {"_torch_cpp_torch_method_norm_self_Tensor_p_Scalar_dim_DimnameList_keepdim_bool_dtype_ScalarType", (DL_FUNC) &_torch_cpp_torch_method_norm_self_Tensor_p_Scalar_dim_DimnameList_keepdim_bool_dtype_ScalarType, 5},
    {"_torch_cpp_torch_method_norm_self_Tensor_p_Scalar_dim_DimnameList", (DL_FUNC) &_torch_cpp_torch_method_norm_self_Tensor_p_Scalar_dim_DimnameList, 4},
    {"_torch_cpp_torch_method_clone_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_clone_self_Tensor, 2},
    {"_torch_cpp_torch_method_resize_as__self_Tensor_the_template_Tensor", (DL_FUNC) &_torch_cpp_torch_method_resize_as__self_Tensor_the_template_Tensor, 3},
    {"_torch_cpp_torch_method_pow_self_Tensor_exponent_Scalar", (DL_FUNC) &_torch_cpp_torch_method_pow_self_Tensor_exponent_Scalar, 2},
    {"_torch_cpp_torch_method_zero__self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_zero__self_Tensor, 1},
    {"_torch_cpp_torch_method_sub_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_method_sub_self_Tensor_other_Tensor, 3},
    {"_torch_cpp_torch_method_sub__self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_method_sub__self_Tensor_other_Tensor, 3},
    {"_torch_cpp_torch_method_sub_self_Tensor_other_Scalar", (DL_FUNC) &_torch_cpp_torch_method_sub_self_Tensor_other_Scalar, 3},
    {"_torch_cpp_torch_method_sub__self_Tensor_other_Scalar", (DL_FUNC) &_torch_cpp_torch_method_sub__self_Tensor_other_Scalar, 3},
    {"_torch_cpp_torch_method_addmm_self_Tensor_mat1_Tensor_mat2_Tensor", (DL_FUNC) &_torch_cpp_torch_method_addmm_self_Tensor_mat1_Tensor_mat2_Tensor, 5},
    {"_torch_cpp_torch_method_addmm__self_Tensor_mat1_Tensor_mat2_Tensor", (DL_FUNC) &_torch_cpp_torch_method_addmm__self_Tensor_mat1_Tensor_mat2_Tensor, 5},
    {"_torch_cpp_torch_method_sparse_resize__self_Tensor_size_IntArrayRef_sparse_dim_int64_t_dense_dim_int64_t", (DL_FUNC) &_torch_cpp_torch_method_sparse_resize__self_Tensor_size_IntArrayRef_sparse_dim_int64_t_dense_dim_int64_t, 4},
    {"_torch_cpp_torch_method_sparse_resize_and_clear__self_Tensor_size_IntArrayRef_sparse_dim_int64_t_dense_dim_int64_t", (DL_FUNC) &_torch_cpp_torch_method_sparse_resize_and_clear__self_Tensor_size_IntArrayRef_sparse_dim_int64_t_dense_dim_int64_t, 4},
    {"_torch_cpp_torch_method_sparse_mask_self_Tensor_mask_Tensor", (DL_FUNC) &_torch_cpp_torch_method_sparse_mask_self_Tensor_mask_Tensor, 2},
    {"_torch_cpp_torch_method_to_dense_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_to_dense_self_Tensor, 1},
    {"_torch_cpp_torch_method_sparse_dim_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_sparse_dim_self_Tensor, 1},
    {"_torch_cpp_torch_method__dimI_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method__dimI_self_Tensor, 1},
    {"_torch_cpp_torch_method_dense_dim_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_dense_dim_self_Tensor, 1},
    {"_torch_cpp_torch_method__dimV_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method__dimV_self_Tensor, 1},
    {"_torch_cpp_torch_method__nnz_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method__nnz_self_Tensor, 1},
    {"_torch_cpp_torch_method_coalesce_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_coalesce_self_Tensor, 1},
    {"_torch_cpp_torch_method_is_coalesced_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_is_coalesced_self_Tensor, 1},
    {"_torch_cpp_torch_method__indices_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method__indices_self_Tensor, 1},
    {"_torch_cpp_torch_method__values_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method__values_self_Tensor, 1},
    {"_torch_cpp_torch_method__coalesced__self_Tensor_coalesced_bool", (DL_FUNC) &_torch_cpp_torch_method__coalesced__self_Tensor_coalesced_bool, 2},
    {"_torch_cpp_torch_method_indices_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_indices_self_Tensor, 1},
    {"_torch_cpp_torch_method_values_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_values_self_Tensor, 1},
    {"_torch_cpp_torch_method_unbind_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_unbind_self_Tensor, 2},
    {"_torch_cpp_torch_method_unbind_self_Tensor_dim_Dimname", (DL_FUNC) &_torch_cpp_torch_method_unbind_self_Tensor_dim_Dimname, 2},
    {"_torch_cpp_torch_method_to_sparse_self_Tensor_sparse_dim_int64_t", (DL_FUNC) &_torch_cpp_torch_method_to_sparse_self_Tensor_sparse_dim_int64_t, 2},
    {"_torch_cpp_torch_method_to_sparse_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_to_sparse_self_Tensor, 1},
    {"_torch_cpp_torch_method_to_mkldnn_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_to_mkldnn_self_Tensor, 1},
    {"_torch_cpp_torch_method_dequantize_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_dequantize_self_Tensor, 1},
    {"_torch_cpp_torch_method_q_scale_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_q_scale_self_Tensor, 1},
    {"_torch_cpp_torch_method_q_zero_point_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_q_zero_point_self_Tensor, 1},
    {"_torch_cpp_torch_method_q_per_channel_scales_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_q_per_channel_scales_self_Tensor, 1},
    {"_torch_cpp_torch_method_q_per_channel_zero_points_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_q_per_channel_zero_points_self_Tensor, 1},
    {"_torch_cpp_torch_method_q_per_channel_axis_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_q_per_channel_axis_self_Tensor, 1},
    {"_torch_cpp_torch_method_int_repr_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_int_repr_self_Tensor, 1},
    {"_torch_cpp_torch_method_qscheme_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_qscheme_self_Tensor, 1},
    {"_torch_cpp_torch_method_to_self_Tensor_options_TensorOptions", (DL_FUNC) &_torch_cpp_torch_method_to_self_Tensor_options_TensorOptions, 5},
    {"_torch_cpp_torch_method_to_self_Tensor_device_Device_dtype_ScalarType", (DL_FUNC) &_torch_cpp_torch_method_to_self_Tensor_device_Device_dtype_ScalarType, 6},
    {"_torch_cpp_torch_method_to_self_Tensor_dtype_ScalarType", (DL_FUNC) &_torch_cpp_torch_method_to_self_Tensor_dtype_ScalarType, 5},
    {"_torch_cpp_torch_method_to_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_method_to_self_Tensor_other_Tensor, 5},
    {"_torch_cpp_torch_method_item_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_item_self_Tensor, 1},
    {"_torch_cpp_torch_method_set__self_Tensor_source_Storage", (DL_FUNC) &_torch_cpp_torch_method_set__self_Tensor_source_Storage, 2},
    {"_torch_cpp_torch_method_set__self_Tensor_source_Storage_storage_offset_int64_t_size_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_method_set__self_Tensor_source_Storage_storage_offset_int64_t_size_IntArrayRef, 5},
    {"_torch_cpp_torch_method_set__self_Tensor_source_Tensor", (DL_FUNC) &_torch_cpp_torch_method_set__self_Tensor_source_Tensor, 2},
    {"_torch_cpp_torch_method_set__self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_set__self_Tensor, 1},
    {"_torch_cpp_torch_method_is_set_to_self_Tensor_tensor_Tensor", (DL_FUNC) &_torch_cpp_torch_method_is_set_to_self_Tensor_tensor_Tensor, 2},
    {"_torch_cpp_torch_method_masked_fill__self_Tensor_mask_Tensor_value_Scalar", (DL_FUNC) &_torch_cpp_torch_method_masked_fill__self_Tensor_mask_Tensor_value_Scalar, 3},
    {"_torch_cpp_torch_method_masked_fill_self_Tensor_mask_Tensor_value_Scalar", (DL_FUNC) &_torch_cpp_torch_method_masked_fill_self_Tensor_mask_Tensor_value_Scalar, 3},
    {"_torch_cpp_torch_method_masked_fill__self_Tensor_mask_Tensor_value_Tensor", (DL_FUNC) &_torch_cpp_torch_method_masked_fill__self_Tensor_mask_Tensor_value_Tensor, 3},
    {"_torch_cpp_torch_method_masked_fill_self_Tensor_mask_Tensor_value_Tensor", (DL_FUNC) &_torch_cpp_torch_method_masked_fill_self_Tensor_mask_Tensor_value_Tensor, 3},
    {"_torch_cpp_torch_method_masked_scatter__self_Tensor_mask_Tensor_source_Tensor", (DL_FUNC) &_torch_cpp_torch_method_masked_scatter__self_Tensor_mask_Tensor_source_Tensor, 3},
    {"_torch_cpp_torch_method_masked_scatter_self_Tensor_mask_Tensor_source_Tensor", (DL_FUNC) &_torch_cpp_torch_method_masked_scatter_self_Tensor_mask_Tensor_source_Tensor, 3},
    {"_torch_cpp_torch_method_view_self_Tensor_size_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_method_view_self_Tensor_size_IntArrayRef, 2},
    {"_torch_cpp_torch_method_put__self_Tensor_index_Tensor_source_Tensor", (DL_FUNC) &_torch_cpp_torch_method_put__self_Tensor_index_Tensor_source_Tensor, 4},
    {"_torch_cpp_torch_method_index_add__self_Tensor_dim_int64_t_index_Tensor_source_Tensor", (DL_FUNC) &_torch_cpp_torch_method_index_add__self_Tensor_dim_int64_t_index_Tensor_source_Tensor, 4},
    {"_torch_cpp_torch_method_index_add_self_Tensor_dim_int64_t_index_Tensor_source_Tensor", (DL_FUNC) &_torch_cpp_torch_method_index_add_self_Tensor_dim_int64_t_index_Tensor_source_Tensor, 4},
    {"_torch_cpp_torch_method_index_add_self_Tensor_dim_Dimname_index_Tensor_source_Tensor", (DL_FUNC) &_torch_cpp_torch_method_index_add_self_Tensor_dim_Dimname_index_Tensor_source_Tensor, 4},
    {"_torch_cpp_torch_method_index_fill__self_Tensor_dim_int64_t_index_Tensor_value_Scalar", (DL_FUNC) &_torch_cpp_torch_method_index_fill__self_Tensor_dim_int64_t_index_Tensor_value_Scalar, 4},
    {"_torch_cpp_torch_method_index_fill_self_Tensor_dim_int64_t_index_Tensor_value_Scalar", (DL_FUNC) &_torch_cpp_torch_method_index_fill_self_Tensor_dim_int64_t_index_Tensor_value_Scalar, 4},
    {"_torch_cpp_torch_method_index_fill__self_Tensor_dim_int64_t_index_Tensor_value_Tensor", (DL_FUNC) &_torch_cpp_torch_method_index_fill__self_Tensor_dim_int64_t_index_Tensor_value_Tensor, 4},
    {"_torch_cpp_torch_method_index_fill_self_Tensor_dim_int64_t_index_Tensor_value_Tensor", (DL_FUNC) &_torch_cpp_torch_method_index_fill_self_Tensor_dim_int64_t_index_Tensor_value_Tensor, 4},
    {"_torch_cpp_torch_method_index_fill__self_Tensor_dim_Dimname_index_Tensor_value_Scalar", (DL_FUNC) &_torch_cpp_torch_method_index_fill__self_Tensor_dim_Dimname_index_Tensor_value_Scalar, 4},
    {"_torch_cpp_torch_method_index_fill__self_Tensor_dim_Dimname_index_Tensor_value_Tensor", (DL_FUNC) &_torch_cpp_torch_method_index_fill__self_Tensor_dim_Dimname_index_Tensor_value_Tensor, 4},
    {"_torch_cpp_torch_method_index_fill_self_Tensor_dim_Dimname_index_Tensor_value_Scalar", (DL_FUNC) &_torch_cpp_torch_method_index_fill_self_Tensor_dim_Dimname_index_Tensor_value_Scalar, 4},
    {"_torch_cpp_torch_method_index_fill_self_Tensor_dim_Dimname_index_Tensor_value_Tensor", (DL_FUNC) &_torch_cpp_torch_method_index_fill_self_Tensor_dim_Dimname_index_Tensor_value_Tensor, 4},
    {"_torch_cpp_torch_method_scatter__self_Tensor_dim_int64_t_index_Tensor_src_Tensor", (DL_FUNC) &_torch_cpp_torch_method_scatter__self_Tensor_dim_int64_t_index_Tensor_src_Tensor, 4},
    {"_torch_cpp_torch_method_scatter_self_Tensor_dim_int64_t_index_Tensor_src_Tensor", (DL_FUNC) &_torch_cpp_torch_method_scatter_self_Tensor_dim_int64_t_index_Tensor_src_Tensor, 4},
    {"_torch_cpp_torch_method_scatter__self_Tensor_dim_int64_t_index_Tensor_value_Scalar", (DL_FUNC) &_torch_cpp_torch_method_scatter__self_Tensor_dim_int64_t_index_Tensor_value_Scalar, 4},
    {"_torch_cpp_torch_method_scatter_self_Tensor_dim_int64_t_index_Tensor_value_Scalar", (DL_FUNC) &_torch_cpp_torch_method_scatter_self_Tensor_dim_int64_t_index_Tensor_value_Scalar, 4},
    {"_torch_cpp_torch_method_scatter_self_Tensor_dim_Dimname_index_Tensor_src_Tensor", (DL_FUNC) &_torch_cpp_torch_method_scatter_self_Tensor_dim_Dimname_index_Tensor_src_Tensor, 4},
    {"_torch_cpp_torch_method_scatter_self_Tensor_dim_Dimname_index_Tensor_value_Scalar", (DL_FUNC) &_torch_cpp_torch_method_scatter_self_Tensor_dim_Dimname_index_Tensor_value_Scalar, 4},
    {"_torch_cpp_torch_method_scatter_add__self_Tensor_dim_int64_t_index_Tensor_src_Tensor", (DL_FUNC) &_torch_cpp_torch_method_scatter_add__self_Tensor_dim_int64_t_index_Tensor_src_Tensor, 4},
    {"_torch_cpp_torch_method_scatter_add_self_Tensor_dim_int64_t_index_Tensor_src_Tensor", (DL_FUNC) &_torch_cpp_torch_method_scatter_add_self_Tensor_dim_int64_t_index_Tensor_src_Tensor, 4},
    {"_torch_cpp_torch_method_scatter_add_self_Tensor_dim_Dimname_index_Tensor_src_Tensor", (DL_FUNC) &_torch_cpp_torch_method_scatter_add_self_Tensor_dim_Dimname_index_Tensor_src_Tensor, 4},
    {"_torch_cpp_torch_method_lt__self_Tensor_other_Scalar", (DL_FUNC) &_torch_cpp_torch_method_lt__self_Tensor_other_Scalar, 2},
    {"_torch_cpp_torch_method_lt__self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_method_lt__self_Tensor_other_Tensor, 2},
    {"_torch_cpp_torch_method_gt__self_Tensor_other_Scalar", (DL_FUNC) &_torch_cpp_torch_method_gt__self_Tensor_other_Scalar, 2},
    {"_torch_cpp_torch_method_gt__self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_method_gt__self_Tensor_other_Tensor, 2},
    {"_torch_cpp_torch_method_le__self_Tensor_other_Scalar", (DL_FUNC) &_torch_cpp_torch_method_le__self_Tensor_other_Scalar, 2},
    {"_torch_cpp_torch_method_le__self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_method_le__self_Tensor_other_Tensor, 2},
    {"_torch_cpp_torch_method_ge__self_Tensor_other_Scalar", (DL_FUNC) &_torch_cpp_torch_method_ge__self_Tensor_other_Scalar, 2},
    {"_torch_cpp_torch_method_ge__self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_method_ge__self_Tensor_other_Tensor, 2},
    {"_torch_cpp_torch_method_eq__self_Tensor_other_Scalar", (DL_FUNC) &_torch_cpp_torch_method_eq__self_Tensor_other_Scalar, 2},
    {"_torch_cpp_torch_method_eq__self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_method_eq__self_Tensor_other_Tensor, 2},
    {"_torch_cpp_torch_method_ne__self_Tensor_other_Scalar", (DL_FUNC) &_torch_cpp_torch_method_ne__self_Tensor_other_Scalar, 2},
    {"_torch_cpp_torch_method_ne__self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_method_ne__self_Tensor_other_Tensor, 2},
    {"_torch_cpp_torch_method___and___self_Tensor_other_Scalar", (DL_FUNC) &_torch_cpp_torch_method___and___self_Tensor_other_Scalar, 2},
    {"_torch_cpp_torch_method___and___self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_method___and___self_Tensor_other_Tensor, 2},
    {"_torch_cpp_torch_method___iand___self_Tensor_other_Scalar", (DL_FUNC) &_torch_cpp_torch_method___iand___self_Tensor_other_Scalar, 2},
    {"_torch_cpp_torch_method___iand___self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_method___iand___self_Tensor_other_Tensor, 2},
    {"_torch_cpp_torch_method___or___self_Tensor_other_Scalar", (DL_FUNC) &_torch_cpp_torch_method___or___self_Tensor_other_Scalar, 2},
    {"_torch_cpp_torch_method___or___self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_method___or___self_Tensor_other_Tensor, 2},
    {"_torch_cpp_torch_method___ior___self_Tensor_other_Scalar", (DL_FUNC) &_torch_cpp_torch_method___ior___self_Tensor_other_Scalar, 2},
    {"_torch_cpp_torch_method___ior___self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_method___ior___self_Tensor_other_Tensor, 2},
    {"_torch_cpp_torch_method_bitwise_xor_self_Tensor_other_Scalar", (DL_FUNC) &_torch_cpp_torch_method_bitwise_xor_self_Tensor_other_Scalar, 2},
    {"_torch_cpp_torch_method_bitwise_xor_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_method_bitwise_xor_self_Tensor_other_Tensor, 2},
    {"_torch_cpp_torch_method_bitwise_xor__self_Tensor_other_Scalar", (DL_FUNC) &_torch_cpp_torch_method_bitwise_xor__self_Tensor_other_Scalar, 2},
    {"_torch_cpp_torch_method_bitwise_xor__self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_method_bitwise_xor__self_Tensor_other_Tensor, 2},
    {"_torch_cpp_torch_method___xor___self_Tensor_other_Scalar", (DL_FUNC) &_torch_cpp_torch_method___xor___self_Tensor_other_Scalar, 2},
    {"_torch_cpp_torch_method___xor___self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_method___xor___self_Tensor_other_Tensor, 2},
    {"_torch_cpp_torch_method___ixor___self_Tensor_other_Scalar", (DL_FUNC) &_torch_cpp_torch_method___ixor___self_Tensor_other_Scalar, 2},
    {"_torch_cpp_torch_method___ixor___self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_method___ixor___self_Tensor_other_Tensor, 2},
    {"_torch_cpp_torch_method___lshift___self_Tensor_other_Scalar", (DL_FUNC) &_torch_cpp_torch_method___lshift___self_Tensor_other_Scalar, 2},
    {"_torch_cpp_torch_method___lshift___self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_method___lshift___self_Tensor_other_Tensor, 2},
    {"_torch_cpp_torch_method___ilshift___self_Tensor_other_Scalar", (DL_FUNC) &_torch_cpp_torch_method___ilshift___self_Tensor_other_Scalar, 2},
    {"_torch_cpp_torch_method___ilshift___self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_method___ilshift___self_Tensor_other_Tensor, 2},
    {"_torch_cpp_torch_method___rshift___self_Tensor_other_Scalar", (DL_FUNC) &_torch_cpp_torch_method___rshift___self_Tensor_other_Scalar, 2},
    {"_torch_cpp_torch_method___rshift___self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_method___rshift___self_Tensor_other_Tensor, 2},
    {"_torch_cpp_torch_method___irshift___self_Tensor_other_Scalar", (DL_FUNC) &_torch_cpp_torch_method___irshift___self_Tensor_other_Scalar, 2},
    {"_torch_cpp_torch_method___irshift___self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_method___irshift___self_Tensor_other_Tensor, 2},
    {"_torch_cpp_torch_method_lgamma__self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_lgamma__self_Tensor, 1},
    {"_torch_cpp_torch_method_atan2__self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_method_atan2__self_Tensor_other_Tensor, 2},
    {"_torch_cpp_torch_method_tril__self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_tril__self_Tensor, 2},
    {"_torch_cpp_torch_method_triu__self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_triu__self_Tensor, 2},
    {"_torch_cpp_torch_method_digamma__self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_digamma__self_Tensor, 1},
    {"_torch_cpp_torch_method_polygamma__self_Tensor_n_int64_t", (DL_FUNC) &_torch_cpp_torch_method_polygamma__self_Tensor_n_int64_t, 2},
    {"_torch_cpp_torch_method_renorm__self_Tensor_p_Scalar_dim_int64_t_maxnorm_Scalar", (DL_FUNC) &_torch_cpp_torch_method_renorm__self_Tensor_p_Scalar_dim_int64_t_maxnorm_Scalar, 4},
    {"_torch_cpp_torch_method_pow__self_Tensor_exponent_Scalar", (DL_FUNC) &_torch_cpp_torch_method_pow__self_Tensor_exponent_Scalar, 2},
    {"_torch_cpp_torch_method_pow__self_Tensor_exponent_Tensor", (DL_FUNC) &_torch_cpp_torch_method_pow__self_Tensor_exponent_Tensor, 2},
    {"_torch_cpp_torch_method_lerp__self_Tensor_end_Tensor_weight_Scalar", (DL_FUNC) &_torch_cpp_torch_method_lerp__self_Tensor_end_Tensor_weight_Scalar, 3},
    {"_torch_cpp_torch_method_lerp__self_Tensor_end_Tensor_weight_Tensor", (DL_FUNC) &_torch_cpp_torch_method_lerp__self_Tensor_end_Tensor_weight_Tensor, 3},
    {"_torch_cpp_torch_method_fmod__self_Tensor_other_Scalar", (DL_FUNC) &_torch_cpp_torch_method_fmod__self_Tensor_other_Scalar, 2},
    {"_torch_cpp_torch_method_fmod__self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_method_fmod__self_Tensor_other_Tensor, 2},
    {"_torch_cpp_torch_method_remainder__self_Tensor_other_Scalar", (DL_FUNC) &_torch_cpp_torch_method_remainder__self_Tensor_other_Scalar, 2},
    {"_torch_cpp_torch_method_remainder__self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_method_remainder__self_Tensor_other_Tensor, 2},
    {"_torch_cpp_torch_method_addbmm__self_Tensor_batch1_Tensor_batch2_Tensor", (DL_FUNC) &_torch_cpp_torch_method_addbmm__self_Tensor_batch1_Tensor_batch2_Tensor, 5},
    {"_torch_cpp_torch_method_addbmm_self_Tensor_batch1_Tensor_batch2_Tensor", (DL_FUNC) &_torch_cpp_torch_method_addbmm_self_Tensor_batch1_Tensor_batch2_Tensor, 5},
    {"_torch_cpp_torch_method_addcdiv__self_Tensor_tensor1_Tensor_tensor2_Tensor", (DL_FUNC) &_torch_cpp_torch_method_addcdiv__self_Tensor_tensor1_Tensor_tensor2_Tensor, 4},
    {"_torch_cpp_torch_method_random__self_Tensor_from_int64_t_to_int64_t", (DL_FUNC) &_torch_cpp_torch_method_random__self_Tensor_from_int64_t_to_int64_t, 4},
    {"_torch_cpp_torch_method_random__self_Tensor_to_int64_t", (DL_FUNC) &_torch_cpp_torch_method_random__self_Tensor_to_int64_t, 3},
    {"_torch_cpp_torch_method_random__self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_random__self_Tensor, 2},
    {"_torch_cpp_torch_method_uniform__self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_uniform__self_Tensor, 4},
    {"_torch_cpp_torch_method_normal__self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_normal__self_Tensor, 4},
    {"_torch_cpp_torch_method_cauchy__self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_cauchy__self_Tensor, 4},
    {"_torch_cpp_torch_method_log_normal__self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_log_normal__self_Tensor, 4},
    {"_torch_cpp_torch_method_exponential__self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_exponential__self_Tensor, 3},
    {"_torch_cpp_torch_method_geometric__self_Tensor_p_double", (DL_FUNC) &_torch_cpp_torch_method_geometric__self_Tensor_p_double, 3},
    {"_torch_cpp_torch_method_diag_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_diag_self_Tensor, 2},
    {"_torch_cpp_torch_method_cross_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_method_cross_self_Tensor_other_Tensor, 3},
    {"_torch_cpp_torch_method_triu_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_triu_self_Tensor, 2},
    {"_torch_cpp_torch_method_tril_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_tril_self_Tensor, 2},
    {"_torch_cpp_torch_method_trace_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_trace_self_Tensor, 1},
    {"_torch_cpp_torch_method_ne_self_Tensor_other_Scalar", (DL_FUNC) &_torch_cpp_torch_method_ne_self_Tensor_other_Scalar, 2},
    {"_torch_cpp_torch_method_ne_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_method_ne_self_Tensor_other_Tensor, 2},
    {"_torch_cpp_torch_method_eq_self_Tensor_other_Scalar", (DL_FUNC) &_torch_cpp_torch_method_eq_self_Tensor_other_Scalar, 2},
    {"_torch_cpp_torch_method_eq_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_method_eq_self_Tensor_other_Tensor, 2},
    {"_torch_cpp_torch_method_ge_self_Tensor_other_Scalar", (DL_FUNC) &_torch_cpp_torch_method_ge_self_Tensor_other_Scalar, 2},
    {"_torch_cpp_torch_method_ge_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_method_ge_self_Tensor_other_Tensor, 2},
    {"_torch_cpp_torch_method_le_self_Tensor_other_Scalar", (DL_FUNC) &_torch_cpp_torch_method_le_self_Tensor_other_Scalar, 2},
    {"_torch_cpp_torch_method_le_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_method_le_self_Tensor_other_Tensor, 2},
    {"_torch_cpp_torch_method_gt_self_Tensor_other_Scalar", (DL_FUNC) &_torch_cpp_torch_method_gt_self_Tensor_other_Scalar, 2},
    {"_torch_cpp_torch_method_gt_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_method_gt_self_Tensor_other_Tensor, 2},
    {"_torch_cpp_torch_method_lt_self_Tensor_other_Scalar", (DL_FUNC) &_torch_cpp_torch_method_lt_self_Tensor_other_Scalar, 2},
    {"_torch_cpp_torch_method_lt_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_method_lt_self_Tensor_other_Tensor, 2},
    {"_torch_cpp_torch_method_take_self_Tensor_index_Tensor", (DL_FUNC) &_torch_cpp_torch_method_take_self_Tensor_index_Tensor, 2},
    {"_torch_cpp_torch_method_index_select_self_Tensor_dim_int64_t_index_Tensor", (DL_FUNC) &_torch_cpp_torch_method_index_select_self_Tensor_dim_int64_t_index_Tensor, 3},
    {"_torch_cpp_torch_method_index_select_self_Tensor_dim_Dimname_index_Tensor", (DL_FUNC) &_torch_cpp_torch_method_index_select_self_Tensor_dim_Dimname_index_Tensor, 3},
    {"_torch_cpp_torch_method_masked_select_self_Tensor_mask_Tensor", (DL_FUNC) &_torch_cpp_torch_method_masked_select_self_Tensor_mask_Tensor, 2},
    {"_torch_cpp_torch_method_nonzero_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_nonzero_self_Tensor, 1},
    {"_torch_cpp_torch_method_nonzero_numpy_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_nonzero_numpy_self_Tensor, 1},
    {"_torch_cpp_torch_method_gather_self_Tensor_dim_int64_t_index_Tensor", (DL_FUNC) &_torch_cpp_torch_method_gather_self_Tensor_dim_int64_t_index_Tensor, 4},
    {"_torch_cpp_torch_method_gather_self_Tensor_dim_Dimname_index_Tensor", (DL_FUNC) &_torch_cpp_torch_method_gather_self_Tensor_dim_Dimname_index_Tensor, 4},
    {"_torch_cpp_torch_method_addcmul_self_Tensor_tensor1_Tensor_tensor2_Tensor", (DL_FUNC) &_torch_cpp_torch_method_addcmul_self_Tensor_tensor1_Tensor_tensor2_Tensor, 4},
    {"_torch_cpp_torch_method_addcmul__self_Tensor_tensor1_Tensor_tensor2_Tensor", (DL_FUNC) &_torch_cpp_torch_method_addcmul__self_Tensor_tensor1_Tensor_tensor2_Tensor, 4},
    {"_torch_cpp_torch_method_addcdiv_self_Tensor_tensor1_Tensor_tensor2_Tensor", (DL_FUNC) &_torch_cpp_torch_method_addcdiv_self_Tensor_tensor1_Tensor_tensor2_Tensor, 4},
    {"_torch_cpp_torch_method_lstsq_self_Tensor_A_Tensor", (DL_FUNC) &_torch_cpp_torch_method_lstsq_self_Tensor_A_Tensor, 2},
    {"_torch_cpp_torch_method_triangular_solve_self_Tensor_A_Tensor", (DL_FUNC) &_torch_cpp_torch_method_triangular_solve_self_Tensor_A_Tensor, 5},
    {"_torch_cpp_torch_method_symeig_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_symeig_self_Tensor, 3},
    {"_torch_cpp_torch_method_eig_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_eig_self_Tensor, 2},
    {"_torch_cpp_torch_method_svd_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_svd_self_Tensor, 3},
    {"_torch_cpp_torch_method_cholesky_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_cholesky_self_Tensor, 2},
    {"_torch_cpp_torch_method_cholesky_solve_self_Tensor_input2_Tensor", (DL_FUNC) &_torch_cpp_torch_method_cholesky_solve_self_Tensor_input2_Tensor, 3},
    {"_torch_cpp_torch_method_solve_self_Tensor_A_Tensor", (DL_FUNC) &_torch_cpp_torch_method_solve_self_Tensor_A_Tensor, 2},
    {"_torch_cpp_torch_method_cholesky_inverse_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_cholesky_inverse_self_Tensor, 2},
    {"_torch_cpp_torch_method_qr_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_qr_self_Tensor, 2},
    {"_torch_cpp_torch_method_geqrf_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_geqrf_self_Tensor, 1},
    {"_torch_cpp_torch_method_orgqr_self_Tensor_input2_Tensor", (DL_FUNC) &_torch_cpp_torch_method_orgqr_self_Tensor_input2_Tensor, 2},
    {"_torch_cpp_torch_method_ormqr_self_Tensor_input2_Tensor_input3_Tensor", (DL_FUNC) &_torch_cpp_torch_method_ormqr_self_Tensor_input2_Tensor_input3_Tensor, 5},
    {"_torch_cpp_torch_method_lu_solve_self_Tensor_LU_data_Tensor_LU_pivots_Tensor", (DL_FUNC) &_torch_cpp_torch_method_lu_solve_self_Tensor_LU_data_Tensor_LU_pivots_Tensor, 3},
    {"_torch_cpp_torch_method_multinomial_self_Tensor_num_samples_int64_t", (DL_FUNC) &_torch_cpp_torch_method_multinomial_self_Tensor_num_samples_int64_t, 4},
    {"_torch_cpp_torch_method_lgamma_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_lgamma_self_Tensor, 1},
    {"_torch_cpp_torch_method_digamma_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_digamma_self_Tensor, 1},
    {"_torch_cpp_torch_method_polygamma_n_int64_t_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_polygamma_n_int64_t_self_Tensor, 2},
    {"_torch_cpp_torch_method_erfinv_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_erfinv_self_Tensor, 1},
    {"_torch_cpp_torch_method_erfinv__self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_erfinv__self_Tensor, 1},
    {"_torch_cpp_torch_method_sign_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_sign_self_Tensor, 1},
    {"_torch_cpp_torch_method_sign__self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_sign__self_Tensor, 1},
    {"_torch_cpp_torch_method_dist_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_method_dist_self_Tensor_other_Tensor, 3},
    {"_torch_cpp_torch_method_atan2_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_method_atan2_self_Tensor_other_Tensor, 2},
    {"_torch_cpp_torch_method_lerp_self_Tensor_end_Tensor_weight_Scalar", (DL_FUNC) &_torch_cpp_torch_method_lerp_self_Tensor_end_Tensor_weight_Scalar, 3},
    {"_torch_cpp_torch_method_lerp_self_Tensor_end_Tensor_weight_Tensor", (DL_FUNC) &_torch_cpp_torch_method_lerp_self_Tensor_end_Tensor_weight_Tensor, 3},
    {"_torch_cpp_torch_method_histc_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_histc_self_Tensor, 4},
    {"_torch_cpp_torch_method_fmod_self_Tensor_other_Scalar", (DL_FUNC) &_torch_cpp_torch_method_fmod_self_Tensor_other_Scalar, 2},
    {"_torch_cpp_torch_method_fmod_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_method_fmod_self_Tensor_other_Tensor, 2},
    {"_torch_cpp_torch_method_remainder_self_Tensor_other_Scalar", (DL_FUNC) &_torch_cpp_torch_method_remainder_self_Tensor_other_Scalar, 2},
    {"_torch_cpp_torch_method_remainder_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_method_remainder_self_Tensor_other_Tensor, 2},
    {"_torch_cpp_torch_method_min_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_method_min_self_Tensor_other_Tensor, 2},
    {"_torch_cpp_torch_method_min_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_min_self_Tensor, 1},
    {"_torch_cpp_torch_method_max_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_method_max_self_Tensor_other_Tensor, 2},
    {"_torch_cpp_torch_method_max_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_max_self_Tensor, 1},
    {"_torch_cpp_torch_method_median_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_median_self_Tensor, 1},
    {"_torch_cpp_torch_method_sort_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_sort_self_Tensor, 3},
    {"_torch_cpp_torch_method_sort_self_Tensor_dim_Dimname", (DL_FUNC) &_torch_cpp_torch_method_sort_self_Tensor_dim_Dimname, 3},
    {"_torch_cpp_torch_method_argsort_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_argsort_self_Tensor, 3},
    {"_torch_cpp_torch_method_argsort_self_Tensor_dim_Dimname", (DL_FUNC) &_torch_cpp_torch_method_argsort_self_Tensor_dim_Dimname, 3},
    {"_torch_cpp_torch_method_topk_self_Tensor_k_int64_t", (DL_FUNC) &_torch_cpp_torch_method_topk_self_Tensor_k_int64_t, 5},
    {"_torch_cpp_torch_method_all_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_all_self_Tensor, 1},
    {"_torch_cpp_torch_method_any_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_any_self_Tensor, 1},
    {"_torch_cpp_torch_method_renorm_self_Tensor_p_Scalar_dim_int64_t_maxnorm_Scalar", (DL_FUNC) &_torch_cpp_torch_method_renorm_self_Tensor_p_Scalar_dim_int64_t_maxnorm_Scalar, 4},
    {"_torch_cpp_torch_method_unfold_self_Tensor_dimension_int64_t_size_int64_t_step_int64_t", (DL_FUNC) &_torch_cpp_torch_method_unfold_self_Tensor_dimension_int64_t_size_int64_t_step_int64_t, 4},
    {"_torch_cpp_torch_method_equal_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_method_equal_self_Tensor_other_Tensor, 2},
    {"_torch_cpp_torch_method_pow_self_Tensor_exponent_Tensor", (DL_FUNC) &_torch_cpp_torch_method_pow_self_Tensor_exponent_Tensor, 2},
    {"_torch_cpp_torch_method_alias_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_alias_self_Tensor, 1},
    {"_torch_cpp_torch_namespace__cast_Byte_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace__cast_Byte_self_Tensor, 2},
    {"_torch_cpp_torch_namespace__cast_Char_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace__cast_Char_self_Tensor, 2},
    {"_torch_cpp_torch_namespace__cast_Double_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace__cast_Double_self_Tensor, 2},
    {"_torch_cpp_torch_namespace__cast_Float_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace__cast_Float_self_Tensor, 2},
    {"_torch_cpp_torch_namespace__cast_Int_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace__cast_Int_self_Tensor, 2},
    {"_torch_cpp_torch_namespace__cast_Long_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace__cast_Long_self_Tensor, 2},
    {"_torch_cpp_torch_namespace__cast_Short_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace__cast_Short_self_Tensor, 2},
    {"_torch_cpp_torch_namespace__cast_Half_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace__cast_Half_self_Tensor, 2},
    {"_torch_cpp_torch_namespace_align_tensors_tensors_TensorList", (DL_FUNC) &_torch_cpp_torch_namespace_align_tensors_tensors_TensorList, 1},
    {"_torch_cpp_torch_namespace__use_cudnn_ctc_loss_log_probs_Tensor_targets_Tensor_input_lengths_IntArrayRef_target_lengths_IntArrayRef_blank_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace__use_cudnn_ctc_loss_log_probs_Tensor_targets_Tensor_input_lengths_IntArrayRef_target_lengths_IntArrayRef_blank_int64_t, 5},
    {"_torch_cpp_torch_namespace__cudnn_ctc_loss_log_probs_Tensor_targets_Tensor_input_lengths_IntArrayRef_target_lengths_IntArrayRef_blank_int64_t_deterministic_bool_zero_infinity_bool", (DL_FUNC) &_torch_cpp_torch_namespace__cudnn_ctc_loss_log_probs_Tensor_targets_Tensor_input_lengths_IntArrayRef_target_lengths_IntArrayRef_blank_int64_t_deterministic_bool_zero_infinity_bool, 7},
    {"_torch_cpp_torch_namespace__cudnn_rnn_flatten_weight_weight_arr_TensorList_weight_stride0_int64_t_input_size_int64_t_mode_int64_t_hidden_size_int64_t_num_layers_int64_t_batch_first_bool_bidirectional_bool", (DL_FUNC) &_torch_cpp_torch_namespace__cudnn_rnn_flatten_weight_weight_arr_TensorList_weight_stride0_int64_t_input_size_int64_t_mode_int64_t_hidden_size_int64_t_num_layers_int64_t_batch_first_bool_bidirectional_bool, 8},
    {"_torch_cpp_torch_namespace__cudnn_rnn_input_Tensor_weight_TensorList_weight_stride0_int64_t_weight_buf_Tensor_hx_Tensor_cx_Tensor_mode_int64_t_hidden_size_int64_t_num_layers_int64_t_batch_first_bool_dropout_double_train_bool_bidirectional_bool_batch_sizes_IntArrayRef_dropout_state_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace__cudnn_rnn_input_Tensor_weight_TensorList_weight_stride0_int64_t_weight_buf_Tensor_hx_Tensor_cx_Tensor_mode_int64_t_hidden_size_int64_t_num_layers_int64_t_batch_first_bool_dropout_double_train_bool_bidirectional_bool_batch_sizes_IntArrayRef_dropout_state_Tensor, 15},
    {"_torch_cpp_torch_namespace__cudnn_rnn_backward_input_Tensor_weight_TensorList_weight_stride0_int64_t_weight_buf_Tensor_hx_Tensor_cx_Tensor_output_Tensor_grad_output_Tensor_grad_hy_Tensor_grad_cy_Tensor_mode_int64_t_hidden_size_int64_t_num_layers_int64_t_batch_first_bool_dropout_double_train_bool_bidirectional_bool_batch_sizes_IntArrayRef_dropout_state_Tensor_reserve_Tensor_output_mask_stdarraybool4", (DL_FUNC) &_torch_cpp_torch_namespace__cudnn_rnn_backward_input_Tensor_weight_TensorList_weight_stride0_int64_t_weight_buf_Tensor_hx_Tensor_cx_Tensor_output_Tensor_grad_output_Tensor_grad_hy_Tensor_grad_cy_Tensor_mode_int64_t_hidden_size_int64_t_num_layers_int64_t_batch_first_bool_dropout_double_train_bool_bidirectional_bool_batch_sizes_IntArrayRef_dropout_state_Tensor_reserve_Tensor_output_mask_stdarraybool4, 21},
    {"_torch_cpp_torch_namespace__cudnn_init_dropout_state_dropout_double_train_bool_dropout_seed_int64_t_options_TensorOptions", (DL_FUNC) &_torch_cpp_torch_namespace__cudnn_init_dropout_state_dropout_double_train_bool_dropout_seed_int64_t_options_TensorOptions, 4},
    {"_torch_cpp_torch_namespace__debug_has_internal_overlap_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace__debug_has_internal_overlap_self_Tensor, 1},
    {"_torch_cpp_torch_namespace__fused_dropout_self_Tensor_p_double", (DL_FUNC) &_torch_cpp_torch_namespace__fused_dropout_self_Tensor_p_double, 3},
    {"_torch_cpp_torch_namespace__masked_scale_self_Tensor_mask_Tensor_scale_double", (DL_FUNC) &_torch_cpp_torch_namespace__masked_scale_self_Tensor_mask_Tensor_scale_double, 3},
    {"_torch_cpp_torch_namespace__sobol_engine_draw_quasi_Tensor_n_int64_t_sobolstate_Tensor_dimension_int64_t_num_generated_int64_t_dtype_ScalarType", (DL_FUNC) &_torch_cpp_torch_namespace__sobol_engine_draw_quasi_Tensor_n_int64_t_sobolstate_Tensor_dimension_int64_t_num_generated_int64_t_dtype_ScalarType, 6},
    {"_torch_cpp_torch_namespace__sobol_engine_ff__self_Tensor_n_int64_t_sobolstate_Tensor_dimension_int64_t_num_generated_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace__sobol_engine_ff__self_Tensor_n_int64_t_sobolstate_Tensor_dimension_int64_t_num_generated_int64_t, 5},
    {"_torch_cpp_torch_namespace__sobol_engine_scramble__self_Tensor_ltm_Tensor_dimension_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace__sobol_engine_scramble__self_Tensor_ltm_Tensor_dimension_int64_t, 3},
    {"_torch_cpp_torch_namespace__sobol_engine_initialize_state__self_Tensor_dimension_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace__sobol_engine_initialize_state__self_Tensor_dimension_int64_t, 2},
    {"_torch_cpp_torch_namespace__reshape_from_tensor_self_Tensor_shape_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace__reshape_from_tensor_self_Tensor_shape_Tensor, 2},
    {"_torch_cpp_torch_namespace__shape_as_tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace__shape_as_tensor_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_dropout_input_Tensor_p_double_train_bool", (DL_FUNC) &_torch_cpp_torch_namespace_dropout_input_Tensor_p_double_train_bool, 3},
    {"_torch_cpp_torch_namespace_dropout__self_Tensor_p_double_train_bool", (DL_FUNC) &_torch_cpp_torch_namespace_dropout__self_Tensor_p_double_train_bool, 3},
    {"_torch_cpp_torch_namespace_feature_dropout_input_Tensor_p_double_train_bool", (DL_FUNC) &_torch_cpp_torch_namespace_feature_dropout_input_Tensor_p_double_train_bool, 3},
    {"_torch_cpp_torch_namespace_feature_dropout__self_Tensor_p_double_train_bool", (DL_FUNC) &_torch_cpp_torch_namespace_feature_dropout__self_Tensor_p_double_train_bool, 3},
    {"_torch_cpp_torch_namespace_alpha_dropout_input_Tensor_p_double_train_bool", (DL_FUNC) &_torch_cpp_torch_namespace_alpha_dropout_input_Tensor_p_double_train_bool, 3},
    {"_torch_cpp_torch_namespace_alpha_dropout__self_Tensor_p_double_train_bool", (DL_FUNC) &_torch_cpp_torch_namespace_alpha_dropout__self_Tensor_p_double_train_bool, 3},
    {"_torch_cpp_torch_namespace_feature_alpha_dropout_input_Tensor_p_double_train_bool", (DL_FUNC) &_torch_cpp_torch_namespace_feature_alpha_dropout_input_Tensor_p_double_train_bool, 3},
    {"_torch_cpp_torch_namespace_feature_alpha_dropout__self_Tensor_p_double_train_bool", (DL_FUNC) &_torch_cpp_torch_namespace_feature_alpha_dropout__self_Tensor_p_double_train_bool, 3},
    {"_torch_cpp_torch_namespace_abs_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_abs_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_abs__self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_abs__self_Tensor, 1},
    {"_torch_cpp_torch_namespace_abs_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_abs_out_out_Tensor_self_Tensor, 2},
    {"_torch_cpp_torch_namespace_angle_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_angle_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_angle_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_angle_out_out_Tensor_self_Tensor, 2},
    {"_torch_cpp_torch_namespace_real_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_real_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_real_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_real_out_out_Tensor_self_Tensor, 2},
    {"_torch_cpp_torch_namespace_imag_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_imag_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_imag_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_imag_out_out_Tensor_self_Tensor, 2},
    {"_torch_cpp_torch_namespace_conj_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_conj_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_conj_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_conj_out_out_Tensor_self_Tensor, 2},
    {"_torch_cpp_torch_namespace_acos_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_acos_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_acos__self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_acos__self_Tensor, 1},
    {"_torch_cpp_torch_namespace_acos_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_acos_out_out_Tensor_self_Tensor, 2},
    {"_torch_cpp_torch_namespace_avg_pool1d_self_Tensor_kernel_size_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_avg_pool1d_self_Tensor_kernel_size_IntArrayRef, 6},
    {"_torch_cpp_torch_namespace_adaptive_avg_pool1d_self_Tensor_output_size_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_adaptive_avg_pool1d_self_Tensor_output_size_IntArrayRef, 2},
    {"_torch_cpp_torch_namespace_adaptive_max_pool1d_self_Tensor_output_size_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_adaptive_max_pool1d_self_Tensor_output_size_IntArrayRef, 2},
    {"_torch_cpp_torch_namespace_add_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_add_self_Tensor_other_Tensor, 3},
    {"_torch_cpp_torch_namespace_add_out_out_Tensor_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_add_out_out_Tensor_self_Tensor_other_Tensor, 4},
    {"_torch_cpp_torch_namespace_add_self_Tensor_other_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace_add_self_Tensor_other_Scalar, 3},
    {"_torch_cpp_torch_namespace_addmv_self_Tensor_mat_Tensor_vec_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_addmv_self_Tensor_mat_Tensor_vec_Tensor, 5},
    {"_torch_cpp_torch_namespace_addmv__self_Tensor_mat_Tensor_vec_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_addmv__self_Tensor_mat_Tensor_vec_Tensor, 5},
    {"_torch_cpp_torch_namespace_addmv_out_out_Tensor_self_Tensor_mat_Tensor_vec_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_addmv_out_out_Tensor_self_Tensor_mat_Tensor_vec_Tensor, 6},
    {"_torch_cpp_torch_namespace_addr_self_Tensor_vec1_Tensor_vec2_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_addr_self_Tensor_vec1_Tensor_vec2_Tensor, 5},
    {"_torch_cpp_torch_namespace_addr_out_out_Tensor_self_Tensor_vec1_Tensor_vec2_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_addr_out_out_Tensor_self_Tensor_vec1_Tensor_vec2_Tensor, 6},
    {"_torch_cpp_torch_namespace_affine_grid_generator_theta_Tensor_size_IntArrayRef_align_corners_bool", (DL_FUNC) &_torch_cpp_torch_namespace_affine_grid_generator_theta_Tensor_size_IntArrayRef_align_corners_bool, 3},
    {"_torch_cpp_torch_namespace_affine_grid_generator_backward_grad_Tensor_size_IntArrayRef_align_corners_bool", (DL_FUNC) &_torch_cpp_torch_namespace_affine_grid_generator_backward_grad_Tensor_size_IntArrayRef_align_corners_bool, 3},
    {"_torch_cpp_torch_namespace_all_self_Tensor_dim_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_all_self_Tensor_dim_int64_t, 3},
    {"_torch_cpp_torch_namespace_all_out_out_Tensor_self_Tensor_dim_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_all_out_out_Tensor_self_Tensor_dim_int64_t, 4},
    {"_torch_cpp_torch_namespace_all_self_Tensor_dim_Dimname", (DL_FUNC) &_torch_cpp_torch_namespace_all_self_Tensor_dim_Dimname, 3},
    {"_torch_cpp_torch_namespace_all_out_out_Tensor_self_Tensor_dim_Dimname", (DL_FUNC) &_torch_cpp_torch_namespace_all_out_out_Tensor_self_Tensor_dim_Dimname, 4},
    {"_torch_cpp_torch_namespace_allclose_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_allclose_self_Tensor_other_Tensor, 5},
    {"_torch_cpp_torch_namespace_any_self_Tensor_dim_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_any_self_Tensor_dim_int64_t, 3},
    {"_torch_cpp_torch_namespace_any_out_out_Tensor_self_Tensor_dim_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_any_out_out_Tensor_self_Tensor_dim_int64_t, 4},
    {"_torch_cpp_torch_namespace_any_self_Tensor_dim_Dimname", (DL_FUNC) &_torch_cpp_torch_namespace_any_self_Tensor_dim_Dimname, 3},
    {"_torch_cpp_torch_namespace_any_out_out_Tensor_self_Tensor_dim_Dimname", (DL_FUNC) &_torch_cpp_torch_namespace_any_out_out_Tensor_self_Tensor_dim_Dimname, 4},
    {"_torch_cpp_torch_namespace_arange_end_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace_arange_end_Scalar, 2},
    {"_torch_cpp_torch_namespace_arange_start_Scalar_end_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace_arange_start_Scalar_end_Scalar, 3},
    {"_torch_cpp_torch_namespace_arange_start_Scalar_end_Scalar_step_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace_arange_start_Scalar_end_Scalar_step_Scalar, 4},
    {"_torch_cpp_torch_namespace_arange_out_out_Tensor_end_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace_arange_out_out_Tensor_end_Scalar, 2},
    {"_torch_cpp_torch_namespace_arange_out_out_Tensor_start_Scalar_end_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace_arange_out_out_Tensor_start_Scalar_end_Scalar, 4},
    {"_torch_cpp_torch_namespace__dim_arange_like_Tensor_dim_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace__dim_arange_like_Tensor_dim_int64_t, 2},
    {"_torch_cpp_torch_namespace_argmax_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_argmax_self_Tensor, 3},
    {"_torch_cpp_torch_namespace_argmin_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_argmin_self_Tensor, 3},
    {"_torch_cpp_torch_namespace_as_strided_self_Tensor_size_IntArrayRef_stride_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_as_strided_self_Tensor_size_IntArrayRef_stride_IntArrayRef, 4},
    {"_torch_cpp_torch_namespace_as_strided__self_Tensor_size_IntArrayRef_stride_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_as_strided__self_Tensor_size_IntArrayRef_stride_IntArrayRef, 4},
    {"_torch_cpp_torch_namespace_asin_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_asin_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_asin__self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_asin__self_Tensor, 1},
    {"_torch_cpp_torch_namespace_asin_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_asin_out_out_Tensor_self_Tensor, 2},
    {"_torch_cpp_torch_namespace_atan_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_atan_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_atan__self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_atan__self_Tensor, 1},
    {"_torch_cpp_torch_namespace_atan_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_atan_out_out_Tensor_self_Tensor, 2},
    {"_torch_cpp_torch_namespace_baddbmm_self_Tensor_batch1_Tensor_batch2_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_baddbmm_self_Tensor_batch1_Tensor_batch2_Tensor, 5},
    {"_torch_cpp_torch_namespace__baddbmm_mkl__self_Tensor_batch1_Tensor_batch2_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace__baddbmm_mkl__self_Tensor_batch1_Tensor_batch2_Tensor, 5},
    {"_torch_cpp_torch_namespace_baddbmm_out_out_Tensor_self_Tensor_batch1_Tensor_batch2_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_baddbmm_out_out_Tensor_self_Tensor_batch1_Tensor_batch2_Tensor, 6},
    {"_torch_cpp_torch_namespace_bartlett_window_window_length_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_bartlett_window_window_length_int64_t, 2},
    {"_torch_cpp_torch_namespace_bartlett_window_window_length_int64_t_periodic_bool", (DL_FUNC) &_torch_cpp_torch_namespace_bartlett_window_window_length_int64_t_periodic_bool, 3},
    {"_torch_cpp_torch_namespace_batch_norm_input_Tensor_weight_Tensor_bias_Tensor_running_mean_Tensor_running_var_Tensor_training_bool_momentum_double_eps_double_cudnn_enabled_bool", (DL_FUNC) &_torch_cpp_torch_namespace_batch_norm_input_Tensor_weight_Tensor_bias_Tensor_running_mean_Tensor_running_var_Tensor_training_bool_momentum_double_eps_double_cudnn_enabled_bool, 9},
    {"_torch_cpp_torch_namespace__batch_norm_impl_index_input_Tensor_weight_Tensor_bias_Tensor_running_mean_Tensor_running_var_Tensor_training_bool_momentum_double_eps_double_cudnn_enabled_bool", (DL_FUNC) &_torch_cpp_torch_namespace__batch_norm_impl_index_input_Tensor_weight_Tensor_bias_Tensor_running_mean_Tensor_running_var_Tensor_training_bool_momentum_double_eps_double_cudnn_enabled_bool, 9},
    {"_torch_cpp_torch_namespace__batch_norm_impl_index_backward_impl_index_int64_t_input_Tensor_grad_output_Tensor_weight_Tensor_running_mean_Tensor_running_var_Tensor_save_mean_Tensor_save_var_transform_Tensor_train_bool_eps_double_output_mask_stdarraybool3_reservedSpace_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace__batch_norm_impl_index_backward_impl_index_int64_t_input_Tensor_grad_output_Tensor_weight_Tensor_running_mean_Tensor_running_var_Tensor_save_mean_Tensor_save_var_transform_Tensor_train_bool_eps_double_output_mask_stdarraybool3_reservedSpace_Tensor, 12},
    {"_torch_cpp_torch_namespace_bernoulli_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_bernoulli_self_Tensor, 2},
    {"_torch_cpp_torch_namespace_bernoulli_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_bernoulli_out_out_Tensor_self_Tensor, 3},
    {"_torch_cpp_torch_namespace_bernoulli_self_Tensor_p_double", (DL_FUNC) &_torch_cpp_torch_namespace_bernoulli_self_Tensor_p_double, 3},
    {"_torch_cpp_torch_namespace_bilinear_input1_Tensor_input2_Tensor_weight_Tensor_bias_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_bilinear_input1_Tensor_input2_Tensor_weight_Tensor_bias_Tensor, 4},
    {"_torch_cpp_torch_namespace_binary_cross_entropy_with_logits_self_Tensor_target_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_binary_cross_entropy_with_logits_self_Tensor_target_Tensor, 5},
    {"_torch_cpp_torch_namespace_binary_cross_entropy_with_logits_backward_grad_output_Tensor_self_Tensor_target_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_binary_cross_entropy_with_logits_backward_grad_output_Tensor_self_Tensor_target_Tensor, 6},
    {"_torch_cpp_torch_namespace_bincount_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_bincount_self_Tensor, 3},
    {"_torch_cpp_torch_namespace_bitwise_not_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_bitwise_not_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_bitwise_not_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_bitwise_not_out_out_Tensor_self_Tensor, 2},
    {"_torch_cpp_torch_namespace_logical_not_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_logical_not_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_logical_not_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_logical_not_out_out_Tensor_self_Tensor, 2},
    {"_torch_cpp_torch_namespace_logical_xor_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_logical_xor_self_Tensor_other_Tensor, 2},
    {"_torch_cpp_torch_namespace_logical_xor_out_out_Tensor_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_logical_xor_out_out_Tensor_self_Tensor_other_Tensor, 3},
    {"_torch_cpp_torch_namespace_blackman_window_window_length_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_blackman_window_window_length_int64_t, 2},
    {"_torch_cpp_torch_namespace_blackman_window_window_length_int64_t_periodic_bool", (DL_FUNC) &_torch_cpp_torch_namespace_blackman_window_window_length_int64_t_periodic_bool, 3},
    {"_torch_cpp_torch_namespace_bmm_self_Tensor_mat2_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_bmm_self_Tensor_mat2_Tensor, 2},
    {"_torch_cpp_torch_namespace_bmm_out_out_Tensor_self_Tensor_mat2_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_bmm_out_out_Tensor_self_Tensor_mat2_Tensor, 3},
    {"_torch_cpp_torch_namespace_broadcast_tensors_tensors_TensorList", (DL_FUNC) &_torch_cpp_torch_namespace_broadcast_tensors_tensors_TensorList, 1},
    {"_torch_cpp_torch_namespace_cat_tensors_TensorList", (DL_FUNC) &_torch_cpp_torch_namespace_cat_tensors_TensorList, 2},
    {"_torch_cpp_torch_namespace_cat_out_out_Tensor_tensors_TensorList", (DL_FUNC) &_torch_cpp_torch_namespace_cat_out_out_Tensor_tensors_TensorList, 3},
    {"_torch_cpp_torch_namespace_cat_tensors_TensorList_dim_Dimname", (DL_FUNC) &_torch_cpp_torch_namespace_cat_tensors_TensorList_dim_Dimname, 2},
    {"_torch_cpp_torch_namespace_cat_out_out_Tensor_tensors_TensorList_dim_Dimname", (DL_FUNC) &_torch_cpp_torch_namespace_cat_out_out_Tensor_tensors_TensorList_dim_Dimname, 3},
    {"_torch_cpp_torch_namespace_ceil_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_ceil_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_ceil__self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_ceil__self_Tensor, 1},
    {"_torch_cpp_torch_namespace_ceil_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_ceil_out_out_Tensor_self_Tensor, 2},
    {"_torch_cpp_torch_namespace_chain_matmul_matrices_TensorList", (DL_FUNC) &_torch_cpp_torch_namespace_chain_matmul_matrices_TensorList, 1},
    {"_torch_cpp_torch_namespace_chunk_self_Tensor_chunks_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_chunk_self_Tensor_chunks_int64_t, 3},
    {"_torch_cpp_torch_namespace_clamp_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_clamp_self_Tensor, 3},
    {"_torch_cpp_torch_namespace_clamp__self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_clamp__self_Tensor, 3},
    {"_torch_cpp_torch_namespace_clamp_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_clamp_out_out_Tensor_self_Tensor, 4},
    {"_torch_cpp_torch_namespace_clamp_max_self_Tensor_max_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace_clamp_max_self_Tensor_max_Scalar, 2},
    {"_torch_cpp_torch_namespace_clamp_max__self_Tensor_max_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace_clamp_max__self_Tensor_max_Scalar, 2},
    {"_torch_cpp_torch_namespace_clamp_max_out_out_Tensor_self_Tensor_max_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace_clamp_max_out_out_Tensor_self_Tensor_max_Scalar, 3},
    {"_torch_cpp_torch_namespace_clamp_min_self_Tensor_min_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace_clamp_min_self_Tensor_min_Scalar, 2},
    {"_torch_cpp_torch_namespace_clamp_min__self_Tensor_min_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace_clamp_min__self_Tensor_min_Scalar, 2},
    {"_torch_cpp_torch_namespace_clamp_min_out_out_Tensor_self_Tensor_min_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace_clamp_min_out_out_Tensor_self_Tensor_min_Scalar, 3},
    {"_torch_cpp_torch_namespace_cudnn_is_acceptable_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_cudnn_is_acceptable_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_constant_pad_nd_self_Tensor_pad_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_constant_pad_nd_self_Tensor_pad_IntArrayRef, 3},
    {"_torch_cpp_torch_namespace_convolution_input_Tensor_weight_Tensor_bias_Tensor_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef_transposed_bool_output_padding_IntArrayRef_groups_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_convolution_input_Tensor_weight_Tensor_bias_Tensor_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef_transposed_bool_output_padding_IntArrayRef_groups_int64_t, 9},
    {"_torch_cpp_torch_namespace_convolution_overrideable_input_Tensor_weight_Tensor_bias_Tensor_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef_transposed_bool_output_padding_IntArrayRef_groups_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_convolution_overrideable_input_Tensor_weight_Tensor_bias_Tensor_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef_transposed_bool_output_padding_IntArrayRef_groups_int64_t, 9},
    {"_torch_cpp_torch_namespace_convolution_backward_overrideable_grad_output_Tensor_input_Tensor_weight_Tensor_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef_transposed_bool_output_padding_IntArrayRef_groups_int64_t_output_mask_stdarraybool3", (DL_FUNC) &_torch_cpp_torch_namespace_convolution_backward_overrideable_grad_output_Tensor_input_Tensor_weight_Tensor_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef_transposed_bool_output_padding_IntArrayRef_groups_int64_t_output_mask_stdarraybool3, 10},
    {"_torch_cpp_torch_namespace__convolution_input_Tensor_weight_Tensor_bias_Tensor_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef_transposed_bool_output_padding_IntArrayRef_groups_int64_t_benchmark_bool_deterministic_bool_cudnn_enabled_bool", (DL_FUNC) &_torch_cpp_torch_namespace__convolution_input_Tensor_weight_Tensor_bias_Tensor_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef_transposed_bool_output_padding_IntArrayRef_groups_int64_t_benchmark_bool_deterministic_bool_cudnn_enabled_bool, 12},
    {"_torch_cpp_torch_namespace__convolution_nogroup_input_Tensor_weight_Tensor_bias_Tensor_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef_transposed_bool_output_padding_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace__convolution_nogroup_input_Tensor_weight_Tensor_bias_Tensor_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef_transposed_bool_output_padding_IntArrayRef, 8},
    {"_torch_cpp_torch_namespace__convolution_double_backward_ggI_Tensor_ggW_Tensor_ggb_Tensor_gO_Tensor_weight_Tensor_self_Tensor_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef_transposed_bool_output_padding_IntArrayRef_groups_int64_t_benchmark_bool_deterministic_bool_cudnn_enabled_bool_output_mask_stdarraybool3", (DL_FUNC) &_torch_cpp_torch_namespace__convolution_double_backward_ggI_Tensor_ggW_Tensor_ggb_Tensor_gO_Tensor_weight_Tensor_self_Tensor_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef_transposed_bool_output_padding_IntArrayRef_groups_int64_t_benchmark_bool_deterministic_bool_cudnn_enabled_bool_output_mask_stdarraybool3, 16},
    {"_torch_cpp_torch_namespace_conv1d_input_Tensor_weight_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_conv1d_input_Tensor_weight_Tensor, 7},
    {"_torch_cpp_torch_namespace_conv2d_input_Tensor_weight_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_conv2d_input_Tensor_weight_Tensor, 7},
    {"_torch_cpp_torch_namespace_conv3d_input_Tensor_weight_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_conv3d_input_Tensor_weight_Tensor, 7},
    {"_torch_cpp_torch_namespace_conv_tbc_self_Tensor_weight_Tensor_bias_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_conv_tbc_self_Tensor_weight_Tensor_bias_Tensor, 4},
    {"_torch_cpp_torch_namespace_conv_tbc_backward_self_Tensor_input_Tensor_weight_Tensor_bias_Tensor_pad_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_conv_tbc_backward_self_Tensor_input_Tensor_weight_Tensor_bias_Tensor_pad_int64_t, 5},
    {"_torch_cpp_torch_namespace_conv_transpose1d_input_Tensor_weight_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_conv_transpose1d_input_Tensor_weight_Tensor, 8},
    {"_torch_cpp_torch_namespace_conv_transpose2d_input_Tensor_weight_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_conv_transpose2d_input_Tensor_weight_Tensor, 8},
    {"_torch_cpp_torch_namespace_conv_transpose3d_input_Tensor_weight_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_conv_transpose3d_input_Tensor_weight_Tensor, 8},
    {"_torch_cpp_torch_namespace__copy_from_self_Tensor_dst_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace__copy_from_self_Tensor_dst_Tensor, 3},
    {"_torch_cpp_torch_namespace_cos_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_cos_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_cos__self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_cos__self_Tensor, 1},
    {"_torch_cpp_torch_namespace_cos_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_cos_out_out_Tensor_self_Tensor, 2},
    {"_torch_cpp_torch_namespace_cosh_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_cosh_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_cosh__self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_cosh__self_Tensor, 1},
    {"_torch_cpp_torch_namespace_cosh_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_cosh_out_out_Tensor_self_Tensor, 2},
    {"_torch_cpp_torch_namespace_cosine_embedding_loss_input1_Tensor_input2_Tensor_target_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_cosine_embedding_loss_input1_Tensor_input2_Tensor_target_Tensor, 5},
    {"_torch_cpp_torch_namespace_cudnn_affine_grid_generator_theta_Tensor_FALSE_int64_t_C_int64_t_H_int64_t_W_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_cudnn_affine_grid_generator_theta_Tensor_FALSE_int64_t_C_int64_t_H_int64_t_W_int64_t, 5},
    {"_torch_cpp_torch_namespace_cudnn_affine_grid_generator_backward_grad_Tensor_FALSE_int64_t_C_int64_t_H_int64_t_W_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_cudnn_affine_grid_generator_backward_grad_Tensor_FALSE_int64_t_C_int64_t_H_int64_t_W_int64_t, 5},
    {"_torch_cpp_torch_namespace_cudnn_batch_norm_input_Tensor_weight_Tensor_bias_Tensor_running_mean_Tensor_running_var_Tensor_training_bool_exponential_average_factor_double_epsilon_double", (DL_FUNC) &_torch_cpp_torch_namespace_cudnn_batch_norm_input_Tensor_weight_Tensor_bias_Tensor_running_mean_Tensor_running_var_Tensor_training_bool_exponential_average_factor_double_epsilon_double, 8},
    {"_torch_cpp_torch_namespace_cudnn_batch_norm_backward_input_Tensor_grad_output_Tensor_weight_Tensor_running_mean_Tensor_running_var_Tensor_save_mean_Tensor_save_var_Tensor_epsilon_double_reserveSpace_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_cudnn_batch_norm_backward_input_Tensor_grad_output_Tensor_weight_Tensor_running_mean_Tensor_running_var_Tensor_save_mean_Tensor_save_var_Tensor_epsilon_double_reserveSpace_Tensor, 9},
    {"_torch_cpp_torch_namespace_cudnn_convolution_self_Tensor_weight_Tensor_bias_Tensor_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_benchmark_bool_deterministic_bool", (DL_FUNC) &_torch_cpp_torch_namespace_cudnn_convolution_self_Tensor_weight_Tensor_bias_Tensor_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_benchmark_bool_deterministic_bool, 9},
    {"_torch_cpp_torch_namespace_cudnn_convolution_backward_input_self_size_IntArrayRef_grad_output_Tensor_weight_Tensor_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_benchmark_bool_deterministic_bool", (DL_FUNC) &_torch_cpp_torch_namespace_cudnn_convolution_backward_input_self_size_IntArrayRef_grad_output_Tensor_weight_Tensor_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_benchmark_bool_deterministic_bool, 9},
    {"_torch_cpp_torch_namespace_cudnn_convolution_backward_self_Tensor_grad_output_Tensor_weight_Tensor_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_benchmark_bool_deterministic_bool_output_mask_stdarraybool3", (DL_FUNC) &_torch_cpp_torch_namespace_cudnn_convolution_backward_self_Tensor_grad_output_Tensor_weight_Tensor_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_benchmark_bool_deterministic_bool_output_mask_stdarraybool3, 10},
    {"_torch_cpp_torch_namespace_cudnn_convolution_backward_bias_grad_output_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_cudnn_convolution_backward_bias_grad_output_Tensor, 1},
    {"_torch_cpp_torch_namespace_cudnn_convolution_backward_weight_weight_size_IntArrayRef_grad_output_Tensor_self_Tensor_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_benchmark_bool_deterministic_bool", (DL_FUNC) &_torch_cpp_torch_namespace_cudnn_convolution_backward_weight_weight_size_IntArrayRef_grad_output_Tensor_self_Tensor_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_benchmark_bool_deterministic_bool, 9},
    {"_torch_cpp_torch_namespace_cudnn_convolution_transpose_self_Tensor_weight_Tensor_bias_Tensor_padding_IntArrayRef_output_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_benchmark_bool_deterministic_bool", (DL_FUNC) &_torch_cpp_torch_namespace_cudnn_convolution_transpose_self_Tensor_weight_Tensor_bias_Tensor_padding_IntArrayRef_output_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_benchmark_bool_deterministic_bool, 10},
    {"_torch_cpp_torch_namespace_cudnn_convolution_transpose_backward_self_Tensor_grad_output_Tensor_weight_Tensor_padding_IntArrayRef_output_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_benchmark_bool_deterministic_bool_output_mask_stdarraybool3", (DL_FUNC) &_torch_cpp_torch_namespace_cudnn_convolution_transpose_backward_self_Tensor_grad_output_Tensor_weight_Tensor_padding_IntArrayRef_output_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_benchmark_bool_deterministic_bool_output_mask_stdarraybool3, 11},
    {"_torch_cpp_torch_namespace_cudnn_convolution_transpose_backward_bias_grad_output_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_cudnn_convolution_transpose_backward_bias_grad_output_Tensor, 1},
    {"_torch_cpp_torch_namespace_cudnn_convolution_transpose_backward_input_grad_output_Tensor_weight_Tensor_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_benchmark_bool_deterministic_bool", (DL_FUNC) &_torch_cpp_torch_namespace_cudnn_convolution_transpose_backward_input_grad_output_Tensor_weight_Tensor_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_benchmark_bool_deterministic_bool, 8},
    {"_torch_cpp_torch_namespace_cudnn_convolution_transpose_backward_weight_weight_size_IntArrayRef_grad_output_Tensor_self_Tensor_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_benchmark_bool_deterministic_bool", (DL_FUNC) &_torch_cpp_torch_namespace_cudnn_convolution_transpose_backward_weight_weight_size_IntArrayRef_grad_output_Tensor_self_Tensor_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_benchmark_bool_deterministic_bool, 9},
    {"_torch_cpp_torch_namespace_cudnn_grid_sampler_self_Tensor_grid_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_cudnn_grid_sampler_self_Tensor_grid_Tensor, 2},
    {"_torch_cpp_torch_namespace_cudnn_grid_sampler_backward_self_Tensor_grid_Tensor_grad_output_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_cudnn_grid_sampler_backward_self_Tensor_grid_Tensor_grad_output_Tensor, 3},
    {"_torch_cpp_torch_namespace_cumsum_self_Tensor_dim_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_cumsum_self_Tensor_dim_int64_t, 3},
    {"_torch_cpp_torch_namespace_cumsum_out_out_Tensor_self_Tensor_dim_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_cumsum_out_out_Tensor_self_Tensor_dim_int64_t, 4},
    {"_torch_cpp_torch_namespace_cumsum_self_Tensor_dim_Dimname", (DL_FUNC) &_torch_cpp_torch_namespace_cumsum_self_Tensor_dim_Dimname, 3},
    {"_torch_cpp_torch_namespace_cumsum_out_out_Tensor_self_Tensor_dim_Dimname", (DL_FUNC) &_torch_cpp_torch_namespace_cumsum_out_out_Tensor_self_Tensor_dim_Dimname, 4},
    {"_torch_cpp_torch_namespace_cumprod_self_Tensor_dim_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_cumprod_self_Tensor_dim_int64_t, 3},
    {"_torch_cpp_torch_namespace_cumprod_out_out_Tensor_self_Tensor_dim_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_cumprod_out_out_Tensor_self_Tensor_dim_int64_t, 4},
    {"_torch_cpp_torch_namespace_cumprod_self_Tensor_dim_Dimname", (DL_FUNC) &_torch_cpp_torch_namespace_cumprod_self_Tensor_dim_Dimname, 3},
    {"_torch_cpp_torch_namespace_cumprod_out_out_Tensor_self_Tensor_dim_Dimname", (DL_FUNC) &_torch_cpp_torch_namespace_cumprod_out_out_Tensor_self_Tensor_dim_Dimname, 4},
    {"_torch_cpp_torch_namespace_ctc_loss_log_probs_Tensor_targets_Tensor_input_lengths_IntArrayRef_target_lengths_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_ctc_loss_log_probs_Tensor_targets_Tensor_input_lengths_IntArrayRef_target_lengths_IntArrayRef, 7},
    {"_torch_cpp_torch_namespace_ctc_loss_log_probs_Tensor_targets_Tensor_input_lengths_Tensor_target_lengths_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_ctc_loss_log_probs_Tensor_targets_Tensor_input_lengths_Tensor_target_lengths_Tensor, 7},
    {"_torch_cpp_torch_namespace__ctc_loss_log_probs_Tensor_targets_Tensor_input_lengths_IntArrayRef_target_lengths_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace__ctc_loss_log_probs_Tensor_targets_Tensor_input_lengths_IntArrayRef_target_lengths_IntArrayRef, 6},
    {"_torch_cpp_torch_namespace__ctc_loss_backward_grad_Tensor_log_probs_Tensor_targets_Tensor_input_lengths_IntArrayRef_target_lengths_IntArrayRef_neg_log_likelihood_Tensor_log_alpha_Tensor_blank_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace__ctc_loss_backward_grad_Tensor_log_probs_Tensor_targets_Tensor_input_lengths_IntArrayRef_target_lengths_IntArrayRef_neg_log_likelihood_Tensor_log_alpha_Tensor_blank_int64_t, 9},
    {"_torch_cpp_torch_namespace_det_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_det_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_diag_embed_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_diag_embed_self_Tensor, 4},
    {"_torch_cpp_torch_namespace_diagflat_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_diagflat_self_Tensor, 2},
    {"_torch_cpp_torch_namespace_diagonal_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_diagonal_self_Tensor, 4},
    {"_torch_cpp_torch_namespace_div_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_div_self_Tensor_other_Tensor, 2},
    {"_torch_cpp_torch_namespace_div_out_out_Tensor_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_div_out_out_Tensor_self_Tensor_other_Tensor, 3},
    {"_torch_cpp_torch_namespace_div_self_Tensor_other_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace_div_self_Tensor_other_Scalar, 2},
    {"_torch_cpp_torch_namespace_dot_self_Tensor_tensor_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_dot_self_Tensor_tensor_Tensor, 2},
    {"_torch_cpp_torch_namespace_dot_out_out_Tensor_self_Tensor_tensor_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_dot_out_out_Tensor_self_Tensor_tensor_Tensor, 3},
    {"_torch_cpp_torch_namespace_einsum_equation_stdstring_tensors_TensorList", (DL_FUNC) &_torch_cpp_torch_namespace_einsum_equation_stdstring_tensors_TensorList, 2},
    {"_torch_cpp_torch_namespace_embedding_weight_Tensor_indices_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_embedding_weight_Tensor_indices_Tensor, 5},
    {"_torch_cpp_torch_namespace_embedding_backward_grad_Tensor_indices_Tensor_num_weights_int64_t_padding_idx_int64_t_scale_grad_by_freq_bool_sparse_bool", (DL_FUNC) &_torch_cpp_torch_namespace_embedding_backward_grad_Tensor_indices_Tensor_num_weights_int64_t_padding_idx_int64_t_scale_grad_by_freq_bool_sparse_bool, 6},
    {"_torch_cpp_torch_namespace_embedding_dense_backward_grad_output_Tensor_indices_Tensor_num_weights_int64_t_padding_idx_int64_t_scale_grad_by_freq_bool", (DL_FUNC) &_torch_cpp_torch_namespace_embedding_dense_backward_grad_output_Tensor_indices_Tensor_num_weights_int64_t_padding_idx_int64_t_scale_grad_by_freq_bool, 5},
    {"_torch_cpp_torch_namespace_embedding_renorm__self_Tensor_indices_Tensor_max_norm_double_norm_type_double", (DL_FUNC) &_torch_cpp_torch_namespace_embedding_renorm__self_Tensor_indices_Tensor_max_norm_double_norm_type_double, 4},
    {"_torch_cpp_torch_namespace_embedding_sparse_backward_grad_Tensor_indices_Tensor_num_weights_int64_t_padding_idx_int64_t_scale_grad_by_freq_bool", (DL_FUNC) &_torch_cpp_torch_namespace_embedding_sparse_backward_grad_Tensor_indices_Tensor_num_weights_int64_t_padding_idx_int64_t_scale_grad_by_freq_bool, 5},
    {"_torch_cpp_torch_namespace_embedding_bag_weight_Tensor_indices_Tensor_offsets_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_embedding_bag_weight_Tensor_indices_Tensor_offsets_Tensor, 7},
    {"_torch_cpp_torch_namespace__embedding_bag_weight_Tensor_indices_Tensor_offsets_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace__embedding_bag_weight_Tensor_indices_Tensor_offsets_Tensor, 7},
    {"_torch_cpp_torch_namespace__embedding_bag_backward_grad_Tensor_indices_Tensor_offsets_Tensor_offset2bag_Tensor_bag_size_Tensor_maximum_indices_Tensor_num_weights_int64_t_scale_grad_by_freq_bool_mode_int64_t_sparse_bool_per_sample_weights_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace__embedding_bag_backward_grad_Tensor_indices_Tensor_offsets_Tensor_offset2bag_Tensor_bag_size_Tensor_maximum_indices_Tensor_num_weights_int64_t_scale_grad_by_freq_bool_mode_int64_t_sparse_bool_per_sample_weights_Tensor, 11},
    {"_torch_cpp_torch_namespace__embedding_bag_sparse_backward_grad_Tensor_indices_Tensor_offsets_Tensor_offset2bag_Tensor_bag_size_Tensor_num_weights_int64_t_scale_grad_by_freq_bool_mode_int64_t_per_sample_weights_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace__embedding_bag_sparse_backward_grad_Tensor_indices_Tensor_offsets_Tensor_offset2bag_Tensor_bag_size_Tensor_num_weights_int64_t_scale_grad_by_freq_bool_mode_int64_t_per_sample_weights_Tensor, 9},
    {"_torch_cpp_torch_namespace__embedding_bag_dense_backward_grad_Tensor_indices_Tensor_offsets_Tensor_offset2bag_Tensor_bag_size_Tensor_maximum_indices_Tensor_num_weights_int64_t_scale_grad_by_freq_bool_mode_int64_t_per_sample_weights_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace__embedding_bag_dense_backward_grad_Tensor_indices_Tensor_offsets_Tensor_offset2bag_Tensor_bag_size_Tensor_maximum_indices_Tensor_num_weights_int64_t_scale_grad_by_freq_bool_mode_int64_t_per_sample_weights_Tensor, 10},
    {"_torch_cpp_torch_namespace__embedding_bag_per_sample_weights_backward_grad_Tensor_weight_Tensor_indices_Tensor_offsets_Tensor_offset2bag_Tensor_mode_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace__embedding_bag_per_sample_weights_backward_grad_Tensor_weight_Tensor_indices_Tensor_offsets_Tensor_offset2bag_Tensor_mode_int64_t, 6},
    {"_torch_cpp_torch_namespace_empty_size_IntArrayRef_names_DimnameList", (DL_FUNC) &_torch_cpp_torch_namespace_empty_size_IntArrayRef_names_DimnameList, 4},
    {"_torch_cpp_torch_namespace_empty_size_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_empty_size_IntArrayRef, 3},
    {"_torch_cpp_torch_namespace__empty_affine_quantized_size_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace__empty_affine_quantized_size_IntArrayRef, 5},
    {"_torch_cpp_torch_namespace__empty_per_channel_affine_quantized_size_IntArrayRef_scales_Tensor_zero_points_Tensor_axis_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace__empty_per_channel_affine_quantized_size_IntArrayRef_scales_Tensor_zero_points_Tensor_axis_int64_t, 6},
    {"_torch_cpp_torch_namespace_empty_out_out_Tensor_size_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_empty_out_out_Tensor_size_IntArrayRef, 3},
    {"_torch_cpp_torch_namespace_empty_like_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_empty_like_self_Tensor, 2},
    {"_torch_cpp_torch_namespace_empty_like_self_Tensor_options_TensorOptions", (DL_FUNC) &_torch_cpp_torch_namespace_empty_like_self_Tensor_options_TensorOptions, 3},
    {"_torch_cpp_torch_namespace_empty_strided_size_IntArrayRef_stride_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_empty_strided_size_IntArrayRef_stride_IntArrayRef, 3},
    {"_torch_cpp_torch_namespace_erf_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_erf_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_erf__self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_erf__self_Tensor, 1},
    {"_torch_cpp_torch_namespace_erf_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_erf_out_out_Tensor_self_Tensor, 2},
    {"_torch_cpp_torch_namespace_erfc_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_erfc_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_erfc__self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_erfc__self_Tensor, 1},
    {"_torch_cpp_torch_namespace_erfc_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_erfc_out_out_Tensor_self_Tensor, 2},
    {"_torch_cpp_torch_namespace_exp_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_exp_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_exp__self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_exp__self_Tensor, 1},
    {"_torch_cpp_torch_namespace_exp_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_exp_out_out_Tensor_self_Tensor, 2},
    {"_torch_cpp_torch_namespace_expm1_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_expm1_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_expm1__self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_expm1__self_Tensor, 1},
    {"_torch_cpp_torch_namespace_expm1_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_expm1_out_out_Tensor_self_Tensor, 2},
    {"_torch_cpp_torch_namespace_eye_n_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_eye_n_int64_t, 2},
    {"_torch_cpp_torch_namespace_eye_n_int64_t_m_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_eye_n_int64_t_m_int64_t, 3},
    {"_torch_cpp_torch_namespace_eye_out_out_Tensor_n_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_eye_out_out_Tensor_n_int64_t, 2},
    {"_torch_cpp_torch_namespace_eye_out_out_Tensor_n_int64_t_m_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_eye_out_out_Tensor_n_int64_t_m_int64_t, 3},
    {"_torch_cpp_torch_namespace_flatten_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_flatten_self_Tensor, 3},
    {"_torch_cpp_torch_namespace_flatten_self_Tensor_start_dim_int64_t_end_dim_int64_t_out_dim_Dimname", (DL_FUNC) &_torch_cpp_torch_namespace_flatten_self_Tensor_start_dim_int64_t_end_dim_int64_t_out_dim_Dimname, 4},
    {"_torch_cpp_torch_namespace_flatten_self_Tensor_start_dim_Dimname_end_dim_Dimname_out_dim_Dimname", (DL_FUNC) &_torch_cpp_torch_namespace_flatten_self_Tensor_start_dim_Dimname_end_dim_Dimname_out_dim_Dimname, 4},
    {"_torch_cpp_torch_namespace_flatten_self_Tensor_dims_DimnameList_out_dim_Dimname", (DL_FUNC) &_torch_cpp_torch_namespace_flatten_self_Tensor_dims_DimnameList_out_dim_Dimname, 3},
    {"_torch_cpp_torch_namespace_fill__self_Tensor_value_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace_fill__self_Tensor_value_Scalar, 2},
    {"_torch_cpp_torch_namespace_fill__self_Tensor_value_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_fill__self_Tensor_value_Tensor, 2},
    {"_torch_cpp_torch_namespace_floor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_floor_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_floor__self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_floor__self_Tensor, 1},
    {"_torch_cpp_torch_namespace_floor_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_floor_out_out_Tensor_self_Tensor, 2},
    {"_torch_cpp_torch_namespace_frac_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_frac_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_frac__self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_frac__self_Tensor, 1},
    {"_torch_cpp_torch_namespace_frac_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_frac_out_out_Tensor_self_Tensor, 2},
    {"_torch_cpp_torch_namespace_full_size_IntArrayRef_fill_value_Scalar_names_DimnameList", (DL_FUNC) &_torch_cpp_torch_namespace_full_size_IntArrayRef_fill_value_Scalar_names_DimnameList, 4},
    {"_torch_cpp_torch_namespace_full_size_IntArrayRef_fill_value_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace_full_size_IntArrayRef_fill_value_Scalar, 3},
    {"_torch_cpp_torch_namespace_full_out_out_Tensor_size_IntArrayRef_fill_value_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace_full_out_out_Tensor_size_IntArrayRef_fill_value_Scalar, 3},
    {"_torch_cpp_torch_namespace_full_like_self_Tensor_fill_value_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace_full_like_self_Tensor_fill_value_Scalar, 3},
    {"_torch_cpp_torch_namespace_full_like_self_Tensor_fill_value_Scalar_options_TensorOptions", (DL_FUNC) &_torch_cpp_torch_namespace_full_like_self_Tensor_fill_value_Scalar_options_TensorOptions, 4},
    {"_torch_cpp_torch_namespace_from_file_filename_stdstring", (DL_FUNC) &_torch_cpp_torch_namespace_from_file_filename_stdstring, 4},
    {"_torch_cpp_torch_namespace_grid_sampler_input_Tensor_grid_Tensor_interpolation_mode_int64_t_padding_mode_int64_t_align_corners_bool", (DL_FUNC) &_torch_cpp_torch_namespace_grid_sampler_input_Tensor_grid_Tensor_interpolation_mode_int64_t_padding_mode_int64_t_align_corners_bool, 5},
    {"_torch_cpp_torch_namespace_grid_sampler_2d_input_Tensor_grid_Tensor_interpolation_mode_int64_t_padding_mode_int64_t_align_corners_bool", (DL_FUNC) &_torch_cpp_torch_namespace_grid_sampler_2d_input_Tensor_grid_Tensor_interpolation_mode_int64_t_padding_mode_int64_t_align_corners_bool, 5},
    {"_torch_cpp_torch_namespace_grid_sampler_2d_backward_grad_output_Tensor_input_Tensor_grid_Tensor_interpolation_mode_int64_t_padding_mode_int64_t_align_corners_bool", (DL_FUNC) &_torch_cpp_torch_namespace_grid_sampler_2d_backward_grad_output_Tensor_input_Tensor_grid_Tensor_interpolation_mode_int64_t_padding_mode_int64_t_align_corners_bool, 6},
    {"_torch_cpp_torch_namespace_grid_sampler_3d_input_Tensor_grid_Tensor_interpolation_mode_int64_t_padding_mode_int64_t_align_corners_bool", (DL_FUNC) &_torch_cpp_torch_namespace_grid_sampler_3d_input_Tensor_grid_Tensor_interpolation_mode_int64_t_padding_mode_int64_t_align_corners_bool, 5},
    {"_torch_cpp_torch_namespace_grid_sampler_3d_backward_grad_output_Tensor_input_Tensor_grid_Tensor_interpolation_mode_int64_t_padding_mode_int64_t_align_corners_bool", (DL_FUNC) &_torch_cpp_torch_namespace_grid_sampler_3d_backward_grad_output_Tensor_input_Tensor_grid_Tensor_interpolation_mode_int64_t_padding_mode_int64_t_align_corners_bool, 6},
    {"_torch_cpp_torch_namespace_hann_window_window_length_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_hann_window_window_length_int64_t, 2},
    {"_torch_cpp_torch_namespace_hann_window_window_length_int64_t_periodic_bool", (DL_FUNC) &_torch_cpp_torch_namespace_hann_window_window_length_int64_t_periodic_bool, 3},
    {"_torch_cpp_torch_namespace_hamming_window_window_length_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_hamming_window_window_length_int64_t, 2},
    {"_torch_cpp_torch_namespace_hamming_window_window_length_int64_t_periodic_bool", (DL_FUNC) &_torch_cpp_torch_namespace_hamming_window_window_length_int64_t_periodic_bool, 3},
    {"_torch_cpp_torch_namespace_hamming_window_window_length_int64_t_periodic_bool_alpha_double", (DL_FUNC) &_torch_cpp_torch_namespace_hamming_window_window_length_int64_t_periodic_bool_alpha_double, 4},
    {"_torch_cpp_torch_namespace_hamming_window_window_length_int64_t_periodic_bool_alpha_double_beta_double", (DL_FUNC) &_torch_cpp_torch_namespace_hamming_window_window_length_int64_t_periodic_bool_alpha_double_beta_double, 5},
    {"_torch_cpp_torch_namespace_hinge_embedding_loss_self_Tensor_target_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_hinge_embedding_loss_self_Tensor_target_Tensor, 4},
    {"_torch_cpp_torch_namespace_ger_self_Tensor_vec2_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_ger_self_Tensor_vec2_Tensor, 2},
    {"_torch_cpp_torch_namespace_ger_out_out_Tensor_self_Tensor_vec2_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_ger_out_out_Tensor_self_Tensor_vec2_Tensor, 3},
    {"_torch_cpp_torch_namespace_group_norm_input_Tensor_num_groups_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_group_norm_input_Tensor_num_groups_int64_t, 6},
    {"_torch_cpp_torch_namespace_fft_self_Tensor_signal_ndim_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_fft_self_Tensor_signal_ndim_int64_t, 3},
    {"_torch_cpp_torch_namespace_ifft_self_Tensor_signal_ndim_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_ifft_self_Tensor_signal_ndim_int64_t, 3},
    {"_torch_cpp_torch_namespace_rfft_self_Tensor_signal_ndim_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_rfft_self_Tensor_signal_ndim_int64_t, 4},
    {"_torch_cpp_torch_namespace_irfft_self_Tensor_signal_ndim_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_irfft_self_Tensor_signal_ndim_int64_t, 5},
    {"_torch_cpp_torch_namespace__fft_with_size_self_Tensor_signal_ndim_int64_t_complex_input_bool_complex_output_bool_inverse_bool_checked_signal_sizes_IntArrayRef_normalized_bool_onesided_bool_output_sizes_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace__fft_with_size_self_Tensor_signal_ndim_int64_t_complex_input_bool_complex_output_bool_inverse_bool_checked_signal_sizes_IntArrayRef_normalized_bool_onesided_bool_output_sizes_IntArrayRef, 9},
    {"_torch_cpp_torch_namespace__cufft_get_plan_cache_size_device_index_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace__cufft_get_plan_cache_size_device_index_int64_t, 1},
    {"_torch_cpp_torch_namespace__cufft_get_plan_cache_max_size_device_index_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace__cufft_get_plan_cache_max_size_device_index_int64_t, 1},
    {"_torch_cpp_torch_namespace__cufft_set_plan_cache_max_size_device_index_int64_t_max_size_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace__cufft_set_plan_cache_max_size_device_index_int64_t_max_size_int64_t, 2},
    {"_torch_cpp_torch_namespace__cufft_clear_plan_cache_device_index_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace__cufft_clear_plan_cache_device_index_int64_t, 1},
    {"_torch_cpp_torch_namespace_index_self_Tensor_indices_TensorList", (DL_FUNC) &_torch_cpp_torch_namespace_index_self_Tensor_indices_TensorList, 2},
    {"_torch_cpp_torch_namespace_index_copy_self_Tensor_dim_int64_t_index_Tensor_source_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_index_copy_self_Tensor_dim_int64_t_index_Tensor_source_Tensor, 4},
    {"_torch_cpp_torch_namespace_index_copy_self_Tensor_dim_Dimname_index_Tensor_source_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_index_copy_self_Tensor_dim_Dimname_index_Tensor_source_Tensor, 4},
    {"_torch_cpp_torch_namespace_index_put__self_Tensor_indices_TensorList_values_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_index_put__self_Tensor_indices_TensorList_values_Tensor, 4},
    {"_torch_cpp_torch_namespace_index_put_self_Tensor_indices_TensorList_values_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_index_put_self_Tensor_indices_TensorList_values_Tensor, 4},
    {"_torch_cpp_torch_namespace__index_put_impl__self_Tensor_indices_TensorList_values_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace__index_put_impl__self_Tensor_indices_TensorList_values_Tensor, 5},
    {"_torch_cpp_torch_namespace_instance_norm_input_Tensor_weight_Tensor_bias_Tensor_running_mean_Tensor_running_var_Tensor_use_input_stats_bool_momentum_double_eps_double_cudnn_enabled_bool", (DL_FUNC) &_torch_cpp_torch_namespace_instance_norm_input_Tensor_weight_Tensor_bias_Tensor_running_mean_Tensor_running_var_Tensor_use_input_stats_bool_momentum_double_eps_double_cudnn_enabled_bool, 9},
    {"_torch_cpp_torch_namespace_inverse_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_inverse_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_inverse_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_inverse_out_out_Tensor_self_Tensor, 2},
    {"_torch_cpp_torch_namespace__inverse_helper_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace__inverse_helper_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_isclose_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_isclose_self_Tensor_other_Tensor, 5},
    {"_torch_cpp_torch_namespace_isnan_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_isnan_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_is_distributed_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_is_distributed_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_is_floating_point_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_is_floating_point_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_is_complex_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_is_complex_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_is_nonzero_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_is_nonzero_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_is_same_size_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_is_same_size_self_Tensor_other_Tensor, 2},
    {"_torch_cpp_torch_namespace_is_signed_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_is_signed_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_kl_div_self_Tensor_target_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_kl_div_self_Tensor_target_Tensor, 3},
    {"_torch_cpp_torch_namespace_kl_div_backward_grad_output_Tensor_self_Tensor_target_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_kl_div_backward_grad_output_Tensor_self_Tensor_target_Tensor, 4},
    {"_torch_cpp_torch_namespace_kthvalue_self_Tensor_k_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_kthvalue_self_Tensor_k_int64_t, 4},
    {"_torch_cpp_torch_namespace_kthvalue_out_values_Tensor_indices_Tensor_self_Tensor_k_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_kthvalue_out_values_Tensor_indices_Tensor_self_Tensor_k_int64_t, 6},
    {"_torch_cpp_torch_namespace_kthvalue_self_Tensor_k_int64_t_dim_Dimname", (DL_FUNC) &_torch_cpp_torch_namespace_kthvalue_self_Tensor_k_int64_t_dim_Dimname, 4},
    {"_torch_cpp_torch_namespace_kthvalue_out_values_Tensor_indices_Tensor_self_Tensor_k_int64_t_dim_Dimname", (DL_FUNC) &_torch_cpp_torch_namespace_kthvalue_out_values_Tensor_indices_Tensor_self_Tensor_k_int64_t_dim_Dimname, 6},
    {"_torch_cpp_torch_namespace_layer_norm_input_Tensor_normalized_shape_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_layer_norm_input_Tensor_normalized_shape_IntArrayRef, 6},
    {"_torch_cpp_torch_namespace_native_layer_norm_input_Tensor_weight_Tensor_bias_Tensor_M_int64_t_FALSE_int64_t_eps_double", (DL_FUNC) &_torch_cpp_torch_namespace_native_layer_norm_input_Tensor_weight_Tensor_bias_Tensor_M_int64_t_FALSE_int64_t_eps_double, 6},
    {"_torch_cpp_torch_namespace_native_layer_norm_backward_grad_out_Tensor_input_Tensor_mean_Tensor_rstd_Tensor_weight_Tensor_M_int64_t_FALSE_int64_t_output_mask_stdarraybool3", (DL_FUNC) &_torch_cpp_torch_namespace_native_layer_norm_backward_grad_out_Tensor_input_Tensor_mean_Tensor_rstd_Tensor_weight_Tensor_M_int64_t_FALSE_int64_t_output_mask_stdarraybool3, 8},
    {"_torch_cpp_torch_namespace_linear_input_Tensor_weight_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_linear_input_Tensor_weight_Tensor, 3},
    {"_torch_cpp_torch_namespace_mkldnn_linear_input_Tensor_weight_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_mkldnn_linear_input_Tensor_weight_Tensor, 3},
    {"_torch_cpp_torch_namespace_fbgemm_linear_int8_weight_fp32_activation_input_Tensor_weight_Tensor_packed_Tensor_col_offsets_Tensor_weight_scale_Scalar_weight_zero_point_Scalar_bias_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_fbgemm_linear_int8_weight_fp32_activation_input_Tensor_weight_Tensor_packed_Tensor_col_offsets_Tensor_weight_scale_Scalar_weight_zero_point_Scalar_bias_Tensor, 7},
    {"_torch_cpp_torch_namespace_fbgemm_linear_int8_weight_input_Tensor_weight_Tensor_packed_Tensor_col_offsets_Tensor_weight_scale_Scalar_weight_zero_point_Scalar_bias_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_fbgemm_linear_int8_weight_input_Tensor_weight_Tensor_packed_Tensor_col_offsets_Tensor_weight_scale_Scalar_weight_zero_point_Scalar_bias_Tensor, 7},
    {"_torch_cpp_torch_namespace_fbgemm_linear_quantize_weight_input_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_fbgemm_linear_quantize_weight_input_Tensor, 1},
    {"_torch_cpp_torch_namespace_fbgemm_pack_gemm_matrix_fp16_input_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_fbgemm_pack_gemm_matrix_fp16_input_Tensor, 1},
    {"_torch_cpp_torch_namespace_fbgemm_linear_fp16_weight_fp32_activation_input_Tensor_packed_weight_Tensor_bias_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_fbgemm_linear_fp16_weight_fp32_activation_input_Tensor_packed_weight_Tensor_bias_Tensor, 3},
    {"_torch_cpp_torch_namespace_fbgemm_linear_fp16_weight_input_Tensor_packed_weight_Tensor_bias_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_fbgemm_linear_fp16_weight_input_Tensor_packed_weight_Tensor_bias_Tensor, 3},
    {"_torch_cpp_torch_namespace_fbgemm_pack_quantized_matrix_input_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_fbgemm_pack_quantized_matrix_input_Tensor, 1},
    {"_torch_cpp_torch_namespace_fbgemm_pack_quantized_matrix_input_Tensor_K_int64_t_FALSE_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_fbgemm_pack_quantized_matrix_input_Tensor_K_int64_t_FALSE_int64_t, 3},
    {"_torch_cpp_torch_namespace_linspace_start_Scalar_end_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace_linspace_start_Scalar_end_Scalar, 4},
    {"_torch_cpp_torch_namespace_linspace_out_out_Tensor_start_Scalar_end_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace_linspace_out_out_Tensor_start_Scalar_end_Scalar, 4},
    {"_torch_cpp_torch_namespace_log_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_log_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_log__self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_log__self_Tensor, 1},
    {"_torch_cpp_torch_namespace_log_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_log_out_out_Tensor_self_Tensor, 2},
    {"_torch_cpp_torch_namespace_log10_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_log10_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_log10__self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_log10__self_Tensor, 1},
    {"_torch_cpp_torch_namespace_log10_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_log10_out_out_Tensor_self_Tensor, 2},
    {"_torch_cpp_torch_namespace_log1p_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_log1p_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_log1p__self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_log1p__self_Tensor, 1},
    {"_torch_cpp_torch_namespace_log1p_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_log1p_out_out_Tensor_self_Tensor, 2},
    {"_torch_cpp_torch_namespace_log2_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_log2_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_log2__self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_log2__self_Tensor, 1},
    {"_torch_cpp_torch_namespace_log2_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_log2_out_out_Tensor_self_Tensor, 2},
    {"_torch_cpp_torch_namespace_logdet_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_logdet_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_logspace_start_Scalar_end_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace_logspace_start_Scalar_end_Scalar, 5},
    {"_torch_cpp_torch_namespace_logspace_out_out_Tensor_start_Scalar_end_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace_logspace_out_out_Tensor_start_Scalar_end_Scalar, 5},
    {"_torch_cpp_torch_namespace_log_softmax_self_Tensor_dim_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_log_softmax_self_Tensor_dim_int64_t, 3},
    {"_torch_cpp_torch_namespace_log_softmax_self_Tensor_dim_Dimname", (DL_FUNC) &_torch_cpp_torch_namespace_log_softmax_self_Tensor_dim_Dimname, 3},
    {"_torch_cpp_torch_namespace__log_softmax_self_Tensor_dim_int64_t_half_to_float_bool", (DL_FUNC) &_torch_cpp_torch_namespace__log_softmax_self_Tensor_dim_int64_t_half_to_float_bool, 3},
    {"_torch_cpp_torch_namespace__log_softmax_backward_data_grad_output_Tensor_output_Tensor_dim_int64_t_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace__log_softmax_backward_data_grad_output_Tensor_output_Tensor_dim_int64_t_self_Tensor, 4},
    {"_torch_cpp_torch_namespace_logsumexp_self_Tensor_dim_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_logsumexp_self_Tensor_dim_IntArrayRef, 3},
    {"_torch_cpp_torch_namespace_logsumexp_out_out_Tensor_self_Tensor_dim_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_logsumexp_out_out_Tensor_self_Tensor_dim_IntArrayRef, 4},
    {"_torch_cpp_torch_namespace_logsumexp_self_Tensor_dim_DimnameList", (DL_FUNC) &_torch_cpp_torch_namespace_logsumexp_self_Tensor_dim_DimnameList, 3},
    {"_torch_cpp_torch_namespace_logsumexp_out_out_Tensor_self_Tensor_dim_DimnameList", (DL_FUNC) &_torch_cpp_torch_namespace_logsumexp_out_out_Tensor_self_Tensor_dim_DimnameList, 4},
    {"_torch_cpp_torch_namespace_margin_ranking_loss_input1_Tensor_input2_Tensor_target_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_margin_ranking_loss_input1_Tensor_input2_Tensor_target_Tensor, 5},
    {"_torch_cpp_torch_namespace_matmul_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_matmul_self_Tensor_other_Tensor, 2},
    {"_torch_cpp_torch_namespace_matmul_out_out_Tensor_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_matmul_out_out_Tensor_self_Tensor_other_Tensor, 3},
    {"_torch_cpp_torch_namespace_matrix_rank_self_Tensor_tol_double", (DL_FUNC) &_torch_cpp_torch_namespace_matrix_rank_self_Tensor_tol_double, 3},
    {"_torch_cpp_torch_namespace_matrix_rank_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_matrix_rank_self_Tensor, 2},
    {"_torch_cpp_torch_namespace_matrix_power_self_Tensor_n_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_matrix_power_self_Tensor_n_int64_t, 2},
    {"_torch_cpp_torch_namespace_max_self_Tensor_dim_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_max_self_Tensor_dim_int64_t, 3},
    {"_torch_cpp_torch_namespace_max_out_max_Tensor_max_values_Tensor_self_Tensor_dim_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_max_out_max_Tensor_max_values_Tensor_self_Tensor_dim_int64_t, 5},
    {"_torch_cpp_torch_namespace_max_values_self_Tensor_dim_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_max_values_self_Tensor_dim_IntArrayRef, 3},
    {"_torch_cpp_torch_namespace_max_self_Tensor_dim_Dimname", (DL_FUNC) &_torch_cpp_torch_namespace_max_self_Tensor_dim_Dimname, 3},
    {"_torch_cpp_torch_namespace_max_out_max_Tensor_max_values_Tensor_self_Tensor_dim_Dimname", (DL_FUNC) &_torch_cpp_torch_namespace_max_out_max_Tensor_max_values_Tensor_self_Tensor_dim_Dimname, 5},
    {"_torch_cpp_torch_namespace_max_values_self_Tensor_dim_DimnameList", (DL_FUNC) &_torch_cpp_torch_namespace_max_values_self_Tensor_dim_DimnameList, 3},
    {"_torch_cpp_torch_namespace_max_pool1d_with_indices_self_Tensor_kernel_size_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_max_pool1d_with_indices_self_Tensor_kernel_size_IntArrayRef, 6},
    {"_torch_cpp_torch_namespace_max_pool1d_self_Tensor_kernel_size_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_max_pool1d_self_Tensor_kernel_size_IntArrayRef, 6},
    {"_torch_cpp_torch_namespace_max_pool2d_self_Tensor_kernel_size_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_max_pool2d_self_Tensor_kernel_size_IntArrayRef, 6},
    {"_torch_cpp_torch_namespace_mkldnn_max_pool2d_self_Tensor_kernel_size_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_mkldnn_max_pool2d_self_Tensor_kernel_size_IntArrayRef, 6},
    {"_torch_cpp_torch_namespace_quantized_max_pool2d_self_Tensor_kernel_size_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_quantized_max_pool2d_self_Tensor_kernel_size_IntArrayRef, 6},
    {"_torch_cpp_torch_namespace_max_pool3d_self_Tensor_kernel_size_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_max_pool3d_self_Tensor_kernel_size_IntArrayRef, 6},
    {"_torch_cpp_torch_namespace_mean_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_mean_self_Tensor, 2},
    {"_torch_cpp_torch_namespace_mean_self_Tensor_dim_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_mean_self_Tensor_dim_IntArrayRef, 4},
    {"_torch_cpp_torch_namespace_mean_out_out_Tensor_self_Tensor_dim_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_mean_out_out_Tensor_self_Tensor_dim_IntArrayRef, 5},
    {"_torch_cpp_torch_namespace_mean_self_Tensor_dim_DimnameList", (DL_FUNC) &_torch_cpp_torch_namespace_mean_self_Tensor_dim_DimnameList, 4},
    {"_torch_cpp_torch_namespace_mean_out_out_Tensor_self_Tensor_dim_DimnameList", (DL_FUNC) &_torch_cpp_torch_namespace_mean_out_out_Tensor_self_Tensor_dim_DimnameList, 5},
    {"_torch_cpp_torch_namespace_median_self_Tensor_dim_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_median_self_Tensor_dim_int64_t, 3},
    {"_torch_cpp_torch_namespace_median_out_values_Tensor_indices_Tensor_self_Tensor_dim_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_median_out_values_Tensor_indices_Tensor_self_Tensor_dim_int64_t, 5},
    {"_torch_cpp_torch_namespace_median_self_Tensor_dim_Dimname", (DL_FUNC) &_torch_cpp_torch_namespace_median_self_Tensor_dim_Dimname, 3},
    {"_torch_cpp_torch_namespace_median_out_values_Tensor_indices_Tensor_self_Tensor_dim_Dimname", (DL_FUNC) &_torch_cpp_torch_namespace_median_out_values_Tensor_indices_Tensor_self_Tensor_dim_Dimname, 5},
    {"_torch_cpp_torch_namespace_min_self_Tensor_dim_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_min_self_Tensor_dim_int64_t, 3},
    {"_torch_cpp_torch_namespace_min_out_min_Tensor_min_indices_Tensor_self_Tensor_dim_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_min_out_min_Tensor_min_indices_Tensor_self_Tensor_dim_int64_t, 5},
    {"_torch_cpp_torch_namespace_min_values_self_Tensor_dim_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_min_values_self_Tensor_dim_IntArrayRef, 3},
    {"_torch_cpp_torch_namespace_min_self_Tensor_dim_Dimname", (DL_FUNC) &_torch_cpp_torch_namespace_min_self_Tensor_dim_Dimname, 3},
    {"_torch_cpp_torch_namespace_min_out_min_Tensor_min_indices_Tensor_self_Tensor_dim_Dimname", (DL_FUNC) &_torch_cpp_torch_namespace_min_out_min_Tensor_min_indices_Tensor_self_Tensor_dim_Dimname, 5},
    {"_torch_cpp_torch_namespace_min_values_self_Tensor_dim_DimnameList", (DL_FUNC) &_torch_cpp_torch_namespace_min_values_self_Tensor_dim_DimnameList, 3},
    {"_torch_cpp_torch_namespace_mkldnn_convolution_self_Tensor_weight_Tensor_bias_Tensor_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_mkldnn_convolution_self_Tensor_weight_Tensor_bias_Tensor_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t, 7},
    {"_torch_cpp_torch_namespace_mkldnn_convolution_backward_input_self_size_IntArrayRef_grad_output_Tensor_weight_Tensor_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_bias_defined_bool", (DL_FUNC) &_torch_cpp_torch_namespace_mkldnn_convolution_backward_input_self_size_IntArrayRef_grad_output_Tensor_weight_Tensor_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_bias_defined_bool, 8},
    {"_torch_cpp_torch_namespace_mkldnn_convolution_backward_weights_weight_size_IntArrayRef_grad_output_Tensor_self_Tensor_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_bias_defined_bool", (DL_FUNC) &_torch_cpp_torch_namespace_mkldnn_convolution_backward_weights_weight_size_IntArrayRef_grad_output_Tensor_self_Tensor_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_bias_defined_bool, 8},
    {"_torch_cpp_torch_namespace_mkldnn_convolution_backward_self_Tensor_grad_output_Tensor_weight_Tensor_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_output_mask_stdarraybool3", (DL_FUNC) &_torch_cpp_torch_namespace_mkldnn_convolution_backward_self_Tensor_grad_output_Tensor_weight_Tensor_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_output_mask_stdarraybool3, 8},
    {"_torch_cpp_torch_namespace_miopen_batch_norm_input_Tensor_weight_Tensor_bias_Tensor_running_mean_Tensor_running_var_Tensor_training_bool_exponential_average_factor_double_epsilon_double", (DL_FUNC) &_torch_cpp_torch_namespace_miopen_batch_norm_input_Tensor_weight_Tensor_bias_Tensor_running_mean_Tensor_running_var_Tensor_training_bool_exponential_average_factor_double_epsilon_double, 8},
    {"_torch_cpp_torch_namespace_miopen_batch_norm_backward_input_Tensor_grad_output_Tensor_weight_Tensor_running_mean_Tensor_running_var_Tensor_save_mean_Tensor_save_var_Tensor_epsilon_double", (DL_FUNC) &_torch_cpp_torch_namespace_miopen_batch_norm_backward_input_Tensor_grad_output_Tensor_weight_Tensor_running_mean_Tensor_running_var_Tensor_save_mean_Tensor_save_var_Tensor_epsilon_double, 8},
    {"_torch_cpp_torch_namespace_miopen_convolution_self_Tensor_weight_Tensor_bias_Tensor_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_benchmark_bool_deterministic_bool", (DL_FUNC) &_torch_cpp_torch_namespace_miopen_convolution_self_Tensor_weight_Tensor_bias_Tensor_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_benchmark_bool_deterministic_bool, 9},
    {"_torch_cpp_torch_namespace_miopen_convolution_backward_input_self_size_IntArrayRef_grad_output_Tensor_weight_Tensor_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_benchmark_bool_deterministic_bool", (DL_FUNC) &_torch_cpp_torch_namespace_miopen_convolution_backward_input_self_size_IntArrayRef_grad_output_Tensor_weight_Tensor_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_benchmark_bool_deterministic_bool, 9},
    {"_torch_cpp_torch_namespace_miopen_convolution_backward_self_Tensor_grad_output_Tensor_weight_Tensor_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_benchmark_bool_deterministic_bool_output_mask_stdarraybool3", (DL_FUNC) &_torch_cpp_torch_namespace_miopen_convolution_backward_self_Tensor_grad_output_Tensor_weight_Tensor_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_benchmark_bool_deterministic_bool_output_mask_stdarraybool3, 10},
    {"_torch_cpp_torch_namespace_miopen_convolution_backward_bias_grad_output_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_miopen_convolution_backward_bias_grad_output_Tensor, 1},
    {"_torch_cpp_torch_namespace_miopen_convolution_backward_weight_weight_size_IntArrayRef_grad_output_Tensor_self_Tensor_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_benchmark_bool_deterministic_bool", (DL_FUNC) &_torch_cpp_torch_namespace_miopen_convolution_backward_weight_weight_size_IntArrayRef_grad_output_Tensor_self_Tensor_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_benchmark_bool_deterministic_bool, 9},
    {"_torch_cpp_torch_namespace_miopen_convolution_transpose_self_Tensor_weight_Tensor_bias_Tensor_padding_IntArrayRef_output_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_benchmark_bool_deterministic_bool", (DL_FUNC) &_torch_cpp_torch_namespace_miopen_convolution_transpose_self_Tensor_weight_Tensor_bias_Tensor_padding_IntArrayRef_output_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_benchmark_bool_deterministic_bool, 10},
    {"_torch_cpp_torch_namespace_miopen_convolution_transpose_backward_self_Tensor_grad_output_Tensor_weight_Tensor_padding_IntArrayRef_output_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_benchmark_bool_deterministic_bool_output_mask_stdarraybool3", (DL_FUNC) &_torch_cpp_torch_namespace_miopen_convolution_transpose_backward_self_Tensor_grad_output_Tensor_weight_Tensor_padding_IntArrayRef_output_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_benchmark_bool_deterministic_bool_output_mask_stdarraybool3, 11},
    {"_torch_cpp_torch_namespace_miopen_convolution_transpose_backward_input_grad_output_Tensor_weight_Tensor_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_benchmark_bool_deterministic_bool", (DL_FUNC) &_torch_cpp_torch_namespace_miopen_convolution_transpose_backward_input_grad_output_Tensor_weight_Tensor_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_benchmark_bool_deterministic_bool, 8},
    {"_torch_cpp_torch_namespace_miopen_convolution_transpose_backward_weight_weight_size_IntArrayRef_grad_output_Tensor_self_Tensor_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_benchmark_bool_deterministic_bool", (DL_FUNC) &_torch_cpp_torch_namespace_miopen_convolution_transpose_backward_weight_weight_size_IntArrayRef_grad_output_Tensor_self_Tensor_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_benchmark_bool_deterministic_bool, 9},
    {"_torch_cpp_torch_namespace_miopen_depthwise_convolution_self_Tensor_weight_Tensor_bias_Tensor_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_benchmark_bool_deterministic_bool", (DL_FUNC) &_torch_cpp_torch_namespace_miopen_depthwise_convolution_self_Tensor_weight_Tensor_bias_Tensor_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_benchmark_bool_deterministic_bool, 9},
    {"_torch_cpp_torch_namespace_miopen_depthwise_convolution_backward_input_self_size_IntArrayRef_grad_output_Tensor_weight_Tensor_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_benchmark_bool_deterministic_bool", (DL_FUNC) &_torch_cpp_torch_namespace_miopen_depthwise_convolution_backward_input_self_size_IntArrayRef_grad_output_Tensor_weight_Tensor_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_benchmark_bool_deterministic_bool, 9},
    {"_torch_cpp_torch_namespace_miopen_depthwise_convolution_backward_self_Tensor_grad_output_Tensor_weight_Tensor_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_benchmark_bool_deterministic_bool_output_mask_stdarraybool3", (DL_FUNC) &_torch_cpp_torch_namespace_miopen_depthwise_convolution_backward_self_Tensor_grad_output_Tensor_weight_Tensor_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_benchmark_bool_deterministic_bool_output_mask_stdarraybool3, 10},
    {"_torch_cpp_torch_namespace_miopen_depthwise_convolution_backward_weight_weight_size_IntArrayRef_grad_output_Tensor_self_Tensor_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_benchmark_bool_deterministic_bool", (DL_FUNC) &_torch_cpp_torch_namespace_miopen_depthwise_convolution_backward_weight_weight_size_IntArrayRef_grad_output_Tensor_self_Tensor_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_benchmark_bool_deterministic_bool, 9},
    {"_torch_cpp_torch_namespace_miopen_rnn_input_Tensor_weight_TensorList_weight_stride0_int64_t_hx_Tensor_cx_Tensor_mode_int64_t_hidden_size_int64_t_num_layers_int64_t_batch_first_bool_dropout_double_train_bool_bidirectional_bool_batch_sizes_IntArrayRef_dropout_state_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_miopen_rnn_input_Tensor_weight_TensorList_weight_stride0_int64_t_hx_Tensor_cx_Tensor_mode_int64_t_hidden_size_int64_t_num_layers_int64_t_batch_first_bool_dropout_double_train_bool_bidirectional_bool_batch_sizes_IntArrayRef_dropout_state_Tensor, 14},
    {"_torch_cpp_torch_namespace_miopen_rnn_backward_input_Tensor_weight_TensorList_weight_stride0_int64_t_weight_buf_Tensor_hx_Tensor_cx_Tensor_output_Tensor_grad_output_Tensor_grad_hy_Tensor_grad_cy_Tensor_mode_int64_t_hidden_size_int64_t_num_layers_int64_t_batch_first_bool_dropout_double_train_bool_bidirectional_bool_batch_sizes_IntArrayRef_dropout_state_Tensor_reserve_Tensor_output_mask_stdarraybool4", (DL_FUNC) &_torch_cpp_torch_namespace_miopen_rnn_backward_input_Tensor_weight_TensorList_weight_stride0_int64_t_weight_buf_Tensor_hx_Tensor_cx_Tensor_output_Tensor_grad_output_Tensor_grad_hy_Tensor_grad_cy_Tensor_mode_int64_t_hidden_size_int64_t_num_layers_int64_t_batch_first_bool_dropout_double_train_bool_bidirectional_bool_batch_sizes_IntArrayRef_dropout_state_Tensor_reserve_Tensor_output_mask_stdarraybool4, 21},
    {"_torch_cpp_torch_namespace_mm_self_Tensor_mat2_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_mm_self_Tensor_mat2_Tensor, 2},
    {"_torch_cpp_torch_namespace_mm_out_out_Tensor_self_Tensor_mat2_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_mm_out_out_Tensor_self_Tensor_mat2_Tensor, 3},
    {"_torch_cpp_torch_namespace__sparse_mm_sparse_Tensor_dense_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace__sparse_mm_sparse_Tensor_dense_Tensor, 2},
    {"_torch_cpp_torch_namespace_mode_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_mode_self_Tensor, 3},
    {"_torch_cpp_torch_namespace_mode_out_values_Tensor_indices_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_mode_out_values_Tensor_indices_Tensor_self_Tensor, 5},
    {"_torch_cpp_torch_namespace_mode_self_Tensor_dim_Dimname", (DL_FUNC) &_torch_cpp_torch_namespace_mode_self_Tensor_dim_Dimname, 3},
    {"_torch_cpp_torch_namespace_mode_out_values_Tensor_indices_Tensor_self_Tensor_dim_Dimname", (DL_FUNC) &_torch_cpp_torch_namespace_mode_out_values_Tensor_indices_Tensor_self_Tensor_dim_Dimname, 5},
    {"_torch_cpp_torch_namespace_mul_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_mul_self_Tensor_other_Tensor, 2},
    {"_torch_cpp_torch_namespace_mul_out_out_Tensor_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_mul_out_out_Tensor_self_Tensor_other_Tensor, 3},
    {"_torch_cpp_torch_namespace_mul_self_Tensor_other_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace_mul_self_Tensor_other_Scalar, 2},
    {"_torch_cpp_torch_namespace_mv_self_Tensor_vec_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_mv_self_Tensor_vec_Tensor, 2},
    {"_torch_cpp_torch_namespace_mv_out_out_Tensor_self_Tensor_vec_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_mv_out_out_Tensor_self_Tensor_vec_Tensor, 3},
    {"_torch_cpp_torch_namespace_mvlgamma_self_Tensor_p_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_mvlgamma_self_Tensor_p_int64_t, 2},
    {"_torch_cpp_torch_namespace_narrow_self_Tensor_dim_int64_t_start_int64_t_length_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_narrow_self_Tensor_dim_int64_t_start_int64_t_length_int64_t, 4},
    {"_torch_cpp_torch_namespace_native_batch_norm_input_Tensor_weight_Tensor_bias_Tensor_running_mean_Tensor_running_var_Tensor_training_bool_momentum_double_eps_double", (DL_FUNC) &_torch_cpp_torch_namespace_native_batch_norm_input_Tensor_weight_Tensor_bias_Tensor_running_mean_Tensor_running_var_Tensor_training_bool_momentum_double_eps_double, 8},
    {"_torch_cpp_torch_namespace_batch_norm_stats_input_Tensor_eps_double", (DL_FUNC) &_torch_cpp_torch_namespace_batch_norm_stats_input_Tensor_eps_double, 2},
    {"_torch_cpp_torch_namespace_batch_norm_elemt_input_Tensor_weight_Tensor_bias_Tensor_mean_Tensor_invstd_Tensor_eps_double", (DL_FUNC) &_torch_cpp_torch_namespace_batch_norm_elemt_input_Tensor_weight_Tensor_bias_Tensor_mean_Tensor_invstd_Tensor_eps_double, 6},
    {"_torch_cpp_torch_namespace_batch_norm_elemt_out_out_Tensor_input_Tensor_weight_Tensor_bias_Tensor_mean_Tensor_invstd_Tensor_eps_double", (DL_FUNC) &_torch_cpp_torch_namespace_batch_norm_elemt_out_out_Tensor_input_Tensor_weight_Tensor_bias_Tensor_mean_Tensor_invstd_Tensor_eps_double, 7},
    {"_torch_cpp_torch_namespace_batch_norm_gather_stats_input_Tensor_mean_Tensor_invstd_Tensor_running_mean_Tensor_running_var_Tensor_momentum_double_eps_double_count_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_batch_norm_gather_stats_input_Tensor_mean_Tensor_invstd_Tensor_running_mean_Tensor_running_var_Tensor_momentum_double_eps_double_count_int64_t, 8},
    {"_torch_cpp_torch_namespace_batch_norm_gather_stats_with_counts_input_Tensor_mean_Tensor_invstd_Tensor_running_mean_Tensor_running_var_Tensor_momentum_double_eps_double_counts_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_batch_norm_gather_stats_with_counts_input_Tensor_mean_Tensor_invstd_Tensor_running_mean_Tensor_running_var_Tensor_momentum_double_eps_double_counts_IntArrayRef, 8},
    {"_torch_cpp_torch_namespace_native_batch_norm_backward_grad_out_Tensor_input_Tensor_weight_Tensor_running_mean_Tensor_running_var_Tensor_save_mean_Tensor_save_invstd_Tensor_train_bool_eps_double_output_mask_stdarraybool3", (DL_FUNC) &_torch_cpp_torch_namespace_native_batch_norm_backward_grad_out_Tensor_input_Tensor_weight_Tensor_running_mean_Tensor_running_var_Tensor_save_mean_Tensor_save_invstd_Tensor_train_bool_eps_double_output_mask_stdarraybool3, 10},
    {"_torch_cpp_torch_namespace_batch_norm_backward_reduce_grad_out_Tensor_input_Tensor_mean_Tensor_invstd_Tensor_weight_Tensor_input_g_bool_weight_g_bool_bias_g_bool", (DL_FUNC) &_torch_cpp_torch_namespace_batch_norm_backward_reduce_grad_out_Tensor_input_Tensor_mean_Tensor_invstd_Tensor_weight_Tensor_input_g_bool_weight_g_bool_bias_g_bool, 8},
    {"_torch_cpp_torch_namespace_batch_norm_backward_elemt_grad_out_Tensor_input_Tensor_mean_Tensor_invstd_Tensor_weight_Tensor_mean_dy_Tensor_mean_dy_xmu_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_batch_norm_backward_elemt_grad_out_Tensor_input_Tensor_mean_Tensor_invstd_Tensor_weight_Tensor_mean_dy_Tensor_mean_dy_xmu_Tensor, 7},
    {"_torch_cpp_torch_namespace_batch_norm_update_stats_input_Tensor_running_mean_Tensor_running_var_Tensor_momentum_double", (DL_FUNC) &_torch_cpp_torch_namespace_batch_norm_update_stats_input_Tensor_running_mean_Tensor_running_var_Tensor_momentum_double, 4},
    {"_torch_cpp_torch_namespace__nnpack_available_", (DL_FUNC) &_torch_cpp_torch_namespace__nnpack_available_, 0},
    {"_torch_cpp_torch_namespace__nnpack_spatial_convolution_input_Tensor_weight_Tensor_bias_Tensor_padding_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace__nnpack_spatial_convolution_input_Tensor_weight_Tensor_bias_Tensor_padding_IntArrayRef, 5},
    {"_torch_cpp_torch_namespace__nnpack_spatial_convolution_backward_input_Tensor_grad_output_Tensor_weight_Tensor_padding_IntArrayRef_output_mask_stdarraybool3", (DL_FUNC) &_torch_cpp_torch_namespace__nnpack_spatial_convolution_backward_input_Tensor_grad_output_Tensor_weight_Tensor_padding_IntArrayRef_output_mask_stdarraybool3, 5},
    {"_torch_cpp_torch_namespace__nnpack_spatial_convolution_backward_input_input_Tensor_grad_output_Tensor_weight_Tensor_padding_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace__nnpack_spatial_convolution_backward_input_input_Tensor_grad_output_Tensor_weight_Tensor_padding_IntArrayRef, 4},
    {"_torch_cpp_torch_namespace__nnpack_spatial_convolution_backward_weight_input_Tensor_weightsize_IntArrayRef_grad_output_Tensor_padding_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace__nnpack_spatial_convolution_backward_weight_input_Tensor_weightsize_IntArrayRef_grad_output_Tensor_padding_IntArrayRef, 4},
    {"_torch_cpp_torch_namespace_ones_size_IntArrayRef_names_DimnameList", (DL_FUNC) &_torch_cpp_torch_namespace_ones_size_IntArrayRef_names_DimnameList, 3},
    {"_torch_cpp_torch_namespace_ones_size_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_ones_size_IntArrayRef, 2},
    {"_torch_cpp_torch_namespace_ones_out_out_Tensor_size_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_ones_out_out_Tensor_size_IntArrayRef, 2},
    {"_torch_cpp_torch_namespace_ones_like_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_ones_like_self_Tensor, 2},
    {"_torch_cpp_torch_namespace_ones_like_self_Tensor_options_TensorOptions", (DL_FUNC) &_torch_cpp_torch_namespace_ones_like_self_Tensor_options_TensorOptions, 3},
    {"_torch_cpp_torch_namespace_pairwise_distance_x1_Tensor_x2_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_pairwise_distance_x1_Tensor_x2_Tensor, 5},
    {"_torch_cpp_torch_namespace_cdist_x1_Tensor_x2_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_cdist_x1_Tensor_x2_Tensor, 4},
    {"_torch_cpp_torch_namespace__cdist_backward_grad_Tensor_x1_Tensor_x2_Tensor_p_double_cdist_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace__cdist_backward_grad_Tensor_x1_Tensor_x2_Tensor_p_double_cdist_Tensor, 5},
    {"_torch_cpp_torch_namespace_pdist_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_pdist_self_Tensor, 2},
    {"_torch_cpp_torch_namespace__pdist_forward_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace__pdist_forward_self_Tensor, 2},
    {"_torch_cpp_torch_namespace__pdist_backward_grad_Tensor_self_Tensor_p_double_pdist_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace__pdist_backward_grad_Tensor_self_Tensor_p_double_pdist_Tensor, 4},
    {"_torch_cpp_torch_namespace_cosine_similarity_x1_Tensor_x2_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_cosine_similarity_x1_Tensor_x2_Tensor, 4},
    {"_torch_cpp_torch_namespace_pixel_shuffle_self_Tensor_upscale_factor_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_pixel_shuffle_self_Tensor_upscale_factor_int64_t, 2},
    {"_torch_cpp_torch_namespace_pinverse_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_pinverse_self_Tensor, 2},
    {"_torch_cpp_torch_namespace_poisson_nll_loss_input_Tensor_target_Tensor_log_input_bool_full_bool_eps_double_reduction_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_poisson_nll_loss_input_Tensor_target_Tensor_log_input_bool_full_bool_eps_double_reduction_int64_t, 6},
    {"_torch_cpp_torch_namespace_scalar_tensor_s_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace_scalar_tensor_s_Scalar, 2},
    {"_torch_cpp_torch_namespace_rand_size_IntArrayRef_names_DimnameList", (DL_FUNC) &_torch_cpp_torch_namespace_rand_size_IntArrayRef_names_DimnameList, 3},
    {"_torch_cpp_torch_namespace_rand_size_IntArrayRef_generator_Generator_names_DimnameList", (DL_FUNC) &_torch_cpp_torch_namespace_rand_size_IntArrayRef_generator_Generator_names_DimnameList, 4},
    {"_torch_cpp_torch_namespace_rand_size_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_rand_size_IntArrayRef, 2},
    {"_torch_cpp_torch_namespace_rand_size_IntArrayRef_generator_Generator", (DL_FUNC) &_torch_cpp_torch_namespace_rand_size_IntArrayRef_generator_Generator, 3},
    {"_torch_cpp_torch_namespace_rand_out_out_Tensor_size_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_rand_out_out_Tensor_size_IntArrayRef, 2},
    {"_torch_cpp_torch_namespace_rand_out_out_Tensor_size_IntArrayRef_generator_Generator", (DL_FUNC) &_torch_cpp_torch_namespace_rand_out_out_Tensor_size_IntArrayRef_generator_Generator, 3},
    {"_torch_cpp_torch_namespace_rand_like_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_rand_like_self_Tensor, 2},
    {"_torch_cpp_torch_namespace_rand_like_self_Tensor_options_TensorOptions", (DL_FUNC) &_torch_cpp_torch_namespace_rand_like_self_Tensor_options_TensorOptions, 3},
    {"_torch_cpp_torch_namespace_randint_high_int64_t_size_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_randint_high_int64_t_size_IntArrayRef, 3},
    {"_torch_cpp_torch_namespace_randint_high_int64_t_size_IntArrayRef_generator_Generator", (DL_FUNC) &_torch_cpp_torch_namespace_randint_high_int64_t_size_IntArrayRef_generator_Generator, 4},
    {"_torch_cpp_torch_namespace_randint_low_int64_t_high_int64_t_size_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_randint_low_int64_t_high_int64_t_size_IntArrayRef, 4},
    {"_torch_cpp_torch_namespace_randint_low_int64_t_high_int64_t_size_IntArrayRef_generator_Generator", (DL_FUNC) &_torch_cpp_torch_namespace_randint_low_int64_t_high_int64_t_size_IntArrayRef_generator_Generator, 5},
    {"_torch_cpp_torch_namespace_randint_out_out_Tensor_high_int64_t_size_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_randint_out_out_Tensor_high_int64_t_size_IntArrayRef, 3},
    {"_torch_cpp_torch_namespace_randint_out_out_Tensor_high_int64_t_size_IntArrayRef_generator_Generator", (DL_FUNC) &_torch_cpp_torch_namespace_randint_out_out_Tensor_high_int64_t_size_IntArrayRef_generator_Generator, 4},
    {"_torch_cpp_torch_namespace_randint_out_out_Tensor_low_int64_t_high_int64_t_size_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_randint_out_out_Tensor_low_int64_t_high_int64_t_size_IntArrayRef, 4},
    {"_torch_cpp_torch_namespace_randint_out_out_Tensor_low_int64_t_high_int64_t_size_IntArrayRef_generator_Generator", (DL_FUNC) &_torch_cpp_torch_namespace_randint_out_out_Tensor_low_int64_t_high_int64_t_size_IntArrayRef_generator_Generator, 5},
    {"_torch_cpp_torch_namespace_randint_like_self_Tensor_high_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_randint_like_self_Tensor_high_int64_t, 3},
    {"_torch_cpp_torch_namespace_randint_like_self_Tensor_low_int64_t_high_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_randint_like_self_Tensor_low_int64_t_high_int64_t, 4},
    {"_torch_cpp_torch_namespace_randint_like_self_Tensor_high_int64_t_options_TensorOptions", (DL_FUNC) &_torch_cpp_torch_namespace_randint_like_self_Tensor_high_int64_t_options_TensorOptions, 4},
    {"_torch_cpp_torch_namespace_randint_like_self_Tensor_low_int64_t_high_int64_t_options_TensorOptions", (DL_FUNC) &_torch_cpp_torch_namespace_randint_like_self_Tensor_low_int64_t_high_int64_t_options_TensorOptions, 5},
    {"_torch_cpp_torch_namespace_randn_size_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_randn_size_IntArrayRef, 2},
    {"_torch_cpp_torch_namespace_randn_size_IntArrayRef_generator_Generator", (DL_FUNC) &_torch_cpp_torch_namespace_randn_size_IntArrayRef_generator_Generator, 3},
    {"_torch_cpp_torch_namespace_randn_size_IntArrayRef_names_DimnameList", (DL_FUNC) &_torch_cpp_torch_namespace_randn_size_IntArrayRef_names_DimnameList, 3},
    {"_torch_cpp_torch_namespace_randn_size_IntArrayRef_generator_Generator_names_DimnameList", (DL_FUNC) &_torch_cpp_torch_namespace_randn_size_IntArrayRef_generator_Generator_names_DimnameList, 4},
    {"_torch_cpp_torch_namespace_randn_out_out_Tensor_size_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_randn_out_out_Tensor_size_IntArrayRef, 2},
    {"_torch_cpp_torch_namespace_randn_out_out_Tensor_size_IntArrayRef_generator_Generator", (DL_FUNC) &_torch_cpp_torch_namespace_randn_out_out_Tensor_size_IntArrayRef_generator_Generator, 3},
    {"_torch_cpp_torch_namespace_randn_like_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_randn_like_self_Tensor, 2},
    {"_torch_cpp_torch_namespace_randn_like_self_Tensor_options_TensorOptions", (DL_FUNC) &_torch_cpp_torch_namespace_randn_like_self_Tensor_options_TensorOptions, 3},
    {"_torch_cpp_torch_namespace_randperm_n_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_randperm_n_int64_t, 2},
    {"_torch_cpp_torch_namespace_randperm_n_int64_t_generator_Generator", (DL_FUNC) &_torch_cpp_torch_namespace_randperm_n_int64_t_generator_Generator, 3},
    {"_torch_cpp_torch_namespace_randperm_out_out_Tensor_n_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_randperm_out_out_Tensor_n_int64_t, 2},
    {"_torch_cpp_torch_namespace_randperm_out_out_Tensor_n_int64_t_generator_Generator", (DL_FUNC) &_torch_cpp_torch_namespace_randperm_out_out_Tensor_n_int64_t_generator_Generator, 3},
    {"_torch_cpp_torch_namespace_range_start_Scalar_end_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace_range_start_Scalar_end_Scalar, 4},
    {"_torch_cpp_torch_namespace_range_out_out_Tensor_start_Scalar_end_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace_range_out_out_Tensor_start_Scalar_end_Scalar, 4},
    {"_torch_cpp_torch_namespace_reciprocal_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_reciprocal_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_reciprocal__self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_reciprocal__self_Tensor, 1},
    {"_torch_cpp_torch_namespace_reciprocal_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_reciprocal_out_out_Tensor_self_Tensor, 2},
    {"_torch_cpp_torch_namespace_neg_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_neg_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_neg__self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_neg__self_Tensor, 1},
    {"_torch_cpp_torch_namespace_neg_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_neg_out_out_Tensor_self_Tensor, 2},
    {"_torch_cpp_torch_namespace_repeat_interleave_repeats_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_repeat_interleave_repeats_Tensor, 1},
    {"_torch_cpp_torch_namespace_repeat_interleave_self_Tensor_repeats_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_repeat_interleave_self_Tensor_repeats_Tensor, 3},
    {"_torch_cpp_torch_namespace_repeat_interleave_self_Tensor_repeats_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_repeat_interleave_self_Tensor_repeats_int64_t, 3},
    {"_torch_cpp_torch_namespace_reshape_self_Tensor_shape_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_reshape_self_Tensor_shape_IntArrayRef, 2},
    {"_torch_cpp_torch_namespace__mkldnn_reshape_self_Tensor_shape_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace__mkldnn_reshape_self_Tensor_shape_IntArrayRef, 2},
    {"_torch_cpp_torch_namespace_round_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_round_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_round__self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_round__self_Tensor, 1},
    {"_torch_cpp_torch_namespace_round_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_round_out_out_Tensor_self_Tensor, 2},
    {"_torch_cpp_torch_namespace_rrelu_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_rrelu_self_Tensor, 5},
    {"_torch_cpp_torch_namespace_rrelu__self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_rrelu__self_Tensor, 5},
    {"_torch_cpp_torch_namespace_relu_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_relu_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_relu__self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_relu__self_Tensor, 1},
    {"_torch_cpp_torch_namespace_prelu_self_Tensor_weight_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_prelu_self_Tensor_weight_Tensor, 2},
    {"_torch_cpp_torch_namespace_prelu_backward_grad_output_Tensor_self_Tensor_weight_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_prelu_backward_grad_output_Tensor_self_Tensor_weight_Tensor, 3},
    {"_torch_cpp_torch_namespace_gelu_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_gelu_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_gelu_backward_grad_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_gelu_backward_grad_Tensor_self_Tensor, 2},
    {"_torch_cpp_torch_namespace_hardshrink_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_hardshrink_self_Tensor, 2},
    {"_torch_cpp_torch_namespace_hardshrink_backward_grad_out_Tensor_self_Tensor_lambd_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace_hardshrink_backward_grad_out_Tensor_self_Tensor_lambd_Scalar, 3},
    {"_torch_cpp_torch_namespace_rsqrt_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_rsqrt_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_rsqrt__self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_rsqrt__self_Tensor, 1},
    {"_torch_cpp_torch_namespace_rsqrt_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_rsqrt_out_out_Tensor_self_Tensor, 2},
    {"_torch_cpp_torch_namespace_select_self_Tensor_dim_Dimname_index_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_select_self_Tensor_dim_Dimname_index_int64_t, 3},
    {"_torch_cpp_torch_namespace_select_self_Tensor_dim_int64_t_index_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_select_self_Tensor_dim_int64_t_index_int64_t, 3},
    {"_torch_cpp_torch_namespace_selu_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_selu_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_selu__self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_selu__self_Tensor, 1},
    {"_torch_cpp_torch_namespace_celu_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_celu_self_Tensor, 2},
    {"_torch_cpp_torch_namespace_celu__self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_celu__self_Tensor, 2},
    {"_torch_cpp_torch_namespace_sigmoid_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_sigmoid_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_sigmoid__self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_sigmoid__self_Tensor, 1},
    {"_torch_cpp_torch_namespace_sigmoid_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_sigmoid_out_out_Tensor_self_Tensor, 2},
    {"_torch_cpp_torch_namespace_sin_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_sin_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_sin__self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_sin__self_Tensor, 1},
    {"_torch_cpp_torch_namespace_sin_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_sin_out_out_Tensor_self_Tensor, 2},
    {"_torch_cpp_torch_namespace_sinh_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_sinh_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_sinh__self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_sinh__self_Tensor, 1},
    {"_torch_cpp_torch_namespace_sinh_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_sinh_out_out_Tensor_self_Tensor, 2},
    {"_torch_cpp_torch_namespace_detach_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_detach_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_detach__self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_detach__self_Tensor, 1},
    {"_torch_cpp_torch_namespace_size_self_Tensor_dim_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_size_self_Tensor_dim_int64_t, 2},
    {"_torch_cpp_torch_namespace_size_self_Tensor_dim_Dimname", (DL_FUNC) &_torch_cpp_torch_namespace_size_self_Tensor_dim_Dimname, 2},
    {"_torch_cpp_torch_namespace_slice_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_slice_self_Tensor, 5},
    {"_torch_cpp_torch_namespace_slogdet_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_slogdet_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_smm_self_Tensor_mat2_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_smm_self_Tensor_mat2_Tensor, 2},
    {"_torch_cpp_torch_namespace_softmax_self_Tensor_dim_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_softmax_self_Tensor_dim_int64_t, 3},
    {"_torch_cpp_torch_namespace_softmax_self_Tensor_dim_Dimname", (DL_FUNC) &_torch_cpp_torch_namespace_softmax_self_Tensor_dim_Dimname, 3},
    {"_torch_cpp_torch_namespace__softmax_self_Tensor_dim_int64_t_half_to_float_bool", (DL_FUNC) &_torch_cpp_torch_namespace__softmax_self_Tensor_dim_int64_t_half_to_float_bool, 3},
    {"_torch_cpp_torch_namespace__softmax_backward_data_grad_output_Tensor_output_Tensor_dim_int64_t_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace__softmax_backward_data_grad_output_Tensor_output_Tensor_dim_int64_t_self_Tensor, 4},
    {"_torch_cpp_torch_namespace_split_self_Tensor_split_size_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_split_self_Tensor_split_size_int64_t, 3},
    {"_torch_cpp_torch_namespace_split_with_sizes_self_Tensor_split_sizes_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_split_with_sizes_self_Tensor_split_sizes_IntArrayRef, 3},
    {"_torch_cpp_torch_namespace_squeeze_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_squeeze_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_squeeze_self_Tensor_dim_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_squeeze_self_Tensor_dim_int64_t, 2},
    {"_torch_cpp_torch_namespace_squeeze_self_Tensor_dim_Dimname", (DL_FUNC) &_torch_cpp_torch_namespace_squeeze_self_Tensor_dim_Dimname, 2},
    {"_torch_cpp_torch_namespace_sspaddmm_self_Tensor_mat1_Tensor_mat2_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_sspaddmm_self_Tensor_mat1_Tensor_mat2_Tensor, 5},
    {"_torch_cpp_torch_namespace_sspaddmm_out_out_Tensor_self_Tensor_mat1_Tensor_mat2_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_sspaddmm_out_out_Tensor_self_Tensor_mat1_Tensor_mat2_Tensor, 6},
    {"_torch_cpp_torch_namespace_stack_tensors_TensorList", (DL_FUNC) &_torch_cpp_torch_namespace_stack_tensors_TensorList, 2},
    {"_torch_cpp_torch_namespace_stack_out_out_Tensor_tensors_TensorList", (DL_FUNC) &_torch_cpp_torch_namespace_stack_out_out_Tensor_tensors_TensorList, 3},
    {"_torch_cpp_torch_namespace_stft_self_Tensor_n_fft_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_stft_self_Tensor_n_fft_int64_t, 7},
    {"_torch_cpp_torch_namespace_stride_self_Tensor_dim_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_stride_self_Tensor_dim_int64_t, 2},
    {"_torch_cpp_torch_namespace_stride_self_Tensor_dim_Dimname", (DL_FUNC) &_torch_cpp_torch_namespace_stride_self_Tensor_dim_Dimname, 2},
    {"_torch_cpp_torch_namespace_sum_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_sum_self_Tensor, 2},
    {"_torch_cpp_torch_namespace_sum_self_Tensor_dim_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_sum_self_Tensor_dim_IntArrayRef, 4},
    {"_torch_cpp_torch_namespace_sum_self_Tensor_dim_DimnameList", (DL_FUNC) &_torch_cpp_torch_namespace_sum_self_Tensor_dim_DimnameList, 4},
    {"_torch_cpp_torch_namespace_sum_out_out_Tensor_self_Tensor_dim_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_sum_out_out_Tensor_self_Tensor_dim_IntArrayRef, 5},
    {"_torch_cpp_torch_namespace_sum_out_out_Tensor_self_Tensor_dim_DimnameList", (DL_FUNC) &_torch_cpp_torch_namespace_sum_out_out_Tensor_self_Tensor_dim_DimnameList, 5},
    {"_torch_cpp_torch_namespace_sqrt_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_sqrt_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_sqrt__self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_sqrt__self_Tensor, 1},
    {"_torch_cpp_torch_namespace_sqrt_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_sqrt_out_out_Tensor_self_Tensor, 2},
    {"_torch_cpp_torch_namespace_std_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_std_self_Tensor, 2},
    {"_torch_cpp_torch_namespace_std_self_Tensor_dim_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_std_self_Tensor_dim_IntArrayRef, 4},
    {"_torch_cpp_torch_namespace_std_mean_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_std_mean_self_Tensor, 2},
    {"_torch_cpp_torch_namespace_std_mean_self_Tensor_dim_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_std_mean_self_Tensor_dim_IntArrayRef, 4},
    {"_torch_cpp_torch_namespace_std_mean_self_Tensor_dim_DimnameList", (DL_FUNC) &_torch_cpp_torch_namespace_std_mean_self_Tensor_dim_DimnameList, 4},
    {"_torch_cpp_torch_namespace_std_out_out_Tensor_self_Tensor_dim_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_std_out_out_Tensor_self_Tensor_dim_IntArrayRef, 5},
    {"_torch_cpp_torch_namespace_std_self_Tensor_dim_DimnameList", (DL_FUNC) &_torch_cpp_torch_namespace_std_self_Tensor_dim_DimnameList, 4},
    {"_torch_cpp_torch_namespace_std_out_out_Tensor_self_Tensor_dim_DimnameList", (DL_FUNC) &_torch_cpp_torch_namespace_std_out_out_Tensor_self_Tensor_dim_DimnameList, 5},
    {"_torch_cpp_torch_namespace_prod_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_prod_self_Tensor, 2},
    {"_torch_cpp_torch_namespace_prod_self_Tensor_dim_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_prod_self_Tensor_dim_int64_t, 4},
    {"_torch_cpp_torch_namespace_prod_out_out_Tensor_self_Tensor_dim_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_prod_out_out_Tensor_self_Tensor_dim_int64_t, 5},
    {"_torch_cpp_torch_namespace_prod_self_Tensor_dim_Dimname", (DL_FUNC) &_torch_cpp_torch_namespace_prod_self_Tensor_dim_Dimname, 4},
    {"_torch_cpp_torch_namespace_prod_out_out_Tensor_self_Tensor_dim_Dimname", (DL_FUNC) &_torch_cpp_torch_namespace_prod_out_out_Tensor_self_Tensor_dim_Dimname, 5},
    {"_torch_cpp_torch_namespace_t_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_t_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_tan_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_tan_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_tan__self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_tan__self_Tensor, 1},
    {"_torch_cpp_torch_namespace_tan_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_tan_out_out_Tensor_self_Tensor, 2},
    {"_torch_cpp_torch_namespace_tanh_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_tanh_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_tanh__self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_tanh__self_Tensor, 1},
    {"_torch_cpp_torch_namespace_tanh_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_tanh_out_out_Tensor_self_Tensor, 2},
    {"_torch_cpp_torch_namespace_tensordot_self_Tensor_other_Tensor_dims_self_IntArrayRef_dims_other_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_tensordot_self_Tensor_other_Tensor_dims_self_IntArrayRef_dims_other_IntArrayRef, 4},
    {"_torch_cpp_torch_namespace_threshold_self_Tensor_threshold_Scalar_value_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace_threshold_self_Tensor_threshold_Scalar_value_Scalar, 3},
    {"_torch_cpp_torch_namespace_threshold__self_Tensor_threshold_Scalar_value_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace_threshold__self_Tensor_threshold_Scalar_value_Scalar, 3},
    {"_torch_cpp_torch_namespace_threshold_out_out_Tensor_self_Tensor_threshold_Scalar_value_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace_threshold_out_out_Tensor_self_Tensor_threshold_Scalar_value_Scalar, 4},
    {"_torch_cpp_torch_namespace_threshold_backward_grad_output_Tensor_self_Tensor_threshold_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace_threshold_backward_grad_output_Tensor_self_Tensor_threshold_Scalar, 3},
    {"_torch_cpp_torch_namespace_transpose_self_Tensor_dim0_int64_t_dim1_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_transpose_self_Tensor_dim0_int64_t_dim1_int64_t, 3},
    {"_torch_cpp_torch_namespace_transpose_self_Tensor_dim0_Dimname_dim1_Dimname", (DL_FUNC) &_torch_cpp_torch_namespace_transpose_self_Tensor_dim0_Dimname_dim1_Dimname, 3},
    {"_torch_cpp_torch_namespace__mkldnn_transpose_self_Tensor_dim0_int64_t_dim1_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace__mkldnn_transpose_self_Tensor_dim0_int64_t_dim1_int64_t, 3},
    {"_torch_cpp_torch_namespace__mkldnn_transpose__self_Tensor_dim0_int64_t_dim1_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace__mkldnn_transpose__self_Tensor_dim0_int64_t_dim1_int64_t, 3},
    {"_torch_cpp_torch_namespace_one_hot_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_one_hot_self_Tensor, 2},
    {"_torch_cpp_torch_namespace_flip_self_Tensor_dims_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_flip_self_Tensor_dims_IntArrayRef, 2},
    {"_torch_cpp_torch_namespace_roll_self_Tensor_shifts_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_roll_self_Tensor_shifts_IntArrayRef, 3},
    {"_torch_cpp_torch_namespace_rot90_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_rot90_self_Tensor, 3},
    {"_torch_cpp_torch_namespace_trapz_y_Tensor_x_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_trapz_y_Tensor_x_Tensor, 3},
    {"_torch_cpp_torch_namespace_trapz_y_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_trapz_y_Tensor, 3},
    {"_torch_cpp_torch_namespace__trilinear_i1_Tensor_i2_Tensor_i3_Tensor_expand1_IntArrayRef_expand2_IntArrayRef_expand3_IntArrayRef_sumdim_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace__trilinear_i1_Tensor_i2_Tensor_i3_Tensor_expand1_IntArrayRef_expand2_IntArrayRef_expand3_IntArrayRef_sumdim_IntArrayRef, 8},
    {"_torch_cpp_torch_namespace_triplet_margin_loss_anchor_Tensor_positive_Tensor_negative_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_triplet_margin_loss_anchor_Tensor_positive_Tensor_negative_Tensor, 8},
    {"_torch_cpp_torch_namespace_trunc_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_trunc_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_trunc__self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_trunc__self_Tensor, 1},
    {"_torch_cpp_torch_namespace_trunc_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_trunc_out_out_Tensor_self_Tensor, 2},
    {"_torch_cpp_torch_namespace__has_compatible_shallow_copy_type_self_Tensor_from_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace__has_compatible_shallow_copy_type_self_Tensor_from_Tensor, 2},
    {"_torch_cpp_torch_namespace__unique_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace__unique_self_Tensor, 3},
    {"_torch_cpp_torch_namespace_unique_dim_self_Tensor_dim_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_unique_dim_self_Tensor_dim_int64_t, 5},
    {"_torch_cpp_torch_namespace_unique_consecutive_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_unique_consecutive_self_Tensor, 4},
    {"_torch_cpp_torch_namespace_unique_dim_consecutive_self_Tensor_dim_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_unique_dim_consecutive_self_Tensor_dim_int64_t, 4},
    {"_torch_cpp_torch_namespace__unique2_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace__unique2_self_Tensor, 4},
    {"_torch_cpp_torch_namespace__unsafe_view_self_Tensor_size_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace__unsafe_view_self_Tensor_size_IntArrayRef, 2},
    {"_torch_cpp_torch_namespace_unsqueeze_self_Tensor_dim_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_unsqueeze_self_Tensor_dim_int64_t, 2},
    {"_torch_cpp_torch_namespace_var_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_var_self_Tensor, 2},
    {"_torch_cpp_torch_namespace_var_self_Tensor_dim_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_var_self_Tensor_dim_IntArrayRef, 4},
    {"_torch_cpp_torch_namespace_var_out_out_Tensor_self_Tensor_dim_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_var_out_out_Tensor_self_Tensor_dim_IntArrayRef, 5},
    {"_torch_cpp_torch_namespace_var_self_Tensor_dim_DimnameList", (DL_FUNC) &_torch_cpp_torch_namespace_var_self_Tensor_dim_DimnameList, 4},
    {"_torch_cpp_torch_namespace_var_out_out_Tensor_self_Tensor_dim_DimnameList", (DL_FUNC) &_torch_cpp_torch_namespace_var_out_out_Tensor_self_Tensor_dim_DimnameList, 5},
    {"_torch_cpp_torch_namespace_var_mean_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_var_mean_self_Tensor, 2},
    {"_torch_cpp_torch_namespace_var_mean_self_Tensor_dim_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_var_mean_self_Tensor_dim_IntArrayRef, 4},
    {"_torch_cpp_torch_namespace_var_mean_self_Tensor_dim_DimnameList", (DL_FUNC) &_torch_cpp_torch_namespace_var_mean_self_Tensor_dim_DimnameList, 4},
    {"_torch_cpp_torch_namespace_where_condition_Tensor_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_where_condition_Tensor_self_Tensor_other_Tensor, 3},
    {"_torch_cpp_torch_namespace_where_condition_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_where_condition_Tensor, 1},
    {"_torch_cpp_torch_namespace__s_where_condition_Tensor_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace__s_where_condition_Tensor_self_Tensor_other_Tensor, 3},
    {"_torch_cpp_torch_namespace_norm_except_dim_v_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_norm_except_dim_v_Tensor, 3},
    {"_torch_cpp_torch_namespace__weight_norm_v_Tensor_g_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace__weight_norm_v_Tensor_g_Tensor, 3},
    {"_torch_cpp_torch_namespace__weight_norm_cuda_interface_v_Tensor_g_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace__weight_norm_cuda_interface_v_Tensor_g_Tensor, 3},
    {"_torch_cpp_torch_namespace__weight_norm_cuda_interface_backward_grad_w_Tensor_saved_v_Tensor_saved_g_Tensor_saved_norms_Tensor_dim_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace__weight_norm_cuda_interface_backward_grad_w_Tensor_saved_v_Tensor_saved_g_Tensor_saved_norms_Tensor_dim_int64_t, 5},
    {"_torch_cpp_torch_namespace__weight_norm_differentiable_backward_grad_w_Tensor_saved_v_Tensor_saved_g_Tensor_saved_norms_Tensor_dim_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace__weight_norm_differentiable_backward_grad_w_Tensor_saved_v_Tensor_saved_g_Tensor_saved_norms_Tensor_dim_int64_t, 5},
    {"_torch_cpp_torch_namespace_zeros_size_IntArrayRef_names_DimnameList", (DL_FUNC) &_torch_cpp_torch_namespace_zeros_size_IntArrayRef_names_DimnameList, 3},
    {"_torch_cpp_torch_namespace_zeros_size_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_zeros_size_IntArrayRef, 2},
    {"_torch_cpp_torch_namespace_zeros_out_out_Tensor_size_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_zeros_out_out_Tensor_size_IntArrayRef, 2},
    {"_torch_cpp_torch_namespace_zeros_like_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_zeros_like_self_Tensor, 2},
    {"_torch_cpp_torch_namespace_zeros_like_self_Tensor_options_TensorOptions", (DL_FUNC) &_torch_cpp_torch_namespace_zeros_like_self_Tensor_options_TensorOptions, 3},
    {"_torch_cpp_torch_namespace__standard_gamma_grad_self_Tensor_output_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace__standard_gamma_grad_self_Tensor_output_Tensor, 2},
    {"_torch_cpp_torch_namespace__standard_gamma_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace__standard_gamma_self_Tensor, 2},
    {"_torch_cpp_torch_namespace__dirichlet_grad_x_Tensor_alpha_Tensor_total_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace__dirichlet_grad_x_Tensor_alpha_Tensor_total_Tensor, 3},
    {"_torch_cpp_torch_namespace__sample_dirichlet_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace__sample_dirichlet_self_Tensor, 2},
    {"_torch_cpp_torch_namespace_poisson_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_poisson_self_Tensor, 2},
    {"_torch_cpp_torch_namespace_native_norm_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_native_norm_self_Tensor, 2},
    {"_torch_cpp_torch_namespace__sparse_sum_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace__sparse_sum_self_Tensor, 1},
    {"_torch_cpp_torch_namespace__sparse_sum_self_Tensor_dtype_ScalarType", (DL_FUNC) &_torch_cpp_torch_namespace__sparse_sum_self_Tensor_dtype_ScalarType, 2},
    {"_torch_cpp_torch_namespace__sparse_sum_self_Tensor_dim_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace__sparse_sum_self_Tensor_dim_IntArrayRef, 2},
    {"_torch_cpp_torch_namespace__sparse_sum_self_Tensor_dim_IntArrayRef_dtype_ScalarType", (DL_FUNC) &_torch_cpp_torch_namespace__sparse_sum_self_Tensor_dim_IntArrayRef_dtype_ScalarType, 3},
    {"_torch_cpp_torch_namespace__sparse_sum_backward_grad_Tensor_self_Tensor_dim_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace__sparse_sum_backward_grad_Tensor_self_Tensor_dim_IntArrayRef, 3},
    {"_torch_cpp_torch_namespace_norm_self_Tensor_p_Scalar_dtype_ScalarType", (DL_FUNC) &_torch_cpp_torch_namespace_norm_self_Tensor_p_Scalar_dtype_ScalarType, 3},
    {"_torch_cpp_torch_namespace_norm_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_norm_self_Tensor, 2},
    {"_torch_cpp_torch_namespace_norm_self_Tensor_p_Scalar_dim_IntArrayRef_keepdim_bool_dtype_ScalarType", (DL_FUNC) &_torch_cpp_torch_namespace_norm_self_Tensor_p_Scalar_dim_IntArrayRef_keepdim_bool_dtype_ScalarType, 5},
    {"_torch_cpp_torch_namespace_norm_self_Tensor_p_Scalar_dim_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_norm_self_Tensor_p_Scalar_dim_IntArrayRef, 4},
    {"_torch_cpp_torch_namespace_norm_out_out_Tensor_self_Tensor_p_Scalar_dim_IntArrayRef_keepdim_bool_dtype_ScalarType", (DL_FUNC) &_torch_cpp_torch_namespace_norm_out_out_Tensor_self_Tensor_p_Scalar_dim_IntArrayRef_keepdim_bool_dtype_ScalarType, 6},
    {"_torch_cpp_torch_namespace_norm_out_out_Tensor_self_Tensor_p_Scalar_dim_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_norm_out_out_Tensor_self_Tensor_p_Scalar_dim_IntArrayRef, 5},
    {"_torch_cpp_torch_namespace_norm_self_Tensor_p_Scalar_dim_DimnameList_keepdim_bool_dtype_ScalarType", (DL_FUNC) &_torch_cpp_torch_namespace_norm_self_Tensor_p_Scalar_dim_DimnameList_keepdim_bool_dtype_ScalarType, 5},
    {"_torch_cpp_torch_namespace_norm_self_Tensor_p_Scalar_dim_DimnameList", (DL_FUNC) &_torch_cpp_torch_namespace_norm_self_Tensor_p_Scalar_dim_DimnameList, 4},
    {"_torch_cpp_torch_namespace_norm_out_out_Tensor_self_Tensor_p_Scalar_dim_DimnameList_keepdim_bool_dtype_ScalarType", (DL_FUNC) &_torch_cpp_torch_namespace_norm_out_out_Tensor_self_Tensor_p_Scalar_dim_DimnameList_keepdim_bool_dtype_ScalarType, 6},
    {"_torch_cpp_torch_namespace_norm_out_out_Tensor_self_Tensor_p_Scalar_dim_DimnameList", (DL_FUNC) &_torch_cpp_torch_namespace_norm_out_out_Tensor_self_Tensor_p_Scalar_dim_DimnameList, 5},
    {"_torch_cpp_torch_namespace_frobenius_norm_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_frobenius_norm_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_frobenius_norm_self_Tensor_dim_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_frobenius_norm_self_Tensor_dim_IntArrayRef, 3},
    {"_torch_cpp_torch_namespace_frobenius_norm_out_out_Tensor_self_Tensor_dim_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_frobenius_norm_out_out_Tensor_self_Tensor_dim_IntArrayRef, 4},
    {"_torch_cpp_torch_namespace_nuclear_norm_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_nuclear_norm_self_Tensor, 2},
    {"_torch_cpp_torch_namespace_nuclear_norm_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_nuclear_norm_out_out_Tensor_self_Tensor, 3},
    {"_torch_cpp_torch_namespace_nuclear_norm_self_Tensor_dim_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_nuclear_norm_self_Tensor_dim_IntArrayRef, 3},
    {"_torch_cpp_torch_namespace_nuclear_norm_out_out_Tensor_self_Tensor_dim_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_nuclear_norm_out_out_Tensor_self_Tensor_dim_IntArrayRef, 4},
    {"_torch_cpp_torch_namespace_clone_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_clone_self_Tensor, 2},
    {"_torch_cpp_torch_namespace_resize_as__self_Tensor_the_template_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_resize_as__self_Tensor_the_template_Tensor, 3},
    {"_torch_cpp_torch_namespace_pow_out_out_Tensor_self_Tensor_exponent_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace_pow_out_out_Tensor_self_Tensor_exponent_Scalar, 3},
    {"_torch_cpp_torch_namespace_pow_self_Tensor_exponent_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace_pow_self_Tensor_exponent_Scalar, 2},
    {"_torch_cpp_torch_namespace_zero__self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_zero__self_Tensor, 1},
    {"_torch_cpp_torch_namespace_sub_out_out_Tensor_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_sub_out_out_Tensor_self_Tensor_other_Tensor, 4},
    {"_torch_cpp_torch_namespace_sub_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_sub_self_Tensor_other_Tensor, 3},
    {"_torch_cpp_torch_namespace_sub_self_Tensor_other_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace_sub_self_Tensor_other_Scalar, 3},
    {"_torch_cpp_torch_namespace_rsub_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_rsub_self_Tensor_other_Tensor, 3},
    {"_torch_cpp_torch_namespace_rsub_self_Tensor_other_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace_rsub_self_Tensor_other_Scalar, 3},
    {"_torch_cpp_torch_namespace__sparse_addmm_self_Tensor_sparse_Tensor_dense_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace__sparse_addmm_self_Tensor_sparse_Tensor_dense_Tensor, 5},
    {"_torch_cpp_torch_namespace_addmm_out_out_Tensor_self_Tensor_mat1_Tensor_mat2_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_addmm_out_out_Tensor_self_Tensor_mat1_Tensor_mat2_Tensor, 6},
    {"_torch_cpp_torch_namespace_addmm_self_Tensor_mat1_Tensor_mat2_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_addmm_self_Tensor_mat1_Tensor_mat2_Tensor, 5},
    {"_torch_cpp_torch_namespace_sparse_coo_tensor_size_IntArrayRef_options_TensorOptions", (DL_FUNC) &_torch_cpp_torch_namespace_sparse_coo_tensor_size_IntArrayRef_options_TensorOptions, 2},
    {"_torch_cpp_torch_namespace_sparse_coo_tensor_indices_Tensor_values_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_sparse_coo_tensor_indices_Tensor_values_Tensor, 3},
    {"_torch_cpp_torch_namespace_sparse_coo_tensor_indices_Tensor_values_Tensor_size_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_sparse_coo_tensor_indices_Tensor_values_Tensor_size_IntArrayRef, 4},
    {"_torch_cpp_torch_namespace__sparse_coo_tensor_unsafe_indices_Tensor_values_Tensor_size_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace__sparse_coo_tensor_unsafe_indices_Tensor_values_Tensor_size_IntArrayRef, 4},
    {"_torch_cpp_torch_namespace__sparse_coo_tensor_with_dims_sparse_dim_int64_t_dense_dim_int64_t_size_IntArrayRef_options_TensorOptions", (DL_FUNC) &_torch_cpp_torch_namespace__sparse_coo_tensor_with_dims_sparse_dim_int64_t_dense_dim_int64_t_size_IntArrayRef_options_TensorOptions, 4},
    {"_torch_cpp_torch_namespace__sparse_coo_tensor_with_dims_and_tensors_sparse_dim_int64_t_dense_dim_int64_t_size_IntArrayRef_indices_Tensor_values_Tensor_options_TensorOptions", (DL_FUNC) &_torch_cpp_torch_namespace__sparse_coo_tensor_with_dims_and_tensors_sparse_dim_int64_t_dense_dim_int64_t_size_IntArrayRef_indices_Tensor_values_Tensor_options_TensorOptions, 6},
    {"_torch_cpp_torch_namespace_to_dense_backward_grad_Tensor_input_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_to_dense_backward_grad_Tensor_input_Tensor, 2},
    {"_torch_cpp_torch_namespace_hspmm_out_out_Tensor_mat1_Tensor_mat2_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_hspmm_out_out_Tensor_mat1_Tensor_mat2_Tensor, 3},
    {"_torch_cpp_torch_namespace_hspmm_mat1_Tensor_mat2_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_hspmm_mat1_Tensor_mat2_Tensor, 2},
    {"_torch_cpp_torch_namespace_copy_sparse_to_sparse__self_Tensor_src_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_copy_sparse_to_sparse__self_Tensor_src_Tensor, 3},
    {"_torch_cpp_torch_namespace_unbind_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_unbind_self_Tensor, 2},
    {"_torch_cpp_torch_namespace_unbind_self_Tensor_dim_Dimname", (DL_FUNC) &_torch_cpp_torch_namespace_unbind_self_Tensor_dim_Dimname, 2},
    {"_torch_cpp_torch_namespace_mkldnn_reorder_conv2d_weight_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_mkldnn_reorder_conv2d_weight_self_Tensor, 5},
    {"_torch_cpp_torch_namespace_to_mkldnn_backward_grad_Tensor_input_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_to_mkldnn_backward_grad_Tensor_input_Tensor, 2},
    {"_torch_cpp_torch_namespace_quantize_per_tensor_self_Tensor_scale_double_zero_point_int64_t_dtype_ScalarType", (DL_FUNC) &_torch_cpp_torch_namespace_quantize_per_tensor_self_Tensor_scale_double_zero_point_int64_t_dtype_ScalarType, 4},
    {"_torch_cpp_torch_namespace_quantize_per_channel_self_Tensor_scales_Tensor_zero_points_Tensor_axis_int64_t_dtype_ScalarType", (DL_FUNC) &_torch_cpp_torch_namespace_quantize_per_channel_self_Tensor_scales_Tensor_zero_points_Tensor_axis_int64_t_dtype_ScalarType, 5},
    {"_torch_cpp_torch_namespace_dequantize_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_dequantize_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_q_scale_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_q_scale_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_q_zero_point_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_q_zero_point_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_q_per_channel_scales_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_q_per_channel_scales_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_q_per_channel_zero_points_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_q_per_channel_zero_points_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_q_per_channel_axis_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_q_per_channel_axis_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_int_repr_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_int_repr_self_Tensor, 1},
    {"_torch_cpp_torch_namespace__make_per_tensor_quantized_tensor_self_Tensor_scale_double_zero_point_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace__make_per_tensor_quantized_tensor_self_Tensor_scale_double_zero_point_int64_t, 3},
    {"_torch_cpp_torch_namespace__make_per_channel_quantized_tensor_self_Tensor_scale_Tensor_zero_point_Tensor_axis_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace__make_per_channel_quantized_tensor_self_Tensor_scale_Tensor_zero_point_Tensor_axis_int64_t, 4},
    {"_torch_cpp_torch_namespace_fake_quantize_per_tensor_affine_self_Tensor_scale_double_zero_point_int64_t_quant_min_int64_t_quant_max_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_fake_quantize_per_tensor_affine_self_Tensor_scale_double_zero_point_int64_t_quant_min_int64_t_quant_max_int64_t, 5},
    {"_torch_cpp_torch_namespace_fake_quantize_per_tensor_affine_backward_grad_Tensor_self_Tensor_scale_double_zero_point_int64_t_quant_min_int64_t_quant_max_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_fake_quantize_per_tensor_affine_backward_grad_Tensor_self_Tensor_scale_double_zero_point_int64_t_quant_min_int64_t_quant_max_int64_t, 6},
    {"_torch_cpp_torch_namespace_fake_quantize_per_channel_affine_self_Tensor_scale_Tensor_zero_point_Tensor_axis_int64_t_quant_min_int64_t_quant_max_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_fake_quantize_per_channel_affine_self_Tensor_scale_Tensor_zero_point_Tensor_axis_int64_t_quant_min_int64_t_quant_max_int64_t, 6},
    {"_torch_cpp_torch_namespace_fake_quantize_per_channel_affine_backward_grad_Tensor_self_Tensor_scale_Tensor_zero_point_Tensor_axis_int64_t_quant_min_int64_t_quant_max_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_fake_quantize_per_channel_affine_backward_grad_Tensor_self_Tensor_scale_Tensor_zero_point_Tensor_axis_int64_t_quant_min_int64_t_quant_max_int64_t, 7},
    {"_torch_cpp_torch_namespace_meshgrid_tensors_TensorList", (DL_FUNC) &_torch_cpp_torch_namespace_meshgrid_tensors_TensorList, 1},
    {"_torch_cpp_torch_namespace_cartesian_prod_tensors_TensorList", (DL_FUNC) &_torch_cpp_torch_namespace_cartesian_prod_tensors_TensorList, 1},
    {"_torch_cpp_torch_namespace_combinations_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_combinations_self_Tensor, 3},
    {"_torch_cpp_torch_namespace_result_type_tensor_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_result_type_tensor_Tensor_other_Tensor, 2},
    {"_torch_cpp_torch_namespace_result_type_tensor_Tensor_other_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace_result_type_tensor_Tensor_other_Scalar, 2},
    {"_torch_cpp_torch_namespace_result_type_scalar_Scalar_tensor_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_result_type_scalar_Scalar_tensor_Tensor, 2},
    {"_torch_cpp_torch_namespace_result_type_scalar1_Scalar_scalar2_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace_result_type_scalar1_Scalar_scalar2_Scalar, 2},
    {"_torch_cpp_torch_namespace_can_cast_from_ScalarType_to_ScalarType", (DL_FUNC) &_torch_cpp_torch_namespace_can_cast_from_ScalarType_to_ScalarType, 2},
    {"_torch_cpp_torch_namespace_promote_types_type1_ScalarType_type2_ScalarType", (DL_FUNC) &_torch_cpp_torch_namespace_promote_types_type1_ScalarType_type2_ScalarType, 2},
    {"_torch_cpp_torch_namespace__local_scalar_dense_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace__local_scalar_dense_self_Tensor, 1},
    {"_torch_cpp_torch_namespace__thnn_fused_lstm_cell_input_gates_Tensor_hidden_gates_Tensor_cx_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace__thnn_fused_lstm_cell_input_gates_Tensor_hidden_gates_Tensor_cx_Tensor, 5},
    {"_torch_cpp_torch_namespace__thnn_fused_lstm_cell_backward_grad_hy_Tensor_grad_cy_Tensor_cx_Tensor_cy_Tensor_workspace_Tensor_has_bias_bool", (DL_FUNC) &_torch_cpp_torch_namespace__thnn_fused_lstm_cell_backward_grad_hy_Tensor_grad_cy_Tensor_cx_Tensor_cy_Tensor_workspace_Tensor_has_bias_bool, 6},
    {"_torch_cpp_torch_namespace__thnn_differentiable_lstm_cell_backward_grad_hy_Tensor_grad_cy_Tensor_input_gates_Tensor_hidden_gates_Tensor_input_bias_Tensor_hidden_bias_Tensor_cx_Tensor_cy_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace__thnn_differentiable_lstm_cell_backward_grad_hy_Tensor_grad_cy_Tensor_input_gates_Tensor_hidden_gates_Tensor_input_bias_Tensor_hidden_bias_Tensor_cx_Tensor_cy_Tensor, 8},
    {"_torch_cpp_torch_namespace__thnn_fused_gru_cell_input_gates_Tensor_hidden_gates_Tensor_hx_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace__thnn_fused_gru_cell_input_gates_Tensor_hidden_gates_Tensor_hx_Tensor, 5},
    {"_torch_cpp_torch_namespace__thnn_fused_gru_cell_backward_grad_hy_Tensor_workspace_Tensor_has_bias_bool", (DL_FUNC) &_torch_cpp_torch_namespace__thnn_fused_gru_cell_backward_grad_hy_Tensor_workspace_Tensor_has_bias_bool, 3},
    {"_torch_cpp_torch_namespace__thnn_differentiable_gru_cell_backward_grad_hy_Tensor_input_gates_Tensor_hidden_gates_Tensor_hx_Tensor_input_bias_Tensor_hidden_bias_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace__thnn_differentiable_gru_cell_backward_grad_hy_Tensor_input_gates_Tensor_hidden_gates_Tensor_hx_Tensor_input_bias_Tensor_hidden_bias_Tensor, 6},
    {"_torch_cpp_torch_namespace_lstm_input_Tensor_hx_TensorList_params_TensorList_has_biases_bool_num_layers_int64_t_dropout_double_train_bool_bidirectional_bool_batch_first_bool", (DL_FUNC) &_torch_cpp_torch_namespace_lstm_input_Tensor_hx_TensorList_params_TensorList_has_biases_bool_num_layers_int64_t_dropout_double_train_bool_bidirectional_bool_batch_first_bool, 9},
    {"_torch_cpp_torch_namespace_lstm_data_Tensor_batch_sizes_Tensor_hx_TensorList_params_TensorList_has_biases_bool_num_layers_int64_t_dropout_double_train_bool_bidirectional_bool", (DL_FUNC) &_torch_cpp_torch_namespace_lstm_data_Tensor_batch_sizes_Tensor_hx_TensorList_params_TensorList_has_biases_bool_num_layers_int64_t_dropout_double_train_bool_bidirectional_bool, 9},
    {"_torch_cpp_torch_namespace_gru_input_Tensor_hx_Tensor_params_TensorList_has_biases_bool_num_layers_int64_t_dropout_double_train_bool_bidirectional_bool_batch_first_bool", (DL_FUNC) &_torch_cpp_torch_namespace_gru_input_Tensor_hx_Tensor_params_TensorList_has_biases_bool_num_layers_int64_t_dropout_double_train_bool_bidirectional_bool_batch_first_bool, 9},
    {"_torch_cpp_torch_namespace_gru_data_Tensor_batch_sizes_Tensor_hx_Tensor_params_TensorList_has_biases_bool_num_layers_int64_t_dropout_double_train_bool_bidirectional_bool", (DL_FUNC) &_torch_cpp_torch_namespace_gru_data_Tensor_batch_sizes_Tensor_hx_Tensor_params_TensorList_has_biases_bool_num_layers_int64_t_dropout_double_train_bool_bidirectional_bool, 9},
    {"_torch_cpp_torch_namespace_rnn_tanh_input_Tensor_hx_Tensor_params_TensorList_has_biases_bool_num_layers_int64_t_dropout_double_train_bool_bidirectional_bool_batch_first_bool", (DL_FUNC) &_torch_cpp_torch_namespace_rnn_tanh_input_Tensor_hx_Tensor_params_TensorList_has_biases_bool_num_layers_int64_t_dropout_double_train_bool_bidirectional_bool_batch_first_bool, 9},
    {"_torch_cpp_torch_namespace_rnn_tanh_data_Tensor_batch_sizes_Tensor_hx_Tensor_params_TensorList_has_biases_bool_num_layers_int64_t_dropout_double_train_bool_bidirectional_bool", (DL_FUNC) &_torch_cpp_torch_namespace_rnn_tanh_data_Tensor_batch_sizes_Tensor_hx_Tensor_params_TensorList_has_biases_bool_num_layers_int64_t_dropout_double_train_bool_bidirectional_bool, 9},
    {"_torch_cpp_torch_namespace_rnn_relu_input_Tensor_hx_Tensor_params_TensorList_has_biases_bool_num_layers_int64_t_dropout_double_train_bool_bidirectional_bool_batch_first_bool", (DL_FUNC) &_torch_cpp_torch_namespace_rnn_relu_input_Tensor_hx_Tensor_params_TensorList_has_biases_bool_num_layers_int64_t_dropout_double_train_bool_bidirectional_bool_batch_first_bool, 9},
    {"_torch_cpp_torch_namespace_rnn_relu_data_Tensor_batch_sizes_Tensor_hx_Tensor_params_TensorList_has_biases_bool_num_layers_int64_t_dropout_double_train_bool_bidirectional_bool", (DL_FUNC) &_torch_cpp_torch_namespace_rnn_relu_data_Tensor_batch_sizes_Tensor_hx_Tensor_params_TensorList_has_biases_bool_num_layers_int64_t_dropout_double_train_bool_bidirectional_bool, 9},
    {"_torch_cpp_torch_namespace_lstm_cell_input_Tensor_hx_TensorList_w_ih_Tensor_w_hh_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_lstm_cell_input_Tensor_hx_TensorList_w_ih_Tensor_w_hh_Tensor, 6},
    {"_torch_cpp_torch_namespace_gru_cell_input_Tensor_hx_Tensor_w_ih_Tensor_w_hh_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_gru_cell_input_Tensor_hx_Tensor_w_ih_Tensor_w_hh_Tensor, 6},
    {"_torch_cpp_torch_namespace_rnn_tanh_cell_input_Tensor_hx_Tensor_w_ih_Tensor_w_hh_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_rnn_tanh_cell_input_Tensor_hx_Tensor_w_ih_Tensor_w_hh_Tensor, 6},
    {"_torch_cpp_torch_namespace_rnn_relu_cell_input_Tensor_hx_Tensor_w_ih_Tensor_w_hh_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_rnn_relu_cell_input_Tensor_hx_Tensor_w_ih_Tensor_w_hh_Tensor, 6},
    {"_torch_cpp_torch_namespace_quantized_lstm_input_Tensor_hx_TensorList_params_TensorList_has_biases_bool_num_layers_int64_t_dropout_double_train_bool_bidirectional_bool_batch_first_bool", (DL_FUNC) &_torch_cpp_torch_namespace_quantized_lstm_input_Tensor_hx_TensorList_params_TensorList_has_biases_bool_num_layers_int64_t_dropout_double_train_bool_bidirectional_bool_batch_first_bool, 11},
    {"_torch_cpp_torch_namespace_quantized_lstm_data_Tensor_batch_sizes_Tensor_hx_TensorList_params_TensorList_has_biases_bool_num_layers_int64_t_dropout_double_train_bool_bidirectional_bool", (DL_FUNC) &_torch_cpp_torch_namespace_quantized_lstm_data_Tensor_batch_sizes_Tensor_hx_TensorList_params_TensorList_has_biases_bool_num_layers_int64_t_dropout_double_train_bool_bidirectional_bool, 11},
    {"_torch_cpp_torch_namespace_quantized_gru_input_Tensor_hx_Tensor_params_TensorList_has_biases_bool_num_layers_int64_t_dropout_double_train_bool_bidirectional_bool_batch_first_bool", (DL_FUNC) &_torch_cpp_torch_namespace_quantized_gru_input_Tensor_hx_Tensor_params_TensorList_has_biases_bool_num_layers_int64_t_dropout_double_train_bool_bidirectional_bool_batch_first_bool, 9},
    {"_torch_cpp_torch_namespace_quantized_gru_data_Tensor_batch_sizes_Tensor_hx_Tensor_params_TensorList_has_biases_bool_num_layers_int64_t_dropout_double_train_bool_bidirectional_bool", (DL_FUNC) &_torch_cpp_torch_namespace_quantized_gru_data_Tensor_batch_sizes_Tensor_hx_Tensor_params_TensorList_has_biases_bool_num_layers_int64_t_dropout_double_train_bool_bidirectional_bool, 9},
    {"_torch_cpp_torch_namespace_quantized_lstm_cell_input_Tensor_hx_TensorList_w_ih_Tensor_w_hh_Tensor_b_ih_Tensor_b_hh_Tensor_packed_ih_Tensor_packed_hh_Tensor_col_offsets_ih_Tensor_col_offsets_hh_Tensor_scale_ih_Scalar_scale_hh_Scalar_zero_point_ih_Scalar_zero_point_hh_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace_quantized_lstm_cell_input_Tensor_hx_TensorList_w_ih_Tensor_w_hh_Tensor_b_ih_Tensor_b_hh_Tensor_packed_ih_Tensor_packed_hh_Tensor_col_offsets_ih_Tensor_col_offsets_hh_Tensor_scale_ih_Scalar_scale_hh_Scalar_zero_point_ih_Scalar_zero_point_hh_Scalar, 14},
    {"_torch_cpp_torch_namespace_quantized_gru_cell_input_Tensor_hx_Tensor_w_ih_Tensor_w_hh_Tensor_b_ih_Tensor_b_hh_Tensor_packed_ih_Tensor_packed_hh_Tensor_col_offsets_ih_Tensor_col_offsets_hh_Tensor_scale_ih_Scalar_scale_hh_Scalar_zero_point_ih_Scalar_zero_point_hh_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace_quantized_gru_cell_input_Tensor_hx_Tensor_w_ih_Tensor_w_hh_Tensor_b_ih_Tensor_b_hh_Tensor_packed_ih_Tensor_packed_hh_Tensor_col_offsets_ih_Tensor_col_offsets_hh_Tensor_scale_ih_Scalar_scale_hh_Scalar_zero_point_ih_Scalar_zero_point_hh_Scalar, 14},
    {"_torch_cpp_torch_namespace_quantized_rnn_relu_cell_input_Tensor_hx_Tensor_w_ih_Tensor_w_hh_Tensor_b_ih_Tensor_b_hh_Tensor_packed_ih_Tensor_packed_hh_Tensor_col_offsets_ih_Tensor_col_offsets_hh_Tensor_scale_ih_Scalar_scale_hh_Scalar_zero_point_ih_Scalar_zero_point_hh_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace_quantized_rnn_relu_cell_input_Tensor_hx_Tensor_w_ih_Tensor_w_hh_Tensor_b_ih_Tensor_b_hh_Tensor_packed_ih_Tensor_packed_hh_Tensor_col_offsets_ih_Tensor_col_offsets_hh_Tensor_scale_ih_Scalar_scale_hh_Scalar_zero_point_ih_Scalar_zero_point_hh_Scalar, 14},
    {"_torch_cpp_torch_namespace_quantized_rnn_tanh_cell_input_Tensor_hx_Tensor_w_ih_Tensor_w_hh_Tensor_b_ih_Tensor_b_hh_Tensor_packed_ih_Tensor_packed_hh_Tensor_col_offsets_ih_Tensor_col_offsets_hh_Tensor_scale_ih_Scalar_scale_hh_Scalar_zero_point_ih_Scalar_zero_point_hh_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace_quantized_rnn_tanh_cell_input_Tensor_hx_Tensor_w_ih_Tensor_w_hh_Tensor_b_ih_Tensor_b_hh_Tensor_packed_ih_Tensor_packed_hh_Tensor_col_offsets_ih_Tensor_col_offsets_hh_Tensor_scale_ih_Scalar_scale_hh_Scalar_zero_point_ih_Scalar_zero_point_hh_Scalar, 14},
    {"_torch_cpp_torch_namespace__pack_padded_sequence_input_Tensor_lengths_Tensor_batch_first_bool", (DL_FUNC) &_torch_cpp_torch_namespace__pack_padded_sequence_input_Tensor_lengths_Tensor_batch_first_bool, 3},
    {"_torch_cpp_torch_namespace__pack_padded_sequence_backward_grad_Tensor_input_size_IntArrayRef_batch_sizes_Tensor_batch_first_bool", (DL_FUNC) &_torch_cpp_torch_namespace__pack_padded_sequence_backward_grad_Tensor_input_size_IntArrayRef_batch_sizes_Tensor_batch_first_bool, 4},
    {"_torch_cpp_torch_namespace__pad_packed_sequence_data_Tensor_batch_sizes_Tensor_batch_first_bool_padding_value_Scalar_total_length_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace__pad_packed_sequence_data_Tensor_batch_sizes_Tensor_batch_first_bool_padding_value_Scalar_total_length_int64_t, 5},
    {"_torch_cpp_torch_namespace_masked_fill_self_Tensor_mask_Tensor_value_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace_masked_fill_self_Tensor_mask_Tensor_value_Scalar, 3},
    {"_torch_cpp_torch_namespace_masked_fill_self_Tensor_mask_Tensor_value_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_masked_fill_self_Tensor_mask_Tensor_value_Tensor, 3},
    {"_torch_cpp_torch_namespace_masked_scatter_self_Tensor_mask_Tensor_source_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_masked_scatter_self_Tensor_mask_Tensor_source_Tensor, 3},
    {"_torch_cpp_torch_namespace_index_add_self_Tensor_dim_int64_t_index_Tensor_source_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_index_add_self_Tensor_dim_int64_t_index_Tensor_source_Tensor, 4},
    {"_torch_cpp_torch_namespace_index_add_self_Tensor_dim_Dimname_index_Tensor_source_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_index_add_self_Tensor_dim_Dimname_index_Tensor_source_Tensor, 4},
    {"_torch_cpp_torch_namespace_index_fill_self_Tensor_dim_int64_t_index_Tensor_value_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace_index_fill_self_Tensor_dim_int64_t_index_Tensor_value_Scalar, 4},
    {"_torch_cpp_torch_namespace_index_fill_self_Tensor_dim_int64_t_index_Tensor_value_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_index_fill_self_Tensor_dim_int64_t_index_Tensor_value_Tensor, 4},
    {"_torch_cpp_torch_namespace_index_fill_self_Tensor_dim_Dimname_index_Tensor_value_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace_index_fill_self_Tensor_dim_Dimname_index_Tensor_value_Scalar, 4},
    {"_torch_cpp_torch_namespace_index_fill_self_Tensor_dim_Dimname_index_Tensor_value_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_index_fill_self_Tensor_dim_Dimname_index_Tensor_value_Tensor, 4},
    {"_torch_cpp_torch_namespace_scatter_self_Tensor_dim_int64_t_index_Tensor_src_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_scatter_self_Tensor_dim_int64_t_index_Tensor_src_Tensor, 4},
    {"_torch_cpp_torch_namespace_scatter_self_Tensor_dim_int64_t_index_Tensor_value_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace_scatter_self_Tensor_dim_int64_t_index_Tensor_value_Scalar, 4},
    {"_torch_cpp_torch_namespace_scatter_self_Tensor_dim_Dimname_index_Tensor_src_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_scatter_self_Tensor_dim_Dimname_index_Tensor_src_Tensor, 4},
    {"_torch_cpp_torch_namespace_scatter_self_Tensor_dim_Dimname_index_Tensor_value_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace_scatter_self_Tensor_dim_Dimname_index_Tensor_value_Scalar, 4},
    {"_torch_cpp_torch_namespace_scatter_add_self_Tensor_dim_int64_t_index_Tensor_src_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_scatter_add_self_Tensor_dim_int64_t_index_Tensor_src_Tensor, 4},
    {"_torch_cpp_torch_namespace_scatter_add_self_Tensor_dim_Dimname_index_Tensor_src_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_scatter_add_self_Tensor_dim_Dimname_index_Tensor_src_Tensor, 4},
    {"_torch_cpp_torch_namespace___and___self_Tensor_other_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace___and___self_Tensor_other_Scalar, 2},
    {"_torch_cpp_torch_namespace___and___self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace___and___self_Tensor_other_Tensor, 2},
    {"_torch_cpp_torch_namespace___or___self_Tensor_other_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace___or___self_Tensor_other_Scalar, 2},
    {"_torch_cpp_torch_namespace___or___self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace___or___self_Tensor_other_Tensor, 2},
    {"_torch_cpp_torch_namespace_bitwise_xor_out_out_Tensor_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_bitwise_xor_out_out_Tensor_self_Tensor_other_Tensor, 3},
    {"_torch_cpp_torch_namespace_bitwise_xor_out_out_Tensor_self_Tensor_other_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace_bitwise_xor_out_out_Tensor_self_Tensor_other_Scalar, 3},
    {"_torch_cpp_torch_namespace_bitwise_xor_self_Tensor_other_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace_bitwise_xor_self_Tensor_other_Scalar, 2},
    {"_torch_cpp_torch_namespace_bitwise_xor_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_bitwise_xor_self_Tensor_other_Tensor, 2},
    {"_torch_cpp_torch_namespace___xor___self_Tensor_other_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace___xor___self_Tensor_other_Scalar, 2},
    {"_torch_cpp_torch_namespace___xor___self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace___xor___self_Tensor_other_Tensor, 2},
    {"_torch_cpp_torch_namespace___lshift___self_Tensor_other_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace___lshift___self_Tensor_other_Scalar, 2},
    {"_torch_cpp_torch_namespace___lshift___self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace___lshift___self_Tensor_other_Tensor, 2},
    {"_torch_cpp_torch_namespace___rshift___self_Tensor_other_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace___rshift___self_Tensor_other_Scalar, 2},
    {"_torch_cpp_torch_namespace___rshift___self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace___rshift___self_Tensor_other_Tensor, 2},
    {"_torch_cpp_torch_namespace_addbmm_out_out_Tensor_self_Tensor_batch1_Tensor_batch2_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_addbmm_out_out_Tensor_self_Tensor_batch1_Tensor_batch2_Tensor, 6},
    {"_torch_cpp_torch_namespace_addbmm_self_Tensor_batch1_Tensor_batch2_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_addbmm_self_Tensor_batch1_Tensor_batch2_Tensor, 5},
    {"_torch_cpp_torch_namespace_diag_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_diag_out_out_Tensor_self_Tensor, 3},
    {"_torch_cpp_torch_namespace_diag_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_diag_self_Tensor, 2},
    {"_torch_cpp_torch_namespace_cross_out_out_Tensor_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_cross_out_out_Tensor_self_Tensor_other_Tensor, 4},
    {"_torch_cpp_torch_namespace_cross_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_cross_self_Tensor_other_Tensor, 3},
    {"_torch_cpp_torch_namespace_triu_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_triu_out_out_Tensor_self_Tensor, 3},
    {"_torch_cpp_torch_namespace_triu_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_triu_self_Tensor, 2},
    {"_torch_cpp_torch_namespace_tril_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_tril_out_out_Tensor_self_Tensor, 3},
    {"_torch_cpp_torch_namespace_tril_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_tril_self_Tensor, 2},
    {"_torch_cpp_torch_namespace_tril_indices_row_int64_t_col_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_tril_indices_row_int64_t_col_int64_t, 4},
    {"_torch_cpp_torch_namespace_triu_indices_row_int64_t_col_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_triu_indices_row_int64_t_col_int64_t, 4},
    {"_torch_cpp_torch_namespace_trace_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_trace_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_ne_out_out_Tensor_self_Tensor_other_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace_ne_out_out_Tensor_self_Tensor_other_Scalar, 3},
    {"_torch_cpp_torch_namespace_ne_self_Tensor_other_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace_ne_self_Tensor_other_Scalar, 2},
    {"_torch_cpp_torch_namespace_ne_out_out_Tensor_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_ne_out_out_Tensor_self_Tensor_other_Tensor, 3},
    {"_torch_cpp_torch_namespace_ne_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_ne_self_Tensor_other_Tensor, 2},
    {"_torch_cpp_torch_namespace_eq_out_out_Tensor_self_Tensor_other_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace_eq_out_out_Tensor_self_Tensor_other_Scalar, 3},
    {"_torch_cpp_torch_namespace_eq_self_Tensor_other_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace_eq_self_Tensor_other_Scalar, 2},
    {"_torch_cpp_torch_namespace_eq_out_out_Tensor_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_eq_out_out_Tensor_self_Tensor_other_Tensor, 3},
    {"_torch_cpp_torch_namespace_eq_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_eq_self_Tensor_other_Tensor, 2},
    {"_torch_cpp_torch_namespace_ge_out_out_Tensor_self_Tensor_other_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace_ge_out_out_Tensor_self_Tensor_other_Scalar, 3},
    {"_torch_cpp_torch_namespace_ge_self_Tensor_other_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace_ge_self_Tensor_other_Scalar, 2},
    {"_torch_cpp_torch_namespace_ge_out_out_Tensor_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_ge_out_out_Tensor_self_Tensor_other_Tensor, 3},
    {"_torch_cpp_torch_namespace_ge_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_ge_self_Tensor_other_Tensor, 2},
    {"_torch_cpp_torch_namespace_le_out_out_Tensor_self_Tensor_other_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace_le_out_out_Tensor_self_Tensor_other_Scalar, 3},
    {"_torch_cpp_torch_namespace_le_self_Tensor_other_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace_le_self_Tensor_other_Scalar, 2},
    {"_torch_cpp_torch_namespace_le_out_out_Tensor_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_le_out_out_Tensor_self_Tensor_other_Tensor, 3},
    {"_torch_cpp_torch_namespace_le_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_le_self_Tensor_other_Tensor, 2},
    {"_torch_cpp_torch_namespace_gt_out_out_Tensor_self_Tensor_other_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace_gt_out_out_Tensor_self_Tensor_other_Scalar, 3},
    {"_torch_cpp_torch_namespace_gt_self_Tensor_other_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace_gt_self_Tensor_other_Scalar, 2},
    {"_torch_cpp_torch_namespace_gt_out_out_Tensor_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_gt_out_out_Tensor_self_Tensor_other_Tensor, 3},
    {"_torch_cpp_torch_namespace_gt_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_gt_self_Tensor_other_Tensor, 2},
    {"_torch_cpp_torch_namespace_lt_out_out_Tensor_self_Tensor_other_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace_lt_out_out_Tensor_self_Tensor_other_Scalar, 3},
    {"_torch_cpp_torch_namespace_lt_self_Tensor_other_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace_lt_self_Tensor_other_Scalar, 2},
    {"_torch_cpp_torch_namespace_lt_out_out_Tensor_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_lt_out_out_Tensor_self_Tensor_other_Tensor, 3},
    {"_torch_cpp_torch_namespace_lt_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_lt_self_Tensor_other_Tensor, 2},
    {"_torch_cpp_torch_namespace_take_out_out_Tensor_self_Tensor_index_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_take_out_out_Tensor_self_Tensor_index_Tensor, 3},
    {"_torch_cpp_torch_namespace_take_self_Tensor_index_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_take_self_Tensor_index_Tensor, 2},
    {"_torch_cpp_torch_namespace_index_select_out_out_Tensor_self_Tensor_dim_int64_t_index_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_index_select_out_out_Tensor_self_Tensor_dim_int64_t_index_Tensor, 4},
    {"_torch_cpp_torch_namespace_index_select_self_Tensor_dim_int64_t_index_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_index_select_self_Tensor_dim_int64_t_index_Tensor, 3},
    {"_torch_cpp_torch_namespace_index_select_out_out_Tensor_self_Tensor_dim_Dimname_index_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_index_select_out_out_Tensor_self_Tensor_dim_Dimname_index_Tensor, 4},
    {"_torch_cpp_torch_namespace_index_select_self_Tensor_dim_Dimname_index_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_index_select_self_Tensor_dim_Dimname_index_Tensor, 3},
    {"_torch_cpp_torch_namespace_masked_select_out_out_Tensor_self_Tensor_mask_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_masked_select_out_out_Tensor_self_Tensor_mask_Tensor, 3},
    {"_torch_cpp_torch_namespace_masked_select_self_Tensor_mask_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_masked_select_self_Tensor_mask_Tensor, 2},
    {"_torch_cpp_torch_namespace_nonzero_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_nonzero_out_out_Tensor_self_Tensor, 2},
    {"_torch_cpp_torch_namespace_nonzero_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_nonzero_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_nonzero_numpy_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_nonzero_numpy_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_gather_out_out_Tensor_self_Tensor_dim_int64_t_index_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_gather_out_out_Tensor_self_Tensor_dim_int64_t_index_Tensor, 5},
    {"_torch_cpp_torch_namespace_gather_self_Tensor_dim_int64_t_index_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_gather_self_Tensor_dim_int64_t_index_Tensor, 4},
    {"_torch_cpp_torch_namespace_gather_out_out_Tensor_self_Tensor_dim_Dimname_index_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_gather_out_out_Tensor_self_Tensor_dim_Dimname_index_Tensor, 5},
    {"_torch_cpp_torch_namespace_gather_self_Tensor_dim_Dimname_index_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_gather_self_Tensor_dim_Dimname_index_Tensor, 4},
    {"_torch_cpp_torch_namespace__gather_sparse_backward_self_Tensor_dim_int64_t_index_Tensor_grad_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace__gather_sparse_backward_self_Tensor_dim_int64_t_index_Tensor_grad_Tensor, 4},
    {"_torch_cpp_torch_namespace_addcmul_out_out_Tensor_self_Tensor_tensor1_Tensor_tensor2_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_addcmul_out_out_Tensor_self_Tensor_tensor1_Tensor_tensor2_Tensor, 5},
    {"_torch_cpp_torch_namespace_addcmul_self_Tensor_tensor1_Tensor_tensor2_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_addcmul_self_Tensor_tensor1_Tensor_tensor2_Tensor, 4},
    {"_torch_cpp_torch_namespace_addcdiv_out_out_Tensor_self_Tensor_tensor1_Tensor_tensor2_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_addcdiv_out_out_Tensor_self_Tensor_tensor1_Tensor_tensor2_Tensor, 5},
    {"_torch_cpp_torch_namespace_addcdiv_self_Tensor_tensor1_Tensor_tensor2_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_addcdiv_self_Tensor_tensor1_Tensor_tensor2_Tensor, 4},
    {"_torch_cpp_torch_namespace_lstsq_out_X_Tensor_qr_Tensor_self_Tensor_A_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_lstsq_out_X_Tensor_qr_Tensor_self_Tensor_A_Tensor, 4},
    {"_torch_cpp_torch_namespace_lstsq_self_Tensor_A_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_lstsq_self_Tensor_A_Tensor, 2},
    {"_torch_cpp_torch_namespace_triangular_solve_out_X_Tensor_M_Tensor_self_Tensor_A_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_triangular_solve_out_X_Tensor_M_Tensor_self_Tensor_A_Tensor, 7},
    {"_torch_cpp_torch_namespace_triangular_solve_self_Tensor_A_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_triangular_solve_self_Tensor_A_Tensor, 5},
    {"_torch_cpp_torch_namespace__triangular_solve_helper_self_Tensor_A_Tensor_upper_bool_transpose_bool_unitriangular_bool", (DL_FUNC) &_torch_cpp_torch_namespace__triangular_solve_helper_self_Tensor_A_Tensor_upper_bool_transpose_bool_unitriangular_bool, 5},
    {"_torch_cpp_torch_namespace_symeig_out_e_Tensor_V_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_symeig_out_e_Tensor_V_Tensor_self_Tensor, 5},
    {"_torch_cpp_torch_namespace_symeig_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_symeig_self_Tensor, 3},
    {"_torch_cpp_torch_namespace__symeig_helper_self_Tensor_eigenvectors_bool_upper_bool", (DL_FUNC) &_torch_cpp_torch_namespace__symeig_helper_self_Tensor_eigenvectors_bool_upper_bool, 3},
    {"_torch_cpp_torch_namespace_eig_out_e_Tensor_v_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_eig_out_e_Tensor_v_Tensor_self_Tensor, 4},
    {"_torch_cpp_torch_namespace_eig_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_eig_self_Tensor, 2},
    {"_torch_cpp_torch_namespace_svd_out_U_Tensor_S_Tensor_V_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_svd_out_U_Tensor_S_Tensor_V_Tensor_self_Tensor, 6},
    {"_torch_cpp_torch_namespace_svd_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_svd_self_Tensor, 3},
    {"_torch_cpp_torch_namespace__svd_helper_self_Tensor_some_bool_compute_uv_bool", (DL_FUNC) &_torch_cpp_torch_namespace__svd_helper_self_Tensor_some_bool_compute_uv_bool, 3},
    {"_torch_cpp_torch_namespace_cholesky_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_cholesky_out_out_Tensor_self_Tensor, 3},
    {"_torch_cpp_torch_namespace_cholesky_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_cholesky_self_Tensor, 2},
    {"_torch_cpp_torch_namespace__cholesky_helper_self_Tensor_upper_bool", (DL_FUNC) &_torch_cpp_torch_namespace__cholesky_helper_self_Tensor_upper_bool, 2},
    {"_torch_cpp_torch_namespace_cholesky_solve_out_out_Tensor_self_Tensor_input2_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_cholesky_solve_out_out_Tensor_self_Tensor_input2_Tensor, 4},
    {"_torch_cpp_torch_namespace_cholesky_solve_self_Tensor_input2_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_cholesky_solve_self_Tensor_input2_Tensor, 3},
    {"_torch_cpp_torch_namespace__cholesky_solve_helper_self_Tensor_A_Tensor_upper_bool", (DL_FUNC) &_torch_cpp_torch_namespace__cholesky_solve_helper_self_Tensor_A_Tensor_upper_bool, 3},
    {"_torch_cpp_torch_namespace_solve_self_Tensor_A_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_solve_self_Tensor_A_Tensor, 2},
    {"_torch_cpp_torch_namespace_solve_out_solution_Tensor_lu_Tensor_self_Tensor_A_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_solve_out_solution_Tensor_lu_Tensor_self_Tensor_A_Tensor, 4},
    {"_torch_cpp_torch_namespace__solve_helper_self_Tensor_A_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace__solve_helper_self_Tensor_A_Tensor, 2},
    {"_torch_cpp_torch_namespace_cholesky_inverse_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_cholesky_inverse_out_out_Tensor_self_Tensor, 3},
    {"_torch_cpp_torch_namespace_cholesky_inverse_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_cholesky_inverse_self_Tensor, 2},
    {"_torch_cpp_torch_namespace_qr_out_Q_Tensor_R_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_qr_out_Q_Tensor_R_Tensor_self_Tensor, 4},
    {"_torch_cpp_torch_namespace_qr_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_qr_self_Tensor, 2},
    {"_torch_cpp_torch_namespace__qr_helper_self_Tensor_some_bool", (DL_FUNC) &_torch_cpp_torch_namespace__qr_helper_self_Tensor_some_bool, 2},
    {"_torch_cpp_torch_namespace_geqrf_out_a_Tensor_tau_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_geqrf_out_a_Tensor_tau_Tensor_self_Tensor, 3},
    {"_torch_cpp_torch_namespace_geqrf_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_geqrf_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_orgqr_out_out_Tensor_self_Tensor_input2_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_orgqr_out_out_Tensor_self_Tensor_input2_Tensor, 3},
    {"_torch_cpp_torch_namespace_orgqr_self_Tensor_input2_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_orgqr_self_Tensor_input2_Tensor, 2},
    {"_torch_cpp_torch_namespace_ormqr_out_out_Tensor_self_Tensor_input2_Tensor_input3_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_ormqr_out_out_Tensor_self_Tensor_input2_Tensor_input3_Tensor, 6},
    {"_torch_cpp_torch_namespace_ormqr_self_Tensor_input2_Tensor_input3_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_ormqr_self_Tensor_input2_Tensor_input3_Tensor, 5},
    {"_torch_cpp_torch_namespace__lu_with_info_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace__lu_with_info_self_Tensor, 3},
    {"_torch_cpp_torch_namespace_lu_solve_out_out_Tensor_self_Tensor_LU_data_Tensor_LU_pivots_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_lu_solve_out_out_Tensor_self_Tensor_LU_data_Tensor_LU_pivots_Tensor, 4},
    {"_torch_cpp_torch_namespace_lu_solve_self_Tensor_LU_data_Tensor_LU_pivots_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_lu_solve_self_Tensor_LU_data_Tensor_LU_pivots_Tensor, 3},
    {"_torch_cpp_torch_namespace__lu_solve_helper_self_Tensor_LU_data_Tensor_LU_pivots_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace__lu_solve_helper_self_Tensor_LU_data_Tensor_LU_pivots_Tensor, 3},
    {"_torch_cpp_torch_namespace_multinomial_out_out_Tensor_self_Tensor_num_samples_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_multinomial_out_out_Tensor_self_Tensor_num_samples_int64_t, 5},
    {"_torch_cpp_torch_namespace_multinomial_self_Tensor_num_samples_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_multinomial_self_Tensor_num_samples_int64_t, 4},
    {"_torch_cpp_torch_namespace__multinomial_alias_setup_probs_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace__multinomial_alias_setup_probs_Tensor, 1},
    {"_torch_cpp_torch_namespace__multinomial_alias_draw_J_Tensor_q_Tensor_num_samples_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace__multinomial_alias_draw_J_Tensor_q_Tensor_num_samples_int64_t, 4},
    {"_torch_cpp_torch_namespace_lgamma_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_lgamma_out_out_Tensor_self_Tensor, 2},
    {"_torch_cpp_torch_namespace_lgamma_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_lgamma_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_digamma_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_digamma_out_out_Tensor_self_Tensor, 2},
    {"_torch_cpp_torch_namespace_digamma_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_digamma_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_polygamma_out_out_Tensor_n_int64_t_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_polygamma_out_out_Tensor_n_int64_t_self_Tensor, 3},
    {"_torch_cpp_torch_namespace_polygamma_n_int64_t_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_polygamma_n_int64_t_self_Tensor, 2},
    {"_torch_cpp_torch_namespace_erfinv_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_erfinv_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_erfinv_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_erfinv_out_out_Tensor_self_Tensor, 2},
    {"_torch_cpp_torch_namespace_sign_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_sign_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_sign_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_sign_out_out_Tensor_self_Tensor, 2},
    {"_torch_cpp_torch_namespace_dist_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_dist_self_Tensor_other_Tensor, 3},
    {"_torch_cpp_torch_namespace_atan2_out_out_Tensor_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_atan2_out_out_Tensor_self_Tensor_other_Tensor, 3},
    {"_torch_cpp_torch_namespace_atan2_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_atan2_self_Tensor_other_Tensor, 2},
    {"_torch_cpp_torch_namespace_lerp_out_out_Tensor_self_Tensor_end_Tensor_weight_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace_lerp_out_out_Tensor_self_Tensor_end_Tensor_weight_Scalar, 4},
    {"_torch_cpp_torch_namespace_lerp_out_out_Tensor_self_Tensor_end_Tensor_weight_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_lerp_out_out_Tensor_self_Tensor_end_Tensor_weight_Tensor, 4},
    {"_torch_cpp_torch_namespace_lerp_self_Tensor_end_Tensor_weight_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace_lerp_self_Tensor_end_Tensor_weight_Scalar, 3},
    {"_torch_cpp_torch_namespace_lerp_self_Tensor_end_Tensor_weight_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_lerp_self_Tensor_end_Tensor_weight_Tensor, 3},
    {"_torch_cpp_torch_namespace_histc_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_histc_out_out_Tensor_self_Tensor, 5},
    {"_torch_cpp_torch_namespace_histc_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_histc_self_Tensor, 4},
    {"_torch_cpp_torch_namespace_fmod_out_out_Tensor_self_Tensor_other_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace_fmod_out_out_Tensor_self_Tensor_other_Scalar, 3},
    {"_torch_cpp_torch_namespace_fmod_self_Tensor_other_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace_fmod_self_Tensor_other_Scalar, 2},
    {"_torch_cpp_torch_namespace_fmod_out_out_Tensor_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_fmod_out_out_Tensor_self_Tensor_other_Tensor, 3},
    {"_torch_cpp_torch_namespace_fmod_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_fmod_self_Tensor_other_Tensor, 2},
    {"_torch_cpp_torch_namespace_remainder_out_out_Tensor_self_Tensor_other_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace_remainder_out_out_Tensor_self_Tensor_other_Scalar, 3},
    {"_torch_cpp_torch_namespace_remainder_self_Tensor_other_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace_remainder_self_Tensor_other_Scalar, 2},
    {"_torch_cpp_torch_namespace_remainder_out_out_Tensor_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_remainder_out_out_Tensor_self_Tensor_other_Tensor, 3},
    {"_torch_cpp_torch_namespace_remainder_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_remainder_self_Tensor_other_Tensor, 2},
    {"_torch_cpp_torch_namespace_min_out_out_Tensor_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_min_out_out_Tensor_self_Tensor_other_Tensor, 3},
    {"_torch_cpp_torch_namespace_min_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_min_self_Tensor_other_Tensor, 2},
    {"_torch_cpp_torch_namespace_min_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_min_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_max_out_out_Tensor_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_max_out_out_Tensor_self_Tensor_other_Tensor, 3},
    {"_torch_cpp_torch_namespace_max_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_max_self_Tensor_other_Tensor, 2},
    {"_torch_cpp_torch_namespace_max_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_max_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_median_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_median_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_sort_out_values_Tensor_indices_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_sort_out_values_Tensor_indices_Tensor_self_Tensor, 5},
    {"_torch_cpp_torch_namespace_sort_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_sort_self_Tensor, 3},
    {"_torch_cpp_torch_namespace_sort_out_values_Tensor_indices_Tensor_self_Tensor_dim_Dimname", (DL_FUNC) &_torch_cpp_torch_namespace_sort_out_values_Tensor_indices_Tensor_self_Tensor_dim_Dimname, 5},
    {"_torch_cpp_torch_namespace_sort_self_Tensor_dim_Dimname", (DL_FUNC) &_torch_cpp_torch_namespace_sort_self_Tensor_dim_Dimname, 3},
    {"_torch_cpp_torch_namespace_argsort_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_argsort_self_Tensor, 3},
    {"_torch_cpp_torch_namespace_argsort_self_Tensor_dim_Dimname", (DL_FUNC) &_torch_cpp_torch_namespace_argsort_self_Tensor_dim_Dimname, 3},
    {"_torch_cpp_torch_namespace_topk_out_values_Tensor_indices_Tensor_self_Tensor_k_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_topk_out_values_Tensor_indices_Tensor_self_Tensor_k_int64_t, 7},
    {"_torch_cpp_torch_namespace_topk_self_Tensor_k_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_topk_self_Tensor_k_int64_t, 5},
    {"_torch_cpp_torch_namespace_all_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_all_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_any_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_any_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_renorm_out_out_Tensor_self_Tensor_p_Scalar_dim_int64_t_maxnorm_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace_renorm_out_out_Tensor_self_Tensor_p_Scalar_dim_int64_t_maxnorm_Scalar, 5},
    {"_torch_cpp_torch_namespace_renorm_self_Tensor_p_Scalar_dim_int64_t_maxnorm_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace_renorm_self_Tensor_p_Scalar_dim_int64_t_maxnorm_Scalar, 4},
    {"_torch_cpp_torch_namespace_equal_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_equal_self_Tensor_other_Tensor, 2},
    {"_torch_cpp_torch_namespace_pow_out_out_Tensor_self_Tensor_exponent_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_pow_out_out_Tensor_self_Tensor_exponent_Tensor, 3},
    {"_torch_cpp_torch_namespace_pow_self_Tensor_exponent_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_pow_self_Tensor_exponent_Tensor, 2},
    {"_torch_cpp_torch_namespace_pow_out_out_Tensor_self_Scalar_exponent_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_pow_out_out_Tensor_self_Scalar_exponent_Tensor, 3},
    {"_torch_cpp_torch_namespace_pow_self_Scalar_exponent_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_pow_self_Scalar_exponent_Tensor, 2},
    {"_torch_cpp_torch_namespace_normal_out_out_Tensor_mean_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_normal_out_out_Tensor_mean_Tensor, 4},
    {"_torch_cpp_torch_namespace_normal_mean_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_normal_mean_Tensor, 3},
    {"_torch_cpp_torch_namespace_normal_out_out_Tensor_mean_double_std_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_normal_out_out_Tensor_mean_double_std_Tensor, 4},
    {"_torch_cpp_torch_namespace_normal_mean_double_std_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_normal_mean_double_std_Tensor, 3},
    {"_torch_cpp_torch_namespace_normal_out_out_Tensor_mean_Tensor_std_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_normal_out_out_Tensor_mean_Tensor_std_Tensor, 4},
    {"_torch_cpp_torch_namespace_normal_mean_Tensor_std_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_normal_mean_Tensor_std_Tensor, 3},
    {"_torch_cpp_torch_namespace_normal_mean_double_std_double_size_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_normal_mean_double_std_double_size_IntArrayRef, 5},
    {"_torch_cpp_torch_namespace_normal_out_out_Tensor_mean_double_std_double_size_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_normal_out_out_Tensor_mean_double_std_double_size_IntArrayRef, 5},
    {"_torch_cpp_torch_namespace_alias_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_alias_self_Tensor, 1},
    {"_torch_cpp_torch_namespace__addr_self_Tensor_vec1_Tensor_vec2_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace__addr_self_Tensor_vec1_Tensor_vec2_Tensor, 5},
    {"_torch_cpp_torch_namespace__addr__self_Tensor_vec1_Tensor_vec2_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace__addr__self_Tensor_vec1_Tensor_vec2_Tensor, 5},
    {"_torch_cpp_torch_namespace__addr_out_out_Tensor_self_Tensor_vec1_Tensor_vec2_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace__addr_out_out_Tensor_self_Tensor_vec1_Tensor_vec2_Tensor, 6},
    {"_torch_cpp_torch_namespace__index_copy__self_Tensor_dim_int64_t_index_Tensor_source_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace__index_copy__self_Tensor_dim_int64_t_index_Tensor_source_Tensor, 4},
    {"_torch_cpp_torch_namespace__cumsum_self_Tensor_dim_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace__cumsum_self_Tensor_dim_int64_t, 2},
    {"_torch_cpp_torch_namespace__cumsum_out_out_Tensor_self_Tensor_dim_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace__cumsum_out_out_Tensor_self_Tensor_dim_int64_t, 3},
    {"_torch_cpp_torch_namespace__cumprod_self_Tensor_dim_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace__cumprod_self_Tensor_dim_int64_t, 2},
    {"_torch_cpp_torch_namespace__cumprod_out_out_Tensor_self_Tensor_dim_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace__cumprod_out_out_Tensor_self_Tensor_dim_int64_t, 3},
    {"_torch_cpp_torch_namespace__var_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace__var_self_Tensor, 2},
    {"_torch_cpp_torch_namespace__std_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace__std_self_Tensor, 2},
    {"_torch_cpp_torch_namespace__cat_tensors_TensorList", (DL_FUNC) &_torch_cpp_torch_namespace__cat_tensors_TensorList, 2},
    {"_torch_cpp_torch_namespace__cat_out_out_Tensor_tensors_TensorList", (DL_FUNC) &_torch_cpp_torch_namespace__cat_out_out_Tensor_tensors_TensorList, 3},
    {"_torch_cpp_torch_namespace__mode_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace__mode_self_Tensor, 3},
    {"_torch_cpp_torch_namespace__mode_out_values_Tensor_indices_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace__mode_out_values_Tensor_indices_Tensor_self_Tensor, 5},
    {"_torch_cpp_torch_namespace__max_self_Tensor_dim_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace__max_self_Tensor_dim_int64_t, 3},
    {"_torch_cpp_torch_namespace__max_out_max_Tensor_max_indices_Tensor_self_Tensor_dim_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace__max_out_max_Tensor_max_indices_Tensor_self_Tensor_dim_int64_t, 5},
    {"_torch_cpp_torch_namespace__min_self_Tensor_dim_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace__min_self_Tensor_dim_int64_t, 3},
    {"_torch_cpp_torch_namespace__min_out_min_Tensor_min_indices_Tensor_self_Tensor_dim_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace__min_out_min_Tensor_min_indices_Tensor_self_Tensor_dim_int64_t, 5},
    {"_torch_cpp_torch_namespace_binary_cross_entropy_out_out_Tensor_self_Tensor_target_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_binary_cross_entropy_out_out_Tensor_self_Tensor_target_Tensor, 5},
    {"_torch_cpp_torch_namespace_binary_cross_entropy_self_Tensor_target_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_binary_cross_entropy_self_Tensor_target_Tensor, 4},
    {"_torch_cpp_torch_namespace_binary_cross_entropy_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_target_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_binary_cross_entropy_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_target_Tensor, 6},
    {"_torch_cpp_torch_namespace_binary_cross_entropy_backward_grad_output_Tensor_self_Tensor_target_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_binary_cross_entropy_backward_grad_output_Tensor_self_Tensor_target_Tensor, 5},
    {"_torch_cpp_torch_namespace_mse_loss_out_out_Tensor_self_Tensor_target_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_mse_loss_out_out_Tensor_self_Tensor_target_Tensor, 4},
    {"_torch_cpp_torch_namespace_mse_loss_self_Tensor_target_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_mse_loss_self_Tensor_target_Tensor, 3},
    {"_torch_cpp_torch_namespace_mse_loss_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_target_Tensor_reduction_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_mse_loss_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_target_Tensor_reduction_int64_t, 5},
    {"_torch_cpp_torch_namespace_mse_loss_backward_grad_output_Tensor_self_Tensor_target_Tensor_reduction_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_mse_loss_backward_grad_output_Tensor_self_Tensor_target_Tensor_reduction_int64_t, 4},
    {"_torch_cpp_torch_namespace_l1_loss_out_out_Tensor_self_Tensor_target_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_l1_loss_out_out_Tensor_self_Tensor_target_Tensor, 4},
    {"_torch_cpp_torch_namespace_l1_loss_self_Tensor_target_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_l1_loss_self_Tensor_target_Tensor, 3},
    {"_torch_cpp_torch_namespace_l1_loss_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_target_Tensor_reduction_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_l1_loss_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_target_Tensor_reduction_int64_t, 5},
    {"_torch_cpp_torch_namespace_l1_loss_backward_grad_output_Tensor_self_Tensor_target_Tensor_reduction_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_l1_loss_backward_grad_output_Tensor_self_Tensor_target_Tensor_reduction_int64_t, 4},
    {"_torch_cpp_torch_namespace_multi_margin_loss_out_out_Tensor_self_Tensor_target_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_multi_margin_loss_out_out_Tensor_self_Tensor_target_Tensor, 7},
    {"_torch_cpp_torch_namespace_multi_margin_loss_self_Tensor_target_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_multi_margin_loss_self_Tensor_target_Tensor, 6},
    {"_torch_cpp_torch_namespace_multi_margin_loss_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_target_Tensor_p_Scalar_margin_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace_multi_margin_loss_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_target_Tensor_p_Scalar_margin_Scalar, 8},
    {"_torch_cpp_torch_namespace_multi_margin_loss_backward_grad_output_Tensor_self_Tensor_target_Tensor_p_Scalar_margin_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace_multi_margin_loss_backward_grad_output_Tensor_self_Tensor_target_Tensor_p_Scalar_margin_Scalar, 7},
    {"_torch_cpp_torch_namespace_multilabel_margin_loss_out_out_Tensor_self_Tensor_target_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_multilabel_margin_loss_out_out_Tensor_self_Tensor_target_Tensor, 4},
    {"_torch_cpp_torch_namespace_multilabel_margin_loss_self_Tensor_target_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_multilabel_margin_loss_self_Tensor_target_Tensor, 3},
    {"_torch_cpp_torch_namespace_multilabel_margin_loss_forward_out_output_Tensor_is_target_Tensor_self_Tensor_target_Tensor_reduction_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_multilabel_margin_loss_forward_out_output_Tensor_is_target_Tensor_self_Tensor_target_Tensor_reduction_int64_t, 5},
    {"_torch_cpp_torch_namespace_multilabel_margin_loss_forward_self_Tensor_target_Tensor_reduction_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_multilabel_margin_loss_forward_self_Tensor_target_Tensor_reduction_int64_t, 3},
    {"_torch_cpp_torch_namespace_multilabel_margin_loss_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_target_Tensor_reduction_int64_t_is_target_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_multilabel_margin_loss_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_target_Tensor_reduction_int64_t_is_target_Tensor, 6},
    {"_torch_cpp_torch_namespace_multilabel_margin_loss_backward_grad_output_Tensor_self_Tensor_target_Tensor_reduction_int64_t_is_target_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_multilabel_margin_loss_backward_grad_output_Tensor_self_Tensor_target_Tensor_reduction_int64_t_is_target_Tensor, 5},
    {"_torch_cpp_torch_namespace_nll_loss_out_out_Tensor_self_Tensor_target_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_nll_loss_out_out_Tensor_self_Tensor_target_Tensor, 6},
    {"_torch_cpp_torch_namespace_nll_loss_self_Tensor_target_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_nll_loss_self_Tensor_target_Tensor, 5},
    {"_torch_cpp_torch_namespace_nll_loss_forward_out_output_Tensor_total_weight_Tensor_self_Tensor_target_Tensor_weight_Tensor_reduction_int64_t_ignore_index_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_nll_loss_forward_out_output_Tensor_total_weight_Tensor_self_Tensor_target_Tensor_weight_Tensor_reduction_int64_t_ignore_index_int64_t, 7},
    {"_torch_cpp_torch_namespace_nll_loss_forward_self_Tensor_target_Tensor_weight_Tensor_reduction_int64_t_ignore_index_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_nll_loss_forward_self_Tensor_target_Tensor_weight_Tensor_reduction_int64_t_ignore_index_int64_t, 5},
    {"_torch_cpp_torch_namespace_nll_loss_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_target_Tensor_weight_Tensor_reduction_int64_t_ignore_index_int64_t_total_weight_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_nll_loss_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_target_Tensor_weight_Tensor_reduction_int64_t_ignore_index_int64_t_total_weight_Tensor, 8},
    {"_torch_cpp_torch_namespace_nll_loss_backward_grad_output_Tensor_self_Tensor_target_Tensor_weight_Tensor_reduction_int64_t_ignore_index_int64_t_total_weight_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_nll_loss_backward_grad_output_Tensor_self_Tensor_target_Tensor_weight_Tensor_reduction_int64_t_ignore_index_int64_t_total_weight_Tensor, 7},
    {"_torch_cpp_torch_namespace_nll_loss2d_out_out_Tensor_self_Tensor_target_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_nll_loss2d_out_out_Tensor_self_Tensor_target_Tensor, 6},
    {"_torch_cpp_torch_namespace_nll_loss2d_self_Tensor_target_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_nll_loss2d_self_Tensor_target_Tensor, 5},
    {"_torch_cpp_torch_namespace_nll_loss2d_forward_out_output_Tensor_total_weight_Tensor_self_Tensor_target_Tensor_weight_Tensor_reduction_int64_t_ignore_index_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_nll_loss2d_forward_out_output_Tensor_total_weight_Tensor_self_Tensor_target_Tensor_weight_Tensor_reduction_int64_t_ignore_index_int64_t, 7},
    {"_torch_cpp_torch_namespace_nll_loss2d_forward_self_Tensor_target_Tensor_weight_Tensor_reduction_int64_t_ignore_index_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_nll_loss2d_forward_self_Tensor_target_Tensor_weight_Tensor_reduction_int64_t_ignore_index_int64_t, 5},
    {"_torch_cpp_torch_namespace_nll_loss2d_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_target_Tensor_weight_Tensor_reduction_int64_t_ignore_index_int64_t_total_weight_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_nll_loss2d_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_target_Tensor_weight_Tensor_reduction_int64_t_ignore_index_int64_t_total_weight_Tensor, 8},
    {"_torch_cpp_torch_namespace_nll_loss2d_backward_grad_output_Tensor_self_Tensor_target_Tensor_weight_Tensor_reduction_int64_t_ignore_index_int64_t_total_weight_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_nll_loss2d_backward_grad_output_Tensor_self_Tensor_target_Tensor_weight_Tensor_reduction_int64_t_ignore_index_int64_t_total_weight_Tensor, 7},
    {"_torch_cpp_torch_namespace_smooth_l1_loss_out_out_Tensor_self_Tensor_target_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_smooth_l1_loss_out_out_Tensor_self_Tensor_target_Tensor, 4},
    {"_torch_cpp_torch_namespace_smooth_l1_loss_self_Tensor_target_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_smooth_l1_loss_self_Tensor_target_Tensor, 3},
    {"_torch_cpp_torch_namespace_smooth_l1_loss_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_target_Tensor_reduction_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_smooth_l1_loss_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_target_Tensor_reduction_int64_t, 5},
    {"_torch_cpp_torch_namespace_smooth_l1_loss_backward_grad_output_Tensor_self_Tensor_target_Tensor_reduction_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_smooth_l1_loss_backward_grad_output_Tensor_self_Tensor_target_Tensor_reduction_int64_t, 4},
    {"_torch_cpp_torch_namespace_soft_margin_loss_out_out_Tensor_self_Tensor_target_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_soft_margin_loss_out_out_Tensor_self_Tensor_target_Tensor, 4},
    {"_torch_cpp_torch_namespace_soft_margin_loss_self_Tensor_target_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_soft_margin_loss_self_Tensor_target_Tensor, 3},
    {"_torch_cpp_torch_namespace_soft_margin_loss_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_target_Tensor_reduction_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_soft_margin_loss_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_target_Tensor_reduction_int64_t, 5},
    {"_torch_cpp_torch_namespace_soft_margin_loss_backward_grad_output_Tensor_self_Tensor_target_Tensor_reduction_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_soft_margin_loss_backward_grad_output_Tensor_self_Tensor_target_Tensor_reduction_int64_t, 4},
    {"_torch_cpp_torch_namespace_elu_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_elu_out_out_Tensor_self_Tensor, 5},
    {"_torch_cpp_torch_namespace_elu_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_elu_self_Tensor, 4},
    {"_torch_cpp_torch_namespace_elu_backward_out_grad_input_Tensor_grad_output_Tensor_alpha_Scalar_scale_Scalar_input_scale_Scalar_output_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_elu_backward_out_grad_input_Tensor_grad_output_Tensor_alpha_Scalar_scale_Scalar_input_scale_Scalar_output_Tensor, 6},
    {"_torch_cpp_torch_namespace_elu_backward_grad_output_Tensor_alpha_Scalar_scale_Scalar_input_scale_Scalar_output_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_elu_backward_grad_output_Tensor_alpha_Scalar_scale_Scalar_input_scale_Scalar_output_Tensor, 5},
    {"_torch_cpp_torch_namespace_elu__self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_elu__self_Tensor, 4},
    {"_torch_cpp_torch_namespace_glu_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_glu_out_out_Tensor_self_Tensor, 3},
    {"_torch_cpp_torch_namespace_glu_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_glu_self_Tensor, 2},
    {"_torch_cpp_torch_namespace_glu_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_dim_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_glu_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_dim_int64_t, 4},
    {"_torch_cpp_torch_namespace_glu_backward_grad_output_Tensor_self_Tensor_dim_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_glu_backward_grad_output_Tensor_self_Tensor_dim_int64_t, 3},
    {"_torch_cpp_torch_namespace_hardtanh_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_hardtanh_out_out_Tensor_self_Tensor, 4},
    {"_torch_cpp_torch_namespace_hardtanh_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_hardtanh_self_Tensor, 3},
    {"_torch_cpp_torch_namespace_hardtanh_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_min_val_Scalar_max_val_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace_hardtanh_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_min_val_Scalar_max_val_Scalar, 5},
    {"_torch_cpp_torch_namespace_hardtanh_backward_grad_output_Tensor_self_Tensor_min_val_Scalar_max_val_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace_hardtanh_backward_grad_output_Tensor_self_Tensor_min_val_Scalar_max_val_Scalar, 4},
    {"_torch_cpp_torch_namespace_hardtanh__self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_hardtanh__self_Tensor, 3},
    {"_torch_cpp_torch_namespace_leaky_relu_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_leaky_relu_out_out_Tensor_self_Tensor, 3},
    {"_torch_cpp_torch_namespace_leaky_relu_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_leaky_relu_self_Tensor, 2},
    {"_torch_cpp_torch_namespace_leaky_relu_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_negative_slope_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace_leaky_relu_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_negative_slope_Scalar, 4},
    {"_torch_cpp_torch_namespace_leaky_relu_backward_grad_output_Tensor_self_Tensor_negative_slope_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace_leaky_relu_backward_grad_output_Tensor_self_Tensor_negative_slope_Scalar, 3},
    {"_torch_cpp_torch_namespace_leaky_relu__self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_leaky_relu__self_Tensor, 2},
    {"_torch_cpp_torch_namespace_log_sigmoid_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_log_sigmoid_out_out_Tensor_self_Tensor, 2},
    {"_torch_cpp_torch_namespace_log_sigmoid_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_log_sigmoid_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_log_sigmoid_forward_out_output_Tensor_buffer_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_log_sigmoid_forward_out_output_Tensor_buffer_Tensor_self_Tensor, 3},
    {"_torch_cpp_torch_namespace_log_sigmoid_forward_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_log_sigmoid_forward_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_log_sigmoid_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_buffer_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_log_sigmoid_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_buffer_Tensor, 4},
    {"_torch_cpp_torch_namespace_log_sigmoid_backward_grad_output_Tensor_self_Tensor_buffer_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_log_sigmoid_backward_grad_output_Tensor_self_Tensor_buffer_Tensor, 3},
    {"_torch_cpp_torch_namespace_rrelu_with_noise_out_out_Tensor_self_Tensor_noise_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_rrelu_with_noise_out_out_Tensor_self_Tensor_noise_Tensor, 7},
    {"_torch_cpp_torch_namespace_rrelu_with_noise_self_Tensor_noise_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_rrelu_with_noise_self_Tensor_noise_Tensor, 6},
    {"_torch_cpp_torch_namespace_rrelu_with_noise_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_noise_Tensor_lower_Scalar_upper_Scalar_training_bool", (DL_FUNC) &_torch_cpp_torch_namespace_rrelu_with_noise_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_noise_Tensor_lower_Scalar_upper_Scalar_training_bool, 7},
    {"_torch_cpp_torch_namespace_rrelu_with_noise_backward_grad_output_Tensor_self_Tensor_noise_Tensor_lower_Scalar_upper_Scalar_training_bool", (DL_FUNC) &_torch_cpp_torch_namespace_rrelu_with_noise_backward_grad_output_Tensor_self_Tensor_noise_Tensor_lower_Scalar_upper_Scalar_training_bool, 6},
    {"_torch_cpp_torch_namespace_rrelu_with_noise__self_Tensor_noise_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_rrelu_with_noise__self_Tensor_noise_Tensor, 6},
    {"_torch_cpp_torch_namespace_softplus_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_softplus_out_out_Tensor_self_Tensor, 4},
    {"_torch_cpp_torch_namespace_softplus_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_softplus_self_Tensor, 3},
    {"_torch_cpp_torch_namespace_softplus_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_beta_Scalar_threshold_Scalar_output_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_softplus_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_beta_Scalar_threshold_Scalar_output_Tensor, 6},
    {"_torch_cpp_torch_namespace_softplus_backward_grad_output_Tensor_self_Tensor_beta_Scalar_threshold_Scalar_output_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_softplus_backward_grad_output_Tensor_self_Tensor_beta_Scalar_threshold_Scalar_output_Tensor, 5},
    {"_torch_cpp_torch_namespace_softshrink_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_softshrink_out_out_Tensor_self_Tensor, 3},
    {"_torch_cpp_torch_namespace_softshrink_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_softshrink_self_Tensor, 2},
    {"_torch_cpp_torch_namespace_softshrink_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_lambd_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace_softshrink_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_lambd_Scalar, 4},
    {"_torch_cpp_torch_namespace_softshrink_backward_grad_output_Tensor_self_Tensor_lambd_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace_softshrink_backward_grad_output_Tensor_self_Tensor_lambd_Scalar, 3},
    {"_torch_cpp_torch_namespace_adaptive_avg_pool2d_out_out_Tensor_self_Tensor_output_size_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_adaptive_avg_pool2d_out_out_Tensor_self_Tensor_output_size_IntArrayRef, 3},
    {"_torch_cpp_torch_namespace_adaptive_avg_pool2d_self_Tensor_output_size_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_adaptive_avg_pool2d_self_Tensor_output_size_IntArrayRef, 2},
    {"_torch_cpp_torch_namespace_mkldnn_adaptive_avg_pool2d_self_Tensor_output_size_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_mkldnn_adaptive_avg_pool2d_self_Tensor_output_size_IntArrayRef, 2},
    {"_torch_cpp_torch_namespace__adaptive_avg_pool2d_self_Tensor_output_size_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace__adaptive_avg_pool2d_self_Tensor_output_size_IntArrayRef, 2},
    {"_torch_cpp_torch_namespace__adaptive_avg_pool2d_backward_grad_output_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace__adaptive_avg_pool2d_backward_grad_output_Tensor_self_Tensor, 2},
    {"_torch_cpp_torch_namespace_adaptive_avg_pool3d_out_out_Tensor_self_Tensor_output_size_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_adaptive_avg_pool3d_out_out_Tensor_self_Tensor_output_size_IntArrayRef, 3},
    {"_torch_cpp_torch_namespace_adaptive_avg_pool3d_self_Tensor_output_size_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_adaptive_avg_pool3d_self_Tensor_output_size_IntArrayRef, 2},
    {"_torch_cpp_torch_namespace_adaptive_avg_pool3d_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_adaptive_avg_pool3d_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor, 3},
    {"_torch_cpp_torch_namespace_adaptive_avg_pool3d_backward_grad_output_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_adaptive_avg_pool3d_backward_grad_output_Tensor_self_Tensor, 2},
    {"_torch_cpp_torch_namespace_adaptive_max_pool2d_out_out_Tensor_indices_Tensor_self_Tensor_output_size_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_adaptive_max_pool2d_out_out_Tensor_indices_Tensor_self_Tensor_output_size_IntArrayRef, 4},
    {"_torch_cpp_torch_namespace_adaptive_max_pool2d_self_Tensor_output_size_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_adaptive_max_pool2d_self_Tensor_output_size_IntArrayRef, 2},
    {"_torch_cpp_torch_namespace_adaptive_max_pool2d_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_indices_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_adaptive_max_pool2d_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_indices_Tensor, 4},
    {"_torch_cpp_torch_namespace_adaptive_max_pool2d_backward_grad_output_Tensor_self_Tensor_indices_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_adaptive_max_pool2d_backward_grad_output_Tensor_self_Tensor_indices_Tensor, 3},
    {"_torch_cpp_torch_namespace_adaptive_max_pool3d_out_out_Tensor_indices_Tensor_self_Tensor_output_size_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_adaptive_max_pool3d_out_out_Tensor_indices_Tensor_self_Tensor_output_size_IntArrayRef, 4},
    {"_torch_cpp_torch_namespace_adaptive_max_pool3d_self_Tensor_output_size_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_adaptive_max_pool3d_self_Tensor_output_size_IntArrayRef, 2},
    {"_torch_cpp_torch_namespace_adaptive_max_pool3d_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_indices_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_adaptive_max_pool3d_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_indices_Tensor, 4},
    {"_torch_cpp_torch_namespace_adaptive_max_pool3d_backward_grad_output_Tensor_self_Tensor_indices_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_adaptive_max_pool3d_backward_grad_output_Tensor_self_Tensor_indices_Tensor, 3},
    {"_torch_cpp_torch_namespace_avg_pool2d_out_out_Tensor_self_Tensor_kernel_size_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_avg_pool2d_out_out_Tensor_self_Tensor_kernel_size_IntArrayRef, 8},
    {"_torch_cpp_torch_namespace_avg_pool2d_self_Tensor_kernel_size_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_avg_pool2d_self_Tensor_kernel_size_IntArrayRef, 7},
    {"_torch_cpp_torch_namespace_avg_pool2d_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_kernel_size_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef_ceil_mode_bool_count_include_pad_bool_divisor_override_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_avg_pool2d_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_kernel_size_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef_ceil_mode_bool_count_include_pad_bool_divisor_override_int64_t, 9},
    {"_torch_cpp_torch_namespace_avg_pool2d_backward_grad_output_Tensor_self_Tensor_kernel_size_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef_ceil_mode_bool_count_include_pad_bool_divisor_override_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_avg_pool2d_backward_grad_output_Tensor_self_Tensor_kernel_size_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef_ceil_mode_bool_count_include_pad_bool_divisor_override_int64_t, 8},
    {"_torch_cpp_torch_namespace_avg_pool3d_out_out_Tensor_self_Tensor_kernel_size_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_avg_pool3d_out_out_Tensor_self_Tensor_kernel_size_IntArrayRef, 8},
    {"_torch_cpp_torch_namespace_avg_pool3d_self_Tensor_kernel_size_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_avg_pool3d_self_Tensor_kernel_size_IntArrayRef, 7},
    {"_torch_cpp_torch_namespace_avg_pool3d_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_kernel_size_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef_ceil_mode_bool_count_include_pad_bool_divisor_override_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_avg_pool3d_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_kernel_size_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef_ceil_mode_bool_count_include_pad_bool_divisor_override_int64_t, 9},
    {"_torch_cpp_torch_namespace_avg_pool3d_backward_grad_output_Tensor_self_Tensor_kernel_size_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef_ceil_mode_bool_count_include_pad_bool_divisor_override_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_avg_pool3d_backward_grad_output_Tensor_self_Tensor_kernel_size_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef_ceil_mode_bool_count_include_pad_bool_divisor_override_int64_t, 8},
    {"_torch_cpp_torch_namespace_fractional_max_pool2d_out_output_Tensor_indices_Tensor_self_Tensor_kernel_size_IntArrayRef_output_size_IntArrayRef_random_samples_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_fractional_max_pool2d_out_output_Tensor_indices_Tensor_self_Tensor_kernel_size_IntArrayRef_output_size_IntArrayRef_random_samples_Tensor, 6},
    {"_torch_cpp_torch_namespace_fractional_max_pool2d_self_Tensor_kernel_size_IntArrayRef_output_size_IntArrayRef_random_samples_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_fractional_max_pool2d_self_Tensor_kernel_size_IntArrayRef_output_size_IntArrayRef_random_samples_Tensor, 4},
    {"_torch_cpp_torch_namespace_fractional_max_pool2d_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_kernel_size_IntArrayRef_output_size_IntArrayRef_indices_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_fractional_max_pool2d_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_kernel_size_IntArrayRef_output_size_IntArrayRef_indices_Tensor, 6},
    {"_torch_cpp_torch_namespace_fractional_max_pool2d_backward_grad_output_Tensor_self_Tensor_kernel_size_IntArrayRef_output_size_IntArrayRef_indices_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_fractional_max_pool2d_backward_grad_output_Tensor_self_Tensor_kernel_size_IntArrayRef_output_size_IntArrayRef_indices_Tensor, 5},
    {"_torch_cpp_torch_namespace_fractional_max_pool3d_out_output_Tensor_indices_Tensor_self_Tensor_kernel_size_IntArrayRef_output_size_IntArrayRef_random_samples_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_fractional_max_pool3d_out_output_Tensor_indices_Tensor_self_Tensor_kernel_size_IntArrayRef_output_size_IntArrayRef_random_samples_Tensor, 6},
    {"_torch_cpp_torch_namespace_fractional_max_pool3d_self_Tensor_kernel_size_IntArrayRef_output_size_IntArrayRef_random_samples_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_fractional_max_pool3d_self_Tensor_kernel_size_IntArrayRef_output_size_IntArrayRef_random_samples_Tensor, 4},
    {"_torch_cpp_torch_namespace_fractional_max_pool3d_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_kernel_size_IntArrayRef_output_size_IntArrayRef_indices_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_fractional_max_pool3d_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_kernel_size_IntArrayRef_output_size_IntArrayRef_indices_Tensor, 6},
    {"_torch_cpp_torch_namespace_fractional_max_pool3d_backward_grad_output_Tensor_self_Tensor_kernel_size_IntArrayRef_output_size_IntArrayRef_indices_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_fractional_max_pool3d_backward_grad_output_Tensor_self_Tensor_kernel_size_IntArrayRef_output_size_IntArrayRef_indices_Tensor, 5},
    {"_torch_cpp_torch_namespace_max_pool2d_with_indices_out_out_Tensor_indices_Tensor_self_Tensor_kernel_size_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_max_pool2d_with_indices_out_out_Tensor_indices_Tensor_self_Tensor_kernel_size_IntArrayRef, 8},
    {"_torch_cpp_torch_namespace_max_pool2d_with_indices_self_Tensor_kernel_size_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_max_pool2d_with_indices_self_Tensor_kernel_size_IntArrayRef, 6},
    {"_torch_cpp_torch_namespace_max_pool2d_with_indices_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_kernel_size_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef_ceil_mode_bool_indices_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_max_pool2d_with_indices_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_kernel_size_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef_ceil_mode_bool_indices_Tensor, 9},
    {"_torch_cpp_torch_namespace_max_pool2d_with_indices_backward_grad_output_Tensor_self_Tensor_kernel_size_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef_ceil_mode_bool_indices_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_max_pool2d_with_indices_backward_grad_output_Tensor_self_Tensor_kernel_size_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef_ceil_mode_bool_indices_Tensor, 8},
    {"_torch_cpp_torch_namespace_max_pool3d_with_indices_out_out_Tensor_indices_Tensor_self_Tensor_kernel_size_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_max_pool3d_with_indices_out_out_Tensor_indices_Tensor_self_Tensor_kernel_size_IntArrayRef, 8},
    {"_torch_cpp_torch_namespace_max_pool3d_with_indices_self_Tensor_kernel_size_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_max_pool3d_with_indices_self_Tensor_kernel_size_IntArrayRef, 6},
    {"_torch_cpp_torch_namespace_max_pool3d_with_indices_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_kernel_size_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef_ceil_mode_bool_indices_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_max_pool3d_with_indices_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_kernel_size_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef_ceil_mode_bool_indices_Tensor, 9},
    {"_torch_cpp_torch_namespace_max_pool3d_with_indices_backward_grad_output_Tensor_self_Tensor_kernel_size_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef_ceil_mode_bool_indices_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_max_pool3d_with_indices_backward_grad_output_Tensor_self_Tensor_kernel_size_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef_ceil_mode_bool_indices_Tensor, 8},
    {"_torch_cpp_torch_namespace_max_unpool2d_out_out_Tensor_self_Tensor_indices_Tensor_output_size_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_max_unpool2d_out_out_Tensor_self_Tensor_indices_Tensor_output_size_IntArrayRef, 4},
    {"_torch_cpp_torch_namespace_max_unpool2d_self_Tensor_indices_Tensor_output_size_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_max_unpool2d_self_Tensor_indices_Tensor_output_size_IntArrayRef, 3},
    {"_torch_cpp_torch_namespace_max_unpool2d_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_indices_Tensor_output_size_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_max_unpool2d_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_indices_Tensor_output_size_IntArrayRef, 5},
    {"_torch_cpp_torch_namespace_max_unpool2d_backward_grad_output_Tensor_self_Tensor_indices_Tensor_output_size_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_max_unpool2d_backward_grad_output_Tensor_self_Tensor_indices_Tensor_output_size_IntArrayRef, 4},
    {"_torch_cpp_torch_namespace_max_unpool3d_out_out_Tensor_self_Tensor_indices_Tensor_output_size_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_max_unpool3d_out_out_Tensor_self_Tensor_indices_Tensor_output_size_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef, 6},
    {"_torch_cpp_torch_namespace_max_unpool3d_self_Tensor_indices_Tensor_output_size_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_max_unpool3d_self_Tensor_indices_Tensor_output_size_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef, 5},
    {"_torch_cpp_torch_namespace_max_unpool3d_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_indices_Tensor_output_size_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_max_unpool3d_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_indices_Tensor_output_size_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef, 7},
    {"_torch_cpp_torch_namespace_max_unpool3d_backward_grad_output_Tensor_self_Tensor_indices_Tensor_output_size_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_max_unpool3d_backward_grad_output_Tensor_self_Tensor_indices_Tensor_output_size_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef, 6},
    {"_torch_cpp_torch_namespace_reflection_pad1d_out_out_Tensor_self_Tensor_padding_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_reflection_pad1d_out_out_Tensor_self_Tensor_padding_IntArrayRef, 3},
    {"_torch_cpp_torch_namespace_reflection_pad1d_self_Tensor_padding_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_reflection_pad1d_self_Tensor_padding_IntArrayRef, 2},
    {"_torch_cpp_torch_namespace_reflection_pad1d_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_padding_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_reflection_pad1d_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_padding_IntArrayRef, 4},
    {"_torch_cpp_torch_namespace_reflection_pad1d_backward_grad_output_Tensor_self_Tensor_padding_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_reflection_pad1d_backward_grad_output_Tensor_self_Tensor_padding_IntArrayRef, 3},
    {"_torch_cpp_torch_namespace_reflection_pad2d_out_out_Tensor_self_Tensor_padding_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_reflection_pad2d_out_out_Tensor_self_Tensor_padding_IntArrayRef, 3},
    {"_torch_cpp_torch_namespace_reflection_pad2d_self_Tensor_padding_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_reflection_pad2d_self_Tensor_padding_IntArrayRef, 2},
    {"_torch_cpp_torch_namespace_reflection_pad2d_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_padding_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_reflection_pad2d_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_padding_IntArrayRef, 4},
    {"_torch_cpp_torch_namespace_reflection_pad2d_backward_grad_output_Tensor_self_Tensor_padding_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_reflection_pad2d_backward_grad_output_Tensor_self_Tensor_padding_IntArrayRef, 3},
    {"_torch_cpp_torch_namespace_replication_pad1d_out_out_Tensor_self_Tensor_padding_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_replication_pad1d_out_out_Tensor_self_Tensor_padding_IntArrayRef, 3},
    {"_torch_cpp_torch_namespace_replication_pad1d_self_Tensor_padding_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_replication_pad1d_self_Tensor_padding_IntArrayRef, 2},
    {"_torch_cpp_torch_namespace_replication_pad1d_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_padding_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_replication_pad1d_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_padding_IntArrayRef, 4},
    {"_torch_cpp_torch_namespace_replication_pad1d_backward_grad_output_Tensor_self_Tensor_padding_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_replication_pad1d_backward_grad_output_Tensor_self_Tensor_padding_IntArrayRef, 3},
    {"_torch_cpp_torch_namespace_replication_pad2d_out_out_Tensor_self_Tensor_padding_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_replication_pad2d_out_out_Tensor_self_Tensor_padding_IntArrayRef, 3},
    {"_torch_cpp_torch_namespace_replication_pad2d_self_Tensor_padding_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_replication_pad2d_self_Tensor_padding_IntArrayRef, 2},
    {"_torch_cpp_torch_namespace_replication_pad2d_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_padding_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_replication_pad2d_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_padding_IntArrayRef, 4},
    {"_torch_cpp_torch_namespace_replication_pad2d_backward_grad_output_Tensor_self_Tensor_padding_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_replication_pad2d_backward_grad_output_Tensor_self_Tensor_padding_IntArrayRef, 3},
    {"_torch_cpp_torch_namespace_replication_pad3d_out_out_Tensor_self_Tensor_padding_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_replication_pad3d_out_out_Tensor_self_Tensor_padding_IntArrayRef, 3},
    {"_torch_cpp_torch_namespace_replication_pad3d_self_Tensor_padding_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_replication_pad3d_self_Tensor_padding_IntArrayRef, 2},
    {"_torch_cpp_torch_namespace_replication_pad3d_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_padding_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_replication_pad3d_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_padding_IntArrayRef, 4},
    {"_torch_cpp_torch_namespace_replication_pad3d_backward_grad_output_Tensor_self_Tensor_padding_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_replication_pad3d_backward_grad_output_Tensor_self_Tensor_padding_IntArrayRef, 3},
    {"_torch_cpp_torch_namespace__test_optional_float_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace__test_optional_float_self_Tensor, 2},
    {"_torch_cpp_torch_namespace_upsample_linear1d_out_out_Tensor_self_Tensor_output_size_IntArrayRef_align_corners_bool", (DL_FUNC) &_torch_cpp_torch_namespace_upsample_linear1d_out_out_Tensor_self_Tensor_output_size_IntArrayRef_align_corners_bool, 4},
    {"_torch_cpp_torch_namespace_upsample_linear1d_self_Tensor_output_size_IntArrayRef_align_corners_bool", (DL_FUNC) &_torch_cpp_torch_namespace_upsample_linear1d_self_Tensor_output_size_IntArrayRef_align_corners_bool, 3},
    {"_torch_cpp_torch_namespace_upsample_linear1d_backward_out_grad_input_Tensor_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef_align_corners_bool", (DL_FUNC) &_torch_cpp_torch_namespace_upsample_linear1d_backward_out_grad_input_Tensor_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef_align_corners_bool, 5},
    {"_torch_cpp_torch_namespace_upsample_linear1d_backward_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef_align_corners_bool", (DL_FUNC) &_torch_cpp_torch_namespace_upsample_linear1d_backward_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef_align_corners_bool, 4},
    {"_torch_cpp_torch_namespace_upsample_bilinear2d_out_out_Tensor_self_Tensor_output_size_IntArrayRef_align_corners_bool", (DL_FUNC) &_torch_cpp_torch_namespace_upsample_bilinear2d_out_out_Tensor_self_Tensor_output_size_IntArrayRef_align_corners_bool, 4},
    {"_torch_cpp_torch_namespace_upsample_bilinear2d_self_Tensor_output_size_IntArrayRef_align_corners_bool", (DL_FUNC) &_torch_cpp_torch_namespace_upsample_bilinear2d_self_Tensor_output_size_IntArrayRef_align_corners_bool, 3},
    {"_torch_cpp_torch_namespace_upsample_bilinear2d_backward_out_grad_input_Tensor_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef_align_corners_bool", (DL_FUNC) &_torch_cpp_torch_namespace_upsample_bilinear2d_backward_out_grad_input_Tensor_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef_align_corners_bool, 5},
    {"_torch_cpp_torch_namespace_upsample_bilinear2d_backward_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef_align_corners_bool", (DL_FUNC) &_torch_cpp_torch_namespace_upsample_bilinear2d_backward_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef_align_corners_bool, 4},
    {"_torch_cpp_torch_namespace_upsample_bicubic2d_out_out_Tensor_self_Tensor_output_size_IntArrayRef_align_corners_bool", (DL_FUNC) &_torch_cpp_torch_namespace_upsample_bicubic2d_out_out_Tensor_self_Tensor_output_size_IntArrayRef_align_corners_bool, 4},
    {"_torch_cpp_torch_namespace_upsample_bicubic2d_self_Tensor_output_size_IntArrayRef_align_corners_bool", (DL_FUNC) &_torch_cpp_torch_namespace_upsample_bicubic2d_self_Tensor_output_size_IntArrayRef_align_corners_bool, 3},
    {"_torch_cpp_torch_namespace_upsample_bicubic2d_backward_out_grad_input_Tensor_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef_align_corners_bool", (DL_FUNC) &_torch_cpp_torch_namespace_upsample_bicubic2d_backward_out_grad_input_Tensor_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef_align_corners_bool, 5},
    {"_torch_cpp_torch_namespace_upsample_bicubic2d_backward_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef_align_corners_bool", (DL_FUNC) &_torch_cpp_torch_namespace_upsample_bicubic2d_backward_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef_align_corners_bool, 4},
    {"_torch_cpp_torch_namespace_upsample_trilinear3d_out_out_Tensor_self_Tensor_output_size_IntArrayRef_align_corners_bool", (DL_FUNC) &_torch_cpp_torch_namespace_upsample_trilinear3d_out_out_Tensor_self_Tensor_output_size_IntArrayRef_align_corners_bool, 4},
    {"_torch_cpp_torch_namespace_upsample_trilinear3d_self_Tensor_output_size_IntArrayRef_align_corners_bool", (DL_FUNC) &_torch_cpp_torch_namespace_upsample_trilinear3d_self_Tensor_output_size_IntArrayRef_align_corners_bool, 3},
    {"_torch_cpp_torch_namespace_upsample_trilinear3d_backward_out_grad_input_Tensor_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef_align_corners_bool", (DL_FUNC) &_torch_cpp_torch_namespace_upsample_trilinear3d_backward_out_grad_input_Tensor_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef_align_corners_bool, 5},
    {"_torch_cpp_torch_namespace_upsample_trilinear3d_backward_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef_align_corners_bool", (DL_FUNC) &_torch_cpp_torch_namespace_upsample_trilinear3d_backward_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef_align_corners_bool, 4},
    {"_torch_cpp_torch_namespace_upsample_nearest1d_out_out_Tensor_self_Tensor_output_size_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_upsample_nearest1d_out_out_Tensor_self_Tensor_output_size_IntArrayRef, 3},
    {"_torch_cpp_torch_namespace_upsample_nearest1d_self_Tensor_output_size_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_upsample_nearest1d_self_Tensor_output_size_IntArrayRef, 2},
    {"_torch_cpp_torch_namespace_upsample_nearest1d_backward_out_grad_input_Tensor_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_upsample_nearest1d_backward_out_grad_input_Tensor_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef, 4},
    {"_torch_cpp_torch_namespace_upsample_nearest1d_backward_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_upsample_nearest1d_backward_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef, 3},
    {"_torch_cpp_torch_namespace_upsample_nearest2d_out_out_Tensor_self_Tensor_output_size_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_upsample_nearest2d_out_out_Tensor_self_Tensor_output_size_IntArrayRef, 3},
    {"_torch_cpp_torch_namespace_upsample_nearest2d_self_Tensor_output_size_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_upsample_nearest2d_self_Tensor_output_size_IntArrayRef, 2},
    {"_torch_cpp_torch_namespace_upsample_nearest2d_backward_out_grad_input_Tensor_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_upsample_nearest2d_backward_out_grad_input_Tensor_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef, 4},
    {"_torch_cpp_torch_namespace_upsample_nearest2d_backward_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_upsample_nearest2d_backward_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef, 3},
    {"_torch_cpp_torch_namespace_upsample_nearest3d_out_out_Tensor_self_Tensor_output_size_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_upsample_nearest3d_out_out_Tensor_self_Tensor_output_size_IntArrayRef, 3},
    {"_torch_cpp_torch_namespace_upsample_nearest3d_self_Tensor_output_size_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_upsample_nearest3d_self_Tensor_output_size_IntArrayRef, 2},
    {"_torch_cpp_torch_namespace_upsample_nearest3d_backward_out_grad_input_Tensor_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_upsample_nearest3d_backward_out_grad_input_Tensor_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef, 4},
    {"_torch_cpp_torch_namespace_upsample_nearest3d_backward_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_upsample_nearest3d_backward_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef, 3},
    {"_torch_cpp_torch_namespace_sigmoid_backward_out_grad_input_Tensor_grad_output_Tensor_output_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_sigmoid_backward_out_grad_input_Tensor_grad_output_Tensor_output_Tensor, 3},
    {"_torch_cpp_torch_namespace_sigmoid_backward_grad_output_Tensor_output_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_sigmoid_backward_grad_output_Tensor_output_Tensor, 2},
    {"_torch_cpp_torch_namespace_tanh_backward_out_grad_input_Tensor_grad_output_Tensor_output_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_tanh_backward_out_grad_input_Tensor_grad_output_Tensor_output_Tensor, 3},
    {"_torch_cpp_torch_namespace_tanh_backward_grad_output_Tensor_output_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_tanh_backward_grad_output_Tensor_output_Tensor, 2},
    {"_torch_cpp_torch_namespace_slow_conv_transpose2d_out_out_Tensor_self_Tensor_weight_Tensor_kernel_size_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_slow_conv_transpose2d_out_out_Tensor_self_Tensor_weight_Tensor_kernel_size_IntArrayRef, 9},
    {"_torch_cpp_torch_namespace_slow_conv_transpose2d_self_Tensor_weight_Tensor_kernel_size_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_slow_conv_transpose2d_self_Tensor_weight_Tensor_kernel_size_IntArrayRef, 8},
    {"_torch_cpp_torch_namespace_slow_conv_transpose2d_backward_out_grad_input_Tensor_grad_weight_Tensor_grad_bias_Tensor_grad_output_Tensor_self_Tensor_weight_Tensor_kernel_size_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef_output_padding_IntArrayRef_dilation_IntArrayRef_columns_Tensor_ones_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_slow_conv_transpose2d_backward_out_grad_input_Tensor_grad_weight_Tensor_grad_bias_Tensor_grad_output_Tensor_self_Tensor_weight_Tensor_kernel_size_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef_output_padding_IntArrayRef_dilation_IntArrayRef_columns_Tensor_ones_Tensor, 13},
    {"_torch_cpp_torch_namespace_slow_conv_transpose2d_backward_grad_output_Tensor_self_Tensor_weight_Tensor_kernel_size_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef_output_padding_IntArrayRef_dilation_IntArrayRef_columns_Tensor_ones_Tensor_output_mask_stdarraybool3", (DL_FUNC) &_torch_cpp_torch_namespace_slow_conv_transpose2d_backward_grad_output_Tensor_self_Tensor_weight_Tensor_kernel_size_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef_output_padding_IntArrayRef_dilation_IntArrayRef_columns_Tensor_ones_Tensor_output_mask_stdarraybool3, 11},
    {"_torch_cpp_torch_namespace_slow_conv_transpose3d_out_out_Tensor_self_Tensor_weight_Tensor_kernel_size_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_slow_conv_transpose3d_out_out_Tensor_self_Tensor_weight_Tensor_kernel_size_IntArrayRef, 9},
    {"_torch_cpp_torch_namespace_slow_conv_transpose3d_self_Tensor_weight_Tensor_kernel_size_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_slow_conv_transpose3d_self_Tensor_weight_Tensor_kernel_size_IntArrayRef, 8},
    {"_torch_cpp_torch_namespace_slow_conv_transpose3d_backward_out_grad_input_Tensor_grad_weight_Tensor_grad_bias_Tensor_grad_output_Tensor_self_Tensor_weight_Tensor_kernel_size_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef_output_padding_IntArrayRef_dilation_IntArrayRef_finput_Tensor_fgrad_input_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_slow_conv_transpose3d_backward_out_grad_input_Tensor_grad_weight_Tensor_grad_bias_Tensor_grad_output_Tensor_self_Tensor_weight_Tensor_kernel_size_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef_output_padding_IntArrayRef_dilation_IntArrayRef_finput_Tensor_fgrad_input_Tensor, 13},
    {"_torch_cpp_torch_namespace_slow_conv_transpose3d_backward_grad_output_Tensor_self_Tensor_weight_Tensor_kernel_size_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef_output_padding_IntArrayRef_dilation_IntArrayRef_finput_Tensor_fgrad_input_Tensor_output_mask_stdarraybool3", (DL_FUNC) &_torch_cpp_torch_namespace_slow_conv_transpose3d_backward_grad_output_Tensor_self_Tensor_weight_Tensor_kernel_size_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef_output_padding_IntArrayRef_dilation_IntArrayRef_finput_Tensor_fgrad_input_Tensor_output_mask_stdarraybool3, 11},
    {"_torch_cpp_torch_namespace_thnn_conv2d_out_out_Tensor_self_Tensor_weight_Tensor_kernel_size_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_thnn_conv2d_out_out_Tensor_self_Tensor_weight_Tensor_kernel_size_IntArrayRef, 7},
    {"_torch_cpp_torch_namespace_thnn_conv2d_self_Tensor_weight_Tensor_kernel_size_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_thnn_conv2d_self_Tensor_weight_Tensor_kernel_size_IntArrayRef, 6},
    {"_torch_cpp_torch_namespace_thnn_conv2d_forward_out_output_Tensor_finput_Tensor_fgrad_input_Tensor_self_Tensor_weight_Tensor_kernel_size_IntArrayRef_bias_Tensor_stride_IntArrayRef_padding_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_thnn_conv2d_forward_out_output_Tensor_finput_Tensor_fgrad_input_Tensor_self_Tensor_weight_Tensor_kernel_size_IntArrayRef_bias_Tensor_stride_IntArrayRef_padding_IntArrayRef, 9},
    {"_torch_cpp_torch_namespace_thnn_conv2d_forward_self_Tensor_weight_Tensor_kernel_size_IntArrayRef_bias_Tensor_stride_IntArrayRef_padding_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_thnn_conv2d_forward_self_Tensor_weight_Tensor_kernel_size_IntArrayRef_bias_Tensor_stride_IntArrayRef_padding_IntArrayRef, 6},
    {"_torch_cpp_torch_namespace_thnn_conv2d_backward_out_grad_input_Tensor_grad_weight_Tensor_grad_bias_Tensor_grad_output_Tensor_self_Tensor_weight_Tensor_kernel_size_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef_finput_Tensor_fgrad_input_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_thnn_conv2d_backward_out_grad_input_Tensor_grad_weight_Tensor_grad_bias_Tensor_grad_output_Tensor_self_Tensor_weight_Tensor_kernel_size_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef_finput_Tensor_fgrad_input_Tensor, 11},
    {"_torch_cpp_torch_namespace_thnn_conv2d_backward_grad_output_Tensor_self_Tensor_weight_Tensor_kernel_size_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef_finput_Tensor_fgrad_input_Tensor_output_mask_stdarraybool3", (DL_FUNC) &_torch_cpp_torch_namespace_thnn_conv2d_backward_grad_output_Tensor_self_Tensor_weight_Tensor_kernel_size_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef_finput_Tensor_fgrad_input_Tensor_output_mask_stdarraybool3, 9},
    {"_torch_cpp_torch_namespace_thnn_conv_depthwise2d_out_out_Tensor_self_Tensor_weight_Tensor_kernel_size_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_thnn_conv_depthwise2d_out_out_Tensor_self_Tensor_weight_Tensor_kernel_size_IntArrayRef, 8},
    {"_torch_cpp_torch_namespace_thnn_conv_depthwise2d_self_Tensor_weight_Tensor_kernel_size_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_thnn_conv_depthwise2d_self_Tensor_weight_Tensor_kernel_size_IntArrayRef, 7},
    {"_torch_cpp_torch_namespace_thnn_conv_depthwise2d_forward_out_out_Tensor_self_Tensor_weight_Tensor_kernel_size_IntArrayRef_bias_Tensor_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_thnn_conv_depthwise2d_forward_out_out_Tensor_self_Tensor_weight_Tensor_kernel_size_IntArrayRef_bias_Tensor_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef, 8},
    {"_torch_cpp_torch_namespace_thnn_conv_depthwise2d_forward_self_Tensor_weight_Tensor_kernel_size_IntArrayRef_bias_Tensor_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_thnn_conv_depthwise2d_forward_self_Tensor_weight_Tensor_kernel_size_IntArrayRef_bias_Tensor_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef, 7},
    {"_torch_cpp_torch_namespace_thnn_conv_depthwise2d_backward_out_grad_input_Tensor_grad_weight_Tensor_grad_output_Tensor_self_Tensor_weight_Tensor_kernel_size_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_thnn_conv_depthwise2d_backward_out_grad_input_Tensor_grad_weight_Tensor_grad_output_Tensor_self_Tensor_weight_Tensor_kernel_size_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef, 9},
    {"_torch_cpp_torch_namespace_thnn_conv_depthwise2d_backward_grad_output_Tensor_self_Tensor_weight_Tensor_kernel_size_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef_output_mask_stdarraybool2", (DL_FUNC) &_torch_cpp_torch_namespace_thnn_conv_depthwise2d_backward_grad_output_Tensor_self_Tensor_weight_Tensor_kernel_size_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef_output_mask_stdarraybool2, 8},
    {"_torch_cpp_torch_namespace_slow_conv3d_out_out_Tensor_self_Tensor_weight_Tensor_kernel_size_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_slow_conv3d_out_out_Tensor_self_Tensor_weight_Tensor_kernel_size_IntArrayRef, 7},
    {"_torch_cpp_torch_namespace_slow_conv3d_self_Tensor_weight_Tensor_kernel_size_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_slow_conv3d_self_Tensor_weight_Tensor_kernel_size_IntArrayRef, 6},
    {"_torch_cpp_torch_namespace_slow_conv3d_forward_out_output_Tensor_finput_Tensor_fgrad_input_Tensor_self_Tensor_weight_Tensor_kernel_size_IntArrayRef_bias_Tensor_stride_IntArrayRef_padding_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_slow_conv3d_forward_out_output_Tensor_finput_Tensor_fgrad_input_Tensor_self_Tensor_weight_Tensor_kernel_size_IntArrayRef_bias_Tensor_stride_IntArrayRef_padding_IntArrayRef, 9},
    {"_torch_cpp_torch_namespace_slow_conv3d_forward_self_Tensor_weight_Tensor_kernel_size_IntArrayRef_bias_Tensor_stride_IntArrayRef_padding_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_slow_conv3d_forward_self_Tensor_weight_Tensor_kernel_size_IntArrayRef_bias_Tensor_stride_IntArrayRef_padding_IntArrayRef, 6},
    {"_torch_cpp_torch_namespace_slow_conv3d_backward_out_grad_input_Tensor_grad_weight_Tensor_grad_bias_Tensor_grad_output_Tensor_self_Tensor_weight_Tensor_kernel_size_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef_finput_Tensor_fgrad_input_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_slow_conv3d_backward_out_grad_input_Tensor_grad_weight_Tensor_grad_bias_Tensor_grad_output_Tensor_self_Tensor_weight_Tensor_kernel_size_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef_finput_Tensor_fgrad_input_Tensor, 11},
    {"_torch_cpp_torch_namespace_slow_conv3d_backward_grad_output_Tensor_self_Tensor_weight_Tensor_kernel_size_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef_finput_Tensor_fgrad_input_Tensor_output_mask_stdarraybool3", (DL_FUNC) &_torch_cpp_torch_namespace_slow_conv3d_backward_grad_output_Tensor_self_Tensor_weight_Tensor_kernel_size_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef_finput_Tensor_fgrad_input_Tensor_output_mask_stdarraybool3, 9},
    {"_torch_cpp_torch_namespace_slow_conv_dilated2d_self_Tensor_weight_Tensor_kernel_size_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_slow_conv_dilated2d_self_Tensor_weight_Tensor_kernel_size_IntArrayRef, 7},
    {"_torch_cpp_torch_namespace_slow_conv_dilated2d_backward_grad_output_Tensor_self_Tensor_weight_Tensor_kernel_size_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef_output_mask_stdarraybool3", (DL_FUNC) &_torch_cpp_torch_namespace_slow_conv_dilated2d_backward_grad_output_Tensor_self_Tensor_weight_Tensor_kernel_size_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef_output_mask_stdarraybool3, 8},
    {"_torch_cpp_torch_namespace_slow_conv_dilated3d_self_Tensor_weight_Tensor_kernel_size_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_slow_conv_dilated3d_self_Tensor_weight_Tensor_kernel_size_IntArrayRef, 7},
    {"_torch_cpp_torch_namespace_slow_conv_dilated3d_backward_grad_output_Tensor_self_Tensor_weight_Tensor_kernel_size_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef_output_mask_stdarraybool3", (DL_FUNC) &_torch_cpp_torch_namespace_slow_conv_dilated3d_backward_grad_output_Tensor_self_Tensor_weight_Tensor_kernel_size_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef_output_mask_stdarraybool3, 8},
    {"_torch_cpp_torch_namespace_col2im_out_out_Tensor_self_Tensor_output_size_IntArrayRef_kernel_size_IntArrayRef_dilation_IntArrayRef_padding_IntArrayRef_stride_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_col2im_out_out_Tensor_self_Tensor_output_size_IntArrayRef_kernel_size_IntArrayRef_dilation_IntArrayRef_padding_IntArrayRef_stride_IntArrayRef, 7},
    {"_torch_cpp_torch_namespace_col2im_self_Tensor_output_size_IntArrayRef_kernel_size_IntArrayRef_dilation_IntArrayRef_padding_IntArrayRef_stride_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_col2im_self_Tensor_output_size_IntArrayRef_kernel_size_IntArrayRef_dilation_IntArrayRef_padding_IntArrayRef_stride_IntArrayRef, 6},
    {"_torch_cpp_torch_namespace_col2im_backward_out_grad_input_Tensor_grad_output_Tensor_kernel_size_IntArrayRef_dilation_IntArrayRef_padding_IntArrayRef_stride_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_col2im_backward_out_grad_input_Tensor_grad_output_Tensor_kernel_size_IntArrayRef_dilation_IntArrayRef_padding_IntArrayRef_stride_IntArrayRef, 6},
    {"_torch_cpp_torch_namespace_col2im_backward_grad_output_Tensor_kernel_size_IntArrayRef_dilation_IntArrayRef_padding_IntArrayRef_stride_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_col2im_backward_grad_output_Tensor_kernel_size_IntArrayRef_dilation_IntArrayRef_padding_IntArrayRef_stride_IntArrayRef, 5},
    {"_torch_cpp_torch_namespace_im2col_out_out_Tensor_self_Tensor_kernel_size_IntArrayRef_dilation_IntArrayRef_padding_IntArrayRef_stride_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_im2col_out_out_Tensor_self_Tensor_kernel_size_IntArrayRef_dilation_IntArrayRef_padding_IntArrayRef_stride_IntArrayRef, 6},
    {"_torch_cpp_torch_namespace_im2col_self_Tensor_kernel_size_IntArrayRef_dilation_IntArrayRef_padding_IntArrayRef_stride_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_im2col_self_Tensor_kernel_size_IntArrayRef_dilation_IntArrayRef_padding_IntArrayRef_stride_IntArrayRef, 5},
    {"_torch_cpp_torch_namespace_im2col_backward_out_grad_input_Tensor_grad_output_Tensor_input_size_IntArrayRef_kernel_size_IntArrayRef_dilation_IntArrayRef_padding_IntArrayRef_stride_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_im2col_backward_out_grad_input_Tensor_grad_output_Tensor_input_size_IntArrayRef_kernel_size_IntArrayRef_dilation_IntArrayRef_padding_IntArrayRef_stride_IntArrayRef, 7},
    {"_torch_cpp_torch_namespace_im2col_backward_grad_output_Tensor_input_size_IntArrayRef_kernel_size_IntArrayRef_dilation_IntArrayRef_padding_IntArrayRef_stride_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_im2col_backward_grad_output_Tensor_input_size_IntArrayRef_kernel_size_IntArrayRef_dilation_IntArrayRef_padding_IntArrayRef_stride_IntArrayRef, 6},
    {"_torch_cpp_torch_namespace_isfinite_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_isfinite_self_Tensor, 1},
    {"_torch_cpp_torch_generator", (DL_FUNC) &_torch_cpp_torch_generator, 0},
    {"_torch_cpp_generator_current_seed", (DL_FUNC) &_torch_cpp_generator_current_seed, 1},
    {"_torch_cpp_generator_set_current_seed", (DL_FUNC) &_torch_cpp_generator_set_current_seed, 2},
    {"_torch_cpp_layout_to_string", (DL_FUNC) &_torch_cpp_layout_to_string, 1},
    {"_torch_cpp_torch_strided", (DL_FUNC) &_torch_cpp_torch_strided, 0},
    {"_torch_cpp_torch_sparse_coo", (DL_FUNC) &_torch_cpp_torch_sparse_coo, 0},
    {"_torch_cpp_memory_format_to_string", (DL_FUNC) &_torch_cpp_memory_format_to_string, 1},
    {"_torch_cpp_torch_contiguous_format", (DL_FUNC) &_torch_cpp_torch_contiguous_format, 0},
    {"_torch_cpp_torch_preserve_format", (DL_FUNC) &_torch_cpp_torch_preserve_format, 0},
    {"_torch_cpp_torch_channels_last_format", (DL_FUNC) &_torch_cpp_torch_channels_last_format, 0},
    {"_torch_cpp_qscheme_to_string", (DL_FUNC) &_torch_cpp_qscheme_to_string, 1},
    {"_torch_cpp_torch_per_channel_affine", (DL_FUNC) &_torch_cpp_torch_per_channel_affine, 0},
    {"_torch_cpp_torch_per_tensor_affine", (DL_FUNC) &_torch_cpp_torch_per_tensor_affine, 0},
    {"_torch_cpp_torch_per_channel_symmetric", (DL_FUNC) &_torch_cpp_torch_per_channel_symmetric, 0},
    {"_torch_cpp_torch_per_tensor_symmetric", (DL_FUNC) &_torch_cpp_torch_per_tensor_symmetric, 0},
    {"_torch_cpp_torch_reduction_mean", (DL_FUNC) &_torch_cpp_torch_reduction_mean, 0},
    {"_torch_cpp_torch_reduction_none", (DL_FUNC) &_torch_cpp_torch_reduction_none, 0},
    {"_torch_cpp_torch_reduction_sum", (DL_FUNC) &_torch_cpp_torch_reduction_sum, 0},
    {"_torch_cpp_torch_scalar", (DL_FUNC) &_torch_cpp_torch_scalar, 1},
    {"_torch_cpp_torch_tensor", (DL_FUNC) &_torch_cpp_torch_tensor, 4},
    {"_torch_cpp_as_array", (DL_FUNC) &_torch_cpp_as_array, 1},
    {"_torch_cpp_torch_tensor_print", (DL_FUNC) &_torch_cpp_torch_tensor_print, 1},
    {"_torch_cpp_torch_tensor_list", (DL_FUNC) &_torch_cpp_torch_tensor_list, 1},
    {"_torch_cpp_tensor_list_to_r_list", (DL_FUNC) &_torch_cpp_tensor_list_to_r_list, 1},
    {"_torch_cpp_torch_tensor_options", (DL_FUNC) &_torch_cpp_torch_tensor_options, 5},
    {"_torch_cpp_nullptr", (DL_FUNC) &_torch_cpp_nullptr, 0},
    {"_torch_cpp_nullopt", (DL_FUNC) &_torch_cpp_nullopt, 0},
    {NULL, NULL, 0}
};

RcppExport void R_init_torch(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
