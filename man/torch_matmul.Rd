% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/gen-namespace-docs.R
\name{torch_matmul}
\alias{torch_matmul}
\title{Matmul}
\arguments{
\item{input}{(Tensor) the first tensor to be multiplied}

\item{other}{(Tensor) the second tensor to be multiplied}

\item{out}{(Tensor, optional) the output tensor.}
}
\description{
matmul(input, other, out=None) -> Tensor
}
\details{
Matrix product of two tensors.

The behavior depends on the dimensionality of the tensors as follows:
\itemize{
\item If both tensors are 1-dimensional, the dot product (scalar) is returned.
\item If both arguments are 2-dimensional, the matrix-matrix product is returned.
\item If the first argument is 1-dimensional and the second argument is 2-dimensional,
a 1 is prepended to its dimension for the purpose of the matrix multiply.
After the matrix multiply, the prepended dimension is removed.
\item If the first argument is 2-dimensional and the second argument is 1-dimensional,
the matrix-vector product is returned.
\item If both arguments are at least 1-dimensional and at least one argument is
N-dimensional (where N > 2), then a batched matrix multiply is returned.  If the first
argument is 1-dimensional, a 1 is prepended to its dimension for the purpose of the
batched matrix multiply and removed after.  If the second argument is 1-dimensional, a
1 is appended to its dimension for the purpose of the batched matrix multiple and removed after.
The non-matrix (i.e. batch) dimensions are :ref:\verb{broadcasted <broadcasting-semantics>} (and thus
must be broadcastable).  For example, if :attr:\code{input} is a
:math:\verb{(j \\times 1 \\times n \\times m)} tensor and :attr:\code{other} is a :math:\verb{(k \\times m \\times p)}
tensor, :attr:\code{out} will be an :math:\verb{(j \\times k \\times n \\times p)} tensor.
}

.. note::\preformatted{The 1-dimensional dot product version of this function does not support an :attr:`out` parameter.
}

Arguments:
input (Tensor): the first tensor to be multiplied
other (Tensor): the second tensor to be multiplied
out (Tensor, optional): the output tensor.

Example::
}
