% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/gen-namespace-docs.R
\name{torch_irfft}
\alias{torch_irfft}
\title{Irfft}
\arguments{
\item{input}{(Tensor) the input tensor of at least :attr:\code{signal_ndim} \code{+ 1}}

\item{dimensions}{NA}

\item{signal_ndim}{(int) the number of dimensions in each signal.}

\item{NA}{attr:\code{signal_ndim} can only be 1, 2 or 3}

\item{normalized}{(bool, optional) controls whether to return normalized results.}

\item{Default}{NA \code{False}}

\item{onesided}{(bool, optional) controls whether :attr:\code{input} was halfed to avoid}

\item{redundancy, }{NA func:\code{rfft}. Default: \code{True}}

\item{signal_sizes}{NA class:\code{torch.Size}, optional): the size of the original}

\item{signal}{(without batch dimension) \code{None}}
}
\description{
irfft(input, signal_ndim, normalized=False, onesided=True, signal_sizes=None) -> Tensor
}
\details{
Complex-to-real Inverse Discrete Fourier Transform

This method computes the complex-to-real inverse discrete Fourier transform.
It is mathematically equivalent with :func:\code{ifft} with differences only in
formats of the input and output.

The argument specifications are almost identical with :func:\code{~torch.ifft}.
Similar to :func:\code{~torch.ifft}, if :attr:\code{normalized} is set to \code{True},
this normalizes the result by multiplying it with
:math:\verb{\\sqrt\{\\prod_\{i=1\}^K N_i\}} so that the operator is unitary, where
:math:\code{N_i} is the size of signal dimension :math:\code{i}.

.. note::
Due to the conjugate symmetry, :attr:\code{input} do not need to contain the full
complex frequency values. Roughly half of the values will be sufficient, as
is the case when :attr:\code{input} is given by :func:\code{~torch.rfft} with
\code{rfft(signal, onesided=True)}. In such case, set the :attr:\code{onesided}
argument of this method to \code{True}. Moreover, the original signal shape
information can sometimes be lost, optionally set :attr:\code{signal_sizes} to be
the size of the original signal (without the batch dimensions if in batched
mode) to recover it with correct shape.\preformatted{Therefore, to invert an :func:`~torch.rfft`, the :attr:`normalized` and
:attr:`onesided` arguments should be set identically for :func:`~torch.irfft`,
and preferrably a :attr:`signal_sizes` is given to avoid size mismatch. See the
example below for a case of size mismatch.

See :func:`~torch.rfft` for details on conjugate symmetry.
}

The inverse of this function is :func:\code{~torch.rfft}.

.. warning::
Generally speaking, input to this function should contain values
following conjugate symmetry. Note that even if :attr:\code{onesided} is
\code{True}, often symmetry on some part is still needed. When this
requirement is not satisfied, the behavior of :func:\code{~torch.irfft} is
undefined. Since :func:\code{torch.autograd.gradcheck} estimates numerical
Jacobian with point perturbations, :func:\code{~torch.irfft} will almost
certainly fail the check.

.. note::
For CUDA tensors, an LRU cache is used for cuFFT plans to speed up
repeatedly running FFT methods on tensors of same geometry with same
configuration. See :ref:\code{cufft-plan-cache} for more details on how to
monitor and control the cache.

.. warning::
For CPU tensors, this method is currently only available with MKL. Use
:func:\code{torch.backends.mkl.is_available} to check if MKL is installed.

Arguments:
input (Tensor): the input tensor of at least :attr:\code{signal_ndim} \code{+ 1}
dimensions
signal_ndim (int): the number of dimensions in each signal.
:attr:\code{signal_ndim} can only be 1, 2 or 3
normalized (bool, optional): controls whether to return normalized results.
Default: \code{False}
onesided (bool, optional): controls whether :attr:\code{input} was halfed to avoid
redundancy, e.g., by :func:\code{rfft}. Default: \code{True}
signal_sizes (list or :class:\code{torch.Size}, optional): the size of the original
signal (without batch dimension). Default: \code{None}

Returns:
Tensor: A tensor containing the complex-to-real inverse Fourier transform result

Example::
}
