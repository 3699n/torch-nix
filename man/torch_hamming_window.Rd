% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/gen-namespace-docs.R
\name{torch_hamming_window}
\alias{torch_hamming_window}
\title{Hamming_window}
\arguments{
\item{window_length}{(int) the size of returned window}

\item{periodic}{(bool, optional) If True, returns a window to be used as periodic        function. If False, return a symmetric window.}

\item{alpha}{(float, optional) The coefficient :math:\verb{\\alpha} in the equation above}

\item{beta}{(float, optional) The coefficient :math:\verb{\\beta} in the equation above}

\item{dtype}{(:class:\code{torch.dtype}, optional) the desired data type of returned tensor.        Default: if \code{None}, uses a global default (see :func:\code{torch.set_default_tensor_type}). Only floating point types are supported.}

\item{layout}{(:class:\code{torch.layout}, optional) the desired layout of returned window tensor. Only          \code{torch.strided} (dense layout) is supported.}

\item{device}{(:class:\code{torch.device}, optional) the desired device of returned tensor.        Default: if \code{None}, uses the current device for the default tensor type        (see :func:\code{torch.set_default_tensor_type}). :attr:\code{device} will be the CPU        for CPU tensor types and the current CUDA device for CUDA tensor types.}

\item{requires_grad}{(bool, optional) If autograd should record operations on the        returned tensor. Default: \code{False}.}
}
\description{
Hamming window function.
}
\details{
\deqn{
    w[n] = \alpha - \beta\ \cos \left( \frac{2 \pi n}{N - 1} \right),
}
where :math:\code{N} is the full window size.

The input \code{window_length} is a positive integer controlling the
returned window size. \code{periodic} flag determines whether the returned
window trims off the last duplicate value from the symmetric window and is
ready to be used as a periodic window with functions like
:meth:\code{torch_stft}. Therefore, if \code{periodic} is true, the :math:\code{N} in
above formula is in fact :math:\verb{\\text\{window\\_length\} + 1}. Also, we always have
\code{torch_hamming_window(L, periodic=True)} equal to
\verb{torch_hamming_window(L + 1, periodic=False)[:-1])}.

.. note::
If \code{window_length} :math:\verb{=1}, the returned window contains a single value 1.

.. note::
This is a generalized version of :meth:\code{torch_hann_window}.
}
\section{Signatures}{


hamming_window(window_length, periodic=True, alpha=0.54, beta=0.46, dtype=None, layout=torch.strided, device=None, requires_grad=False) -> Tensor
}

