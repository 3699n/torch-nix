% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/distribution.R
\name{Distribution}
\alias{Distribution}
\title{Distribution is the abstract base class for probability distributions.
Generates a sample_shape shaped sample or sample_shape shaped batch of
samples if the distribution parameters are batched.
Generates a sample_shape shaped reparameterized sample or sample_shape
shaped batch of reparameterized samples if the distribution parameters
are batched.
In PyTorch: sample_shape=torch.Size()
Returns the log of the probability density/mass function evaluated at
\code{value}.
Returns the cumulative density/mass function evaluated at
\code{value}.
Returns the inverse cumulative density/mass function evaluated at
\code{value}.
Returns tensor containing all values supported by a discrete
distribution. The result will enumerate over dimension 0, so the shape
of the result will be \verb{(cardinality,) + batch_shape + event_shape (where }event_shape = ()\verb{for univariate distributions). Note that this enumerates over all batched tensors in lock-step}[\link{0, 0}, \link{1, 1}, ...]\verb{. With }expand=FALSE\verb{, enumeration happens along dim 0, but with the remaining batch dimensions being singleton dimensions, }[\link{0}, \link{1}, ..\verb{. @param expand (bool): whether to expand the support over the batch dims to match the distribution's }batch_shape\verb{. @return Tensor iterating over dimension 0. Returns entropy of distribution, batched over batch_shape. @return Tensor of shape batch_shape. Returns perplexity of distribution, batched over batch_shape. @param Tensor of shape batch_shape. Returns the size of the sample returned by the distribution, given a }sample_shape`. Note, that the batch and event shapes of a distribution
instance are fixed at the time of construction. If this is empty, the
returned shape is upcast to (1,).}
\description{
Distribution is the abstract base class for probability distributions.
Generates a sample_shape shaped sample or sample_shape shaped batch of
samples if the distribution parameters are batched.
Generates a sample_shape shaped reparameterized sample or sample_shape
shaped batch of reparameterized samples if the distribution parameters
are batched.
In PyTorch: sample_shape=torch.Size()
Returns the log of the probability density/mass function evaluated at
\code{value}.
Returns the cumulative density/mass function evaluated at
\code{value}.
Returns the inverse cumulative density/mass function evaluated at
\code{value}.
Returns tensor containing all values supported by a discrete
distribution. The result will enumerate over dimension 0, so the shape
of the result will be \verb{(cardinality,) + batch_shape + event_shape (where }event_shape = ()\verb{for univariate distributions). Note that this enumerates over all batched tensors in lock-step}[\link{0, 0}, \link{1, 1}, ...]\verb{. With }expand=FALSE\verb{, enumeration happens along dim 0, but with the remaining batch dimensions being singleton dimensions, }[\link{0}, \link{1}, ..\verb{. @param expand (bool): whether to expand the support over the batch dims to match the distribution's }batch_shape\verb{. @return Tensor iterating over dimension 0. Returns entropy of distribution, batched over batch_shape. @return Tensor of shape batch_shape. Returns perplexity of distribution, batched over batch_shape. @param Tensor of shape batch_shape. Returns the size of the sample returned by the distribution, given a }sample_shape`. Note, that the batch and event shapes of a distribution
instance are fixed at the time of construction. If this is empty, the
returned shape is upcast to (1,).

Distribution is the abstract base class for probability distributions.
Generates a sample_shape shaped sample or sample_shape shaped batch of
samples if the distribution parameters are batched.
Generates a sample_shape shaped reparameterized sample or sample_shape
shaped batch of reparameterized samples if the distribution parameters
are batched.
In PyTorch: sample_shape=torch.Size()
Returns the log of the probability density/mass function evaluated at
\code{value}.
Returns the cumulative density/mass function evaluated at
\code{value}.
Returns the inverse cumulative density/mass function evaluated at
\code{value}.
Returns tensor containing all values supported by a discrete
distribution. The result will enumerate over dimension 0, so the shape
of the result will be \verb{(cardinality,) + batch_shape + event_shape (where }event_shape = ()\verb{for univariate distributions). Note that this enumerates over all batched tensors in lock-step}[\link{0, 0}, \link{1, 1}, ...]\verb{. With }expand=FALSE\verb{, enumeration happens along dim 0, but with the remaining batch dimensions being singleton dimensions, }[\link{0}, \link{1}, ..\verb{. @param expand (bool): whether to expand the support over the batch dims to match the distribution's }batch_shape\verb{. @return Tensor iterating over dimension 0. Returns entropy of distribution, batched over batch_shape. @return Tensor of shape batch_shape. Returns perplexity of distribution, batched over batch_shape. @param Tensor of shape batch_shape. Returns the size of the sample returned by the distribution, given a }sample_shape`. Note, that the batch and event shapes of a distribution
instance are fixed at the time of construction. If this is empty, the
returned shape is upcast to (1,).
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-new}{\code{Distribution$new()}}
\item \href{#method-expand}{\code{Distribution$expand()}}
\item \href{#method-sample}{\code{Distribution$sample()}}
\item \href{#method-rsample}{\code{Distribution$rsample()}}
\item \href{#method-log_prob}{\code{Distribution$log_prob()}}
\item \href{#method-cdf}{\code{Distribution$cdf()}}
\item \href{#method-icdf}{\code{Distribution$icdf()}}
\item \href{#method-enumerate_support}{\code{Distribution$enumerate_support()}}
\item \href{#method-entropy}{\code{Distribution$entropy()}}
\item \href{#method-perplexity}{\code{Distribution$perplexity()}}
\item \href{#method-.extended_shape}{\code{Distribution$.extended_shape()}}
\item \href{#method-.validate_sample}{\code{Distribution$.validate_sample()}}
\item \href{#method-.get_checked_instance}{\code{Distribution$.get_checked_instance()}}
\item \href{#method-print}{\code{Distribution$print()}}
\item \href{#method-clone}{\code{Distribution$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-new"></a>}}
\if{latex}{\out{\hypertarget{method-new}{}}}
\subsection{Method \code{new()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Distribution$new(batch_shape, event_shape, validate_args = NULL)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-expand"></a>}}
\if{latex}{\out{\hypertarget{method-expand}{}}}
\subsection{Method \code{expand()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Distribution$expand(batch_shape, .instance = NULL)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-sample"></a>}}
\if{latex}{\out{\hypertarget{method-sample}{}}}
\subsection{Method \code{sample()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Distribution$sample(sample_shape = NULL)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-rsample"></a>}}
\if{latex}{\out{\hypertarget{method-rsample}{}}}
\subsection{Method \code{rsample()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Distribution$rsample(sample_shape = NULL)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-log_prob"></a>}}
\if{latex}{\out{\hypertarget{method-log_prob}{}}}
\subsection{Method \code{log_prob()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Distribution$log_prob(value)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-cdf"></a>}}
\if{latex}{\out{\hypertarget{method-cdf}{}}}
\subsection{Method \code{cdf()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Distribution$cdf(value)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-icdf"></a>}}
\if{latex}{\out{\hypertarget{method-icdf}{}}}
\subsection{Method \code{icdf()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Distribution$icdf(value)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-enumerate_support"></a>}}
\if{latex}{\out{\hypertarget{method-enumerate_support}{}}}
\subsection{Method \code{enumerate_support()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Distribution$enumerate_support(expand = TRUE)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-entropy"></a>}}
\if{latex}{\out{\hypertarget{method-entropy}{}}}
\subsection{Method \code{entropy()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Distribution$entropy()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-perplexity"></a>}}
\if{latex}{\out{\hypertarget{method-perplexity}{}}}
\subsection{Method \code{perplexity()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Distribution$perplexity()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-.extended_shape"></a>}}
\if{latex}{\out{\hypertarget{method-.extended_shape}{}}}
\subsection{Method \code{.extended_shape()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Distribution$.extended_shape(sample_shape = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{sample_shape}}{(torch_Size): the size of the sample to be drawn.
Argument validation for distribution methods such as \code{log_prob},
\code{cdf} and \code{icdf}. The rightmost dimensions of a value to be
scored via these methods must agree with the distribution's batch
and event shapes.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-.validate_sample"></a>}}
\if{latex}{\out{\hypertarget{method-.validate_sample}{}}}
\subsection{Method \code{.validate_sample()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Distribution$.validate_sample(value)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{value}}{(Tensor): the tensor whose log probability is to be
computed by the \code{log_prob} method.
Returns a \code{dist_constraint} object
representing this distribution's support.
Returns the mean on of the distribution
Returns the variance of the distribution
Returns the standard deviation of the distribution}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-.get_checked_instance"></a>}}
\if{latex}{\out{\hypertarget{method-.get_checked_instance}{}}}
\subsection{Method \code{.get_checked_instance()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Distribution$.get_checked_instance(cls, .instance = NULL)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-print"></a>}}
\if{latex}{\out{\hypertarget{method-print}{}}}
\subsection{Method \code{print()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Distribution$print()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-clone"></a>}}
\if{latex}{\out{\hypertarget{method-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Distribution$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
