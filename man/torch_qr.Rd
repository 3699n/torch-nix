% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/gen-namespace-docs.R
\name{torch_qr}
\alias{torch_qr}
\title{Qr}
\arguments{
\item{input}{(Tensor) the input tensor of size :math:\verb{(*, m, n)} where \code{*} is zero or more                batch dimensions consisting of matrices of dimension :math:\verb{m \\times n}.}

\item{some}{(bool, optional) Set to \code{True} for reduced QR decomposition and \code{False} for                complete QR decomposition.}

\item{out}{(tuple, optional) tuple of \code{Q} and \code{R} tensors                satisfying :code:\code{input = torch.matmul(Q, R)}.                The dimensions of \code{Q} and \code{R} are :math:\verb{(*, m, k)} and :math:\verb{(*, k, n)}                respectively, where :math:\verb{k = \\min(m, n)} if :attr:\verb{some:} is \code{True} and                :math:\code{k = m} otherwise.}
}
\description{
qr(input, some=True, out=None) -> (Tensor, Tensor)
}
\details{
Computes the QR decomposition of a matrix or a batch of matrices :attr:\code{input},
and returns a namedtuple (Q, R) of tensors such that :math:\verb{\\text\{input\} = Q R}
with :math:\code{Q} being an orthogonal matrix or batch of orthogonal matrices and
:math:\code{R} being an upper triangular matrix or batch of upper triangular matrices.

If :attr:\code{some} is \code{True}, then this function returns the thin (reduced) QR factorization.
Otherwise, if :attr:\code{some} is \code{False}, this function returns the complete QR factorization.

.. note:: precision may be lost if the magnitudes of the elements of :attr:\code{input}
are large

.. note:: While it should always give you a valid decomposition, it may not
give you the same one across platforms - it will depend on your
LAPACK implementation.
}
\examples{
\dontrun{
a = torch_tensor([[12., -51, 4], [6, 167, -68], [-4, 24, -41]])
q, r = torch_qr(a)
q
r
torch_mm(q, r).round()
torch_mm(q.t(), q).round()
a = torch_randn(3, 4, 5)
q, r = torch_qr(a, some=False)
torch_allclose(torch_matmul(q, r), a)
torch_allclose(torch_matmul(q.transpose(-2, -1), q), torch_eye(5))
}

}
